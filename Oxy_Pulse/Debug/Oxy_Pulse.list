
Oxy_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd68  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dac  0800ce78  0800ce78  0001ce78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc24  0800fc24  00020104  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc24  0800fc24  00020104  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc24  0800fc24  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc24  0800fc24  0001fc24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc28  0800fc28  0001fc28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  0800fc2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b54  20000104  0800fd30  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c58  0800fd30  00020c58  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014135  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003473  00000000  00000000  00034262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  000376d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d8  00000000  00000000  000388f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0eb  00000000  00000000  000399c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017664  00000000  00000000  00053ab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c05d  00000000  00000000  0006b117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7174  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005288  00000000  00000000  000f71c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000104 	.word	0x20000104
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ce60 	.word	0x0800ce60

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000108 	.word	0x20000108
 800014c:	0800ce60 	.word	0x0800ce60

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_f2uiz>:
 8001070:	0042      	lsls	r2, r0, #1
 8001072:	d20e      	bcs.n	8001092 <__aeabi_f2uiz+0x22>
 8001074:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001078:	d30b      	bcc.n	8001092 <__aeabi_f2uiz+0x22>
 800107a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800107e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001082:	d409      	bmi.n	8001098 <__aeabi_f2uiz+0x28>
 8001084:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001088:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800108c:	fa23 f002 	lsr.w	r0, r3, r2
 8001090:	4770      	bx	lr
 8001092:	f04f 0000 	mov.w	r0, #0
 8001096:	4770      	bx	lr
 8001098:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800109c:	d101      	bne.n	80010a2 <__aeabi_f2uiz+0x32>
 800109e:	0242      	lsls	r2, r0, #9
 80010a0:	d102      	bne.n	80010a8 <__aeabi_f2uiz+0x38>
 80010a2:	f04f 30ff 	mov.w	r0, #4294967295
 80010a6:	4770      	bx	lr
 80010a8:	f04f 0000 	mov.w	r0, #0
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <MAX30100_Init>:
meanDiffFilter_t 	meanDiffIR;
dcFilter_t 			dcFilterIR;
dcFilter_t 			dcFilterRed;

void MAX30100_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
	uint8_t buffer=0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	71fb      	strb	r3, [r7, #7]
	uint8_t aux=0;
 80010ba:	2300      	movs	r3, #0
 80010bc:	71bb      	strb	r3, [r7, #6]

	currentPulseDetectorState = PULSE_IDLE;
 80010be:	4b56      	ldr	r3, [pc, #344]	; (8001218 <MAX30100_Init+0x168>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]

	//				SETEO DEL MODO
	//////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD,MAX30100_MODE_CONF,buffer);
 80010c4:	4b55      	ldr	r3, [pc, #340]	; (800121c <MAX30100_Init+0x16c>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	79fa      	ldrb	r2, [r7, #7]
 80010ca:	2106      	movs	r1, #6
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fd1b 	bl	8001b08 <MAX30100_I2C_Read>
	aux=(buffer&0xF8)|DEFAULT_OPERATING_MODE;
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	f023 0307 	bic.w	r3, r3, #7
 80010da:	b25b      	sxtb	r3, r3
 80010dc:	f043 0303 	orr.w	r3, r3, #3
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR,MODE_RG,aux);
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <MAX30100_Init+0x170>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <MAX30100_Init+0x174>)
 80010ea:	7811      	ldrb	r1, [r2, #0]
 80010ec:	79ba      	ldrb	r2, [r7, #6]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fcec 	bl	8001acc <MAX30100_I2C_Write>
	//////////////////////////////////////////////////////////////

	//				SETEO SAMPLING_RATE
	//////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD, MAX30100_SPO2_CONF, buffer);
 80010f4:	4b49      	ldr	r3, [pc, #292]	; (800121c <MAX30100_Init+0x16c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	2107      	movs	r1, #7
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fd03 	bl	8001b08 <MAX30100_I2C_Read>
	aux=(buffer&0xE3)|(DEFAULT_SAMPLING_RATE<<2);
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	f023 031c 	bic.w	r3, r3, #28
 800110a:	b25b      	sxtb	r3, r3
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	b25b      	sxtb	r3, r3
 8001112:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, MAX30100_SPO2_CONF, aux);
 8001114:	4b42      	ldr	r3, [pc, #264]	; (8001220 <MAX30100_Init+0x170>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	79ba      	ldrb	r2, [r7, #6]
 800111a:	2107      	movs	r1, #7
 800111c:	4618      	mov	r0, r3
 800111e:	f000 fcd5 	bl	8001acc <MAX30100_I2C_Write>
	//////////////////////////////////////////////////////////////

	//				SETEO LED_Pulse_Width
	/////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD,MAX30100_SPO2_CONF, buffer);
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <MAX30100_Init+0x16c>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	2107      	movs	r1, #7
 800112a:	4618      	mov	r0, r3
 800112c:	f000 fcec 	bl	8001b08 <MAX30100_I2C_Read>
	//aux=(buffer&0xFC)|(DEFAULT_LED_PULSE_WIDTH);
	aux=0x47;
 8001130:	2347      	movs	r3, #71	; 0x47
 8001132:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, MAX30100_SPO2_CONF, aux);
 8001134:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <MAX30100_Init+0x170>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	79ba      	ldrb	r2, [r7, #6]
 800113a:	2107      	movs	r1, #7
 800113c:	4618      	mov	r0, r3
 800113e:	f000 fcc5 	bl	8001acc <MAX30100_I2C_Write>
	////////////////////////////////////////////////////////////7

	redLEDCurrent = (uint8_t) STARTING_RED_LED_CURRENT;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <MAX30100_Init+0x178>)
 8001144:	2208      	movs	r2, #8
 8001146:	701a      	strb	r2, [r3, #0]
	lastREDLedCurrentCheck=0;
 8001148:	4b38      	ldr	r3, [pc, #224]	; (800122c <MAX30100_Init+0x17c>)
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
	IRLedCurrent=DEFAULT_IR_LED_CURRENT;
 8001150:	4b37      	ldr	r3, [pc, #220]	; (8001230 <MAX30100_Init+0x180>)
 8001152:	220f      	movs	r2, #15
 8001154:	701a      	strb	r2, [r3, #0]

	//				SETEO_CORRIENTES_LEDs
	//////////////////////////////////////////////////////////////
	buffer=((redLEDCurrent << 4) | IRLedCurrent );
 8001156:	4b34      	ldr	r3, [pc, #208]	; (8001228 <MAX30100_Init+0x178>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	011b      	lsls	r3, r3, #4
 800115c:	b25a      	sxtb	r2, r3
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <MAX30100_Init+0x180>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	b25b      	sxtb	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b25b      	sxtb	r3, r3
 8001168:	71fb      	strb	r3, [r7, #7]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, LED_CONFIGURATION, buffer);
 800116a:	4b2d      	ldr	r3, [pc, #180]	; (8001220 <MAX30100_Init+0x170>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <MAX30100_Init+0x184>)
 8001170:	7811      	ldrb	r1, [r2, #0]
 8001172:	79fa      	ldrb	r2, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f000 fca9 	bl	8001acc <MAX30100_I2C_Write>

	//				SETEO_HighresModeEnabled
	//////////////////////////////////////////////////////////////
	//SetHighresModeEnabled();

	dcFilterIR.w = 0;
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <MAX30100_Init+0x188>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
	dcFilterIR.result = 0;
 8001182:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <MAX30100_Init+0x188>)
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	605a      	str	r2, [r3, #4]

	dcFilterRed.w = 0;
 800118a:	4b2c      	ldr	r3, [pc, #176]	; (800123c <MAX30100_Init+0x18c>)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	dcFilterRed.result = 0;
 8001192:	4b2a      	ldr	r3, [pc, #168]	; (800123c <MAX30100_Init+0x18c>)
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	605a      	str	r2, [r3, #4]


	lpbFilterIR.v[0] = 0;
 800119a:	4b29      	ldr	r3, [pc, #164]	; (8001240 <MAX30100_Init+0x190>)
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	lpbFilterIR.v[1] = 0;
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <MAX30100_Init+0x190>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
	lpbFilterIR.result = 0;
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MAX30100_Init+0x190>)
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]

	meanDiffIR.index = 0;
 80011b2:	4b24      	ldr	r3, [pc, #144]	; (8001244 <MAX30100_Init+0x194>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	meanDiffIR.sum = 0;
 80011ba:	4b22      	ldr	r3, [pc, #136]	; (8001244 <MAX30100_Init+0x194>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	641a      	str	r2, [r3, #64]	; 0x40
	meanDiffIR.count = 0;
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <MAX30100_Init+0x194>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


	valuesBPM[0] = 0;
 80011ca:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MAX30100_Init+0x198>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
	valuesBPMSum = 0;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	; (800124c <MAX30100_Init+0x19c>)
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
	valuesBPMCount = 0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MAX30100_Init+0x1a0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
	bpmIndex = 0;
 80011e0:	4b1c      	ldr	r3, [pc, #112]	; (8001254 <MAX30100_Init+0x1a4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]


	irACValueSqSum = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	; (8001258 <MAX30100_Init+0x1a8>)
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
	redACValueSqSum = 0;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <MAX30100_Init+0x1ac>)
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
	samplesRecorded = 0;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MAX30100_Init+0x1b0>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
	pulsesDetected = 0;
 80011fc:	4b19      	ldr	r3, [pc, #100]	; (8001264 <MAX30100_Init+0x1b4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	801a      	strh	r2, [r3, #0]
	currentSaO2Value = 0;
 8001202:	4b19      	ldr	r3, [pc, #100]	; (8001268 <MAX30100_Init+0x1b8>)
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	601a      	str	r2, [r3, #0]

	lastBeatThreshold = 0;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MAX30100_Init+0x1bc>)
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]

}
 8001210:	bf00      	nop
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	20000128 	.word	0x20000128
 800121c:	20000001 	.word	0x20000001
 8001220:	20000000 	.word	0x20000000
 8001224:	20000003 	.word	0x20000003
 8001228:	20000121 	.word	0x20000121
 800122c:	20000124 	.word	0x20000124
 8001230:	20000120 	.word	0x20000120
 8001234:	20000004 	.word	0x20000004
 8001238:	200001e4 	.word	0x200001e4
 800123c:	200001ec 	.word	0x200001ec
 8001240:	20000190 	.word	0x20000190
 8001244:	2000019c 	.word	0x2000019c
 8001248:	20000130 	.word	0x20000130
 800124c:	20000158 	.word	0x20000158
 8001250:	2000015c 	.word	0x2000015c
 8001254:	2000015d 	.word	0x2000015d
 8001258:	20000180 	.word	0x20000180
 800125c:	20000184 	.word	0x20000184
 8001260:	20000164 	.word	0x20000164
 8001264:	20000166 	.word	0x20000166
 8001268:	20000188 	.word	0x20000188
 800126c:	20000160 	.word	0x20000160

08001270 <Actualizar_Resultados>:

pulseoxymeter_t Actualizar_Resultados(void)
{
 8001270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001272:	b08d      	sub	sp, #52	; 0x34
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	pulseoxymeter_t result;
	FIFO_t fifo;

	Resetea_Resultados(&result);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4618      	mov	r0, r3
 800127e:	f000 fbf7 	bl	8001a70 <Resetea_Resultados>

	Lectura_FIFO(&fifo);
 8001282:	f107 0308 	add.w	r3, r7, #8
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f92c 	bl	80014e4 <Lectura_FIFO>

	Filtrado_DC(&fifo.rawIR,&IRprev_w,&ir_dcfiltrado);
 800128c:	f107 0308 	add.w	r3, r7, #8
 8001290:	4a83      	ldr	r2, [pc, #524]	; (80014a0 <Actualizar_Resultados+0x230>)
 8001292:	4984      	ldr	r1, [pc, #528]	; (80014a4 <Actualizar_Resultados+0x234>)
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f957 	bl	8001548 <Filtrado_DC>
	Filtrado_DC(&fifo.rawRED,&REDprev_w,&red_dcfiltrado);
 800129a:	f107 0308 	add.w	r3, r7, #8
 800129e:	3302      	adds	r3, #2
 80012a0:	4a81      	ldr	r2, [pc, #516]	; (80014a8 <Actualizar_Resultados+0x238>)
 80012a2:	4982      	ldr	r1, [pc, #520]	; (80014ac <Actualizar_Resultados+0x23c>)
 80012a4:	4618      	mov	r0, r3
 80012a6:	f000 f94f 	bl	8001548 <Filtrado_DC>

	Mean_Median_Filter(ir_dcfiltrado,&meanDiffIR,&ir_meanfiltrado);
 80012aa:	4b7d      	ldr	r3, [pc, #500]	; (80014a0 <Actualizar_Resultados+0x230>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a80      	ldr	r2, [pc, #512]	; (80014b0 <Actualizar_Resultados+0x240>)
 80012b0:	4980      	ldr	r1, [pc, #512]	; (80014b4 <Actualizar_Resultados+0x244>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f980 	bl	80015b8 <Mean_Median_Filter>
	Filtro_PasabajosButterworth(&ir_meanfiltrado,&lpbFilterIR,&ir_lpbfiltrado);
 80012b8:	4a7f      	ldr	r2, [pc, #508]	; (80014b8 <Actualizar_Resultados+0x248>)
 80012ba:	4980      	ldr	r1, [pc, #512]	; (80014bc <Actualizar_Resultados+0x24c>)
 80012bc:	487c      	ldr	r0, [pc, #496]	; (80014b0 <Actualizar_Resultados+0x240>)
 80012be:	f000 f9f3 	bl	80016a8 <Filtro_PasabajosButterworth>

	irACValueSqSum  +=ir_dcfiltrado * ir_dcfiltrado;
 80012c2:	4b77      	ldr	r3, [pc, #476]	; (80014a0 <Actualizar_Resultados+0x230>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a76      	ldr	r2, [pc, #472]	; (80014a0 <Actualizar_Resultados+0x230>)
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd09 	bl	8000ce4 <__aeabi_fmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	4b7a      	ldr	r3, [pc, #488]	; (80014c0 <Actualizar_Resultados+0x250>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f7ff fbf9 	bl	8000ad4 <__addsf3>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <Actualizar_Resultados+0x250>)
 80012e8:	601a      	str	r2, [r3, #0]
	redACValueSqSum +=red_dcfiltrado * red_dcfiltrado;
 80012ea:	4b6f      	ldr	r3, [pc, #444]	; (80014a8 <Actualizar_Resultados+0x238>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a6e      	ldr	r2, [pc, #440]	; (80014a8 <Actualizar_Resultados+0x238>)
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	4611      	mov	r1, r2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fcf5 	bl	8000ce4 <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b71      	ldr	r3, [pc, #452]	; (80014c4 <Actualizar_Resultados+0x254>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f7ff fbe5 	bl	8000ad4 <__addsf3>
 800130a:	4603      	mov	r3, r0
 800130c:	461a      	mov	r2, r3
 800130e:	4b6d      	ldr	r3, [pc, #436]	; (80014c4 <Actualizar_Resultados+0x254>)
 8001310:	601a      	str	r2, [r3, #0]
	samplesRecorded++;
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <Actualizar_Resultados+0x258>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	3301      	adds	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	4b6b      	ldr	r3, [pc, #428]	; (80014c8 <Actualizar_Resultados+0x258>)
 800131c:	801a      	strh	r2, [r3, #0]

	if( detectPulse( ir_lpbfiltrado, &result ) && samplesRecorded > 0 )
 800131e:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <Actualizar_Resultados+0x248>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f107 020c 	add.w	r2, r7, #12
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fa0d 	bl	8001748 <detectPulse>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 8084 	beq.w	800143e <Actualizar_Resultados+0x1ce>
 8001336:	4b64      	ldr	r3, [pc, #400]	; (80014c8 <Actualizar_Resultados+0x258>)
 8001338:	881b      	ldrh	r3, [r3, #0]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d07f      	beq.n	800143e <Actualizar_Resultados+0x1ce>
	{
		result.pulseDetected=true;
 800133e:	2301      	movs	r3, #1
 8001340:	733b      	strb	r3, [r7, #12]
		pulsesDetected++;
 8001342:	4b62      	ldr	r3, [pc, #392]	; (80014cc <Actualizar_Resultados+0x25c>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	3301      	adds	r3, #1
 8001348:	b29a      	uxth	r2, r3
 800134a:	4b60      	ldr	r3, [pc, #384]	; (80014cc <Actualizar_Resultados+0x25c>)
 800134c:	801a      	strh	r2, [r3, #0]

	    ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 800134e:	4b5d      	ldr	r3, [pc, #372]	; (80014c4 <Actualizar_Resultados+0x254>)
 8001350:	681c      	ldr	r4, [r3, #0]
 8001352:	4b5d      	ldr	r3, [pc, #372]	; (80014c8 <Actualizar_Resultados+0x258>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fc70 	bl	8000c3c <__aeabi_i2f>
 800135c:	4603      	mov	r3, r0
 800135e:	4619      	mov	r1, r3
 8001360:	4620      	mov	r0, r4
 8001362:	f7ff fd73 	bl	8000e4c <__aeabi_fdiv>
 8001366:	4603      	mov	r3, r0
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f855 	bl	8000418 <__aeabi_f2d>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4610      	mov	r0, r2
 8001374:	4619      	mov	r1, r3
 8001376:	f00b fae5 	bl	800c944 <sqrt>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f00b faad 	bl	800c8e0 <log>
 8001386:	4604      	mov	r4, r0
 8001388:	460d      	mov	r5, r1
 800138a:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <Actualizar_Resultados+0x250>)
 800138c:	681e      	ldr	r6, [r3, #0]
 800138e:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <Actualizar_Resultados+0x258>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff fc52 	bl	8000c3c <__aeabi_i2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4619      	mov	r1, r3
 800139c:	4630      	mov	r0, r6
 800139e:	f7ff fd55 	bl	8000e4c <__aeabi_fdiv>
 80013a2:	4603      	mov	r3, r0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f837 	bl	8000418 <__aeabi_f2d>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4610      	mov	r0, r2
 80013b0:	4619      	mov	r1, r3
 80013b2:	f00b fac7 	bl	800c944 <sqrt>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f00b fa8f 	bl	800c8e0 <log>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7ff f9a7 	bl	800071c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fb27 	bl	8000a28 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a3c      	ldr	r2, [pc, #240]	; (80014d0 <Actualizar_Resultados+0x260>)
 80013de:	6013      	str	r3, [r2, #0]
	    //if( debug == true )
	      //{
	        //Serial.print("RMS Ratio: ");
	        //Serial.println(ratioRMS);
	      //}
	    currentSaO2Value = 115.0 - 18.0 * ratioRMS;
 80013e0:	4b3b      	ldr	r3, [pc, #236]	; (80014d0 <Actualizar_Resultados+0x260>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f817 	bl	8000418 <__aeabi_f2d>
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <Actualizar_Resultados+0x264>)
 80013f0:	f7ff f86a 	bl	80004c8 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	a127      	add	r1, pc, #156	; (adr r1, 8001498 <Actualizar_Resultados+0x228>)
 80013fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013fe:	f7fe feab 	bl	8000158 <__aeabi_dsub>
 8001402:	4602      	mov	r2, r0
 8001404:	460b      	mov	r3, r1
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb0d 	bl	8000a28 <__aeabi_d2f>
 800140e:	4603      	mov	r3, r0
 8001410:	4a31      	ldr	r2, [pc, #196]	; (80014d8 <Actualizar_Resultados+0x268>)
 8001412:	6013      	str	r3, [r2, #0]
	    result.SaO2 = currentSaO2Value;
 8001414:	4b30      	ldr	r3, [pc, #192]	; (80014d8 <Actualizar_Resultados+0x268>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	623b      	str	r3, [r7, #32]

	    if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 800141a:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <Actualizar_Resultados+0x25c>)
 800141c:	881b      	ldrh	r3, [r3, #0]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	b29b      	uxth	r3, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	d10a      	bne.n	800143e <Actualizar_Resultados+0x1ce>
	    {
	    	irACValueSqSum = 0;
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <Actualizar_Resultados+0x250>)
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
	        redACValueSqSum = 0;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <Actualizar_Resultados+0x254>)
 8001432:	f04f 0200 	mov.w	r2, #0
 8001436:	601a      	str	r2, [r3, #0]
	        samplesRecorded = 0;
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <Actualizar_Resultados+0x258>)
 800143a:	2200      	movs	r2, #0
 800143c:	801a      	strh	r2, [r3, #0]
	     }
	}

	Balance_Intensidades( REDprev_w, IRprev_w);
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <Actualizar_Resultados+0x23c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <Actualizar_Resultados+0x234>)
 8001444:	6812      	ldr	r2, [r2, #0]
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f000 fa7f 	bl	800194c <Balance_Intensidades>

	result.heartBPM = currentBPM;
 800144e:	4b23      	ldr	r3, [pc, #140]	; (80014dc <Actualizar_Resultados+0x26c>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	613b      	str	r3, [r7, #16]
	result.irCardiogram = lpbFilterIR.result;
 8001454:	4b19      	ldr	r3, [pc, #100]	; (80014bc <Actualizar_Resultados+0x24c>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	617b      	str	r3, [r7, #20]
	result.irDcValue = IRprev_w;
 800145a:	4b12      	ldr	r3, [pc, #72]	; (80014a4 <Actualizar_Resultados+0x234>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	61bb      	str	r3, [r7, #24]
	result.redDcValue = REDprev_w;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <Actualizar_Resultados+0x23c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61fb      	str	r3, [r7, #28]
	result.lastBeatThreshold = lastBeatThreshold;
 8001466:	4b1e      	ldr	r3, [pc, #120]	; (80014e0 <Actualizar_Resultados+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
	result.dcFilteredIR = ir_dcfiltrado;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <Actualizar_Resultados+0x230>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	62bb      	str	r3, [r7, #40]	; 0x28
	result.dcFilteredRed = red_dcfiltrado;
 8001472:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <Actualizar_Resultados+0x238>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c

	return result;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	461d      	mov	r5, r3
 800147c:	f107 040c 	add.w	r4, r7, #12
 8001480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	602b      	str	r3, [r5, #0]
}
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	3734      	adds	r7, #52	; 0x34
 8001490:	46bd      	mov	sp, r7
 8001492:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001494:	f3af 8000 	nop.w
 8001498:	00000000 	.word	0x00000000
 800149c:	405cc000 	.word	0x405cc000
 80014a0:	20000170 	.word	0x20000170
 80014a4:	20000168 	.word	0x20000168
 80014a8:	20000174 	.word	0x20000174
 80014ac:	2000016c 	.word	0x2000016c
 80014b0:	20000178 	.word	0x20000178
 80014b4:	2000019c 	.word	0x2000019c
 80014b8:	2000017c 	.word	0x2000017c
 80014bc:	20000190 	.word	0x20000190
 80014c0:	20000180 	.word	0x20000180
 80014c4:	20000184 	.word	0x20000184
 80014c8:	20000164 	.word	0x20000164
 80014cc:	20000166 	.word	0x20000166
 80014d0:	2000018c 	.word	0x2000018c
 80014d4:	40320000 	.word	0x40320000
 80014d8:	20000188 	.word	0x20000188
 80014dc:	2000012c 	.word	0x2000012c
 80014e0:	20000160 	.word	0x20000160

080014e4 <Lectura_FIFO>:
/*FUNCION PARA LA LECTURA DEL FIFO
 *SE RECIBE UN PUNTERO A UNA VARIABLE TIPO FIFO COMPUESTA POR DOS CAMPOS rawIR y rawRED donde se guardará cada muestra leída. VER HOJA DE DATOS.
*/

void Lectura_FIFO(FIFO_t *FIFO)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af02      	add	r7, sp, #8
 80014ea:	6078      	str	r0, [r7, #4]
	//uint8_t NUM_AVAILABLE_SAMPLES=0;
	//uint8_t NUM_SAMPLES_TO_READ=0;
	//uint8_t *p1=(uint8_t*)&FIFO->rawIR;
	//uint8_t *p2=(uint8_t*)&FIFO->rawRED;
	//uint16_t aux=0;
	uint8_t data[4]={0};
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
	//HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
	//FIFO_RD_PTR=BYTE_RD;
	//NUM_AVAILABLE_SAMPLES=FIFO_WR_PTR–FIFO_RD_PTR;
//	NUM_AVAILABLE_SAMPLES=0x10;  //SETEO EL NUMERO DE MUESTRAS EN 16, PROBLEMAS AL COMPILAR CON LA LINEA DE ARRIBA
	//NUM_SAMPLES_TO_READ=NUM_AVAILABLE_SAMPLES;
	HAL_I2C_Master_Transmit(&hi2c1, MAX_ADDRESS_WR, &FIFO_DATA, sizeof(FIFO_DATA), 10);
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <Lectura_FIFO+0x54>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	b299      	uxth	r1, r3
 80014f6:	230a      	movs	r3, #10
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2301      	movs	r3, #1
 80014fc:	4a0f      	ldr	r2, [pc, #60]	; (800153c <Lectura_FIFO+0x58>)
 80014fe:	4810      	ldr	r0, [pc, #64]	; (8001540 <Lectura_FIFO+0x5c>)
 8001500:	f002 fde4 	bl	80040cc <HAL_I2C_Master_Transmit>
//	{
		//HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
		//BYTE_MSB=BYTE_RD;
		//HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
		//BYTE_LSB=BYTE_RD;
		MAX30100_I2C_FIFO_Read(MAX_ADDRESS_RD,data);
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <Lectura_FIFO+0x60>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f107 020c 	add.w	r2, r7, #12
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f000 fb18 	bl	8001b44 <MAX30100_I2C_FIFO_Read>
		// BUSCO ACOMODAR LOS DATOS QUE LEO DE A BYTES EN UNA VARIABLE FIFO.IRraw de 16bits
		//aux=BYTE_MSB;

		//FIFO->rawIR=((aux<<8)|BYTE_LSB);
		FIFO->rawIR=(data[0]|data[1]);
 8001514:	7b3a      	ldrb	r2, [r7, #12]
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	4313      	orrs	r3, r2
 800151a:	b2db      	uxtb	r3, r3
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	801a      	strh	r2, [r3, #0]
		//HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
		//BYTE_LSB=BYTE_RD;

		//aux=BYTE_MSB;
		//FIFO->rawRED=((aux<<8)|BYTE_LSB);
		FIFO->rawRED=(data[2]|data[3]);
 8001522:	7bba      	ldrb	r2, [r7, #14]
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4313      	orrs	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	b29a      	uxth	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	805a      	strh	r2, [r3, #2]
	}
 8001530:	bf00      	nop
 8001532:	3710      	adds	r7, #16
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	20000000 	.word	0x20000000
 800153c:	20000002 	.word	0x20000002
 8001540:	2000020c 	.word	0x2000020c
 8001544:	20000001 	.word	0x20000001

08001548 <Filtrado_DC>:



void Filtrado_DC(uint16_t *raw_values,float *ptrprev_w, float *output_signal)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	60f8      	str	r0, [r7, #12]
 8001550:	60b9      	str	r1, [r7, #8]
 8001552:	607a      	str	r2, [r7, #4]
	float x=0;
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
	float w=0;
 800155a:	f04f 0300 	mov.w	r3, #0
 800155e:	623b      	str	r3, [r7, #32]
	float alpha=0.95;
 8001560:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <Filtrado_DC+0x6c>)
 8001562:	61fb      	str	r3, [r7, #28]
	float prev_w=*ptrprev_w;
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	61bb      	str	r3, [r7, #24]
	float result=0;
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	x=*raw_values;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	881b      	ldrh	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb5d 	bl	8000c34 <__aeabi_ui2f>
 800157a:	4603      	mov	r3, r0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24

	//for(int i=0;i<=15;i++){

		w = x + alpha * prev_w;
 800157e:	69b9      	ldr	r1, [r7, #24]
 8001580:	69f8      	ldr	r0, [r7, #28]
 8001582:	f7ff fbaf 	bl	8000ce4 <__aeabi_fmul>
 8001586:	4603      	mov	r3, r0
 8001588:	4619      	mov	r1, r3
 800158a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800158c:	f7ff faa2 	bl	8000ad4 <__addsf3>
 8001590:	4603      	mov	r3, r0
 8001592:	623b      	str	r3, [r7, #32]
		//(float) output_signal = w - prev_w;
		result = w - prev_w;
 8001594:	69b9      	ldr	r1, [r7, #24]
 8001596:	6a38      	ldr	r0, [r7, #32]
 8001598:	f7ff fa9a 	bl	8000ad0 <__aeabi_fsub>
 800159c:	4603      	mov	r3, r0
 800159e:	617b      	str	r3, [r7, #20]

		*ptrprev_w=w;
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	6a3a      	ldr	r2, [r7, #32]
 80015a4:	601a      	str	r2, [r3, #0]
		*output_signal=result;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	601a      	str	r2, [r3, #0]
	//}
}
 80015ac:	bf00      	nop
 80015ae:	3728      	adds	r7, #40	; 0x28
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	3f733333 	.word	0x3f733333

080015b8 <Mean_Median_Filter>:

void Mean_Median_Filter(float M,meanDiffFilter_t *filterValues,float *ir_meanfiltrado)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b087      	sub	sp, #28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
	float avg = 0;
 80015c4:	f04f 0300 	mov.w	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
	float aux = 0;
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	613b      	str	r3, [r7, #16]
	//filterValues->index = 0;
	//filterValues->sum = 0;
	//filterValues->count = 0;
	//for(int i=0;i<=15;i++)
	//{
		filterValues->sum -= filterValues->values[filterValues->index];
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015da:	4619      	mov	r1, r3
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015e2:	4619      	mov	r1, r3
 80015e4:	4610      	mov	r0, r2
 80015e6:	f7ff fa73 	bl	8000ad0 <__aeabi_fsub>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->values[filterValues->index] = M;
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015f8:	4619      	mov	r1, r3
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		filterValues->sum += filterValues->values[filterValues->index];
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800160c:	4619      	mov	r1, r3
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001614:	4619      	mov	r1, r3
 8001616:	4610      	mov	r0, r2
 8001618:	f7ff fa5c 	bl	8000ad4 <__addsf3>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->index++;
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162a:	3301      	adds	r3, #1
 800162c:	b2da      	uxtb	r2, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <Mean_Median_Filter+0xec>)
 800163c:	fba3 1302 	umull	r1, r3, r3, r2
 8001640:	08d9      	lsrs	r1, r3, #3
 8001642:	460b      	mov	r3, r1
 8001644:	011b      	lsls	r3, r3, #4
 8001646:	1a5b      	subs	r3, r3, r1
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	b2da      	uxtb	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		if(filterValues->count < MEAN_FILTER_SIZE)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001658:	2b0e      	cmp	r3, #14
 800165a:	d807      	bhi.n	800166c <Mean_Median_Filter+0xb4>
		filterValues->count++;
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001662:	3301      	adds	r3, #1
 8001664:	b2da      	uxtb	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		avg = filterValues->sum / filterValues->count;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fae0 	bl	8000c3c <__aeabi_i2f>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fbe3 	bl	8000e4c <__aeabi_fdiv>
 8001686:	4603      	mov	r3, r0
 8001688:	617b      	str	r3, [r7, #20]
		aux = avg-M;
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	6978      	ldr	r0, [r7, #20]
 800168e:	f7ff fa1f 	bl	8000ad0 <__aeabi_fsub>
 8001692:	4603      	mov	r3, r0
 8001694:	613b      	str	r3, [r7, #16]
		*ir_meanfiltrado=aux;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	601a      	str	r2, [r3, #0]
	//}
}
 800169c:	bf00      	nop
 800169e:	371c      	adds	r7, #28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd90      	pop	{r4, r7, pc}
 80016a4:	88888889 	.word	0x88888889

080016a8 <Filtro_PasabajosButterworth>:

void Filtro_PasabajosButterworth(float* x,butterworthFilter_t* filterResult ,float*ir_lpbfiltrado)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	float aux=*x;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	617b      	str	r3, [r7, #20]
	filterResult->v[0] = filterResult->v[1];
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	601a      	str	r2, [r3, #0]

	  //Fs = 100Hz and Fc = 10Hz
	filterResult->v[1] = (2.452372752527856026e-1 * aux) + (0.50952544949442879485 * filterResult->v[0]);
 80016c2:	6978      	ldr	r0, [r7, #20]
 80016c4:	f7fe fea8 	bl	8000418 <__aeabi_f2d>
 80016c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001738 <Filtro_PasabajosButterworth+0x90>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fefb 	bl	80004c8 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4614      	mov	r4, r2
 80016d8:	461d      	mov	r5, r3
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fe9a 	bl	8000418 <__aeabi_f2d>
 80016e4:	a316      	add	r3, pc, #88	; (adr r3, 8001740 <Filtro_PasabajosButterworth+0x98>)
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	f7fe feed 	bl	80004c8 <__aeabi_dmul>
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	4620      	mov	r0, r4
 80016f4:	4629      	mov	r1, r5
 80016f6:	f7fe fd31 	bl	800015c <__adddf3>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff f991 	bl	8000a28 <__aeabi_d2f>
 8001706:	4602      	mov	r2, r0
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	605a      	str	r2, [r3, #4]

	filterResult->result = filterResult->v[0] + filterResult->v[1];
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	4619      	mov	r1, r3
 8001716:	4610      	mov	r0, r2
 8001718:	f7ff f9dc 	bl	8000ad4 <__addsf3>
 800171c:	4603      	mov	r3, r0
 800171e:	461a      	mov	r2, r3
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	609a      	str	r2, [r3, #8]

	*ir_lpbfiltrado=filterResult->result;
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	601a      	str	r2, [r3, #0]
}
 800172c:	bf00      	nop
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bdb0      	pop	{r4, r5, r7, pc}
 8001734:	f3af 8000 	nop.w
 8001738:	5e7c4548 	.word	0x5e7c4548
 800173c:	3fcf63ef 	.word	0x3fcf63ef
 8001740:	50c1dd5c 	.word	0x50c1dd5c
 8001744:	3fe04e08 	.word	0x3fe04e08

08001748 <detectPulse>:

bool detectPulse(float sensor_value,pulseoxymeter_t *result)
{
 8001748:	b590      	push	{r4, r7, lr}
 800174a:	b087      	sub	sp, #28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t currentBeat = 0;
	static uint32_t lastBeat = 0;

	  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001752:	496f      	ldr	r1, [pc, #444]	; (8001910 <detectPulse+0x1c8>)
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff fc81 	bl	800105c <__aeabi_fcmpgt>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d014      	beq.n	800178a <detectPulse+0x42>
	  {
	    currentPulseDetectorState = PULSE_IDLE;
 8001760:	4b6c      	ldr	r3, [pc, #432]	; (8001914 <detectPulse+0x1cc>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
	    prev_sensor_value = 0;
 8001766:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <detectPulse+0x1d0>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
	    lastBeat = 0;
 800176e:	4b6b      	ldr	r3, [pc, #428]	; (800191c <detectPulse+0x1d4>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
	    currentBeat = 0;
 8001774:	4b6a      	ldr	r3, [pc, #424]	; (8001920 <detectPulse+0x1d8>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	    values_went_down = 0;
 800177a:	4b6a      	ldr	r3, [pc, #424]	; (8001924 <detectPulse+0x1dc>)
 800177c:	2200      	movs	r2, #0
 800177e:	701a      	strb	r2, [r3, #0]
	    lastBeatThreshold = 0;
 8001780:	4b69      	ldr	r3, [pc, #420]	; (8001928 <detectPulse+0x1e0>)
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
	    return false;
 8001786:	2300      	movs	r3, #0
 8001788:	e0be      	b.n	8001908 <detectPulse+0x1c0>
	  }
	    switch(currentPulseDetectorState)
 800178a:	4b62      	ldr	r3, [pc, #392]	; (8001914 <detectPulse+0x1cc>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	2b02      	cmp	r3, #2
 8001790:	f000 809b 	beq.w	80018ca <detectPulse+0x182>
 8001794:	2b02      	cmp	r3, #2
 8001796:	f300 80b3 	bgt.w	8001900 <detectPulse+0x1b8>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <detectPulse+0x5c>
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d00f      	beq.n	80017c2 <detectPulse+0x7a>
 80017a2:	e0ad      	b.n	8001900 <detectPulse+0x1b8>
	     {
	       case PULSE_IDLE:
	         if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80017a4:	4961      	ldr	r1, [pc, #388]	; (800192c <detectPulse+0x1e4>)
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff fc4e 	bl	8001048 <__aeabi_fcmpge>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <detectPulse+0x6c>
	           currentPulseDetectorState = PULSE_TRACE_UP;
	           values_went_down = 0;
	         }
	         break;
 80017b2:	e0a5      	b.n	8001900 <detectPulse+0x1b8>
	           currentPulseDetectorState = PULSE_TRACE_UP;
 80017b4:	4b57      	ldr	r3, [pc, #348]	; (8001914 <detectPulse+0x1cc>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	701a      	strb	r2, [r3, #0]
	           values_went_down = 0;
 80017ba:	4b5a      	ldr	r3, [pc, #360]	; (8001924 <detectPulse+0x1dc>)
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
	         break;
 80017c0:	e09e      	b.n	8001900 <detectPulse+0x1b8>

	       case PULSE_TRACE_UP:
	         if(sensor_value > prev_sensor_value)
 80017c2:	4b55      	ldr	r3, [pc, #340]	; (8001918 <detectPulse+0x1d0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4619      	mov	r1, r3
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff fc47 	bl	800105c <__aeabi_fcmpgt>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <detectPulse+0xa4>
	         {
	           currentBeat = HAL_GetTick();
 80017d4:	f001 ff8a 	bl	80036ec <HAL_GetTick>
 80017d8:	4603      	mov	r3, r0
 80017da:	4a51      	ldr	r2, [pc, #324]	; (8001920 <detectPulse+0x1d8>)
 80017dc:	6013      	str	r3, [r2, #0]
	           lastBeatThreshold = sensor_value;
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fc46 	bl	8001070 <__aeabi_f2uiz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	4a50      	ldr	r2, [pc, #320]	; (8001928 <detectPulse+0x1e0>)
 80017e8:	6013      	str	r3, [r2, #0]

	           currentPulseDetectorState = PULSE_TRACE_DOWN;

	           return true;
	         }
	         break;
 80017ea:	e089      	b.n	8001900 <detectPulse+0x1b8>
	           uint32_t beatDuration = currentBeat - lastBeat;
 80017ec:	4b4c      	ldr	r3, [pc, #304]	; (8001920 <detectPulse+0x1d8>)
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	4b4a      	ldr	r3, [pc, #296]	; (800191c <detectPulse+0x1d4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]
	           lastBeat = currentBeat;
 80017f8:	4b49      	ldr	r3, [pc, #292]	; (8001920 <detectPulse+0x1d8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a47      	ldr	r2, [pc, #284]	; (800191c <detectPulse+0x1d4>)
 80017fe:	6013      	str	r3, [r2, #0]
	           float rawBPM = 0;
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
	           if(beatDuration > 0)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d009      	beq.n	8001820 <detectPulse+0xd8>
	             rawBPM = 60000.0 / (float)beatDuration;
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f7ff fa11 	bl	8000c34 <__aeabi_ui2f>
 8001812:	4603      	mov	r3, r0
 8001814:	4619      	mov	r1, r3
 8001816:	4846      	ldr	r0, [pc, #280]	; (8001930 <detectPulse+0x1e8>)
 8001818:	f7ff fb18 	bl	8000e4c <__aeabi_fdiv>
 800181c:	4603      	mov	r3, r0
 800181e:	617b      	str	r3, [r7, #20]
	           valuesBPM[bpmIndex] = rawBPM;
 8001820:	4b44      	ldr	r3, [pc, #272]	; (8001934 <detectPulse+0x1ec>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	4a44      	ldr	r2, [pc, #272]	; (8001938 <detectPulse+0x1f0>)
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	           valuesBPMSum = 0;
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <detectPulse+0x1f4>)
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	e010      	b.n	800185e <detectPulse+0x116>
	             valuesBPMSum += valuesBPM[i];
 800183c:	4a3e      	ldr	r2, [pc, #248]	; (8001938 <detectPulse+0x1f0>)
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001844:	4a3d      	ldr	r2, [pc, #244]	; (800193c <detectPulse+0x1f4>)
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff f942 	bl	8000ad4 <__addsf3>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	4b39      	ldr	r3, [pc, #228]	; (800193c <detectPulse+0x1f4>)
 8001856:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	3301      	adds	r3, #1
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	2b09      	cmp	r3, #9
 8001862:	ddeb      	ble.n	800183c <detectPulse+0xf4>
	           bpmIndex++;
 8001864:	4b33      	ldr	r3, [pc, #204]	; (8001934 <detectPulse+0x1ec>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	3301      	adds	r3, #1
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <detectPulse+0x1ec>)
 800186e:	701a      	strb	r2, [r3, #0]
	           bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001870:	4b30      	ldr	r3, [pc, #192]	; (8001934 <detectPulse+0x1ec>)
 8001872:	781a      	ldrb	r2, [r3, #0]
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <detectPulse+0x1f8>)
 8001876:	fba3 1302 	umull	r1, r3, r3, r2
 800187a:	08d9      	lsrs	r1, r3, #3
 800187c:	460b      	mov	r3, r1
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <detectPulse+0x1ec>)
 800188a:	701a      	strb	r2, [r3, #0]
	           if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 800188c:	4b2d      	ldr	r3, [pc, #180]	; (8001944 <detectPulse+0x1fc>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	2b09      	cmp	r3, #9
 8001892:	d805      	bhi.n	80018a0 <detectPulse+0x158>
	             valuesBPMCount++;
 8001894:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <detectPulse+0x1fc>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b29      	ldr	r3, [pc, #164]	; (8001944 <detectPulse+0x1fc>)
 800189e:	701a      	strb	r2, [r3, #0]
	           currentBPM = valuesBPMSum / valuesBPMCount;
 80018a0:	4b26      	ldr	r3, [pc, #152]	; (800193c <detectPulse+0x1f4>)
 80018a2:	681c      	ldr	r4, [r3, #0]
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <detectPulse+0x1fc>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff f9c7 	bl	8000c3c <__aeabi_i2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff faca 	bl	8000e4c <__aeabi_fdiv>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b22      	ldr	r3, [pc, #136]	; (8001948 <detectPulse+0x200>)
 80018be:	601a      	str	r2, [r3, #0]
	           currentPulseDetectorState = PULSE_TRACE_DOWN;
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <detectPulse+0x1cc>)
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
	           return true;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e01e      	b.n	8001908 <detectPulse+0x1c0>

	       case PULSE_TRACE_DOWN:
	         if(sensor_value < prev_sensor_value)
 80018ca:	4b13      	ldr	r3, [pc, #76]	; (8001918 <detectPulse+0x1d0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4619      	mov	r1, r3
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fba5 	bl	8001020 <__aeabi_fcmplt>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <detectPulse+0x1a0>
	         {
	           values_went_down++;
 80018dc:	4b11      	ldr	r3, [pc, #68]	; (8001924 <detectPulse+0x1dc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <detectPulse+0x1dc>)
 80018e6:	701a      	strb	r2, [r3, #0]
	         }


	         if(sensor_value < PULSE_MIN_THRESHOLD)
 80018e8:	4910      	ldr	r1, [pc, #64]	; (800192c <detectPulse+0x1e4>)
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f7ff fb98 	bl	8001020 <__aeabi_fcmplt>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d100      	bne.n	80018f8 <detectPulse+0x1b0>
	         {
	           currentPulseDetectorState = PULSE_IDLE;
	         }
	         break;
 80018f6:	e002      	b.n	80018fe <detectPulse+0x1b6>
	           currentPulseDetectorState = PULSE_IDLE;
 80018f8:	4b06      	ldr	r3, [pc, #24]	; (8001914 <detectPulse+0x1cc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
	         break;
 80018fe:	bf00      	nop
	     }

	     prev_sensor_value = sensor_value;
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <detectPulse+0x1d0>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
	     return false;
 8001906:	2300      	movs	r3, #0

}
 8001908:	4618      	mov	r0, r3
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	bd90      	pop	{r4, r7, pc}
 8001910:	43960000 	.word	0x43960000
 8001914:	20000128 	.word	0x20000128
 8001918:	200001f4 	.word	0x200001f4
 800191c:	200001f8 	.word	0x200001f8
 8001920:	200001fc 	.word	0x200001fc
 8001924:	20000200 	.word	0x20000200
 8001928:	20000160 	.word	0x20000160
 800192c:	41f00000 	.word	0x41f00000
 8001930:	476a6000 	.word	0x476a6000
 8001934:	2000015d 	.word	0x2000015d
 8001938:	20000130 	.word	0x20000130
 800193c:	20000158 	.word	0x20000158
 8001940:	cccccccd 	.word	0xcccccccd
 8001944:	2000015c 	.word	0x2000015c
 8001948:	2000012c 	.word	0x2000012c

0800194c <Balance_Intensidades>:

void Balance_Intensidades(float redLedDC, float IRLedDC)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
	uint8_t buffer=0;
 8001956:	2300      	movs	r3, #0
 8001958:	73fb      	strb	r3, [r7, #15]
	uint8_t aux1=0;
 800195a:	2300      	movs	r3, #0
 800195c:	73bb      	strb	r3, [r7, #14]
	uint8_t aux2=0;
 800195e:	2300      	movs	r3, #0
 8001960:	737b      	strb	r3, [r7, #13]
    aux1=(uint8_t)redLedDC;
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f7ff fb84 	bl	8001070 <__aeabi_f2uiz>
 8001968:	4603      	mov	r3, r0
 800196a:	73bb      	strb	r3, [r7, #14]
    aux2=(uint8_t)IRLedDC;
 800196c:	6838      	ldr	r0, [r7, #0]
 800196e:	f7ff fb7f 	bl	8001070 <__aeabi_f2uiz>
 8001972:	4603      	mov	r3, r0
 8001974:	737b      	strb	r3, [r7, #13]

	if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001976:	f001 feb9 	bl	80036ec <HAL_GetTick>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff f959 	bl	8000c34 <__aeabi_ui2f>
 8001982:	4602      	mov	r2, r0
 8001984:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <Balance_Intensidades+0x10c>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	4610      	mov	r0, r2
 800198c:	f7ff f8a0 	bl	8000ad0 <__aeabi_fsub>
 8001990:	4603      	mov	r3, r0
 8001992:	4932      	ldr	r1, [pc, #200]	; (8001a5c <Balance_Intensidades+0x110>)
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fb57 	bl	8001048 <__aeabi_fcmpge>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d100      	bne.n	80019a2 <Balance_Intensidades+0x56>
	        //Serial.println("RED LED Current -");
	    }

	    lastREDLedCurrentCheck = HAL_GetTick();
	  }
}
 80019a0:	e055      	b.n	8001a4e <Balance_Intensidades+0x102>
	    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	6838      	ldr	r0, [r7, #0]
 80019a6:	f7ff f893 	bl	8000ad0 <__aeabi_fsub>
 80019aa:	4603      	mov	r3, r0
 80019ac:	492c      	ldr	r1, [pc, #176]	; (8001a60 <Balance_Intensidades+0x114>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb54 	bl	800105c <__aeabi_fcmpgt>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d01a      	beq.n	80019f0 <Balance_Intensidades+0xa4>
 80019ba:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <Balance_Intensidades+0x118>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b0e      	cmp	r3, #14
 80019c0:	d816      	bhi.n	80019f0 <Balance_Intensidades+0xa4>
	      redLEDCurrent++;
 80019c2:	4b28      	ldr	r3, [pc, #160]	; (8001a64 <Balance_Intensidades+0x118>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <Balance_Intensidades+0x118>)
 80019cc:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 80019ce:	7bbb      	ldrb	r3, [r7, #14]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019d8:	4313      	orrs	r3, r2
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <Balance_Intensidades+0x11c>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <Balance_Intensidades+0x120>)
 80019e4:	7811      	ldrb	r1, [r2, #0]
 80019e6:	7bfa      	ldrb	r2, [r7, #15]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f000 f86f 	bl	8001acc <MAX30100_I2C_Write>
 80019ee:	e025      	b.n	8001a3c <Balance_Intensidades+0xf0>
	    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff f86c 	bl	8000ad0 <__aeabi_fsub>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4919      	ldr	r1, [pc, #100]	; (8001a60 <Balance_Intensidades+0x114>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fb2d 	bl	800105c <__aeabi_fcmpgt>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d019      	beq.n	8001a3c <Balance_Intensidades+0xf0>
 8001a08:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <Balance_Intensidades+0x118>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d015      	beq.n	8001a3c <Balance_Intensidades+0xf0>
	      redLEDCurrent--;
 8001a10:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <Balance_Intensidades+0x118>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <Balance_Intensidades+0x118>)
 8001a1a:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	b25a      	sxtb	r2, r3
 8001a22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <Balance_Intensidades+0x11c>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <Balance_Intensidades+0x120>)
 8001a32:	7811      	ldrb	r1, [r2, #0]
 8001a34:	7bfa      	ldrb	r2, [r7, #15]
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 f848 	bl	8001acc <MAX30100_I2C_Write>
	    lastREDLedCurrentCheck = HAL_GetTick();
 8001a3c:	f001 fe56 	bl	80036ec <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff f8f6 	bl	8000c34 <__aeabi_ui2f>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <Balance_Intensidades+0x10c>)
 8001a4c:	6013      	str	r3, [r2, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000124 	.word	0x20000124
 8001a5c:	43fa0000 	.word	0x43fa0000
 8001a60:	477de800 	.word	0x477de800
 8001a64:	20000121 	.word	0x20000121
 8001a68:	20000000 	.word	0x20000000
 8001a6c:	20000004 	.word	0x20000004

08001a70 <Resetea_Resultados>:
		buffer=(buffer & ~MAX30100_SPO2_HI_RES_EN);
		MAX30100_I2C_Write(MAX_ADDRESS_WR,SPO2_CONFIGURATION,buffer);
	}
}
void Resetea_Resultados(pulseoxymeter_t *result)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	result->pulseDetected=false;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
	result->heartBPM=0.0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
	result->irCardiogram=0.0;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f04f 0200 	mov.w	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
	result->irDcValue=0.0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
	result->redDcValue=0.0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
	result->SaO2=currentSaO2Value;
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <Resetea_Resultados+0x58>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	615a      	str	r2, [r3, #20]
	result->lastBeatThreshold=0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
	result->dcFilteredIR=0.0;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f04f 0200 	mov.w	r2, #0
 8001ab2:	61da      	str	r2, [r3, #28]
	result->dcFilteredRed=0.0;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000188 	.word	0x20000188

08001acc <MAX30100_I2C_Write>:

void MAX30100_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	71bb      	strb	r3, [r7, #6]
 8001ada:	4613      	mov	r3, r2
 8001adc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001ade:	79bb      	ldrb	r3, [r7, #6]
 8001ae0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001ae2:	797b      	ldrb	r3, [r7, #5]
 8001ae4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	b299      	uxth	r1, r3
 8001aea:	f107 020c 	add.w	r2, r7, #12
 8001aee:	230a      	movs	r3, #10
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2302      	movs	r3, #2
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <MAX30100_I2C_Write+0x38>)
 8001af6:	f002 fae9 	bl	80040cc <HAL_I2C_Master_Transmit>
}
 8001afa:	bf00      	nop
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	2000020c 	.word	0x2000020c

08001b08 <MAX30100_I2C_Read>:

void MAX30100_I2C_Read(uint8_t address, uint8_t reg, uint8_t data)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	71bb      	strb	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b1e:	797b      	ldrb	r3, [r7, #5]
 8001b20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Receive(&hi2c1, address, dt,2, 10);
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	b299      	uxth	r1, r3
 8001b26:	f107 020c 	add.w	r2, r7, #12
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2302      	movs	r3, #2
 8001b30:	4803      	ldr	r0, [pc, #12]	; (8001b40 <MAX30100_I2C_Read+0x38>)
 8001b32:	f002 fbc9 	bl	80042c8 <HAL_I2C_Master_Receive>
}
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000020c 	.word	0x2000020c

08001b44 <MAX30100_I2C_FIFO_Read>:
void MAX30100_I2C_FIFO_Read(uint8_t address, uint8_t dt[4])
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6039      	str	r1, [r7, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
	//uint8_t dt[4];
	HAL_I2C_Master_Receive(&hi2c1, address, dt,4, 10);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	b299      	uxth	r1, r3
 8001b54:	230a      	movs	r3, #10
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2304      	movs	r3, #4
 8001b5a:	683a      	ldr	r2, [r7, #0]
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <MAX30100_I2C_FIFO_Read+0x28>)
 8001b5e:	f002 fbb3 	bl	80042c8 <HAL_I2C_Master_Receive>
	//data[0] =dt[0];
	//data[1] =dt[1];
	//data[2] =dt[2];
	//data[3] =dt[3];
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	2000020c 	.word	0x2000020c

08001b70 <MAX30100_I2C_Reset_FIFO>:
void MAX30100_I2C_Reset_FIFO(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_WRITE, (uint8_t)0);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff ffa5 	bl	8001acc <MAX30100_I2C_Write>
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_OVERFLOW_COUNTER, (uint8_t)0);
 8001b82:	4b08      	ldr	r3, [pc, #32]	; (8001ba4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	2103      	movs	r1, #3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff9e 	bl	8001acc <MAX30100_I2C_Write>
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_READ, (uint8_t)0);
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2200      	movs	r2, #0
 8001b96:	2104      	movs	r1, #4
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff97 	bl	8001acc <MAX30100_I2C_Write>
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000000 	.word	0x20000000

08001ba8 <SPISD_EscribirSector>:
 * Escribe un sector en la SD
 * En el caso de direccionar al byte, revisa si SectorAddressing es 0
 * y multiplica el sector por 512 para apuntar al byte.
 */
uint8_t SPISD_EscribirSector(SPISD *spisd, uint32_t sector,
		const uint8_t *buffer) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bb4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001bb8:	6018      	str	r0, [r3, #0]
 8001bba:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bbe:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001bc2:	6019      	str	r1, [r3, #0]
 8001bc4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bc8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001bcc:	601a      	str	r2, [r3, #0]
	//Verificar que la memoria SD soporte direccionamiento al sector y no al byte.
	if (!spisd->sectorAddressing)
 8001bce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bd2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	7b9b      	ldrb	r3, [r3, #14]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10a      	bne.n	8001bf4 <SPISD_EscribirSector+0x4c>
		sector = sector * 512;
 8001bde:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001be2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001be6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001bea:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8001bee:	6812      	ldr	r2, [r2, #0]
 8001bf0:	0252      	lsls	r2, r2, #9
 8001bf2:	601a      	str	r2, [r3, #0]

	//El sector es uint32, pero hay que enviarlo en 4 bytes en SPISD_CMD24
	//Lo partimos en 4 partes con shifts y mascaras.
	SPISD_CMD24[4] = sector & 0xff;
 8001bf4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bf8:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001c02:	711a      	strb	r2, [r3, #4]
	SPISD_CMD24[3] = (sector & 0xff00) >> 8;
 8001c04:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c08:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b71      	ldr	r3, [pc, #452]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001c14:	70da      	strb	r2, [r3, #3]
	SPISD_CMD24[2] = (sector & 0xff0000) >> 16;
 8001c16:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c1a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001c26:	709a      	strb	r2, [r3, #2]
	SPISD_CMD24[1] = (sector & 0xff000000) >> 24;
 8001c28:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c2c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	0e1b      	lsrs	r3, r3, #24
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001c38:	705a      	strb	r2, [r3, #1]
	//Enviamos el comando CMD24
	SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 8001c3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c3e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c42:	2207      	movs	r2, #7
 8001c44:	4964      	ldr	r1, [pc, #400]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f000 f978 	bl	8001f3c <SPISD_EnviarComando>
	HAL_Delay(1);
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f001 fd57 	bl	8003700 <HAL_Delay>
	uint8_t timeout = 10;
 8001c52:	230a      	movs	r3, #10
 8001c54:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	recbuffer[0] = 0xFF;
 8001c58:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001c5a:	22ff      	movs	r2, #255	; 0xff
 8001c5c:	701a      	strb	r2, [r3, #0]
	while (timeout > 0) {
 8001c5e:	e030      	b.n	8001cc2 <SPISD_EscribirSector+0x11a>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 4);
 8001c60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c64:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c68:	2204      	movs	r2, #4
 8001c6a:	495c      	ldr	r1, [pc, #368]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001c6c:	6818      	ldr	r0, [r3, #0]
 8001c6e:	f000 f987 	bl	8001f80 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0, todo marcha bien...
		if (recbuffer[0]==0)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d028      	beq.n	8001ccc <SPISD_EscribirSector+0x124>
			break;
		//Si no es 0
		timeout--;
 8001c7a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		//Si paso 5 veces y no responde, reiniciamos la SD
		if (timeout == 5) {
 8001c84:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10b      	bne.n	8001ca4 <SPISD_EscribirSector+0xfc>
			if (!SPISD_DetectarSD(spisd))
 8001c8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c90:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f000 f9a5 	bl	8001fe4 <SPISD_DetectarSD>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d101      	bne.n	8001ca4 <SPISD_EscribirSector+0xfc>
				return 0; // Falla la SD
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e094      	b.n	8001dce <SPISD_EscribirSector+0x226>
		}
		HAL_Delay(20);
 8001ca4:	2014      	movs	r0, #20
 8001ca6:	f001 fd2b 	bl	8003700 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 8001caa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cae:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001cb2:	2207      	movs	r2, #7
 8001cb4:	4948      	ldr	r1, [pc, #288]	; (8001dd8 <SPISD_EscribirSector+0x230>)
 8001cb6:	6818      	ldr	r0, [r3, #0]
 8001cb8:	f000 f940 	bl	8001f3c <SPISD_EnviarComando>
		HAL_Delay(2);
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f001 fd1f 	bl	8003700 <HAL_Delay>
	while (timeout > 0) {
 8001cc2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d1ca      	bne.n	8001c60 <SPISD_EscribirSector+0xb8>
 8001cca:	e000      	b.n	8001cce <SPISD_EscribirSector+0x126>
			break;
 8001ccc:	bf00      	nop
	}
	if (recbuffer[0] != 0)
 8001cce:	4b43      	ldr	r3, [pc, #268]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <SPISD_EscribirSector+0x132>
		return 0; //Fallo escribiendo.
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	e079      	b.n	8001dce <SPISD_EscribirSector+0x226>
	HAL_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f001 fd10 	bl	8003700 <HAL_Delay>
	uint8_t outputBuffer[515]; //Armamos un buffer con start, datos y CRC (mentiroso)
	outputBuffer[0] = 0xFE; //Start
 8001ce0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ce4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001ce8:	22fe      	movs	r2, #254	; 0xfe
 8001cea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 8001cec:	2300      	movs	r3, #0
 8001cee:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001cf2:	e015      	b.n	8001d20 <SPISD_EscribirSector+0x178>
		outputBuffer[i + 1] = buffer[i];
 8001cf4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001cf8:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001cfc:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8001d00:	6812      	ldr	r2, [r2, #0]
 8001d02:	441a      	add	r2, r3
 8001d04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d08:	3301      	adds	r3, #1
 8001d0a:	7811      	ldrb	r1, [r2, #0]
 8001d0c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001d10:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001d14:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 512; i++) {
 8001d16:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d20:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d28:	dbe4      	blt.n	8001cf4 <SPISD_EscribirSector+0x14c>
	}
	outputBuffer[513] = 0xFF; //CRC mentiroso1
 8001d2a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d2e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d32:	22ff      	movs	r2, #255	; 0xff
 8001d34:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	outputBuffer[514] = 0xFF; //CRC mentiroso2
 8001d38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d3c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d40:	22ff      	movs	r2, #255	; 0xff
 8001d42:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001d46:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d4a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6898      	ldr	r0, [r3, #8]
 8001d52:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d56:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	899b      	ldrh	r3, [r3, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	4619      	mov	r1, r3
 8001d62:	f002 f83f 	bl	8003de4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, outputBuffer, 515, 100);
 8001d66:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d6a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6818      	ldr	r0, [r3, #0]
 8001d72:	f107 0114 	add.w	r1, r7, #20
 8001d76:	2364      	movs	r3, #100	; 0x64
 8001d78:	f240 2203 	movw	r2, #515	; 0x203
 8001d7c:	f006 f8e6 	bl	8007f4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001d80:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d84:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6898      	ldr	r0, [r3, #8]
 8001d8c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d90:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	899b      	ldrh	r3, [r3, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f002 f822 	bl	8003de4 <HAL_GPIO_WritePin>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 2);
 8001da0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001da4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001da8:	2202      	movs	r2, #2
 8001daa:	490c      	ldr	r1, [pc, #48]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	f000 f8e7 	bl	8001f80 <SPISD_RecibirRespuestaComando>
	recbuffer[0] = recbuffer[0] & 0x1F; //Mascara para los 5 bits menos significativos
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	b2da      	uxtb	r2, r3
 8001dbc:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001dbe:	701a      	strb	r2, [r3, #0]
	//Debe devolver xxx00101 si el sector fue escrito correctamente.
	if (recbuffer[0] != 0x05) {
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <SPISD_EscribirSector+0x234>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b05      	cmp	r3, #5
 8001dc6:	d001      	beq.n	8001dcc <SPISD_EscribirSector+0x224>
		return 0; //Error
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <SPISD_EscribirSector+0x226>
	}
	return 1;
 8001dcc:	2301      	movs	r3, #1
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	20000044 	.word	0x20000044
 8001ddc:	20000204 	.word	0x20000204

08001de0 <SPISD_LeerSector>:

/**
 * Lee un sector de la SD. La misma debe estar inicializada
 *
 */
uint8_t SPISD_LeerSector(SPISD *spisd, uint32_t sector, uint8_t *buffer) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
	//Si la memoria direcciona al byte, multiplicamos sector*512.
	if (!spisd->sectorAddressing)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	7b9b      	ldrb	r3, [r3, #14]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <SPISD_LeerSector+0x1a>
		sector = sector * 512;
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	025b      	lsls	r3, r3, #9
 8001df8:	60bb      	str	r3, [r7, #8]
	//Pasamos el sector/byte a 4 bytes
	SPISD_CMD17[4] = sector & 0xff;
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4b4d      	ldr	r3, [pc, #308]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e00:	711a      	strb	r2, [r3, #4]
	SPISD_CMD17[3] = (sector & 0xff00) >> 8;
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e0a:	70da      	strb	r2, [r3, #3]
	SPISD_CMD17[2] = (sector & 0xff0000) >> 16;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	0c1b      	lsrs	r3, r3, #16
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b48      	ldr	r3, [pc, #288]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e14:	709a      	strb	r2, [r3, #2]
	SPISD_CMD17[1] = (sector & 0xff000000) >> 24;
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	0e1b      	lsrs	r3, r3, #24
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b45      	ldr	r3, [pc, #276]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e1e:	705a      	strb	r2, [r3, #1]
	//Comando 17, leer sector (o byte).
	SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001e20:	2207      	movs	r2, #7
 8001e22:	4944      	ldr	r1, [pc, #272]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e24:	68f8      	ldr	r0, [r7, #12]
 8001e26:	f000 f889 	bl	8001f3c <SPISD_EnviarComando>
	//Ahora la SD deberia responder on 0x00 indicando que esta lista
	//para enviar el sector.. pero esto puede tardar...
	uint8_t timeout = 10;
 8001e2a:	230a      	movs	r3, #10
 8001e2c:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001e2e:	e024      	b.n	8001e7a <SPISD_LeerSector+0x9a>
		//Busco la respuesta
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8001e30:	2201      	movs	r2, #1
 8001e32:	4941      	ldr	r1, [pc, #260]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f8a3 	bl	8001f80 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] == 0)
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d01f      	beq.n	8001e82 <SPISD_LeerSector+0xa2>
			break; //Todo funciono bien
		//Tengo que mandar el comando de vuelta.
		timeout--;
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	3b01      	subs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
		//A veces queda en IDLE, asi que si timeout es 5, mandamos
		//de nuevo la secuencia de init
		if (timeout == 5) {
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10a      	bne.n	8001e64 <SPISD_LeerSector+0x84>
			if (!SPISD_DetectarSD(spisd))
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f8c8 	bl	8001fe4 <SPISD_DetectarSD>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <SPISD_LeerSector+0x7e>
				return 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	e065      	b.n	8001f2a <SPISD_LeerSector+0x14a>
			HAL_Delay(100);
 8001e5e:	2064      	movs	r0, #100	; 0x64
 8001e60:	f001 fc4e 	bl	8003700 <HAL_Delay>
		}
		HAL_Delay(20);
 8001e64:	2014      	movs	r0, #20
 8001e66:	f001 fc4b 	bl	8003700 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001e6a:	2207      	movs	r2, #7
 8001e6c:	4931      	ldr	r1, [pc, #196]	; (8001f34 <SPISD_LeerSector+0x154>)
 8001e6e:	68f8      	ldr	r0, [r7, #12]
 8001e70:	f000 f864 	bl	8001f3c <SPISD_EnviarComando>
		HAL_Delay(2);
 8001e74:	2002      	movs	r0, #2
 8001e76:	f001 fc43 	bl	8003700 <HAL_Delay>
	while (timeout > 0) {
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1d7      	bne.n	8001e30 <SPISD_LeerSector+0x50>
 8001e80:	e000      	b.n	8001e84 <SPISD_LeerSector+0xa4>
			break; //Todo funciono bien
 8001e82:	bf00      	nop

	}
	//Pude haber salido por timeout o porque recbuffer[0]==0
	if (recbuffer[0] != 0)
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <SPISD_LeerSector+0xb0>
		return 0; //No responde mas a comandos.
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	e04c      	b.n	8001f2a <SPISD_LeerSector+0x14a>

	//Si la memoria responde 0 a CMD17, entonces va a comenzar a enviar el sector
	//El comienzo del sector es siempre 0xFE, pero depende la memoria, puede responder
	//con una cantidad de 0xFF primero. Leemos de a uno hasta que llega el primer 0xFF
	recbuffer[0] = 0xFF;
 8001e90:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001e92:	22ff      	movs	r2, #255	; 0xff
 8001e94:	701a      	strb	r2, [r3, #0]
	timeout = 100; //Maximo 100 lecturas
 8001e96:	2364      	movs	r3, #100	; 0x64
 8001e98:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6898      	ldr	r0, [r3, #8]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	899b      	ldrh	r3, [r3, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	f001 ff9d 	bl	8003de4 <HAL_GPIO_WritePin>
	while (timeout > 0) {
 8001eaa:	e00d      	b.n	8001ec8 <SPISD_LeerSector+0xe8>
		HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 1, 100);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	6818      	ldr	r0, [r3, #0]
 8001eb0:	2364      	movs	r3, #100	; 0x64
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	4920      	ldr	r1, [pc, #128]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001eb6:	f006 f985 	bl	80081c4 <HAL_SPI_Receive>
		//SPISD_RecibirRespuestaComando(spisd,recbuffer,1);
		if (recbuffer[0] == 0xFE) {
 8001eba:	4b1f      	ldr	r3, [pc, #124]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2bfe      	cmp	r3, #254	; 0xfe
 8001ec0:	d006      	beq.n	8001ed0 <SPISD_LeerSector+0xf0>
			break;
		}
		timeout--; //Si no hubo break, decrementamos el timeout
 8001ec2:	7dfb      	ldrb	r3, [r7, #23]
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1ee      	bne.n	8001eac <SPISD_LeerSector+0xcc>
 8001ece:	e000      	b.n	8001ed2 <SPISD_LeerSector+0xf2>
			break;
 8001ed0:	bf00      	nop
	}

	//Si recbuffer[0] NO es 0xFE, levantamos CS y chau, la SD no responde.
	if (recbuffer[0] != 0xFE) {
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2bfe      	cmp	r3, #254	; 0xfe
 8001ed8:	d009      	beq.n	8001eee <SPISD_LeerSector+0x10e>
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET); //Subo CS
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6898      	ldr	r0, [r3, #8]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	899b      	ldrh	r3, [r3, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f001 ff7d 	bl	8003de4 <HAL_GPIO_WritePin>
		return 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e01d      	b.n	8001f2a <SPISD_LeerSector+0x14a>
	}
	//Si recibimos el 0xFE, entonces podemos recibir los 512+2 bytes (2 de CRC).
	HAL_SPI_Receive(spisd->puertoSPI, buffer, 512, 200);
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	23c8      	movs	r3, #200	; 0xc8
 8001ef4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	f006 f963 	bl	80081c4 <HAL_SPI_Receive>
	//Ahora falta el CRC
	recbuffer[0] = 0xFF;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001f00:	22ff      	movs	r2, #255	; 0xff
 8001f02:	701a      	strb	r2, [r3, #0]
	recbuffer[1] = 0xFF;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001f06:	22ff      	movs	r2, #255	; 0xff
 8001f08:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 2, 200);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	23c8      	movs	r3, #200	; 0xc8
 8001f10:	2202      	movs	r2, #2
 8001f12:	4909      	ldr	r1, [pc, #36]	; (8001f38 <SPISD_LeerSector+0x158>)
 8001f14:	f006 f956 	bl	80081c4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6898      	ldr	r0, [r3, #8]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	899b      	ldrh	r3, [r3, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	f001 ff5e 	bl	8003de4 <HAL_GPIO_WritePin>
	return 1;
 8001f28:	2301      	movs	r3, #1
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000003c 	.word	0x2000003c
 8001f38:	20000204 	.word	0x20000204

08001f3c <SPISD_EnviarComando>:

/**
 * Envia comando a la SD controlando CS.
 */
void SPISD_EnviarComando(SPISD *spisd, uint8_t *buffer, uint16_t cantidad) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	6898      	ldr	r0, [r3, #8]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	899b      	ldrh	r3, [r3, #12]
 8001f52:	2200      	movs	r2, #0
 8001f54:	4619      	mov	r1, r3
 8001f56:	f001 ff45 	bl	8003de4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, buffer, cantidad, 200);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6818      	ldr	r0, [r3, #0]
 8001f5e:	88fa      	ldrh	r2, [r7, #6]
 8001f60:	23c8      	movs	r3, #200	; 0xc8
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	f005 fff2 	bl	8007f4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6898      	ldr	r0, [r3, #8]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	899b      	ldrh	r3, [r3, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	4619      	mov	r1, r3
 8001f74:	f001 ff36 	bl	8003de4 <HAL_GPIO_WritePin>
}
 8001f78:	bf00      	nop
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <SPISD_RecibirRespuestaComando>:
/**
 * Recibe por SPI una cantidad de bytes de forma bloqueante.
 * Se asegura que la linea (MOSI) este en 1 mientras se recibe.
 */
void SPISD_RecibirRespuestaComando(SPISD *spisd, uint8_t *buffer,
		uint16_t cantidad) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	80fb      	strh	r3, [r7, #6]
	//Cuando se recibe, la linea debe quedar en 1, por ende ponemos 0xFF en cada byte
	//que se quiera transmitir.
	for (int i = 0; i < cantidad; i++) {
 8001f8e:	2300      	movs	r3, #0
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e007      	b.n	8001fa4 <SPISD_RecibirRespuestaComando+0x24>
		buffer[i] = 0xFF;
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	4413      	add	r3, r2
 8001f9a:	22ff      	movs	r2, #255	; 0xff
 8001f9c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < cantidad; i++) {
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	dbf3      	blt.n	8001f94 <SPISD_RecibirRespuestaComando+0x14>
	}
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	899b      	ldrh	r3, [r3, #12]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	f001 ff14 	bl	8003de4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(spisd->puertoSPI, buffer, cantidad, 200);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	23c8      	movs	r3, #200	; 0xc8
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	f006 f8fd 	bl	80081c4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6898      	ldr	r0, [r3, #8]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	899b      	ldrh	r3, [r3, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	f001 ff05 	bl	8003de4 <HAL_GPIO_WritePin>
}
 8001fda:	bf00      	nop
 8001fdc:	3718      	adds	r7, #24
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <SPISD_DetectarSD>:

/**
 * Ejecuta la secuencia de inicializacion. Detecta el tipo de tarjeta
 * y deja esa info en la estructura.
 */
uint8_t SPISD_DetectarSD(SPISD *spisd) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	//La SD recien insertada se encuentra en modo SD
	//Debemos enviar al menos 72 clocks con CS en 1
	spisd->FSM = Encendido;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6898      	ldr	r0, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	899b      	ldrh	r3, [r3, #12]
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f001 fef1 	bl	8003de4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	2364      	movs	r3, #100	; 0x64
 8002008:	220b      	movs	r2, #11
 800200a:	4957      	ldr	r1, [pc, #348]	; (8002168 <SPISD_DetectarSD+0x184>)
 800200c:	f005 ff9e 	bl	8007f4c <HAL_SPI_Transmit>
			100);
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6898      	ldr	r0, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	899b      	ldrh	r3, [r3, #12]
 8002018:	2200      	movs	r2, #0
 800201a:	4619      	mov	r1, r3
 800201c:	f001 fee2 	bl	8003de4 <HAL_GPIO_WritePin>
	//Ahora debemos enviar CMD0 (Software Reset)
	SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 8002020:	2207      	movs	r2, #7
 8002022:	4952      	ldr	r1, [pc, #328]	; (800216c <SPISD_DetectarSD+0x188>)
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff89 	bl	8001f3c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 800202a:	2201      	movs	r2, #1
 800202c:	4950      	ldr	r1, [pc, #320]	; (8002170 <SPISD_DetectarSD+0x18c>)
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff ffa6 	bl	8001f80 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 8002034:	4b4e      	ldr	r3, [pc, #312]	; (8002170 <SPISD_DetectarSD+0x18c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d026      	beq.n	800208a <SPISD_DetectarSD+0xa6>
		// Hubo un error, la SD no responde 0x01 al sw reset
		// Hacemos otro intento antes de desistir...
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6898      	ldr	r0, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	899b      	ldrh	r3, [r3, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	4619      	mov	r1, r3
 8002048:	f001 fecc 	bl	8003de4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	2364      	movs	r3, #100	; 0x64
 8002052:	220b      	movs	r2, #11
 8002054:	4944      	ldr	r1, [pc, #272]	; (8002168 <SPISD_DetectarSD+0x184>)
 8002056:	f005 ff79 	bl	8007f4c <HAL_SPI_Transmit>
				100);
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6898      	ldr	r0, [r3, #8]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	899b      	ldrh	r3, [r3, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	4619      	mov	r1, r3
 8002066:	f001 febd 	bl	8003de4 <HAL_GPIO_WritePin>
		//Ahora debemos enviar CMD0 (Software Reset)
		SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 800206a:	2207      	movs	r2, #7
 800206c:	493f      	ldr	r1, [pc, #252]	; (800216c <SPISD_DetectarSD+0x188>)
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff ff64 	bl	8001f3c <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8002074:	2201      	movs	r2, #1
 8002076:	493e      	ldr	r1, [pc, #248]	; (8002170 <SPISD_DetectarSD+0x18c>)
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff81 	bl	8001f80 <SPISD_RecibirRespuestaComando>

		if (recbuffer[0] != 0x01)
 800207e:	4b3c      	ldr	r3, [pc, #240]	; (8002170 <SPISD_DetectarSD+0x18c>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <SPISD_DetectarSD+0xa6>
			return 0; //Error en la SD, no responde.
 8002086:	2300      	movs	r3, #0
 8002088:	e069      	b.n	800215e <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = sinc;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2201      	movs	r2, #1
 800208e:	711a      	strb	r2, [r3, #4]
	//Ahora mandamos CMD8 (Check Voltage Range)
	SPISD_EnviarComando(spisd, SPISD_CMD8, sizeof(SPISD_CMD8));
 8002090:	2207      	movs	r2, #7
 8002092:	4938      	ldr	r1, [pc, #224]	; (8002174 <SPISD_DetectarSD+0x190>)
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff51 	bl	8001f3c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 800209a:	2206      	movs	r2, #6
 800209c:	4934      	ldr	r1, [pc, #208]	; (8002170 <SPISD_DetectarSD+0x18c>)
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff ff6e 	bl	8001f80 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 80020a4:	4b32      	ldr	r3, [pc, #200]	; (8002170 <SPISD_DetectarSD+0x18c>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <SPISD_DetectarSD+0xcc>
		// Hubo un error, la SD no responde 0x01 al check voltage range
		return 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	e056      	b.n	800215e <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = version;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	711a      	strb	r2, [r3, #4]

	//Ahora hay que mandar CMD55 y CMD41 (lo que genera ACMD41).
	//Este par va a devolver valores, pero en algun momento debe
	//devolver 0
	uint8_t reintento = 3;
 80020b6:	2303      	movs	r3, #3
 80020b8:	73fb      	strb	r3, [r7, #15]
	uint8_t encontrado = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73bb      	strb	r3, [r7, #14]
	while (reintento >= 0) {
		reintento--;
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3b01      	subs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
		SPISD_EnviarComando(spisd, SPISD_CMD55, sizeof(SPISD_CMD55));
 80020c4:	2207      	movs	r2, #7
 80020c6:	492c      	ldr	r1, [pc, #176]	; (8002178 <SPISD_DetectarSD+0x194>)
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff37 	bl	8001f3c <SPISD_EnviarComando>
		//Siempre a CMD55 debe responder 0x01.
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 80020ce:	2206      	movs	r2, #6
 80020d0:	4927      	ldr	r1, [pc, #156]	; (8002170 <SPISD_DetectarSD+0x18c>)
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f7ff ff54 	bl	8001f80 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] != 0x01) {
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <SPISD_DetectarSD+0x18c>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d001      	beq.n	80020e4 <SPISD_DetectarSD+0x100>

			return 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	e03c      	b.n	800215e <SPISD_DetectarSD+0x17a>
		}
		//Mando CMD41 lo cual genera ACMD41.
		SPISD_EnviarComando(spisd, SPISD_CMD41, sizeof(SPISD_CMD41));
 80020e4:	2207      	movs	r2, #7
 80020e6:	4925      	ldr	r1, [pc, #148]	; (800217c <SPISD_DetectarSD+0x198>)
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff ff27 	bl	8001f3c <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 80020ee:	2206      	movs	r2, #6
 80020f0:	491f      	ldr	r1, [pc, #124]	; (8002170 <SPISD_DetectarSD+0x18c>)
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff ff44 	bl	8001f80 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0x00, podemos continuar
		if (recbuffer[0] == 0x00) {
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <SPISD_DetectarSD+0x18c>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d106      	bne.n	800210e <SPISD_DetectarSD+0x12a>
			encontrado = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	73bb      	strb	r3, [r7, #14]
			break;
 8002104:	bf00      	nop
		}
		//Sino, demoramos 100ms y volvemos a probar.
		HAL_Delay(100);
	}
	if (encontrado) {
 8002106:	7bbb      	ldrb	r3, [r7, #14]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d016      	beq.n	800213a <SPISD_DetectarSD+0x156>
 800210c:	e003      	b.n	8002116 <SPISD_DetectarSD+0x132>
		HAL_Delay(100);
 800210e:	2064      	movs	r0, #100	; 0x64
 8002110:	f001 faf6 	bl	8003700 <HAL_Delay>
		reintento--;
 8002114:	e7d3      	b.n	80020be <SPISD_DetectarSD+0xda>
		spisd->FSM = initCheck;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2203      	movs	r2, #3
 800211a:	711a      	strb	r2, [r3, #4]
	} else {
		return 0;
	}
	//Enviamos Comando 58 , para saber que tipo de memoria SD tenemos.
	SPISD_EnviarComando(spisd, SPISD_CMD58, sizeof(SPISD_CMD58));
 800211c:	2207      	movs	r2, #7
 800211e:	4918      	ldr	r1, [pc, #96]	; (8002180 <SPISD_DetectarSD+0x19c>)
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff0b 	bl	8001f3c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 5);
 8002126:	2205      	movs	r2, #5
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <SPISD_DetectarSD+0x18c>)
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ff28 	bl	8001f80 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x00) {
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <SPISD_DetectarSD+0x18c>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <SPISD_DetectarSD+0x15e>
 8002138:	e001      	b.n	800213e <SPISD_DetectarSD+0x15a>
		return 0;
 800213a:	2300      	movs	r3, #0
 800213c:	e00f      	b.n	800215e <SPISD_DetectarSD+0x17a>
		// Fallo el CMD58
		return 0;
 800213e:	2300      	movs	r3, #0
 8002140:	e00d      	b.n	800215e <SPISD_DetectarSD+0x17a>
	}
	//Este comando informa si la SD es HC
	if ((recbuffer[1] & 0x40)) {
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <SPISD_DetectarSD+0x18c>)
 8002144:	785b      	ldrb	r3, [r3, #1]
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <SPISD_DetectarSD+0x172>
		//La SD direcciona al sector (SDHC)
		spisd->sectorAddressing = 1;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	739a      	strb	r2, [r3, #14]
 8002154:	e002      	b.n	800215c <SPISD_DetectarSD+0x178>
	} else {
		//La SD direcciona al byte (SD)
		spisd->sectorAddressing = 0;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	739a      	strb	r2, [r3, #14]
	}
	return 1;
 800215c:	2301      	movs	r3, #1

}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008
 800216c:	20000014 	.word	0x20000014
 8002170:	20000204 	.word	0x20000204
 8002174:	2000001c 	.word	0x2000001c
 8002178:	20000024 	.word	0x20000024
 800217c:	2000002c 	.word	0x2000002c
 8002180:	20000034 	.word	0x20000034

08002184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b096      	sub	sp, #88	; 0x58
 8002188:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800218a:	f001 fa69 	bl	8003660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800218e:	f000 fa45 	bl	800261c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  spisd.FSM=Encendido;
 8002192:	4b81      	ldr	r3, [pc, #516]	; (8002398 <main+0x214>)
 8002194:	2200      	movs	r2, #0
 8002196:	711a      	strb	r2, [r3, #4]
  spisd.csPuerto = GPIOB;
 8002198:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <main+0x214>)
 800219a:	4a80      	ldr	r2, [pc, #512]	; (800239c <main+0x218>)
 800219c:	609a      	str	r2, [r3, #8]
  spisd.csPin = SPI2_CSS_Pin;
 800219e:	4b7e      	ldr	r3, [pc, #504]	; (8002398 <main+0x214>)
 80021a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a4:	819a      	strh	r2, [r3, #12]
  spisd.puertoSPI = &hspi2;
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <main+0x214>)
 80021a8:	4a7d      	ldr	r2, [pc, #500]	; (80023a0 <main+0x21c>)
 80021aa:	601a      	str	r2, [r3, #0]
  spisd.sectorAddressing=1; //Asumimos SDHC (+2GB)
 80021ac:	4b7a      	ldr	r3, [pc, #488]	; (8002398 <main+0x214>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	739a      	strb	r2, [r3, #14]
  spisd.hrtc = &hrtc;
 80021b2:	4b79      	ldr	r3, [pc, #484]	; (8002398 <main+0x214>)
 80021b4:	4a7b      	ldr	r2, [pc, #492]	; (80023a4 <main+0x220>)
 80021b6:	611a      	str	r2, [r3, #16]
  pRTC=&hrtc;
 80021b8:	4b7b      	ldr	r3, [pc, #492]	; (80023a8 <main+0x224>)
 80021ba:	4a7a      	ldr	r2, [pc, #488]	; (80023a4 <main+0x220>)
 80021bc:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021be:	f000 fba9 	bl	8002914 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021c2:	f000 fa89 	bl	80026d8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021c6:	f000 fab5 	bl	8002734 <MX_I2C2_Init>
  MX_SPI2_Init();
 80021ca:	f000 fb2b 	bl	8002824 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80021ce:	f000 fb5f 	bl	8002890 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80021d2:	f007 f97d 	bl	80094d0 <MX_FATFS_Init>
  MX_RTC_Init();
 80021d6:	f000 fadb 	bl	8002790 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80021da:	f000 fd5d 	bl	8002c98 <SSD1306_Init>
  MAX30100_Init();
 80021de:	f7fe ff67 	bl	80010b0 <MAX30100_Init>
  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 80021e2:	2201      	movs	r2, #1
 80021e4:	4971      	ldr	r1, [pc, #452]	; (80023ac <main+0x228>)
 80021e6:	4872      	ldr	r0, [pc, #456]	; (80023b0 <main+0x22c>)
 80021e8:	f006 fd19 	bl	8008c1e <HAL_UART_Receive_IT>

  SSD1306_GotoXY(40, 0);
 80021ec:	2100      	movs	r1, #0
 80021ee:	2028      	movs	r0, #40	; 0x28
 80021f0:	f000 feba 	bl	8002f68 <SSD1306_GotoXY>
  SSD1306_Puts("OXY",&Font_16x26,1);
 80021f4:	2201      	movs	r2, #1
 80021f6:	496f      	ldr	r1, [pc, #444]	; (80023b4 <main+0x230>)
 80021f8:	486f      	ldr	r0, [pc, #444]	; (80023b8 <main+0x234>)
 80021fa:	f000 ff4b 	bl	8003094 <SSD1306_Puts>
  SSD1306_GotoXY(25, 24);
 80021fe:	2118      	movs	r1, #24
 8002200:	2019      	movs	r0, #25
 8002202:	f000 feb1 	bl	8002f68 <SSD1306_GotoXY>
  SSD1306_Puts("PULSE",&Font_16x26,1);
 8002206:	2201      	movs	r2, #1
 8002208:	496a      	ldr	r1, [pc, #424]	; (80023b4 <main+0x230>)
 800220a:	486c      	ldr	r0, [pc, #432]	; (80023bc <main+0x238>)
 800220c:	f000 ff42 	bl	8003094 <SSD1306_Puts>
  SSD1306_GotoXY(10, 50);
 8002210:	2132      	movs	r1, #50	; 0x32
 8002212:	200a      	movs	r0, #10
 8002214:	f000 fea8 	bl	8002f68 <SSD1306_GotoXY>
  SSD1306_Puts("...Iniciando...",&Font_7x10,1);
 8002218:	2201      	movs	r2, #1
 800221a:	4969      	ldr	r1, [pc, #420]	; (80023c0 <main+0x23c>)
 800221c:	4869      	ldr	r0, [pc, #420]	; (80023c4 <main+0x240>)
 800221e:	f000 ff39 	bl	8003094 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8002222:	f000 fdfd 	bl	8002e20 <SSD1306_UpdateScreen>

   f_mount(&USERFatFS,USERPath,0);
 8002226:	2200      	movs	r2, #0
 8002228:	4967      	ldr	r1, [pc, #412]	; (80023c8 <main+0x244>)
 800222a:	4868      	ldr	r0, [pc, #416]	; (80023cc <main+0x248>)
 800222c:	f009 f902 	bl	800b434 <f_mount>
   f_open(&USERFile,"InformeOxy.txt",FA_CREATE_ALWAYS | FA_WRITE);
 8002230:	220a      	movs	r2, #10
 8002232:	4967      	ldr	r1, [pc, #412]	; (80023d0 <main+0x24c>)
 8002234:	4867      	ldr	r0, [pc, #412]	; (80023d4 <main+0x250>)
 8002236:	f009 f945 	bl	800b4c4 <f_open>
   uint32_t output;
   if (f_write(&USERFile,"OXY_PULSE",sizeof("OXY_PULSE"),(void*)&output)==FR_OK)
 800223a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800223e:	220a      	movs	r2, #10
 8002240:	4965      	ldr	r1, [pc, #404]	; (80023d8 <main+0x254>)
 8002242:	4864      	ldr	r0, [pc, #400]	; (80023d4 <main+0x250>)
 8002244:	f009 fbb7 	bl	800b9b6 <f_write>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d108      	bne.n	8002260 <main+0xdc>
   {
 	  if (f_sync(&USERFile)==FR_OK){
 800224e:	4861      	ldr	r0, [pc, #388]	; (80023d4 <main+0x250>)
 8002250:	f009 fd5e 	bl	800bd10 <f_sync>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <main+0xdc>
 		  f_close(&USERFile);
 800225a:	485e      	ldr	r0, [pc, #376]	; (80023d4 <main+0x250>)
 800225c:	f009 fe12 	bl	800be84 <f_close>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado){
 8002260:	4b5e      	ldr	r3, [pc, #376]	; (80023dc <main+0x258>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b04      	cmp	r3, #4
 8002266:	d8fb      	bhi.n	8002260 <main+0xdc>
 8002268:	a201      	add	r2, pc, #4	; (adr r2, 8002270 <main+0xec>)
 800226a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800226e:	bf00      	nop
 8002270:	08002285 	.word	0x08002285
 8002274:	080022af 	.word	0x080022af
 8002278:	08002369 	.word	0x08002369
 800227c:	08002411 	.word	0x08002411
 8002280:	08002509 	.word	0x08002509
	  case INICIANDO:
		  SSD1306_ScrollRight(0x06, 0x07);
 8002284:	2107      	movs	r1, #7
 8002286:	2006      	movs	r0, #6
 8002288:	f000 fc5f 	bl	8002b4a <SSD1306_ScrollRight>
		  if(!contador)
 800228c:	4b54      	ldr	r3, [pc, #336]	; (80023e0 <main+0x25c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	f040 81a5 	bne.w	80025e0 <main+0x45c>
		  {
			  estado=PREPARADO;
 8002296:	4b51      	ldr	r3, [pc, #324]	; (80023dc <main+0x258>)
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
			  contador=DEMORA;
 800229c:	4b50      	ldr	r3, [pc, #320]	; (80023e0 <main+0x25c>)
 800229e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80022a2:	801a      	strh	r2, [r3, #0]
			  SSD1306_Stopscroll();
 80022a4:	f000 fc87 	bl	8002bb6 <SSD1306_Stopscroll>
			  SSD1306_Clear();
 80022a8:	f000 ff19 	bl	80030de <SSD1306_Clear>

		  }
		  break;
 80022ac:	e198      	b.n	80025e0 <main+0x45c>
	  case PREPARADO:
		  SSD1306_DrawBitmap(0, 0, LOGO, 128, 64, 1);
 80022ae:	2301      	movs	r3, #1
 80022b0:	9301      	str	r3, [sp, #4]
 80022b2:	2340      	movs	r3, #64	; 0x40
 80022b4:	9300      	str	r3, [sp, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <main+0x260>)
 80022ba:	2100      	movs	r1, #0
 80022bc:	2000      	movs	r0, #0
 80022be:	f000 fc83 	bl	8002bc8 <SSD1306_DrawBitmap>
		  SSD1306_GotoXY(70, 0);
 80022c2:	2100      	movs	r1, #0
 80022c4:	2046      	movs	r0, #70	; 0x46
 80022c6:	f000 fe4f 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts("'OK'",&Font_11x18,1);
 80022ca:	2201      	movs	r2, #1
 80022cc:	4946      	ldr	r1, [pc, #280]	; (80023e8 <main+0x264>)
 80022ce:	4847      	ldr	r0, [pc, #284]	; (80023ec <main+0x268>)
 80022d0:	f000 fee0 	bl	8003094 <SSD1306_Puts>
		  SSD1306_GotoXY(80, 27);
 80022d4:	211b      	movs	r1, #27
 80022d6:	2050      	movs	r0, #80	; 0x50
 80022d8:	f000 fe46 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts("para",&Font_7x10,1);
 80022dc:	2201      	movs	r2, #1
 80022de:	4938      	ldr	r1, [pc, #224]	; (80023c0 <main+0x23c>)
 80022e0:	4843      	ldr	r0, [pc, #268]	; (80023f0 <main+0x26c>)
 80022e2:	f000 fed7 	bl	8003094 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 50);
 80022e6:	2132      	movs	r1, #50	; 0x32
 80022e8:	2046      	movs	r0, #70	; 0x46
 80022ea:	f000 fe3d 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts("iniciar",&Font_7x10,1);
 80022ee:	2201      	movs	r2, #1
 80022f0:	4933      	ldr	r1, [pc, #204]	; (80023c0 <main+0x23c>)
 80022f2:	4840      	ldr	r0, [pc, #256]	; (80023f4 <main+0x270>)
 80022f4:	f000 fece 	bl	8003094 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80022f8:	f000 fd92 	bl	8002e20 <SSD1306_UpdateScreen>



		  if(!contador && flag_pulsador)
 80022fc:	4b38      	ldr	r3, [pc, #224]	; (80023e0 <main+0x25c>)
 80022fe:	881b      	ldrh	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10c      	bne.n	800231e <main+0x19a>
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <main+0x274>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <main+0x19a>
		  {
			  estado=MIDIENDO;
 800230c:	4b33      	ldr	r3, [pc, #204]	; (80023dc <main+0x258>)
 800230e:	2202      	movs	r2, #2
 8002310:	701a      	strb	r2, [r3, #0]
			  MAX30100_I2C_Reset_FIFO();
 8002312:	f7ff fc2d 	bl	8001b70 <MAX30100_I2C_Reset_FIFO>
			  counter=DEMORA4;
 8002316:	4b39      	ldr	r3, [pc, #228]	; (80023fc <main+0x278>)
 8002318:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800231c:	801a      	strh	r2, [r3, #0]
			  //contador=DEMORA3;
			  //Resetea_Resultados(&result,&meanfilter,currentSaO2Value);
		  }
		  if(flag_limpiar)
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <main+0x27c>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d004      	beq.n	8002330 <main+0x1ac>
		  {
			  SSD1306_Clear();
 8002326:	f000 feda 	bl	80030de <SSD1306_Clear>
			  flag_limpiar=0;
 800232a:	4b35      	ldr	r3, [pc, #212]	; (8002400 <main+0x27c>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
		  }
		  if(contador && !flag_pulsador)
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <main+0x25c>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8155 	beq.w	80025e4 <main+0x460>
 800233a:	4b2f      	ldr	r3, [pc, #188]	; (80023f8 <main+0x274>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	f083 0301 	eor.w	r3, r3, #1
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 814d 	beq.w	80025e4 <main+0x460>
		  {
			  HAL_UART_Transmit(&huart2, mensaje_START, sizeof(mensaje_START), HAL_MAX_DELAY);
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
 800234e:	2213      	movs	r2, #19
 8002350:	492c      	ldr	r1, [pc, #176]	; (8002404 <main+0x280>)
 8002352:	4817      	ldr	r0, [pc, #92]	; (80023b0 <main+0x22c>)
 8002354:	f006 fb2f 	bl	80089b6 <HAL_UART_Transmit>
			  HAL_UART_Receive(&huart2, &byte, sizeof(byte),HAL_MAX_DELAY);
 8002358:	f04f 33ff 	mov.w	r3, #4294967295
 800235c:	2201      	movs	r2, #1
 800235e:	4913      	ldr	r1, [pc, #76]	; (80023ac <main+0x228>)
 8002360:	4813      	ldr	r0, [pc, #76]	; (80023b0 <main+0x22c>)
 8002362:	f006 fbba 	bl	8008ada <HAL_UART_Receive>
			  //HAL_UART_Transmit(&huart2,mensaje_START, strlen((char*)mensaje_START));
		  }
		  break;
 8002366:	e13d      	b.n	80025e4 <main+0x460>
	  case MIDIENDO:

		  result=Actualizar_Resultados();
 8002368:	4c27      	ldr	r4, [pc, #156]	; (8002408 <main+0x284>)
 800236a:	463b      	mov	r3, r7
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe ff7f 	bl	8001270 <Actualizar_Resultados>
 8002372:	4625      	mov	r5, r4
 8002374:	463c      	mov	r4, r7
 8002376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237e:	6823      	ldr	r3, [r4, #0]
 8002380:	602b      	str	r3, [r5, #0]

				if (byte == 'b')
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
			}
*/
		  estado=PRESENTACION;
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <main+0x258>)
 8002384:	2203      	movs	r2, #3
 8002386:	701a      	strb	r2, [r3, #0]
		  contador=DEMORA3; //DEMORA DE 27ms PARA LA CORRECTA EJECUCION DEL FILTRADO
 8002388:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <main+0x25c>)
 800238a:	221c      	movs	r2, #28
 800238c:	801a      	strh	r2, [r3, #0]
		  cuenta=0;
 800238e:	4b1f      	ldr	r3, [pc, #124]	; (800240c <main+0x288>)
 8002390:	2200      	movs	r2, #0
 8002392:	801a      	strh	r2, [r3, #0]

		  break;
 8002394:	e129      	b.n	80025ea <main+0x466>
 8002396:	bf00      	nop
 8002398:	20000388 	.word	0x20000388
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	200002c8 	.word	0x200002c8
 80023a4:	200002b4 	.word	0x200002b4
 80023a8:	200003a4 	.word	0x200003a4
 80023ac:	2000039f 	.word	0x2000039f
 80023b0:	20000320 	.word	0x20000320
 80023b4:	2000005c 	.word	0x2000005c
 80023b8:	0800ce78 	.word	0x0800ce78
 80023bc:	0800ce7c 	.word	0x0800ce7c
 80023c0:	2000004c 	.word	0x2000004c
 80023c4:	0800ce84 	.word	0x0800ce84
 80023c8:	200007bc 	.word	0x200007bc
 80023cc:	200007c0 	.word	0x200007c0
 80023d0:	0800ce94 	.word	0x0800ce94
 80023d4:	200009f0 	.word	0x200009f0
 80023d8:	0800cea4 	.word	0x0800cea4
 80023dc:	2000039e 	.word	0x2000039e
 80023e0:	20000068 	.word	0x20000068
 80023e4:	0800f758 	.word	0x0800f758
 80023e8:	20000054 	.word	0x20000054
 80023ec:	0800ceb0 	.word	0x0800ceb0
 80023f0:	0800ceb8 	.word	0x0800ceb8
 80023f4:	0800cec0 	.word	0x0800cec0
 80023f8:	200003a0 	.word	0x200003a0
 80023fc:	2000039c 	.word	0x2000039c
 8002400:	200003a1 	.word	0x200003a1
 8002404:	2000006c 	.word	0x2000006c
 8002408:	20000364 	.word	0x20000364
 800240c:	2000006a 	.word	0x2000006a
	  case PRESENTACION:
		  if(result.pulseDetected == true && true)
 8002410:	4b76      	ldr	r3, [pc, #472]	; (80025ec <main+0x468>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d062      	beq.n	80024de <main+0x35a>
		  {
		  buf2=(uint8_t)result.SaO2;
 8002418:	4b74      	ldr	r3, [pc, #464]	; (80025ec <main+0x468>)
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe fe27 	bl	8001070 <__aeabi_f2uiz>
 8002422:	4603      	mov	r3, r0
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b72      	ldr	r3, [pc, #456]	; (80025f0 <main+0x46c>)
 8002428:	701a      	strb	r2, [r3, #0]
		  buf1=(uint8_t)result.heartBPM;
 800242a:	4b70      	ldr	r3, [pc, #448]	; (80025ec <main+0x468>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe fe1e 	bl	8001070 <__aeabi_f2uiz>
 8002434:	4603      	mov	r3, r0
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b6e      	ldr	r3, [pc, #440]	; (80025f4 <main+0x470>)
 800243a:	701a      	strb	r2, [r3, #0]
		  char buffer_bpm[5]={0};
 800243c:	2300      	movs	r3, #0
 800243e:	647b      	str	r3, [r7, #68]	; 0x44
 8002440:	2300      	movs	r3, #0
 8002442:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
		  char buffer_SO2[5]={0};
 8002446:	2300      	movs	r3, #0
 8002448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244a:	2300      	movs	r3, #0
 800244c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

		  //buf1=56;
		  //buf2=94;
		  //itoa(buf1,buffer_bpm,5);
		  //itoa(buf2,buffer_SO2,5);
		  sprintf(buffer_bpm,"%u",buf1);
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <main+0x470>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	461a      	mov	r2, r3
 8002456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800245a:	4967      	ldr	r1, [pc, #412]	; (80025f8 <main+0x474>)
 800245c:	4618      	mov	r0, r3
 800245e:	f009 fdc5 	bl	800bfec <siprintf>
		  sprintf(buffer_SO2,"%u",buf2);
 8002462:	4b63      	ldr	r3, [pc, #396]	; (80025f0 <main+0x46c>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	461a      	mov	r2, r3
 8002468:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800246c:	4962      	ldr	r1, [pc, #392]	; (80025f8 <main+0x474>)
 800246e:	4618      	mov	r0, r3
 8002470:	f009 fdbc 	bl	800bfec <siprintf>

		  //buffer_bpm[0]=5;
		  //buffer_bpm[1]=6;
		  SSD1306_Clear();
 8002474:	f000 fe33 	bl	80030de <SSD1306_Clear>
		  SSD1306_GotoXY(10, 5);
 8002478:	2105      	movs	r1, #5
 800247a:	200a      	movs	r0, #10
 800247c:	f000 fd74 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts("BPM:",&Font_11x18,1);
 8002480:	2201      	movs	r2, #1
 8002482:	495e      	ldr	r1, [pc, #376]	; (80025fc <main+0x478>)
 8002484:	485e      	ldr	r0, [pc, #376]	; (8002600 <main+0x47c>)
 8002486:	f000 fe05 	bl	8003094 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 5);
 800248a:	2105      	movs	r1, #5
 800248c:	2046      	movs	r0, #70	; 0x46
 800248e:	f000 fd6b 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts(buffer_bpm,&Font_11x18,1);
 8002492:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002496:	2201      	movs	r2, #1
 8002498:	4958      	ldr	r1, [pc, #352]	; (80025fc <main+0x478>)
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fdfa 	bl	8003094 <SSD1306_Puts>
		  //SSD1306_Putc(buf1, &Font_11x18, 1);
		  SSD1306_GotoXY(10, 35);
 80024a0:	2123      	movs	r1, #35	; 0x23
 80024a2:	200a      	movs	r0, #10
 80024a4:	f000 fd60 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts("SO2:",&Font_11x18,1);
 80024a8:	2201      	movs	r2, #1
 80024aa:	4954      	ldr	r1, [pc, #336]	; (80025fc <main+0x478>)
 80024ac:	4855      	ldr	r0, [pc, #340]	; (8002604 <main+0x480>)
 80024ae:	f000 fdf1 	bl	8003094 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 35);
 80024b2:	2123      	movs	r1, #35	; 0x23
 80024b4:	2046      	movs	r0, #70	; 0x46
 80024b6:	f000 fd57 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts(buffer_SO2,&Font_11x18,1);
 80024ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80024be:	2201      	movs	r2, #1
 80024c0:	494e      	ldr	r1, [pc, #312]	; (80025fc <main+0x478>)
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fde6 	bl	8003094 <SSD1306_Puts>
		  //SSD1306_Putc(buf2, &Font_11x18, 1);
		  SSD1306_GotoXY(90, 35);
 80024c8:	2123      	movs	r1, #35	; 0x23
 80024ca:	205a      	movs	r0, #90	; 0x5a
 80024cc:	f000 fd4c 	bl	8002f68 <SSD1306_GotoXY>
		  SSD1306_Puts(" %",&Font_11x18,1);
 80024d0:	2201      	movs	r2, #1
 80024d2:	494a      	ldr	r1, [pc, #296]	; (80025fc <main+0x478>)
 80024d4:	484c      	ldr	r0, [pc, #304]	; (8002608 <main+0x484>)
 80024d6:	f000 fddd 	bl	8003094 <SSD1306_Puts>

		  SSD1306_UpdateScreen();
 80024da:	f000 fca1 	bl	8002e20 <SSD1306_UpdateScreen>
		  //ir_dcfiltrado=0;
		  //ir_lpbfiltrado=0;
		  //red_dcfiltrado=0;
		  //REDprev_w=0;
		  }
		  if(!contador)
 80024de:	4b4b      	ldr	r3, [pc, #300]	; (800260c <main+0x488>)
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <main+0x36e>
		  {
			  estado=MIDIENDO;
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <main+0x48c>)
 80024e8:	2202      	movs	r2, #2
 80024ea:	701a      	strb	r2, [r3, #0]
			  contador=0;
 80024ec:	4b47      	ldr	r3, [pc, #284]	; (800260c <main+0x488>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	801a      	strh	r2, [r3, #0]
		  }
		  if(!counter)
 80024f2:	4b48      	ldr	r3, [pc, #288]	; (8002614 <main+0x490>)
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d176      	bne.n	80025e8 <main+0x464>
		  {
			  estado=DATOS_FINALES;
 80024fa:	4b45      	ldr	r3, [pc, #276]	; (8002610 <main+0x48c>)
 80024fc:	2204      	movs	r2, #4
 80024fe:	701a      	strb	r2, [r3, #0]
			  flag_final=1;
 8002500:	4b45      	ldr	r3, [pc, #276]	; (8002618 <main+0x494>)
 8002502:	2201      	movs	r2, #1
 8002504:	701a      	strb	r2, [r3, #0]
				  flag_HR_ON=1;
				  Inicio_Heart_Rate();
			  }
			  */

		  break;
 8002506:	e06f      	b.n	80025e8 <main+0x464>
	  case DATOS_FINALES:
		  if(flag_final){
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <main+0x494>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	f43f aea7 	beq.w	8002260 <main+0xdc>
			  buf2=(uint8_t)result.SaO2;
 8002512:	4b36      	ldr	r3, [pc, #216]	; (80025ec <main+0x468>)
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fdaa 	bl	8001070 <__aeabi_f2uiz>
 800251c:	4603      	mov	r3, r0
 800251e:	b2da      	uxtb	r2, r3
 8002520:	4b33      	ldr	r3, [pc, #204]	; (80025f0 <main+0x46c>)
 8002522:	701a      	strb	r2, [r3, #0]
			  buf1=(uint8_t)result.heartBPM;
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <main+0x468>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fe fda1 	bl	8001070 <__aeabi_f2uiz>
 800252e:	4603      	mov	r3, r0
 8002530:	b2da      	uxtb	r2, r3
 8002532:	4b30      	ldr	r3, [pc, #192]	; (80025f4 <main+0x470>)
 8002534:	701a      	strb	r2, [r3, #0]
			  char buffer_bpm[5]={0};
 8002536:	2300      	movs	r3, #0
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
 800253a:	2300      	movs	r3, #0
 800253c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
			  char buffer_SO2[5]={0};
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002544:	2300      	movs	r3, #0
 8002546:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			  sprintf(buffer_bpm,"%u",buf1);
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <main+0x470>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002554:	4928      	ldr	r1, [pc, #160]	; (80025f8 <main+0x474>)
 8002556:	4618      	mov	r0, r3
 8002558:	f009 fd48 	bl	800bfec <siprintf>
			  sprintf(buffer_SO2,"%u",buf2);
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <main+0x46c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002566:	4924      	ldr	r1, [pc, #144]	; (80025f8 <main+0x474>)
 8002568:	4618      	mov	r0, r3
 800256a:	f009 fd3f 	bl	800bfec <siprintf>
			  SSD1306_Clear();
 800256e:	f000 fdb6 	bl	80030de <SSD1306_Clear>
			  SSD1306_GotoXY(10, 5);
 8002572:	2105      	movs	r1, #5
 8002574:	200a      	movs	r0, #10
 8002576:	f000 fcf7 	bl	8002f68 <SSD1306_GotoXY>
			  SSD1306_Puts("BPM:",&Font_11x18,1);
 800257a:	2201      	movs	r2, #1
 800257c:	491f      	ldr	r1, [pc, #124]	; (80025fc <main+0x478>)
 800257e:	4820      	ldr	r0, [pc, #128]	; (8002600 <main+0x47c>)
 8002580:	f000 fd88 	bl	8003094 <SSD1306_Puts>
			  SSD1306_GotoXY(70, 5);
 8002584:	2105      	movs	r1, #5
 8002586:	2046      	movs	r0, #70	; 0x46
 8002588:	f000 fcee 	bl	8002f68 <SSD1306_GotoXY>
			  SSD1306_Puts(buffer_bpm,&Font_11x18,1);
 800258c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002590:	2201      	movs	r2, #1
 8002592:	491a      	ldr	r1, [pc, #104]	; (80025fc <main+0x478>)
 8002594:	4618      	mov	r0, r3
 8002596:	f000 fd7d 	bl	8003094 <SSD1306_Puts>
			  SSD1306_GotoXY(10, 35);
 800259a:	2123      	movs	r1, #35	; 0x23
 800259c:	200a      	movs	r0, #10
 800259e:	f000 fce3 	bl	8002f68 <SSD1306_GotoXY>
			  SSD1306_Puts("SO2:",&Font_11x18,1);
 80025a2:	2201      	movs	r2, #1
 80025a4:	4915      	ldr	r1, [pc, #84]	; (80025fc <main+0x478>)
 80025a6:	4817      	ldr	r0, [pc, #92]	; (8002604 <main+0x480>)
 80025a8:	f000 fd74 	bl	8003094 <SSD1306_Puts>
			  SSD1306_GotoXY(70, 35);
 80025ac:	2123      	movs	r1, #35	; 0x23
 80025ae:	2046      	movs	r0, #70	; 0x46
 80025b0:	f000 fcda 	bl	8002f68 <SSD1306_GotoXY>
			  SSD1306_Puts(buffer_SO2,&Font_11x18,1);
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	2201      	movs	r2, #1
 80025ba:	4910      	ldr	r1, [pc, #64]	; (80025fc <main+0x478>)
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fd69 	bl	8003094 <SSD1306_Puts>
			  SSD1306_GotoXY(90, 35);
 80025c2:	2123      	movs	r1, #35	; 0x23
 80025c4:	205a      	movs	r0, #90	; 0x5a
 80025c6:	f000 fccf 	bl	8002f68 <SSD1306_GotoXY>
			  SSD1306_Puts(" %",&Font_11x18,1);
 80025ca:	2201      	movs	r2, #1
 80025cc:	490b      	ldr	r1, [pc, #44]	; (80025fc <main+0x478>)
 80025ce:	480e      	ldr	r0, [pc, #56]	; (8002608 <main+0x484>)
 80025d0:	f000 fd60 	bl	8003094 <SSD1306_Puts>
		//	  SSD1306_DrawBitmap(98, 4, TILDE_OK, 128, 64, 1);
			  SSD1306_UpdateScreen();
 80025d4:	f000 fc24 	bl	8002e20 <SSD1306_UpdateScreen>
			  flag_final=0;
 80025d8:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <main+0x494>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	e63f      	b.n	8002260 <main+0xdc>
		  break;
 80025e0:	bf00      	nop
 80025e2:	e63d      	b.n	8002260 <main+0xdc>
		  break;
 80025e4:	bf00      	nop
 80025e6:	e63b      	b.n	8002260 <main+0xdc>
		  break;
 80025e8:	bf00      	nop
	  switch(estado){
 80025ea:	e639      	b.n	8002260 <main+0xdc>
 80025ec:	20000364 	.word	0x20000364
 80025f0:	200003a3 	.word	0x200003a3
 80025f4:	200003a2 	.word	0x200003a2
 80025f8:	0800cec8 	.word	0x0800cec8
 80025fc:	20000054 	.word	0x20000054
 8002600:	0800cecc 	.word	0x0800cecc
 8002604:	0800ced4 	.word	0x0800ced4
 8002608:	0800cedc 	.word	0x0800cedc
 800260c:	20000068 	.word	0x20000068
 8002610:	2000039e 	.word	0x2000039e
 8002614:	2000039c 	.word	0x2000039c
 8002618:	2000007f 	.word	0x2000007f

0800261c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b094      	sub	sp, #80	; 0x50
 8002620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002626:	2228      	movs	r2, #40	; 0x28
 8002628:	2100      	movs	r1, #0
 800262a:	4618      	mov	r0, r3
 800262c:	f009 fcd6 	bl	800bfdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002630:	f107 0314 	add.w	r3, r7, #20
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
 8002646:	605a      	str	r2, [r3, #4]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800264c:	2309      	movs	r3, #9
 800264e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002650:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002656:	2300      	movs	r3, #0
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800265a:	2301      	movs	r3, #1
 800265c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800265e:	2301      	movs	r3, #1
 8002660:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002662:	2302      	movs	r3, #2
 8002664:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002666:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800266a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800266c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002670:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002676:	4618      	mov	r0, r3
 8002678:	f004 f8a2 	bl	80067c0 <HAL_RCC_OscConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8002682:	f000 fa5d 	bl	8002b40 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002686:	230f      	movs	r3, #15
 8002688:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800268a:	2302      	movs	r3, #2
 800268c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002696:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	2102      	movs	r1, #2
 80026a2:	4618      	mov	r0, r3
 80026a4:	f004 fb0e 	bl	8006cc4 <HAL_RCC_ClockConfig>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80026ae:	f000 fa47 	bl	8002b40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026b2:	2301      	movs	r3, #1
 80026b4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026ba:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026bc:	1d3b      	adds	r3, r7, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f004 fc98 	bl	8006ff4 <HAL_RCCEx_PeriphCLKConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80026ca:	f000 fa39 	bl	8002b40 <Error_Handler>
  }
}
 80026ce:	bf00      	nop
 80026d0:	3750      	adds	r7, #80	; 0x50
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026dc:	4b12      	ldr	r3, [pc, #72]	; (8002728 <MX_I2C1_Init+0x50>)
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <MX_I2C1_Init+0x54>)
 80026e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <MX_I2C1_Init+0x50>)
 80026e4:	4a12      	ldr	r2, [pc, #72]	; (8002730 <MX_I2C1_Init+0x58>)
 80026e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <MX_I2C1_Init+0x50>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <MX_I2C1_Init+0x50>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <MX_I2C1_Init+0x50>)
 80026f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fc:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <MX_I2C1_Init+0x50>)
 80026fe:	2200      	movs	r2, #0
 8002700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <MX_I2C1_Init+0x50>)
 8002704:	2200      	movs	r2, #0
 8002706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002708:	4b07      	ldr	r3, [pc, #28]	; (8002728 <MX_I2C1_Init+0x50>)
 800270a:	2200      	movs	r2, #0
 800270c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800270e:	4b06      	ldr	r3, [pc, #24]	; (8002728 <MX_I2C1_Init+0x50>)
 8002710:	2200      	movs	r2, #0
 8002712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002714:	4804      	ldr	r0, [pc, #16]	; (8002728 <MX_I2C1_Init+0x50>)
 8002716:	f001 fb95 	bl	8003e44 <HAL_I2C_Init>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002720:	f000 fa0e 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002724:	bf00      	nop
 8002726:	bd80      	pop	{r7, pc}
 8002728:	2000020c 	.word	0x2000020c
 800272c:	40005400 	.word	0x40005400
 8002730:	000186a0 	.word	0x000186a0

08002734 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <MX_I2C2_Init+0x50>)
 800273a:	4a13      	ldr	r2, [pc, #76]	; (8002788 <MX_I2C2_Init+0x54>)
 800273c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800273e:	4b11      	ldr	r3, [pc, #68]	; (8002784 <MX_I2C2_Init+0x50>)
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <MX_I2C2_Init+0x58>)
 8002742:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002744:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <MX_I2C2_Init+0x50>)
 8002746:	2200      	movs	r2, #0
 8002748:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800274a:	4b0e      	ldr	r3, [pc, #56]	; (8002784 <MX_I2C2_Init+0x50>)
 800274c:	2200      	movs	r2, #0
 800274e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002750:	4b0c      	ldr	r3, [pc, #48]	; (8002784 <MX_I2C2_Init+0x50>)
 8002752:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002756:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002758:	4b0a      	ldr	r3, [pc, #40]	; (8002784 <MX_I2C2_Init+0x50>)
 800275a:	2200      	movs	r2, #0
 800275c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800275e:	4b09      	ldr	r3, [pc, #36]	; (8002784 <MX_I2C2_Init+0x50>)
 8002760:	2200      	movs	r2, #0
 8002762:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <MX_I2C2_Init+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <MX_I2C2_Init+0x50>)
 800276c:	2200      	movs	r2, #0
 800276e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002770:	4804      	ldr	r0, [pc, #16]	; (8002784 <MX_I2C2_Init+0x50>)
 8002772:	f001 fb67 	bl	8003e44 <HAL_I2C_Init>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800277c:	f000 f9e0 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002780:	bf00      	nop
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20000260 	.word	0x20000260
 8002788:	40005800 	.word	0x40005800
 800278c:	00061a80 	.word	0x00061a80

08002790 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002796:	1d3b      	adds	r3, r7, #4
 8002798:	2100      	movs	r1, #0
 800279a:	460a      	mov	r2, r1
 800279c:	801a      	strh	r2, [r3, #0]
 800279e:	460a      	mov	r2, r1
 80027a0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80027a6:	4b1d      	ldr	r3, [pc, #116]	; (800281c <MX_RTC_Init+0x8c>)
 80027a8:	4a1d      	ldr	r2, [pc, #116]	; (8002820 <MX_RTC_Init+0x90>)
 80027aa:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <MX_RTC_Init+0x8c>)
 80027ae:	f04f 32ff 	mov.w	r2, #4294967295
 80027b2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80027b4:	4b19      	ldr	r3, [pc, #100]	; (800281c <MX_RTC_Init+0x8c>)
 80027b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ba:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80027bc:	4817      	ldr	r0, [pc, #92]	; (800281c <MX_RTC_Init+0x8c>)
 80027be:	f004 fd8f 	bl	80072e0 <HAL_RTC_Init>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d001      	beq.n	80027cc <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80027c8:	f000 f9ba 	bl	8002b40 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 80027cc:	2322      	movs	r3, #34	; 0x22
 80027ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 80027d0:	2350      	movs	r3, #80	; 0x50
 80027d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80027d8:	1d3b      	adds	r3, r7, #4
 80027da:	2201      	movs	r2, #1
 80027dc:	4619      	mov	r1, r3
 80027de:	480f      	ldr	r0, [pc, #60]	; (800281c <MX_RTC_Init+0x8c>)
 80027e0:	f004 fe14 	bl	800740c <HAL_RTC_SetTime>
 80027e4:	4603      	mov	r3, r0
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d001      	beq.n	80027ee <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80027ea:	f000 f9a9 	bl	8002b40 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_SUNDAY;
 80027ee:	2300      	movs	r3, #0
 80027f0:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_OCTOBER;
 80027f2:	2310      	movs	r3, #16
 80027f4:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x9;
 80027f6:	2309      	movs	r3, #9
 80027f8:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 80027fa:	2322      	movs	r3, #34	; 0x22
 80027fc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80027fe:	463b      	mov	r3, r7
 8002800:	2201      	movs	r2, #1
 8002802:	4619      	mov	r1, r3
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <MX_RTC_Init+0x8c>)
 8002806:	f004 ff71 	bl	80076ec <HAL_RTC_SetDate>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002810:	f000 f996 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002814:	bf00      	nop
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	200002b4 	.word	0x200002b4
 8002820:	40002800 	.word	0x40002800

08002824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <MX_SPI2_Init+0x64>)
 800282a:	4a18      	ldr	r2, [pc, #96]	; (800288c <MX_SPI2_Init+0x68>)
 800282c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <MX_SPI2_Init+0x64>)
 8002830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002836:	4b14      	ldr	r3, [pc, #80]	; (8002888 <MX_SPI2_Init+0x64>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800283c:	4b12      	ldr	r3, [pc, #72]	; (8002888 <MX_SPI2_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_SPI2_Init+0x64>)
 8002844:	2200      	movs	r2, #0
 8002846:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_SPI2_Init+0x64>)
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_SPI2_Init+0x64>)
 8002850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002854:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002856:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_SPI2_Init+0x64>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800285c:	4b0a      	ldr	r3, [pc, #40]	; (8002888 <MX_SPI2_Init+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_SPI2_Init+0x64>)
 8002864:	2200      	movs	r2, #0
 8002866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002868:	4b07      	ldr	r3, [pc, #28]	; (8002888 <MX_SPI2_Init+0x64>)
 800286a:	2200      	movs	r2, #0
 800286c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800286e:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_SPI2_Init+0x64>)
 8002870:	220a      	movs	r2, #10
 8002872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002874:	4804      	ldr	r0, [pc, #16]	; (8002888 <MX_SPI2_Init+0x64>)
 8002876:	f005 fae5 	bl	8007e44 <HAL_SPI_Init>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002880:	f000 f95e 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	200002c8 	.word	0x200002c8
 800288c:	40003800 	.word	0x40003800

08002890 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__USART2_CLK_ENABLE();
 8002896:	4b1c      	ldr	r3, [pc, #112]	; (8002908 <MX_USART2_UART_Init+0x78>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a1b      	ldr	r2, [pc, #108]	; (8002908 <MX_USART2_UART_Init+0x78>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <MX_USART2_UART_Init+0x78>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	607b      	str	r3, [r7, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <MX_USART2_UART_Init+0x80>)
 80028b2:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80028b4:	4b15      	ldr	r3, [pc, #84]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028b6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028ba:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80028c2:	4b12      	ldr	r3, [pc, #72]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80028ce:	4b0f      	ldr	r3, [pc, #60]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028d0:	220c      	movs	r2, #12
 80028d2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028d4:	4b0d      	ldr	r3, [pc, #52]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028da:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028dc:	2200      	movs	r2, #0
 80028de:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028e0:	480a      	ldr	r0, [pc, #40]	; (800290c <MX_USART2_UART_Init+0x7c>)
 80028e2:	f006 f81b 	bl	800891c <HAL_UART_Init>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80028ec:	f000 f928 	bl	8002b40 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	2026      	movs	r0, #38	; 0x26
 80028f6:	f000 fffe 	bl	80038f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80028fa:	2026      	movs	r0, #38	; 0x26
 80028fc:	f001 f817 	bl	800392e <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002900:	bf00      	nop
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	20000320 	.word	0x20000320
 8002910:	40004400 	.word	0x40004400

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b088      	sub	sp, #32
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 0310 	add.w	r3, r7, #16
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	4a38      	ldr	r2, [pc, #224]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6193      	str	r3, [r2, #24]
 8002934:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002946:	f043 0320 	orr.w	r3, r3, #32
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a2c      	ldr	r2, [pc, #176]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	607b      	str	r3, [r7, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002970:	4b27      	ldr	r3, [pc, #156]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002972:	699b      	ldr	r3, [r3, #24]
 8002974:	4a26      	ldr	r2, [pc, #152]	; (8002a10 <MX_GPIO_Init+0xfc>)
 8002976:	f043 0308 	orr.w	r3, r3, #8
 800297a:	6193      	str	r3, [r2, #24]
 800297c:	4b24      	ldr	r3, [pc, #144]	; (8002a10 <MX_GPIO_Init+0xfc>)
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002988:	2200      	movs	r2, #0
 800298a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800298e:	4821      	ldr	r0, [pc, #132]	; (8002a14 <MX_GPIO_Init+0x100>)
 8002990:	f001 fa28 	bl	8003de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSS_GPIO_Port, SPI2_CSS_Pin, GPIO_PIN_RESET);
 8002994:	2200      	movs	r2, #0
 8002996:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800299a:	481f      	ldr	r0, [pc, #124]	; (8002a18 <MX_GPIO_Init+0x104>)
 800299c:	f001 fa22 	bl	8003de4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80029a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a6:	2301      	movs	r3, #1
 80029a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2302      	movs	r3, #2
 80029b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4619      	mov	r1, r3
 80029b8:	4816      	ldr	r0, [pc, #88]	; (8002a14 <MX_GPIO_Init+0x100>)
 80029ba:	f001 f88f 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80029be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80029c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80029c4:	4b15      	ldr	r3, [pc, #84]	; (8002a1c <MX_GPIO_Init+0x108>)
 80029c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029cc:	f107 0310 	add.w	r3, r7, #16
 80029d0:	4619      	mov	r1, r3
 80029d2:	4810      	ldr	r0, [pc, #64]	; (8002a14 <MX_GPIO_Init+0x100>)
 80029d4:	f001 f882 	bl	8003adc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSS_Pin */
  GPIO_InitStruct.Pin = SPI2_CSS_Pin;
 80029d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029de:	2301      	movs	r3, #1
 80029e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e6:	2302      	movs	r3, #2
 80029e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSS_GPIO_Port, &GPIO_InitStruct);
 80029ea:	f107 0310 	add.w	r3, r7, #16
 80029ee:	4619      	mov	r1, r3
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <MX_GPIO_Init+0x104>)
 80029f2:	f001 f873 	bl	8003adc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80029f6:	2200      	movs	r2, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	2028      	movs	r0, #40	; 0x28
 80029fc:	f000 ff7b 	bl	80038f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a00:	2028      	movs	r0, #40	; 0x28
 8002a02:	f000 ff94 	bl	800392e <HAL_NVIC_EnableIRQ>

}
 8002a06:	bf00      	nop
 8002a08:	3720      	adds	r7, #32
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40021000 	.word	0x40021000
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40010c00 	.word	0x40010c00
 8002a1c:	10210000 	.word	0x10210000

08002a20 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a24:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <HAL_IncTick+0x58>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_IncTick+0x5c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4413      	add	r3, r2
 8002a30:	4a12      	ldr	r2, [pc, #72]	; (8002a7c <HAL_IncTick+0x5c>)
 8002a32:	6013      	str	r3, [r2, #0]

  if(contador)
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_IncTick+0x60>)
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_IncTick+0x28>
	  contador--;
 8002a3c:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_IncTick+0x60>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <HAL_IncTick+0x60>)
 8002a46:	801a      	strh	r2, [r3, #0]

  if(cuenta)
 8002a48:	4b0e      	ldr	r3, [pc, #56]	; (8002a84 <HAL_IncTick+0x64>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d005      	beq.n	8002a5c <HAL_IncTick+0x3c>
	  cuenta--;
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_IncTick+0x64>)
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	4b0a      	ldr	r3, [pc, #40]	; (8002a84 <HAL_IncTick+0x64>)
 8002a5a:	801a      	strh	r2, [r3, #0]

  if(counter)
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <HAL_IncTick+0x68>)
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_IncTick+0x50>
	  counter--;
 8002a64:	4b08      	ldr	r3, [pc, #32]	; (8002a88 <HAL_IncTick+0x68>)
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	4b06      	ldr	r3, [pc, #24]	; (8002a88 <HAL_IncTick+0x68>)
 8002a6e:	801a      	strh	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	20000088 	.word	0x20000088
 8002a7c:	200007b4 	.word	0x200007b4
 8002a80:	20000068 	.word	0x20000068
 8002a84:	2000006a 	.word	0x2000006a
 8002a88:	2000039c 	.word	0x2000039c

08002a8c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
	if(huart->Instance==huart2.Instance)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_UART_RxCpltCallback+0x64>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d123      	bne.n	8002ae8 <HAL_UART_RxCpltCallback+0x5c>
	{

		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4914      	ldr	r1, [pc, #80]	; (8002af4 <HAL_UART_RxCpltCallback+0x68>)
 8002aa4:	4812      	ldr	r0, [pc, #72]	; (8002af0 <HAL_UART_RxCpltCallback+0x64>)
 8002aa6:	f006 f8ba 	bl	8008c1e <HAL_UART_Receive_IT>
		//Transmitir byte de nuevo
		HAL_UART_Transmit(&huart2, &byte, sizeof(byte), 100);
 8002aaa:	2364      	movs	r3, #100	; 0x64
 8002aac:	2201      	movs	r2, #1
 8002aae:	4911      	ldr	r1, [pc, #68]	; (8002af4 <HAL_UART_RxCpltCallback+0x68>)
 8002ab0:	480f      	ldr	r0, [pc, #60]	; (8002af0 <HAL_UART_RxCpltCallback+0x64>)
 8002ab2:	f005 ff80 	bl	80089b6 <HAL_UART_Transmit>
		//Habilito la interrupción
		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	490e      	ldr	r1, [pc, #56]	; (8002af4 <HAL_UART_RxCpltCallback+0x68>)
 8002aba:	480d      	ldr	r0, [pc, #52]	; (8002af0 <HAL_UART_RxCpltCallback+0x64>)
 8002abc:	f006 f8af 	bl	8008c1e <HAL_UART_Receive_IT>
		//HAL_UART_Receive(&huart2, &byte, sizeof(byte), HAL_MAX_DELAY);

		if (byte == '0')
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_UART_RxCpltCallback+0x68>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b30      	cmp	r3, #48	; 0x30
 8002ac6:	d105      	bne.n	8002ad4 <HAL_UART_RxCpltCallback+0x48>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ace:	480a      	ldr	r0, [pc, #40]	; (8002af8 <HAL_UART_RxCpltCallback+0x6c>)
 8002ad0:	f001 f988 	bl	8003de4 <HAL_GPIO_WritePin>

		if (byte == '1')
 8002ad4:	4b07      	ldr	r3, [pc, #28]	; (8002af4 <HAL_UART_RxCpltCallback+0x68>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b31      	cmp	r3, #49	; 0x31
 8002ada:	d105      	bne.n	8002ae8 <HAL_UART_RxCpltCallback+0x5c>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002adc:	2201      	movs	r2, #1
 8002ade:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae2:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_UART_RxCpltCallback+0x6c>)
 8002ae4:	f001 f97e 	bl	8003de4 <HAL_GPIO_WritePin>
	}
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000320 	.word	0x20000320
 8002af4:	2000039f 	.word	0x2000039f
 8002af8:	40011000 	.word	0x40011000

08002afc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	80fb      	strh	r3, [r7, #6]
	if(flag_pulsador)
 8002b06:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d009      	beq.n	8002b22 <HAL_GPIO_EXTI_Callback+0x26>
	{
		estado=PREPARADO;
 8002b0e:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b10:	2201      	movs	r2, #1
 8002b12:	701a      	strb	r2, [r3, #0]
		flag_pulsador=0;
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	701a      	strb	r2, [r3, #0]
		flag_limpiar=1;
 8002b1a:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <HAL_GPIO_EXTI_Callback+0x40>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]
	}
	else
		flag_pulsador=1;
}
 8002b20:	e002      	b.n	8002b28 <HAL_GPIO_EXTI_Callback+0x2c>
		flag_pulsador=1;
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_GPIO_EXTI_Callback+0x38>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	701a      	strb	r2, [r3, #0]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bc80      	pop	{r7}
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	200003a0 	.word	0x200003a0
 8002b38:	2000039e 	.word	0x2000039e
 8002b3c:	200003a1 	.word	0x200003a1

08002b40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b44:	b672      	cpsid	i
}
 8002b46:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b48:	e7fe      	b.n	8002b48 <Error_Handler+0x8>

08002b4a <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	460a      	mov	r2, r1
 8002b54:	71fb      	strb	r3, [r7, #7]
 8002b56:	4613      	mov	r3, r2
 8002b58:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002b5a:	2226      	movs	r2, #38	; 0x26
 8002b5c:	2100      	movs	r1, #0
 8002b5e:	2078      	movs	r0, #120	; 0x78
 8002b60:	f000 fb40 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002b64:	2200      	movs	r2, #0
 8002b66:	2100      	movs	r1, #0
 8002b68:	2078      	movs	r0, #120	; 0x78
 8002b6a:	f000 fb3b 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002b6e:	79fb      	ldrb	r3, [r7, #7]
 8002b70:	461a      	mov	r2, r3
 8002b72:	2100      	movs	r1, #0
 8002b74:	2078      	movs	r0, #120	; 0x78
 8002b76:	f000 fb35 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2078      	movs	r0, #120	; 0x78
 8002b80:	f000 fb30 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002b84:	79bb      	ldrb	r3, [r7, #6]
 8002b86:	461a      	mov	r2, r3
 8002b88:	2100      	movs	r1, #0
 8002b8a:	2078      	movs	r0, #120	; 0x78
 8002b8c:	f000 fb2a 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2078      	movs	r0, #120	; 0x78
 8002b96:	f000 fb25 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002b9a:	22ff      	movs	r2, #255	; 0xff
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	2078      	movs	r0, #120	; 0x78
 8002ba0:	f000 fb20 	bl	80031e4 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002ba4:	222f      	movs	r2, #47	; 0x2f
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	2078      	movs	r0, #120	; 0x78
 8002baa:	f000 fb1b 	bl	80031e4 <ssd1306_I2C_Write>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002bba:	222e      	movs	r2, #46	; 0x2e
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	2078      	movs	r0, #120	; 0x78
 8002bc0:	f000 fb10 	bl	80031e4 <ssd1306_I2C_Write>
}
 8002bc4:	bf00      	nop
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	60ba      	str	r2, [r7, #8]
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	81fb      	strh	r3, [r7, #14]
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	81bb      	strh	r3, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002bde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be2:	3307      	adds	r3, #7
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da00      	bge.n	8002bea <SSD1306_DrawBitmap+0x22>
 8002be8:	3307      	adds	r3, #7
 8002bea:	10db      	asrs	r3, r3, #3
 8002bec:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	82bb      	strh	r3, [r7, #20]
 8002bf6:	e044      	b.n	8002c82 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	827b      	strh	r3, [r7, #18]
 8002bfc:	e02f      	b.n	8002c5e <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002bfe:	8a7b      	ldrh	r3, [r7, #18]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002c08:	7dfb      	ldrb	r3, [r7, #23]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	75fb      	strb	r3, [r7, #23]
 8002c0e:	e012      	b.n	8002c36 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002c10:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c14:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002c18:	fb03 f202 	mul.w	r2, r3, r2
 8002c1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da00      	bge.n	8002c26 <SSD1306_DrawBitmap+0x5e>
 8002c24:	3307      	adds	r3, #7
 8002c26:	10db      	asrs	r3, r3, #3
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	4413      	add	r3, r2
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4413      	add	r3, r2
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002c36:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da09      	bge.n	8002c52 <SSD1306_DrawBitmap+0x8a>
 8002c3e:	89fa      	ldrh	r2, [r7, #14]
 8002c40:	8a7b      	ldrh	r3, [r7, #18]
 8002c42:	4413      	add	r3, r2
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	89b9      	ldrh	r1, [r7, #12]
 8002c48:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 f92d 	bl	8002eac <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002c52:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	b29b      	uxth	r3, r3
 8002c5c:	827b      	strh	r3, [r7, #18]
 8002c5e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	dbc9      	blt.n	8002bfe <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002c6a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3301      	adds	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	82bb      	strh	r3, [r7, #20]
 8002c76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3301      	adds	r3, #1
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	81bb      	strh	r3, [r7, #12]
 8002c82:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002c86:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	dbb4      	blt.n	8002bf8 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002c8e:	bf00      	nop
 8002c90:	bf00      	nop
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002c9e:	f000 fa27 	bl	80030f0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002ca2:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	2178      	movs	r1, #120	; 0x78
 8002caa:	485b      	ldr	r0, [pc, #364]	; (8002e18 <SSD1306_Init+0x180>)
 8002cac:	f001 fd6c 	bl	8004788 <HAL_I2C_IsDeviceReady>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e0a9      	b.n	8002e0e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002cba:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002cbe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cc0:	e002      	b.n	8002cc8 <SSD1306_Init+0x30>
		p--;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f9      	bne.n	8002cc2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002cce:	22ae      	movs	r2, #174	; 0xae
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2078      	movs	r0, #120	; 0x78
 8002cd4:	f000 fa86 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002cd8:	2220      	movs	r2, #32
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2078      	movs	r0, #120	; 0x78
 8002cde:	f000 fa81 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002ce2:	2210      	movs	r2, #16
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	2078      	movs	r0, #120	; 0x78
 8002ce8:	f000 fa7c 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002cec:	22b0      	movs	r2, #176	; 0xb0
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2078      	movs	r0, #120	; 0x78
 8002cf2:	f000 fa77 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002cf6:	22c8      	movs	r2, #200	; 0xc8
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	2078      	movs	r0, #120	; 0x78
 8002cfc:	f000 fa72 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002d00:	2200      	movs	r2, #0
 8002d02:	2100      	movs	r1, #0
 8002d04:	2078      	movs	r0, #120	; 0x78
 8002d06:	f000 fa6d 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	2100      	movs	r1, #0
 8002d0e:	2078      	movs	r0, #120	; 0x78
 8002d10:	f000 fa68 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002d14:	2240      	movs	r2, #64	; 0x40
 8002d16:	2100      	movs	r1, #0
 8002d18:	2078      	movs	r0, #120	; 0x78
 8002d1a:	f000 fa63 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002d1e:	2281      	movs	r2, #129	; 0x81
 8002d20:	2100      	movs	r1, #0
 8002d22:	2078      	movs	r0, #120	; 0x78
 8002d24:	f000 fa5e 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002d28:	22ff      	movs	r2, #255	; 0xff
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2078      	movs	r0, #120	; 0x78
 8002d2e:	f000 fa59 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002d32:	22a1      	movs	r2, #161	; 0xa1
 8002d34:	2100      	movs	r1, #0
 8002d36:	2078      	movs	r0, #120	; 0x78
 8002d38:	f000 fa54 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002d3c:	22a6      	movs	r2, #166	; 0xa6
 8002d3e:	2100      	movs	r1, #0
 8002d40:	2078      	movs	r0, #120	; 0x78
 8002d42:	f000 fa4f 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002d46:	22a8      	movs	r2, #168	; 0xa8
 8002d48:	2100      	movs	r1, #0
 8002d4a:	2078      	movs	r0, #120	; 0x78
 8002d4c:	f000 fa4a 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002d50:	223f      	movs	r2, #63	; 0x3f
 8002d52:	2100      	movs	r1, #0
 8002d54:	2078      	movs	r0, #120	; 0x78
 8002d56:	f000 fa45 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002d5a:	22a4      	movs	r2, #164	; 0xa4
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	2078      	movs	r0, #120	; 0x78
 8002d60:	f000 fa40 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002d64:	22d3      	movs	r2, #211	; 0xd3
 8002d66:	2100      	movs	r1, #0
 8002d68:	2078      	movs	r0, #120	; 0x78
 8002d6a:	f000 fa3b 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2100      	movs	r1, #0
 8002d72:	2078      	movs	r0, #120	; 0x78
 8002d74:	f000 fa36 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002d78:	22d5      	movs	r2, #213	; 0xd5
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2078      	movs	r0, #120	; 0x78
 8002d7e:	f000 fa31 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002d82:	22f0      	movs	r2, #240	; 0xf0
 8002d84:	2100      	movs	r1, #0
 8002d86:	2078      	movs	r0, #120	; 0x78
 8002d88:	f000 fa2c 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002d8c:	22d9      	movs	r2, #217	; 0xd9
 8002d8e:	2100      	movs	r1, #0
 8002d90:	2078      	movs	r0, #120	; 0x78
 8002d92:	f000 fa27 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002d96:	2222      	movs	r2, #34	; 0x22
 8002d98:	2100      	movs	r1, #0
 8002d9a:	2078      	movs	r0, #120	; 0x78
 8002d9c:	f000 fa22 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002da0:	22da      	movs	r2, #218	; 0xda
 8002da2:	2100      	movs	r1, #0
 8002da4:	2078      	movs	r0, #120	; 0x78
 8002da6:	f000 fa1d 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002daa:	2212      	movs	r2, #18
 8002dac:	2100      	movs	r1, #0
 8002dae:	2078      	movs	r0, #120	; 0x78
 8002db0:	f000 fa18 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002db4:	22db      	movs	r2, #219	; 0xdb
 8002db6:	2100      	movs	r1, #0
 8002db8:	2078      	movs	r0, #120	; 0x78
 8002dba:	f000 fa13 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	2078      	movs	r0, #120	; 0x78
 8002dc4:	f000 fa0e 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002dc8:	228d      	movs	r2, #141	; 0x8d
 8002dca:	2100      	movs	r1, #0
 8002dcc:	2078      	movs	r0, #120	; 0x78
 8002dce:	f000 fa09 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002dd2:	2214      	movs	r2, #20
 8002dd4:	2100      	movs	r1, #0
 8002dd6:	2078      	movs	r0, #120	; 0x78
 8002dd8:	f000 fa04 	bl	80031e4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002ddc:	22af      	movs	r2, #175	; 0xaf
 8002dde:	2100      	movs	r1, #0
 8002de0:	2078      	movs	r0, #120	; 0x78
 8002de2:	f000 f9ff 	bl	80031e4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002de6:	222e      	movs	r2, #46	; 0x2e
 8002de8:	2100      	movs	r1, #0
 8002dea:	2078      	movs	r0, #120	; 0x78
 8002dec:	f000 f9fa 	bl	80031e4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002df0:	2000      	movs	r0, #0
 8002df2:	f000 f843 	bl	8002e7c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002df6:	f000 f813 	bl	8002e20 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <SSD1306_Init+0x184>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <SSD1306_Init+0x184>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002e06:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <SSD1306_Init+0x184>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002e0c:	2301      	movs	r3, #1
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000260 	.word	0x20000260
 8002e1c:	200007a8 	.word	0x200007a8

08002e20 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002e26:	2300      	movs	r3, #0
 8002e28:	71fb      	strb	r3, [r7, #7]
 8002e2a:	e01d      	b.n	8002e68 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002e2c:	79fb      	ldrb	r3, [r7, #7]
 8002e2e:	3b50      	subs	r3, #80	; 0x50
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	461a      	mov	r2, r3
 8002e34:	2100      	movs	r1, #0
 8002e36:	2078      	movs	r0, #120	; 0x78
 8002e38:	f000 f9d4 	bl	80031e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2078      	movs	r0, #120	; 0x78
 8002e42:	f000 f9cf 	bl	80031e4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002e46:	2210      	movs	r2, #16
 8002e48:	2100      	movs	r1, #0
 8002e4a:	2078      	movs	r0, #120	; 0x78
 8002e4c:	f000 f9ca 	bl	80031e4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002e50:	79fb      	ldrb	r3, [r7, #7]
 8002e52:	01db      	lsls	r3, r3, #7
 8002e54:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <SSD1306_UpdateScreen+0x58>)
 8002e56:	441a      	add	r2, r3
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	2140      	movs	r1, #64	; 0x40
 8002e5c:	2078      	movs	r0, #120	; 0x78
 8002e5e:	f000 f95b 	bl	8003118 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	3301      	adds	r3, #1
 8002e66:	71fb      	strb	r3, [r7, #7]
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b07      	cmp	r3, #7
 8002e6c:	d9de      	bls.n	8002e2c <SSD1306_UpdateScreen+0xc>
	}
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200003a8 	.word	0x200003a8

08002e7c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d101      	bne.n	8002e90 <SSD1306_Fill+0x14>
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	e000      	b.n	8002e92 <SSD1306_Fill+0x16>
 8002e90:	23ff      	movs	r3, #255	; 0xff
 8002e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e96:	4619      	mov	r1, r3
 8002e98:	4803      	ldr	r0, [pc, #12]	; (8002ea8 <SSD1306_Fill+0x2c>)
 8002e9a:	f009 f89f 	bl	800bfdc <memset>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	200003a8 	.word	0x200003a8

08002eac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002eac:	b480      	push	{r7}
 8002eae:	b083      	sub	sp, #12
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	80fb      	strh	r3, [r7, #6]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	80bb      	strh	r3, [r7, #4]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	70fb      	strb	r3, [r7, #3]
	if (
 8002ebe:	88fb      	ldrh	r3, [r7, #6]
 8002ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec2:	d848      	bhi.n	8002f56 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002ec4:	88bb      	ldrh	r3, [r7, #4]
 8002ec6:	2b3f      	cmp	r3, #63	; 0x3f
 8002ec8:	d845      	bhi.n	8002f56 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002eca:	4b25      	ldr	r3, [pc, #148]	; (8002f60 <SSD1306_DrawPixel+0xb4>)
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf0c      	ite	eq
 8002ed8:	2301      	moveq	r3, #1
 8002eda:	2300      	movne	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002ee0:	78fb      	ldrb	r3, [r7, #3]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d11a      	bne.n	8002f1c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	88bb      	ldrh	r3, [r7, #4]
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	b298      	uxth	r0, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	01db      	lsls	r3, r3, #7
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	; (8002f64 <SSD1306_DrawPixel+0xb8>)
 8002ef6:	5cd3      	ldrb	r3, [r2, r3]
 8002ef8:	b25a      	sxtb	r2, r3
 8002efa:	88bb      	ldrh	r3, [r7, #4]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	2101      	movs	r1, #1
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	b25b      	sxtb	r3, r3
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	b259      	sxtb	r1, r3
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	01db      	lsls	r3, r3, #7
 8002f12:	4413      	add	r3, r2
 8002f14:	b2c9      	uxtb	r1, r1
 8002f16:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <SSD1306_DrawPixel+0xb8>)
 8002f18:	54d1      	strb	r1, [r2, r3]
 8002f1a:	e01d      	b.n	8002f58 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002f1c:	88fa      	ldrh	r2, [r7, #6]
 8002f1e:	88bb      	ldrh	r3, [r7, #4]
 8002f20:	08db      	lsrs	r3, r3, #3
 8002f22:	b298      	uxth	r0, r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	4413      	add	r3, r2
 8002f2a:	4a0e      	ldr	r2, [pc, #56]	; (8002f64 <SSD1306_DrawPixel+0xb8>)
 8002f2c:	5cd3      	ldrb	r3, [r2, r3]
 8002f2e:	b25a      	sxtb	r2, r3
 8002f30:	88bb      	ldrh	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	b25b      	sxtb	r3, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	4013      	ands	r3, r2
 8002f44:	b259      	sxtb	r1, r3
 8002f46:	88fa      	ldrh	r2, [r7, #6]
 8002f48:	4603      	mov	r3, r0
 8002f4a:	01db      	lsls	r3, r3, #7
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b2c9      	uxtb	r1, r1
 8002f50:	4a04      	ldr	r2, [pc, #16]	; (8002f64 <SSD1306_DrawPixel+0xb8>)
 8002f52:	54d1      	strb	r1, [r2, r3]
 8002f54:	e000      	b.n	8002f58 <SSD1306_DrawPixel+0xac>
		return;
 8002f56:	bf00      	nop
	}
}
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	200007a8 	.word	0x200007a8
 8002f64:	200003a8 	.word	0x200003a8

08002f68 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460a      	mov	r2, r1
 8002f72:	80fb      	strh	r3, [r7, #6]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002f78:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <SSD1306_GotoXY+0x28>)
 8002f7a:	88fb      	ldrh	r3, [r7, #6]
 8002f7c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002f7e:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <SSD1306_GotoXY+0x28>)
 8002f80:	88bb      	ldrh	r3, [r7, #4]
 8002f82:	8053      	strh	r3, [r2, #2]
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	200007a8 	.word	0x200007a8

08002f94 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	6039      	str	r1, [r7, #0]
 8002f9e:	71fb      	strb	r3, [r7, #7]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fa4:	4b3a      	ldr	r3, [pc, #232]	; (8003090 <SSD1306_Putc+0xfc>)
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
	if (
 8002fb0:	2b7f      	cmp	r3, #127	; 0x7f
 8002fb2:	dc07      	bgt.n	8002fc4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002fb4:	4b36      	ldr	r3, [pc, #216]	; (8003090 <SSD1306_Putc+0xfc>)
 8002fb6:	885b      	ldrh	r3, [r3, #2]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	785b      	ldrb	r3, [r3, #1]
 8002fbe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002fc0:	2b3f      	cmp	r3, #63	; 0x3f
 8002fc2:	dd01      	ble.n	8002fc8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	e05e      	b.n	8003086 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
 8002fcc:	e04b      	b.n	8003066 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685a      	ldr	r2, [r3, #4]
 8002fd2:	79fb      	ldrb	r3, [r7, #7]
 8002fd4:	3b20      	subs	r3, #32
 8002fd6:	6839      	ldr	r1, [r7, #0]
 8002fd8:	7849      	ldrb	r1, [r1, #1]
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4619      	mov	r1, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	440b      	add	r3, r1
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	e030      	b.n	8003054 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003002:	4b23      	ldr	r3, [pc, #140]	; (8003090 <SSD1306_Putc+0xfc>)
 8003004:	881a      	ldrh	r2, [r3, #0]
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	b29b      	uxth	r3, r3
 800300a:	4413      	add	r3, r2
 800300c:	b298      	uxth	r0, r3
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <SSD1306_Putc+0xfc>)
 8003010:	885a      	ldrh	r2, [r3, #2]
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	b29b      	uxth	r3, r3
 8003016:	4413      	add	r3, r2
 8003018:	b29b      	uxth	r3, r3
 800301a:	79ba      	ldrb	r2, [r7, #6]
 800301c:	4619      	mov	r1, r3
 800301e:	f7ff ff45 	bl	8002eac <SSD1306_DrawPixel>
 8003022:	e014      	b.n	800304e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003024:	4b1a      	ldr	r3, [pc, #104]	; (8003090 <SSD1306_Putc+0xfc>)
 8003026:	881a      	ldrh	r2, [r3, #0]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	b29b      	uxth	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b298      	uxth	r0, r3
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <SSD1306_Putc+0xfc>)
 8003032:	885a      	ldrh	r2, [r3, #2]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	b29b      	uxth	r3, r3
 8003038:	4413      	add	r3, r2
 800303a:	b299      	uxth	r1, r3
 800303c:	79bb      	ldrb	r3, [r7, #6]
 800303e:	2b00      	cmp	r3, #0
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	f7ff ff2f 	bl	8002eac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	3301      	adds	r3, #1
 8003052:	613b      	str	r3, [r7, #16]
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4293      	cmp	r3, r2
 800305e:	d3c8      	bcc.n	8002ff2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3301      	adds	r3, #1
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	785b      	ldrb	r3, [r3, #1]
 800306a:	461a      	mov	r2, r3
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	4293      	cmp	r3, r2
 8003070:	d3ad      	bcc.n	8002fce <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003072:	4b07      	ldr	r3, [pc, #28]	; (8003090 <SSD1306_Putc+0xfc>)
 8003074:	881a      	ldrh	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	4413      	add	r3, r2
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <SSD1306_Putc+0xfc>)
 8003082:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003084:	79fb      	ldrb	r3, [r7, #7]
}
 8003086:	4618      	mov	r0, r3
 8003088:	3718      	adds	r7, #24
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200007a8 	.word	0x200007a8

08003094 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80030a2:	e012      	b.n	80030ca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	79fa      	ldrb	r2, [r7, #7]
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7ff ff71 	bl	8002f94 <SSD1306_Putc>
 80030b2:	4603      	mov	r3, r0
 80030b4:	461a      	mov	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d002      	beq.n	80030c4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	e008      	b.n	80030d6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3301      	adds	r3, #1
 80030c8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1e8      	bne.n	80030a4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	781b      	ldrb	r3, [r3, #0]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7ff feca 	bl	8002e7c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80030e8:	f7ff fe9a 	bl	8002e20 <SSD1306_UpdateScreen>
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80030f6:	4b07      	ldr	r3, [pc, #28]	; (8003114 <ssd1306_I2C_Init+0x24>)
 80030f8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80030fa:	e002      	b.n	8003102 <ssd1306_I2C_Init+0x12>
		p--;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3b01      	subs	r3, #1
 8003100:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f9      	bne.n	80030fc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	370c      	adds	r7, #12
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr
 8003114:	0003d090 	.word	0x0003d090

08003118 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b0c7      	sub	sp, #284	; 0x11c
 800311c:	af02      	add	r7, sp, #8
 800311e:	4604      	mov	r4, r0
 8003120:	4608      	mov	r0, r1
 8003122:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8003126:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800312a:	600a      	str	r2, [r1, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003132:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8003136:	4622      	mov	r2, r4
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800313e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8003142:	4602      	mov	r2, r0
 8003144:	701a      	strb	r2, [r3, #0]
 8003146:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800314a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800314e:	460a      	mov	r2, r1
 8003150:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8003152:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003156:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800315a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800315e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8003162:	7812      	ldrb	r2, [r2, #0]
 8003164:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003166:	2300      	movs	r3, #0
 8003168:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800316c:	e015      	b.n	800319a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800316e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003172:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003176:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	441a      	add	r2, r3
 800317e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003182:	3301      	adds	r3, #1
 8003184:	7811      	ldrb	r1, [r2, #0]
 8003186:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800318a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800318e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003190:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003194:	3301      	adds	r3, #1
 8003196:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800319a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800319e:	b29b      	uxth	r3, r3
 80031a0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80031a4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80031a8:	8812      	ldrh	r2, [r2, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d8df      	bhi.n	800316e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 80031ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031b2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b299      	uxth	r1, r3
 80031ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80031be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80031c2:	881b      	ldrh	r3, [r3, #0]
 80031c4:	3301      	adds	r3, #1
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f107 020c 	add.w	r2, r7, #12
 80031cc:	200a      	movs	r0, #10
 80031ce:	9000      	str	r0, [sp, #0]
 80031d0:	4803      	ldr	r0, [pc, #12]	; (80031e0 <ssd1306_I2C_WriteMulti+0xc8>)
 80031d2:	f000 ff7b 	bl	80040cc <HAL_I2C_Master_Transmit>
}
 80031d6:	bf00      	nop
 80031d8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd90      	pop	{r4, r7, pc}
 80031e0:	20000260 	.word	0x20000260

080031e4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b086      	sub	sp, #24
 80031e8:	af02      	add	r7, sp, #8
 80031ea:	4603      	mov	r3, r0
 80031ec:	71fb      	strb	r3, [r7, #7]
 80031ee:	460b      	mov	r3, r1
 80031f0:	71bb      	strb	r3, [r7, #6]
 80031f2:	4613      	mov	r3, r2
 80031f4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80031f6:	79bb      	ldrb	r3, [r7, #6]
 80031f8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80031fa:	797b      	ldrb	r3, [r7, #5]
 80031fc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	b299      	uxth	r1, r3
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	230a      	movs	r3, #10
 8003208:	9300      	str	r3, [sp, #0]
 800320a:	2302      	movs	r3, #2
 800320c:	4803      	ldr	r0, [pc, #12]	; (800321c <ssd1306_I2C_Write+0x38>)
 800320e:	f000 ff5d 	bl	80040cc <HAL_I2C_Master_Transmit>
}
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	20000260 	.word	0x20000260

08003220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003226:	4b15      	ldr	r3, [pc, #84]	; (800327c <HAL_MspInit+0x5c>)
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	4a14      	ldr	r2, [pc, #80]	; (800327c <HAL_MspInit+0x5c>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6193      	str	r3, [r2, #24]
 8003232:	4b12      	ldr	r3, [pc, #72]	; (800327c <HAL_MspInit+0x5c>)
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800323e:	4b0f      	ldr	r3, [pc, #60]	; (800327c <HAL_MspInit+0x5c>)
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	4a0e      	ldr	r2, [pc, #56]	; (800327c <HAL_MspInit+0x5c>)
 8003244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003248:	61d3      	str	r3, [r2, #28]
 800324a:	4b0c      	ldr	r3, [pc, #48]	; (800327c <HAL_MspInit+0x5c>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003252:	607b      	str	r3, [r7, #4]
 8003254:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003256:	4b0a      	ldr	r3, [pc, #40]	; (8003280 <HAL_MspInit+0x60>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003262:	60fb      	str	r3, [r7, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	4a04      	ldr	r2, [pc, #16]	; (8003280 <HAL_MspInit+0x60>)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003272:	bf00      	nop
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	bc80      	pop	{r7}
 800327a:	4770      	bx	lr
 800327c:	40021000 	.word	0x40021000
 8003280:	40010000 	.word	0x40010000

08003284 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a33      	ldr	r2, [pc, #204]	; (800336c <HAL_I2C_MspInit+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d12c      	bne.n	80032fe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a4:	4b32      	ldr	r3, [pc, #200]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a31      	ldr	r2, [pc, #196]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032aa:	f043 0308 	orr.w	r3, r3, #8
 80032ae:	6193      	str	r3, [r2, #24]
 80032b0:	4b2f      	ldr	r3, [pc, #188]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032bc:	23c0      	movs	r3, #192	; 0xc0
 80032be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c0:	2312      	movs	r3, #18
 80032c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032c4:	2303      	movs	r3, #3
 80032c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c8:	f107 0318 	add.w	r3, r7, #24
 80032cc:	4619      	mov	r1, r3
 80032ce:	4829      	ldr	r0, [pc, #164]	; (8003374 <HAL_I2C_MspInit+0xf0>)
 80032d0:	f000 fc04 	bl	8003adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80032d4:	4b26      	ldr	r3, [pc, #152]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	4a25      	ldr	r2, [pc, #148]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032de:	61d3      	str	r3, [r2, #28]
 80032e0:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_I2C_MspInit+0xec>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2100      	movs	r1, #0
 80032f0:	201f      	movs	r0, #31
 80032f2:	f000 fb00 	bl	80038f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80032f6:	201f      	movs	r0, #31
 80032f8:	f000 fb19 	bl	800392e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80032fc:	e031      	b.n	8003362 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1d      	ldr	r2, [pc, #116]	; (8003378 <HAL_I2C_MspInit+0xf4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d12c      	bne.n	8003362 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003308:	4b19      	ldr	r3, [pc, #100]	; (8003370 <HAL_I2C_MspInit+0xec>)
 800330a:	699b      	ldr	r3, [r3, #24]
 800330c:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_I2C_MspInit+0xec>)
 800330e:	f043 0308 	orr.w	r3, r3, #8
 8003312:	6193      	str	r3, [r2, #24]
 8003314:	4b16      	ldr	r3, [pc, #88]	; (8003370 <HAL_I2C_MspInit+0xec>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003320:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003324:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003326:	2312      	movs	r3, #18
 8003328:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800332a:	2303      	movs	r3, #3
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f107 0318 	add.w	r3, r7, #24
 8003332:	4619      	mov	r1, r3
 8003334:	480f      	ldr	r0, [pc, #60]	; (8003374 <HAL_I2C_MspInit+0xf0>)
 8003336:	f000 fbd1 	bl	8003adc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_I2C_MspInit+0xec>)
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4a0c      	ldr	r2, [pc, #48]	; (8003370 <HAL_I2C_MspInit+0xec>)
 8003340:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003344:	61d3      	str	r3, [r2, #28]
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <HAL_I2C_MspInit+0xec>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800334e:	60bb      	str	r3, [r7, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	2100      	movs	r1, #0
 8003356:	2021      	movs	r0, #33	; 0x21
 8003358:	f000 facd 	bl	80038f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 800335c:	2021      	movs	r0, #33	; 0x21
 800335e:	f000 fae6 	bl	800392e <HAL_NVIC_EnableIRQ>
}
 8003362:	bf00      	nop
 8003364:	3728      	adds	r7, #40	; 0x28
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40005400 	.word	0x40005400
 8003370:	40021000 	.word	0x40021000
 8003374:	40010c00 	.word	0x40010c00
 8003378:	40005800 	.word	0x40005800

0800337c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0b      	ldr	r2, [pc, #44]	; (80033b8 <HAL_RTC_MspInit+0x3c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d110      	bne.n	80033b0 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800338e:	f003 fa0b 	bl	80067a8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003392:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <HAL_RTC_MspInit+0x40>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	4a09      	ldr	r2, [pc, #36]	; (80033bc <HAL_RTC_MspInit+0x40>)
 8003398:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800339c:	61d3      	str	r3, [r2, #28]
 800339e:	4b07      	ldr	r3, [pc, #28]	; (80033bc <HAL_RTC_MspInit+0x40>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033aa:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RTC_MspInit+0x44>)
 80033ac:	2201      	movs	r2, #1
 80033ae:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033b0:	bf00      	nop
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40002800 	.word	0x40002800
 80033bc:	40021000 	.word	0x40021000
 80033c0:	4242043c 	.word	0x4242043c

080033c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033cc:	f107 0310 	add.w	r3, r7, #16
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
 80033d4:	605a      	str	r2, [r3, #4]
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a1c      	ldr	r2, [pc, #112]	; (8003450 <HAL_SPI_MspInit+0x8c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d131      	bne.n	8003448 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_SPI_MspInit+0x90>)
 80033e6:	69db      	ldr	r3, [r3, #28]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <HAL_SPI_MspInit+0x90>)
 80033ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ee:	61d3      	str	r3, [r2, #28]
 80033f0:	4b18      	ldr	r3, [pc, #96]	; (8003454 <HAL_SPI_MspInit+0x90>)
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fc:	4b15      	ldr	r3, [pc, #84]	; (8003454 <HAL_SPI_MspInit+0x90>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4a14      	ldr	r2, [pc, #80]	; (8003454 <HAL_SPI_MspInit+0x90>)
 8003402:	f043 0308 	orr.w	r3, r3, #8
 8003406:	6193      	str	r3, [r2, #24]
 8003408:	4b12      	ldr	r3, [pc, #72]	; (8003454 <HAL_SPI_MspInit+0x90>)
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003414:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8003418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003422:	f107 0310 	add.w	r3, r7, #16
 8003426:	4619      	mov	r1, r3
 8003428:	480b      	ldr	r0, [pc, #44]	; (8003458 <HAL_SPI_MspInit+0x94>)
 800342a:	f000 fb57 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800342e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003432:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003434:	2300      	movs	r3, #0
 8003436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003438:	2300      	movs	r3, #0
 800343a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4619      	mov	r1, r3
 8003442:	4805      	ldr	r0, [pc, #20]	; (8003458 <HAL_SPI_MspInit+0x94>)
 8003444:	f000 fb4a 	bl	8003adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003448:	bf00      	nop
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40003800 	.word	0x40003800
 8003454:	40021000 	.word	0x40021000
 8003458:	40010c00 	.word	0x40010c00

0800345c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b088      	sub	sp, #32
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003464:	f107 0310 	add.w	r3, r7, #16
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1f      	ldr	r2, [pc, #124]	; (80034f4 <HAL_UART_MspInit+0x98>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d137      	bne.n	80034ec <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 800347e:	69db      	ldr	r3, [r3, #28]
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 8003482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003486:	61d3      	str	r3, [r2, #28]
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a17      	ldr	r2, [pc, #92]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 800349a:	f043 0304 	orr.w	r3, r3, #4
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_UART_MspInit+0x9c>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034ac:	2304      	movs	r3, #4
 80034ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034b4:	2303      	movs	r3, #3
 80034b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4619      	mov	r1, r3
 80034be:	480f      	ldr	r0, [pc, #60]	; (80034fc <HAL_UART_MspInit+0xa0>)
 80034c0:	f000 fb0c 	bl	8003adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80034c4:	2308      	movs	r3, #8
 80034c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d0:	f107 0310 	add.w	r3, r7, #16
 80034d4:	4619      	mov	r1, r3
 80034d6:	4809      	ldr	r0, [pc, #36]	; (80034fc <HAL_UART_MspInit+0xa0>)
 80034d8:	f000 fb00 	bl	8003adc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	2100      	movs	r1, #0
 80034e0:	2026      	movs	r0, #38	; 0x26
 80034e2:	f000 fa08 	bl	80038f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034e6:	2026      	movs	r0, #38	; 0x26
 80034e8:	f000 fa21 	bl	800392e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034ec:	bf00      	nop
 80034ee:	3720      	adds	r7, #32
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40004400 	.word	0x40004400
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40010800 	.word	0x40010800

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003504:	e7fe      	b.n	8003504 <NMI_Handler+0x4>

08003506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003506:	b480      	push	{r7}
 8003508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350a:	e7fe      	b.n	800350a <HardFault_Handler+0x4>

0800350c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003510:	e7fe      	b.n	8003510 <MemManage_Handler+0x4>

08003512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003516:	e7fe      	b.n	8003516 <BusFault_Handler+0x4>

08003518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800351c:	e7fe      	b.n	800351c <UsageFault_Handler+0x4>

0800351e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	bc80      	pop	{r7}
 8003534:	4770      	bx	lr

08003536 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003536:	b480      	push	{r7}
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800353a:	bf00      	nop
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003542:	b580      	push	{r7, lr}
 8003544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003546:	f7ff fa6b 	bl	8002a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <I2C1_EV_IRQHandler+0x10>)
 8003556:	f001 fa45 	bl	80049e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	2000020c 	.word	0x2000020c

08003564 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <I2C2_EV_IRQHandler+0x10>)
 800356a:	f001 fa3b 	bl	80049e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20000260 	.word	0x20000260

08003578 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <USART2_IRQHandler+0x10>)
 800357e:	f005 fb7f 	bl	8008c80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000320 	.word	0x20000320

0800358c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003590:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003594:	f000 fc3e 	bl	8003e14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}

0800359c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035a4:	4a14      	ldr	r2, [pc, #80]	; (80035f8 <_sbrk+0x5c>)
 80035a6:	4b15      	ldr	r3, [pc, #84]	; (80035fc <_sbrk+0x60>)
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035b0:	4b13      	ldr	r3, [pc, #76]	; (8003600 <_sbrk+0x64>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d102      	bne.n	80035be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <_sbrk+0x64>)
 80035ba:	4a12      	ldr	r2, [pc, #72]	; (8003604 <_sbrk+0x68>)
 80035bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035be:	4b10      	ldr	r3, [pc, #64]	; (8003600 <_sbrk+0x64>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d207      	bcs.n	80035dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035cc:	f008 fcdc 	bl	800bf88 <__errno>
 80035d0:	4603      	mov	r3, r0
 80035d2:	220c      	movs	r2, #12
 80035d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035d6:	f04f 33ff 	mov.w	r3, #4294967295
 80035da:	e009      	b.n	80035f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <_sbrk+0x64>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035e2:	4b07      	ldr	r3, [pc, #28]	; (8003600 <_sbrk+0x64>)
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4413      	add	r3, r2
 80035ea:	4a05      	ldr	r2, [pc, #20]	; (8003600 <_sbrk+0x64>)
 80035ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035ee:	68fb      	ldr	r3, [r7, #12]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	20005000 	.word	0x20005000
 80035fc:	00000400 	.word	0x00000400
 8003600:	200007b0 	.word	0x200007b0
 8003604:	20000c58 	.word	0x20000c58

08003608 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800360c:	bf00      	nop
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003614:	480c      	ldr	r0, [pc, #48]	; (8003648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003616:	490d      	ldr	r1, [pc, #52]	; (800364c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003618:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0a      	ldr	r2, [pc, #40]	; (8003654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800362c:	4c0a      	ldr	r4, [pc, #40]	; (8003658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800363a:	f7ff ffe5 	bl	8003608 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f008 fca9 	bl	800bf94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003642:	f7fe fd9f 	bl	8002184 <main>
  bx lr
 8003646:	4770      	bx	lr
  ldr r0, =_sdata
 8003648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800364c:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 8003650:	0800fc2c 	.word	0x0800fc2c
  ldr r2, =_sbss
 8003654:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 8003658:	20000c58 	.word	0x20000c58

0800365c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800365c:	e7fe      	b.n	800365c <ADC1_2_IRQHandler>
	...

08003660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003664:	4b08      	ldr	r3, [pc, #32]	; (8003688 <HAL_Init+0x28>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a07      	ldr	r2, [pc, #28]	; (8003688 <HAL_Init+0x28>)
 800366a:	f043 0310 	orr.w	r3, r3, #16
 800366e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003670:	2003      	movs	r0, #3
 8003672:	f000 f935 	bl	80038e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003676:	200f      	movs	r0, #15
 8003678:	f000 f808 	bl	800368c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800367c:	f7ff fdd0 	bl	8003220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000

0800368c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_InitTick+0x54>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_InitTick+0x58>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	4619      	mov	r1, r3
 800369e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	4618      	mov	r0, r3
 80036ac:	f000 f94d 	bl	800394a <HAL_SYSTICK_Config>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d001      	beq.n	80036ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e00e      	b.n	80036d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b0f      	cmp	r3, #15
 80036be:	d80a      	bhi.n	80036d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036c0:	2200      	movs	r2, #0
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	f04f 30ff 	mov.w	r0, #4294967295
 80036c8:	f000 f915 	bl	80038f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036cc:	4a06      	ldr	r2, [pc, #24]	; (80036e8 <HAL_InitTick+0x5c>)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	e000      	b.n	80036d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	20000080 	.word	0x20000080
 80036e4:	20000088 	.word	0x20000088
 80036e8:	20000084 	.word	0x20000084

080036ec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  return uwTick;
 80036f0:	4b02      	ldr	r3, [pc, #8]	; (80036fc <HAL_GetTick+0x10>)
 80036f2:	681b      	ldr	r3, [r3, #0]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bc80      	pop	{r7}
 80036fa:	4770      	bx	lr
 80036fc:	200007b4 	.word	0x200007b4

08003700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003708:	f7ff fff0 	bl	80036ec <HAL_GetTick>
 800370c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003718:	d005      	beq.n	8003726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_Delay+0x44>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	461a      	mov	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003726:	bf00      	nop
 8003728:	f7ff ffe0 	bl	80036ec <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	429a      	cmp	r2, r3
 8003736:	d8f7      	bhi.n	8003728 <HAL_Delay+0x28>
  {
  }
}
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000088 	.word	0x20000088

08003748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003758:	4b0c      	ldr	r3, [pc, #48]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003764:	4013      	ands	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377a:	4a04      	ldr	r2, [pc, #16]	; (800378c <__NVIC_SetPriorityGrouping+0x44>)
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	60d3      	str	r3, [r2, #12]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	bc80      	pop	{r7}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	0a1b      	lsrs	r3, r3, #8
 800379a:	f003 0307 	and.w	r3, r3, #7
}
 800379e:	4618      	mov	r0, r3
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bc80      	pop	{r7}
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	e000ed00 	.word	0xe000ed00

080037ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	4603      	mov	r3, r0
 80037b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	db0b      	blt.n	80037d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	f003 021f 	and.w	r2, r3, #31
 80037c4:	4906      	ldr	r1, [pc, #24]	; (80037e0 <__NVIC_EnableIRQ+0x34>)
 80037c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	2001      	movs	r0, #1
 80037ce:	fa00 f202 	lsl.w	r2, r0, r2
 80037d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	e000e100 	.word	0xe000e100

080037e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	4603      	mov	r3, r0
 80037ec:	6039      	str	r1, [r7, #0]
 80037ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	db0a      	blt.n	800380e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	b2da      	uxtb	r2, r3
 80037fc:	490c      	ldr	r1, [pc, #48]	; (8003830 <__NVIC_SetPriority+0x4c>)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	0112      	lsls	r2, r2, #4
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	440b      	add	r3, r1
 8003808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800380c:	e00a      	b.n	8003824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	b2da      	uxtb	r2, r3
 8003812:	4908      	ldr	r1, [pc, #32]	; (8003834 <__NVIC_SetPriority+0x50>)
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	3b04      	subs	r3, #4
 800381c:	0112      	lsls	r2, r2, #4
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	440b      	add	r3, r1
 8003822:	761a      	strb	r2, [r3, #24]
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e100 	.word	0xe000e100
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003838:	b480      	push	{r7}
 800383a:	b089      	sub	sp, #36	; 0x24
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 0307 	and.w	r3, r3, #7
 800384a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	f1c3 0307 	rsb	r3, r3, #7
 8003852:	2b04      	cmp	r3, #4
 8003854:	bf28      	it	cs
 8003856:	2304      	movcs	r3, #4
 8003858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	3304      	adds	r3, #4
 800385e:	2b06      	cmp	r3, #6
 8003860:	d902      	bls.n	8003868 <NVIC_EncodePriority+0x30>
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3b03      	subs	r3, #3
 8003866:	e000      	b.n	800386a <NVIC_EncodePriority+0x32>
 8003868:	2300      	movs	r3, #0
 800386a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800386c:	f04f 32ff 	mov.w	r2, #4294967295
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	43da      	mvns	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	401a      	ands	r2, r3
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003880:	f04f 31ff 	mov.w	r1, #4294967295
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	fa01 f303 	lsl.w	r3, r1, r3
 800388a:	43d9      	mvns	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003890:	4313      	orrs	r3, r2
         );
}
 8003892:	4618      	mov	r0, r3
 8003894:	3724      	adds	r7, #36	; 0x24
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038ac:	d301      	bcc.n	80038b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ae:	2301      	movs	r3, #1
 80038b0:	e00f      	b.n	80038d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038b2:	4a0a      	ldr	r2, [pc, #40]	; (80038dc <SysTick_Config+0x40>)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ba:	210f      	movs	r1, #15
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f7ff ff90 	bl	80037e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <SysTick_Config+0x40>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038ca:	4b04      	ldr	r3, [pc, #16]	; (80038dc <SysTick_Config+0x40>)
 80038cc:	2207      	movs	r2, #7
 80038ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	e000e010 	.word	0xe000e010

080038e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b082      	sub	sp, #8
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7ff ff2d 	bl	8003748 <__NVIC_SetPriorityGrouping>
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b086      	sub	sp, #24
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003904:	2300      	movs	r3, #0
 8003906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003908:	f7ff ff42 	bl	8003790 <__NVIC_GetPriorityGrouping>
 800390c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	68b9      	ldr	r1, [r7, #8]
 8003912:	6978      	ldr	r0, [r7, #20]
 8003914:	f7ff ff90 	bl	8003838 <NVIC_EncodePriority>
 8003918:	4602      	mov	r2, r0
 800391a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800391e:	4611      	mov	r1, r2
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff5f 	bl	80037e4 <__NVIC_SetPriority>
}
 8003926:	bf00      	nop
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	4603      	mov	r3, r0
 8003936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff35 	bl	80037ac <__NVIC_EnableIRQ>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff ffa2 	bl	800389c <SysTick_Config>
 8003958:	4603      	mov	r3, r0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396a:	2300      	movs	r3, #0
 800396c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003974:	2b02      	cmp	r3, #2
 8003976:	d008      	beq.n	800398a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2204      	movs	r2, #4
 800397c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e020      	b.n	80039cc <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 020e 	bic.w	r2, r2, #14
 8003998:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	2101      	movs	r1, #1
 80039b4:	fa01 f202 	lsl.w	r2, r1, r2
 80039b8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80039ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d005      	beq.n	80039fa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2204      	movs	r2, #4
 80039f2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e051      	b.n	8003a9e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 020e 	bic.w	r2, r2, #14
 8003a08:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0201 	bic.w	r2, r2, #1
 8003a18:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a22      	ldr	r2, [pc, #136]	; (8003aa8 <HAL_DMA_Abort_IT+0xd0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d029      	beq.n	8003a78 <HAL_DMA_Abort_IT+0xa0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a20      	ldr	r2, [pc, #128]	; (8003aac <HAL_DMA_Abort_IT+0xd4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x9c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1f      	ldr	r2, [pc, #124]	; (8003ab0 <HAL_DMA_Abort_IT+0xd8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01a      	beq.n	8003a6e <HAL_DMA_Abort_IT+0x96>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_DMA_Abort_IT+0xdc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d012      	beq.n	8003a68 <HAL_DMA_Abort_IT+0x90>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1c      	ldr	r2, [pc, #112]	; (8003ab8 <HAL_DMA_Abort_IT+0xe0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00a      	beq.n	8003a62 <HAL_DMA_Abort_IT+0x8a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1a      	ldr	r2, [pc, #104]	; (8003abc <HAL_DMA_Abort_IT+0xe4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d102      	bne.n	8003a5c <HAL_DMA_Abort_IT+0x84>
 8003a56:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a5a:	e00e      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a60:	e00b      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a66:	e008      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a6c:	e005      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a72:	e002      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a74:	2310      	movs	r3, #16
 8003a76:	e000      	b.n	8003a7a <HAL_DMA_Abort_IT+0xa2>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	4a11      	ldr	r2, [pc, #68]	; (8003ac0 <HAL_DMA_Abort_IT+0xe8>)
 8003a7c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2201      	movs	r2, #1
 8003a82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	4798      	blx	r3
    } 
  }
  return status;
 8003a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	40020008 	.word	0x40020008
 8003aac:	4002001c 	.word	0x4002001c
 8003ab0:	40020030 	.word	0x40020030
 8003ab4:	40020044 	.word	0x40020044
 8003ab8:	40020058 	.word	0x40020058
 8003abc:	4002006c 	.word	0x4002006c
 8003ac0:	40020000 	.word	0x40020000

08003ac4 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b08b      	sub	sp, #44	; 0x2c
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003aea:	2300      	movs	r3, #0
 8003aec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aee:	e169      	b.n	8003dc4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003af0:	2201      	movs	r2, #1
 8003af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	4013      	ands	r3, r2
 8003b02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	f040 8158 	bne.w	8003dbe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4a9a      	ldr	r2, [pc, #616]	; (8003d7c <HAL_GPIO_Init+0x2a0>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d05e      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
 8003b18:	4a98      	ldr	r2, [pc, #608]	; (8003d7c <HAL_GPIO_Init+0x2a0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d875      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b1e:	4a98      	ldr	r2, [pc, #608]	; (8003d80 <HAL_GPIO_Init+0x2a4>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d058      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
 8003b24:	4a96      	ldr	r2, [pc, #600]	; (8003d80 <HAL_GPIO_Init+0x2a4>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d86f      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b2a:	4a96      	ldr	r2, [pc, #600]	; (8003d84 <HAL_GPIO_Init+0x2a8>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d052      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
 8003b30:	4a94      	ldr	r2, [pc, #592]	; (8003d84 <HAL_GPIO_Init+0x2a8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d869      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b36:	4a94      	ldr	r2, [pc, #592]	; (8003d88 <HAL_GPIO_Init+0x2ac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d04c      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
 8003b3c:	4a92      	ldr	r2, [pc, #584]	; (8003d88 <HAL_GPIO_Init+0x2ac>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d863      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b42:	4a92      	ldr	r2, [pc, #584]	; (8003d8c <HAL_GPIO_Init+0x2b0>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d046      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
 8003b48:	4a90      	ldr	r2, [pc, #576]	; (8003d8c <HAL_GPIO_Init+0x2b0>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d85d      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b4e:	2b12      	cmp	r3, #18
 8003b50:	d82a      	bhi.n	8003ba8 <HAL_GPIO_Init+0xcc>
 8003b52:	2b12      	cmp	r3, #18
 8003b54:	d859      	bhi.n	8003c0a <HAL_GPIO_Init+0x12e>
 8003b56:	a201      	add	r2, pc, #4	; (adr r2, 8003b5c <HAL_GPIO_Init+0x80>)
 8003b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5c:	08003bd7 	.word	0x08003bd7
 8003b60:	08003bb1 	.word	0x08003bb1
 8003b64:	08003bc3 	.word	0x08003bc3
 8003b68:	08003c05 	.word	0x08003c05
 8003b6c:	08003c0b 	.word	0x08003c0b
 8003b70:	08003c0b 	.word	0x08003c0b
 8003b74:	08003c0b 	.word	0x08003c0b
 8003b78:	08003c0b 	.word	0x08003c0b
 8003b7c:	08003c0b 	.word	0x08003c0b
 8003b80:	08003c0b 	.word	0x08003c0b
 8003b84:	08003c0b 	.word	0x08003c0b
 8003b88:	08003c0b 	.word	0x08003c0b
 8003b8c:	08003c0b 	.word	0x08003c0b
 8003b90:	08003c0b 	.word	0x08003c0b
 8003b94:	08003c0b 	.word	0x08003c0b
 8003b98:	08003c0b 	.word	0x08003c0b
 8003b9c:	08003c0b 	.word	0x08003c0b
 8003ba0:	08003bb9 	.word	0x08003bb9
 8003ba4:	08003bcd 	.word	0x08003bcd
 8003ba8:	4a79      	ldr	r2, [pc, #484]	; (8003d90 <HAL_GPIO_Init+0x2b4>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003bae:	e02c      	b.n	8003c0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	623b      	str	r3, [r7, #32]
          break;
 8003bb6:	e029      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	623b      	str	r3, [r7, #32]
          break;
 8003bc0:	e024      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	3308      	adds	r3, #8
 8003bc8:	623b      	str	r3, [r7, #32]
          break;
 8003bca:	e01f      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	330c      	adds	r3, #12
 8003bd2:	623b      	str	r3, [r7, #32]
          break;
 8003bd4:	e01a      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003bde:	2304      	movs	r3, #4
 8003be0:	623b      	str	r3, [r7, #32]
          break;
 8003be2:	e013      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bec:	2308      	movs	r3, #8
 8003bee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	69fa      	ldr	r2, [r7, #28]
 8003bf4:	611a      	str	r2, [r3, #16]
          break;
 8003bf6:	e009      	b.n	8003c0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	615a      	str	r2, [r3, #20]
          break;
 8003c02:	e003      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c04:	2300      	movs	r3, #0
 8003c06:	623b      	str	r3, [r7, #32]
          break;
 8003c08:	e000      	b.n	8003c0c <HAL_GPIO_Init+0x130>
          break;
 8003c0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2bff      	cmp	r3, #255	; 0xff
 8003c10:	d801      	bhi.n	8003c16 <HAL_GPIO_Init+0x13a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	e001      	b.n	8003c1a <HAL_GPIO_Init+0x13e>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2bff      	cmp	r3, #255	; 0xff
 8003c20:	d802      	bhi.n	8003c28 <HAL_GPIO_Init+0x14c>
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	e002      	b.n	8003c2e <HAL_GPIO_Init+0x152>
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	3b08      	subs	r3, #8
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	210f      	movs	r1, #15
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	fa01 f303 	lsl.w	r3, r1, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	401a      	ands	r2, r3
 8003c40:	6a39      	ldr	r1, [r7, #32]
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80b1 	beq.w	8003dbe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003c5c:	4b4d      	ldr	r3, [pc, #308]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	4a4c      	ldr	r2, [pc, #304]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	6193      	str	r3, [r2, #24]
 8003c68:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_GPIO_Init+0x2b8>)
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	60bb      	str	r3, [r7, #8]
 8003c72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003c74:	4a48      	ldr	r2, [pc, #288]	; (8003d98 <HAL_GPIO_Init+0x2bc>)
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4013      	ands	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a40      	ldr	r2, [pc, #256]	; (8003d9c <HAL_GPIO_Init+0x2c0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d013      	beq.n	8003cc8 <HAL_GPIO_Init+0x1ec>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a3f      	ldr	r2, [pc, #252]	; (8003da0 <HAL_GPIO_Init+0x2c4>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00d      	beq.n	8003cc4 <HAL_GPIO_Init+0x1e8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a3e      	ldr	r2, [pc, #248]	; (8003da4 <HAL_GPIO_Init+0x2c8>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d007      	beq.n	8003cc0 <HAL_GPIO_Init+0x1e4>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a3d      	ldr	r2, [pc, #244]	; (8003da8 <HAL_GPIO_Init+0x2cc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d101      	bne.n	8003cbc <HAL_GPIO_Init+0x1e0>
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e006      	b.n	8003cca <HAL_GPIO_Init+0x1ee>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e004      	b.n	8003cca <HAL_GPIO_Init+0x1ee>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e002      	b.n	8003cca <HAL_GPIO_Init+0x1ee>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <HAL_GPIO_Init+0x1ee>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ccc:	f002 0203 	and.w	r2, r2, #3
 8003cd0:	0092      	lsls	r2, r2, #2
 8003cd2:	4093      	lsls	r3, r2
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003cda:	492f      	ldr	r1, [pc, #188]	; (8003d98 <HAL_GPIO_Init+0x2bc>)
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cde:	089b      	lsrs	r3, r3, #2
 8003ce0:	3302      	adds	r3, #2
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d006      	beq.n	8003d02 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	492c      	ldr	r1, [pc, #176]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
 8003d00:	e006      	b.n	8003d10 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003d02:	4b2a      	ldr	r3, [pc, #168]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	4928      	ldr	r1, [pc, #160]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d006      	beq.n	8003d2a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003d1c:	4b23      	ldr	r3, [pc, #140]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	4922      	ldr	r1, [pc, #136]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	604b      	str	r3, [r1, #4]
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	43db      	mvns	r3, r3
 8003d32:	491e      	ldr	r1, [pc, #120]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d006      	beq.n	8003d52 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d44:	4b19      	ldr	r3, [pc, #100]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4918      	ldr	r1, [pc, #96]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	608b      	str	r3, [r1, #8]
 8003d50:	e006      	b.n	8003d60 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d52:	4b16      	ldr	r3, [pc, #88]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d54:	689a      	ldr	r2, [r3, #8]
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	4914      	ldr	r1, [pc, #80]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d021      	beq.n	8003db0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d6c:	4b0f      	ldr	r3, [pc, #60]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	490e      	ldr	r1, [pc, #56]	; (8003dac <HAL_GPIO_Init+0x2d0>)
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60cb      	str	r3, [r1, #12]
 8003d78:	e021      	b.n	8003dbe <HAL_GPIO_Init+0x2e2>
 8003d7a:	bf00      	nop
 8003d7c:	10320000 	.word	0x10320000
 8003d80:	10310000 	.word	0x10310000
 8003d84:	10220000 	.word	0x10220000
 8003d88:	10210000 	.word	0x10210000
 8003d8c:	10120000 	.word	0x10120000
 8003d90:	10110000 	.word	0x10110000
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40010000 	.word	0x40010000
 8003d9c:	40010800 	.word	0x40010800
 8003da0:	40010c00 	.word	0x40010c00
 8003da4:	40011000 	.word	0x40011000
 8003da8:	40011400 	.word	0x40011400
 8003dac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_GPIO_Init+0x304>)
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	43db      	mvns	r3, r3
 8003db8:	4909      	ldr	r1, [pc, #36]	; (8003de0 <HAL_GPIO_Init+0x304>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dca:	fa22 f303 	lsr.w	r3, r2, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	f47f ae8e 	bne.w	8003af0 <HAL_GPIO_Init+0x14>
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	bf00      	nop
 8003dd8:	372c      	adds	r7, #44	; 0x2c
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr
 8003de0:	40010400 	.word	0x40010400

08003de4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	460b      	mov	r3, r1
 8003dee:	807b      	strh	r3, [r7, #2]
 8003df0:	4613      	mov	r3, r2
 8003df2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003df4:	787b      	ldrb	r3, [r7, #1]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d003      	beq.n	8003e02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dfa:	887a      	ldrh	r2, [r7, #2]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e00:	e003      	b.n	8003e0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e02:	887b      	ldrh	r3, [r7, #2]
 8003e04:	041a      	lsls	r2, r3, #16
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bc80      	pop	{r7}
 8003e12:	4770      	bx	lr

08003e14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003e1e:	4b08      	ldr	r3, [pc, #32]	; (8003e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	88fb      	ldrh	r3, [r7, #6]
 8003e24:	4013      	ands	r3, r2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e2a:	4a05      	ldr	r2, [pc, #20]	; (8003e40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fe62 	bl	8002afc <HAL_GPIO_EXTI_Callback>
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40010400 	.word	0x40010400

08003e44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e12b      	b.n	80040ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d106      	bne.n	8003e70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fa0a 	bl	8003284 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2224      	movs	r2, #36	; 0x24
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ea6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ea8:	f003 f85e 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8003eac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	4a81      	ldr	r2, [pc, #516]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d807      	bhi.n	8003ec8 <HAL_I2C_Init+0x84>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a80      	ldr	r2, [pc, #512]	; (80040bc <HAL_I2C_Init+0x278>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bf94      	ite	ls
 8003ec0:	2301      	movls	r3, #1
 8003ec2:	2300      	movhi	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	e006      	b.n	8003ed6 <HAL_I2C_Init+0x92>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4a7d      	ldr	r2, [pc, #500]	; (80040c0 <HAL_I2C_Init+0x27c>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	bf94      	ite	ls
 8003ed0:	2301      	movls	r3, #1
 8003ed2:	2300      	movhi	r3, #0
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e0e7      	b.n	80040ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4a78      	ldr	r2, [pc, #480]	; (80040c4 <HAL_I2C_Init+0x280>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	0c9b      	lsrs	r3, r3, #18
 8003ee8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68ba      	ldr	r2, [r7, #8]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	4a6a      	ldr	r2, [pc, #424]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d802      	bhi.n	8003f18 <HAL_I2C_Init+0xd4>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	3301      	adds	r3, #1
 8003f16:	e009      	b.n	8003f2c <HAL_I2C_Init+0xe8>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	4a69      	ldr	r2, [pc, #420]	; (80040c8 <HAL_I2C_Init+0x284>)
 8003f24:	fba2 2303 	umull	r2, r3, r2, r3
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	687a      	ldr	r2, [r7, #4]
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f3e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	495c      	ldr	r1, [pc, #368]	; (80040b8 <HAL_I2C_Init+0x274>)
 8003f48:	428b      	cmp	r3, r1
 8003f4a:	d819      	bhi.n	8003f80 <HAL_I2C_Init+0x13c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	1e59      	subs	r1, r3, #1
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5a:	1c59      	adds	r1, r3, #1
 8003f5c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f60:	400b      	ands	r3, r1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <HAL_I2C_Init+0x138>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1e59      	subs	r1, r3, #1
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f74:	3301      	adds	r3, #1
 8003f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f7a:	e051      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	e04f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d111      	bne.n	8003fac <HAL_I2C_Init+0x168>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1e58      	subs	r0, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	460b      	mov	r3, r1
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	440b      	add	r3, r1
 8003f96:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e012      	b.n	8003fd2 <HAL_I2C_Init+0x18e>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1e58      	subs	r0, r3, #1
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6859      	ldr	r1, [r3, #4]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	0099      	lsls	r1, r3, #2
 8003fbc:	440b      	add	r3, r1
 8003fbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_Init+0x196>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e022      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10e      	bne.n	8004000 <HAL_I2C_Init+0x1bc>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	1e58      	subs	r0, r3, #1
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6859      	ldr	r1, [r3, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	440b      	add	r3, r1
 8003ff0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffe:	e00f      	b.n	8004020 <HAL_I2C_Init+0x1dc>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	1e58      	subs	r0, r3, #1
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	460b      	mov	r3, r1
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	0099      	lsls	r1, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	fbb0 f3f3 	udiv	r3, r0, r3
 8004016:	3301      	adds	r3, #1
 8004018:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800401c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	6809      	ldr	r1, [r1, #0]
 8004024:	4313      	orrs	r3, r2
 8004026:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	69da      	ldr	r2, [r3, #28]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	431a      	orrs	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800404e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6911      	ldr	r1, [r2, #16]
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68d2      	ldr	r2, [r2, #12]
 800405a:	4311      	orrs	r1, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6812      	ldr	r2, [r2, #0]
 8004060:	430b      	orrs	r3, r1
 8004062:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695a      	ldr	r2, [r3, #20]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2220      	movs	r2, #32
 800409a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040ac:	2300      	movs	r3, #0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	000186a0 	.word	0x000186a0
 80040bc:	001e847f 	.word	0x001e847f
 80040c0:	003d08ff 	.word	0x003d08ff
 80040c4:	431bde83 	.word	0x431bde83
 80040c8:	10624dd3 	.word	0x10624dd3

080040cc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	607a      	str	r2, [r7, #4]
 80040d6:	461a      	mov	r2, r3
 80040d8:	460b      	mov	r3, r1
 80040da:	817b      	strh	r3, [r7, #10]
 80040dc:	4613      	mov	r3, r2
 80040de:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040e0:	f7ff fb04 	bl	80036ec <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	f040 80e0 	bne.w	80042b4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	2319      	movs	r3, #25
 80040fa:	2201      	movs	r2, #1
 80040fc:	4970      	ldr	r1, [pc, #448]	; (80042c0 <HAL_I2C_Master_Transmit+0x1f4>)
 80040fe:	68f8      	ldr	r0, [r7, #12]
 8004100:	f002 f92a 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
 800410c:	e0d3      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_I2C_Master_Transmit+0x50>
 8004118:	2302      	movs	r3, #2
 800411a:	e0cc      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0301 	and.w	r3, r3, #1
 800412e:	2b01      	cmp	r3, #1
 8004130:	d007      	beq.n	8004142 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f042 0201 	orr.w	r2, r2, #1
 8004140:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2221      	movs	r2, #33	; 0x21
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2210      	movs	r2, #16
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	893a      	ldrh	r2, [r7, #8]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29a      	uxth	r2, r3
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	4a50      	ldr	r2, [pc, #320]	; (80042c4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004182:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004184:	8979      	ldrh	r1, [r7, #10]
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	6a3a      	ldr	r2, [r7, #32]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f001 feec 	bl	8005f68 <I2C_MasterRequestWrite>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e08d      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80041b0:	e066      	b.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6a39      	ldr	r1, [r7, #32]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f002 f9a4 	bl	8006504 <I2C_WaitOnTXEFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00d      	beq.n	80041de <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d107      	bne.n	80041da <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e06b      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	781a      	ldrb	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	3b01      	subs	r3, #1
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695b      	ldr	r3, [r3, #20]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b04      	cmp	r3, #4
 800421a:	d11b      	bne.n	8004254 <HAL_I2C_Master_Transmit+0x188>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b00      	cmp	r3, #0
 8004222:	d017      	beq.n	8004254 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	781a      	ldrb	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800424c:	3b01      	subs	r3, #1
 800424e:	b29a      	uxth	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	6a39      	ldr	r1, [r7, #32]
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f002 f994 	bl	8006586 <I2C_WaitOnBTFFlagUntilTimeout>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00d      	beq.n	8004280 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	2b04      	cmp	r3, #4
 800426a:	d107      	bne.n	800427c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800427a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e01a      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d194      	bne.n	80041b2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	00100002 	.word	0x00100002
 80042c4:	ffff0000 	.word	0xffff0000

080042c8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08c      	sub	sp, #48	; 0x30
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	607a      	str	r2, [r7, #4]
 80042d2:	461a      	mov	r2, r3
 80042d4:	460b      	mov	r3, r1
 80042d6:	817b      	strh	r3, [r7, #10]
 80042d8:	4613      	mov	r3, r2
 80042da:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042e0:	f7ff fa04 	bl	80036ec <HAL_GetTick>
 80042e4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	f040 823f 	bne.w	8004772 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	2319      	movs	r3, #25
 80042fa:	2201      	movs	r2, #1
 80042fc:	497f      	ldr	r1, [pc, #508]	; (80044fc <HAL_I2C_Master_Receive+0x234>)
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f002 f82a 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
 800430c:	e232      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_I2C_Master_Receive+0x54>
 8004318:	2302      	movs	r3, #2
 800431a:	e22b      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b01      	cmp	r3, #1
 8004330:	d007      	beq.n	8004342 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f042 0201 	orr.w	r2, r2, #1
 8004340:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004350:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2222      	movs	r2, #34	; 0x22
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2210      	movs	r2, #16
 800435e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	893a      	ldrh	r2, [r7, #8]
 8004372:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29a      	uxth	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4a5f      	ldr	r2, [pc, #380]	; (8004500 <HAL_I2C_Master_Receive+0x238>)
 8004382:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004384:	8979      	ldrh	r1, [r7, #10]
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f001 fe6e 	bl	800606c <I2C_MasterRequestRead>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e1ec      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d113      	bne.n	80043ca <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	61fb      	str	r3, [r7, #28]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	61fb      	str	r3, [r7, #28]
 80043b6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	e1c0      	b.n	800474c <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d11e      	bne.n	8004410 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80043e2:	b672      	cpsid	i
}
 80043e4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043e6:	2300      	movs	r3, #0
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	61bb      	str	r3, [r7, #24]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800440a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800440c:	b662      	cpsie	i
}
 800440e:	e035      	b.n	800447c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004414:	2b02      	cmp	r3, #2
 8004416:	d11e      	bne.n	8004456 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004426:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004428:	b672      	cpsid	i
}
 800442a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800442c:	2300      	movs	r3, #0
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	695b      	ldr	r3, [r3, #20]
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004450:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004452:	b662      	cpsie	i
}
 8004454:	e012      	b.n	800447c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	613b      	str	r3, [r7, #16]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800447c:	e166      	b.n	800474c <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004482:	2b03      	cmp	r3, #3
 8004484:	f200 811f 	bhi.w	80046c6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800448c:	2b01      	cmp	r3, #1
 800448e:	d123      	bne.n	80044d8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f002 f8e9 	bl	800666c <I2C_WaitOnRXNEFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e167      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	691a      	ldr	r2, [r3, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b6:	1c5a      	adds	r2, r3, #1
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	3b01      	subs	r3, #1
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044d6:	e139      	b.n	800474c <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d152      	bne.n	8004586 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	4906      	ldr	r1, [pc, #24]	; (8004504 <HAL_I2C_Master_Receive+0x23c>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f001 ff34 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d008      	beq.n	8004508 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e13c      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
 80044fa:	bf00      	nop
 80044fc:	00100002 	.word	0x00100002
 8004500:	ffff0000 	.word	0xffff0000
 8004504:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004508:	b672      	cpsid	i
}
 800450a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800454e:	b662      	cpsie	i
}
 8004550:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800456e:	3b01      	subs	r3, #1
 8004570:	b29a      	uxth	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004584:	e0e2      	b.n	800474c <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	2200      	movs	r2, #0
 800458e:	497b      	ldr	r1, [pc, #492]	; (800477c <HAL_I2C_Master_Receive+0x4b4>)
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f001 fee1 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e0e9      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045b0:	b672      	cpsid	i
}
 80045b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	691a      	ldr	r2, [r3, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	3b01      	subs	r3, #1
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045dc:	b29b      	uxth	r3, r3
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80045e6:	4b66      	ldr	r3, [pc, #408]	; (8004780 <HAL_I2C_Master_Receive+0x4b8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	08db      	lsrs	r3, r3, #3
 80045ec:	4a65      	ldr	r2, [pc, #404]	; (8004784 <HAL_I2C_Master_Receive+0x4bc>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	0a1a      	lsrs	r2, r3, #8
 80045f4:	4613      	mov	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4413      	add	r3, r2
 80045fa:	00da      	lsls	r2, r3, #3
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	3b01      	subs	r3, #1
 8004604:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004606:	6a3b      	ldr	r3, [r7, #32]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d118      	bne.n	800463e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800462e:	b662      	cpsie	i
}
 8004630:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e09a      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0304 	and.w	r3, r3, #4
 8004648:	2b04      	cmp	r3, #4
 800464a:	d1d9      	bne.n	8004600 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800465a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	691a      	ldr	r2, [r3, #16]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800468e:	b662      	cpsie	i
}
 8004690:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ba:	b29b      	uxth	r3, r3
 80046bc:	3b01      	subs	r3, #1
 80046be:	b29a      	uxth	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046c4:	e042      	b.n	800474c <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f001 ffce 	bl	800666c <I2C_WaitOnRXNEFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e04c      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	f003 0304 	and.w	r3, r3, #4
 8004716:	2b04      	cmp	r3, #4
 8004718:	d118      	bne.n	800474c <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691a      	ldr	r2, [r3, #16]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	b2d2      	uxtb	r2, r2
 8004726:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	1c5a      	adds	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004750:	2b00      	cmp	r3, #0
 8004752:	f47f ae94 	bne.w	800447e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800476e:	2300      	movs	r3, #0
 8004770:	e000      	b.n	8004774 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004772:	2302      	movs	r3, #2
  }
}
 8004774:	4618      	mov	r0, r3
 8004776:	3728      	adds	r7, #40	; 0x28
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	00010004 	.word	0x00010004
 8004780:	20000080 	.word	0x20000080
 8004784:	14f8b589 	.word	0x14f8b589

08004788 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	; 0x28
 800478c:	af02      	add	r7, sp, #8
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	607a      	str	r2, [r7, #4]
 8004792:	603b      	str	r3, [r7, #0]
 8004794:	460b      	mov	r3, r1
 8004796:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004798:	f7fe ffa8 	bl	80036ec <HAL_GetTick>
 800479c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	f040 8111 	bne.w	80049d2 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	2319      	movs	r3, #25
 80047b6:	2201      	movs	r2, #1
 80047b8:	4988      	ldr	r1, [pc, #544]	; (80049dc <HAL_I2C_IsDeviceReady+0x254>)
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f001 fdcc 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
 80047c8:	e104      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d101      	bne.n	80047d8 <HAL_I2C_IsDeviceReady+0x50>
 80047d4:	2302      	movs	r3, #2
 80047d6:	e0fd      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d007      	beq.n	80047fe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f042 0201 	orr.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800480c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2224      	movs	r2, #36	; 0x24
 8004812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a70      	ldr	r2, [pc, #448]	; (80049e0 <HAL_I2C_IsDeviceReady+0x258>)
 8004820:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	9300      	str	r3, [sp, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	2200      	movs	r2, #0
 800483a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f001 fd8a 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00d      	beq.n	8004866 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004858:	d103      	bne.n	8004862 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004860:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0b6      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004866:	897b      	ldrh	r3, [r7, #10]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004874:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004876:	f7fe ff39 	bl	80036ec <HAL_GetTick>
 800487a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b02      	cmp	r3, #2
 8004888:	bf0c      	ite	eq
 800488a:	2301      	moveq	r3, #1
 800488c:	2300      	movne	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800489c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a0:	bf0c      	ite	eq
 80048a2:	2301      	moveq	r3, #1
 80048a4:	2300      	movne	r3, #0
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048aa:	e025      	b.n	80048f8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe ff1e 	bl	80036ec <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d302      	bcc.n	80048c2 <HAL_I2C_IsDeviceReady+0x13a>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	22a0      	movs	r2, #160	; 0xa0
 80048c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	695b      	ldr	r3, [r3, #20]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	bf0c      	ite	eq
 80048d8:	2301      	moveq	r3, #1
 80048da:	2300      	movne	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2ba0      	cmp	r3, #160	; 0xa0
 8004902:	d005      	beq.n	8004910 <HAL_I2C_IsDeviceReady+0x188>
 8004904:	7dfb      	ldrb	r3, [r7, #23]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d102      	bne.n	8004910 <HAL_I2C_IsDeviceReady+0x188>
 800490a:	7dbb      	ldrb	r3, [r7, #22]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0cd      	beq.n	80048ac <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b02      	cmp	r3, #2
 8004924:	d129      	bne.n	800497a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004934:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	613b      	str	r3, [r7, #16]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	613b      	str	r3, [r7, #16]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	2319      	movs	r3, #25
 8004952:	2201      	movs	r2, #1
 8004954:	4921      	ldr	r1, [pc, #132]	; (80049dc <HAL_I2C_IsDeviceReady+0x254>)
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f001 fcfe 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e036      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004976:	2300      	movs	r3, #0
 8004978:	e02c      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004988:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004992:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2319      	movs	r3, #25
 800499a:	2201      	movs	r2, #1
 800499c:	490f      	ldr	r1, [pc, #60]	; (80049dc <HAL_I2C_IsDeviceReady+0x254>)
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f001 fcda 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e012      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	3301      	adds	r3, #1
 80049b2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	f4ff af32 	bcc.w	8004822 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80049d2:	2302      	movs	r3, #2
  }
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	00100002 	.word	0x00100002
 80049e0:	ffff0000 	.word	0xffff0000

080049e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b088      	sub	sp, #32
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a04:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a0c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	2b10      	cmp	r3, #16
 8004a12:	d003      	beq.n	8004a1c <HAL_I2C_EV_IRQHandler+0x38>
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	2b40      	cmp	r3, #64	; 0x40
 8004a18:	f040 80c1 	bne.w	8004b9e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10d      	bne.n	8004a52 <HAL_I2C_EV_IRQHandler+0x6e>
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004a3c:	d003      	beq.n	8004a46 <HAL_I2C_EV_IRQHandler+0x62>
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004a44:	d101      	bne.n	8004a4a <HAL_I2C_EV_IRQHandler+0x66>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <HAL_I2C_EV_IRQHandler+0x68>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f000 8132 	beq.w	8004cb6 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00c      	beq.n	8004a76 <HAL_I2C_EV_IRQHandler+0x92>
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	0a5b      	lsrs	r3, r3, #9
 8004a60:	f003 0301 	and.w	r3, r3, #1
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f001 fe83 	bl	8006774 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fcc8 	bl	8005404 <I2C_Master_SB>
 8004a74:	e092      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	08db      	lsrs	r3, r3, #3
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <HAL_I2C_EV_IRQHandler+0xb2>
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	0a5b      	lsrs	r3, r3, #9
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fd3d 	bl	800550e <I2C_Master_ADD10>
 8004a94:	e082      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d009      	beq.n	8004ab6 <HAL_I2C_EV_IRQHandler+0xd2>
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	0a5b      	lsrs	r3, r3, #9
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fd56 	bl	8005560 <I2C_Master_ADDR>
 8004ab4:	e072      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	089b      	lsrs	r3, r3, #2
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d03b      	beq.n	8004b3a <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004acc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ad0:	f000 80f3 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	09db      	lsrs	r3, r3, #7
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00f      	beq.n	8004b00 <HAL_I2C_EV_IRQHandler+0x11c>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	0a9b      	lsrs	r3, r3, #10
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d009      	beq.n	8004b00 <HAL_I2C_EV_IRQHandler+0x11c>
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	089b      	lsrs	r3, r3, #2
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d103      	bne.n	8004b00 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f942 	bl	8004d82 <I2C_MasterTransmit_TXE>
 8004afe:	e04d      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	089b      	lsrs	r3, r3, #2
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 80d6 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	0a5b      	lsrs	r3, r3, #9
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80cf 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b1c:	7bbb      	ldrb	r3, [r7, #14]
 8004b1e:	2b21      	cmp	r3, #33	; 0x21
 8004b20:	d103      	bne.n	8004b2a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9c9 	bl	8004eba <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b28:	e0c7      	b.n	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b40      	cmp	r3, #64	; 0x40
 8004b2e:	f040 80c4 	bne.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa37 	bl	8004fa6 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b38:	e0bf      	b.n	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b48:	f000 80b7 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	099b      	lsrs	r3, r3, #6
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d00f      	beq.n	8004b78 <HAL_I2C_EV_IRQHandler+0x194>
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	0a9b      	lsrs	r3, r3, #10
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d009      	beq.n	8004b78 <HAL_I2C_EV_IRQHandler+0x194>
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	089b      	lsrs	r3, r3, #2
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d103      	bne.n	8004b78 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 faac 	bl	80050ce <I2C_MasterReceive_RXNE>
 8004b76:	e011      	b.n	8004b9c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	089b      	lsrs	r3, r3, #2
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 809a 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	0a5b      	lsrs	r3, r3, #9
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8093 	beq.w	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f000 fb4b 	bl	8005230 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b9a:	e08e      	b.n	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
 8004b9c:	e08d      	b.n	8004cba <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d004      	beq.n	8004bb0 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	61fb      	str	r3, [r7, #28]
 8004bae:	e007      	b.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	085b      	lsrs	r3, r3, #1
 8004bc4:	f003 0301 	and.w	r3, r3, #1
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d012      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x20e>
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	0a5b      	lsrs	r3, r3, #9
 8004bd0:	f003 0301 	and.w	r3, r3, #1
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00c      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004be8:	69b9      	ldr	r1, [r7, #24]
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 ff0f 	bl	8005a0e <I2C_Slave_ADDR>
 8004bf0:	e066      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	091b      	lsrs	r3, r3, #4
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d009      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0x22e>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	0a5b      	lsrs	r3, r3, #9
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 ff4a 	bl	8005aa4 <I2C_Slave_STOPF>
 8004c10:	e056      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c12:	7bbb      	ldrb	r3, [r7, #14]
 8004c14:	2b21      	cmp	r3, #33	; 0x21
 8004c16:	d002      	beq.n	8004c1e <HAL_I2C_EV_IRQHandler+0x23a>
 8004c18:	7bbb      	ldrb	r3, [r7, #14]
 8004c1a:	2b29      	cmp	r3, #41	; 0x29
 8004c1c:	d125      	bne.n	8004c6a <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	09db      	lsrs	r3, r3, #7
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00f      	beq.n	8004c4a <HAL_I2C_EV_IRQHandler+0x266>
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	0a9b      	lsrs	r3, r3, #10
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_I2C_EV_IRQHandler+0x266>
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	089b      	lsrs	r3, r3, #2
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d103      	bne.n	8004c4a <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fe27 	bl	8005896 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c48:	e039      	b.n	8004cbe <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	089b      	lsrs	r3, r3, #2
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d033      	beq.n	8004cbe <HAL_I2C_EV_IRQHandler+0x2da>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	0a5b      	lsrs	r3, r3, #9
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02d      	beq.n	8004cbe <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fe54 	bl	8005910 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c68:	e029      	b.n	8004cbe <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00f      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	0a9b      	lsrs	r3, r3, #10
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	089b      	lsrs	r3, r3, #2
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d103      	bne.n	8004c96 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fe5e 	bl	8005950 <I2C_SlaveReceive_RXNE>
 8004c94:	e014      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	089b      	lsrs	r3, r3, #2
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	0a5b      	lsrs	r3, r3, #9
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fe8c 	bl	80059cc <I2C_SlaveReceive_BTF>
 8004cb4:	e004      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cbe:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004cc0:	3720      	adds	r7, #32
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b083      	sub	sp, #12
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bc80      	pop	{r7}
 8004cd6:	4770      	bx	lr

08004cd8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bc80      	pop	{r7}
 8004ce8:	4770      	bx	lr

08004cea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bc80      	pop	{r7}
 8004cfa:	4770      	bx	lr

08004cfc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bc80      	pop	{r7}
 8004d0c:	4770      	bx	lr

08004d0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b083      	sub	sp, #12
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	70fb      	strb	r3, [r7, #3]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d1e:	bf00      	nop
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr

08004d28 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b083      	sub	sp, #12
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bc80      	pop	{r7}
 8004d38:	4770      	bx	lr

08004d3a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004d42:	bf00      	nop
 8004d44:	370c      	adds	r7, #12
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bc80      	pop	{r7}
 8004d5c:	4770      	bx	lr

08004d5e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b480      	push	{r7}
 8004d60:	b083      	sub	sp, #12
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d66:	bf00      	nop
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bc80      	pop	{r7}
 8004d6e:	4770      	bx	lr

08004d70 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr

08004d82 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b084      	sub	sp, #16
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d98:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d150      	bne.n	8004e4a <I2C_MasterTransmit_TXE+0xc8>
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b21      	cmp	r3, #33	; 0x21
 8004dac:	d14d      	bne.n	8004e4a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d01d      	beq.n	8004df0 <I2C_MasterTransmit_TXE+0x6e>
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d01a      	beq.n	8004df0 <I2C_MasterTransmit_TXE+0x6e>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004dc0:	d016      	beq.n	8004df0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dd0:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2211      	movs	r2, #17
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f7ff ff6c 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dee:	e060      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d107      	bne.n	8004e3a <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff ff81 	bl	8004d3a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e38:	e03b      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff ff3f 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e48:	e033      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b21      	cmp	r3, #33	; 0x21
 8004e4e:	d005      	beq.n	8004e5c <I2C_MasterTransmit_TXE+0xda>
 8004e50:	7bbb      	ldrb	r3, [r7, #14]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d12d      	bne.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	2b22      	cmp	r3, #34	; 0x22
 8004e5a:	d12a      	bne.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d108      	bne.n	8004e78 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e74:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e76:	e01c      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d103      	bne.n	8004e8c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f88e 	bl	8004fa6 <I2C_MemoryTransmit_TXE_BTF>
}
 8004e8a:	e012      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	781a      	ldrb	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b29a      	uxth	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004eb0:	e7ff      	b.n	8004eb2 <I2C_MasterTransmit_TXE+0x130>
 8004eb2:	bf00      	nop
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004eba:	b580      	push	{r7, lr}
 8004ebc:	b084      	sub	sp, #16
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	2b21      	cmp	r3, #33	; 0x21
 8004ed2:	d164      	bne.n	8004f9e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d012      	beq.n	8004f04 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eee:	1c5a      	adds	r2, r3, #1
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f02:	e04c      	b.n	8004f9e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b08      	cmp	r3, #8
 8004f08:	d01d      	beq.n	8004f46 <I2C_MasterTransmit_BTF+0x8c>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b20      	cmp	r3, #32
 8004f0e:	d01a      	beq.n	8004f46 <I2C_MasterTransmit_BTF+0x8c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f16:	d016      	beq.n	8004f46 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f26:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2211      	movs	r2, #17
 8004f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fec1 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
}
 8004f44:	e02b      	b.n	8004f9e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f54:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f64:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b40      	cmp	r3, #64	; 0x40
 8004f7e:	d107      	bne.n	8004f90 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fed6 	bl	8004d3a <HAL_I2C_MemTxCpltCallback>
}
 8004f8e:	e006      	b.n	8004f9e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f7ff fe94 	bl	8004cc6 <HAL_I2C_MasterTxCpltCallback>
}
 8004f9e:	bf00      	nop
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d11d      	bne.n	8004ffa <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d10b      	bne.n	8004fde <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd6:	1c9a      	adds	r2, r3, #2
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004fdc:	e073      	b.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	121b      	asrs	r3, r3, #8
 8004fe6:	b2da      	uxtb	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ff8:	e065      	b.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10b      	bne.n	800501a <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005006:	b2da      	uxtb	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005012:	1c5a      	adds	r2, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005018:	e055      	b.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501e:	2b02      	cmp	r3, #2
 8005020:	d151      	bne.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b22      	cmp	r3, #34	; 0x22
 8005026:	d10d      	bne.n	8005044 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005036:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800503c:	1c5a      	adds	r2, r3, #1
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005042:	e040      	b.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	d015      	beq.n	800507a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b21      	cmp	r3, #33	; 0x21
 8005052:	d112      	bne.n	800507a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	1c5a      	adds	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800506e:	b29b      	uxth	r3, r3
 8005070:	3b01      	subs	r3, #1
 8005072:	b29a      	uxth	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005078:	e025      	b.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d120      	bne.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b21      	cmp	r3, #33	; 0x21
 8005088:	d11d      	bne.n	80050c6 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005098:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a8:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2220      	movs	r2, #32
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fe3a 	bl	8004d3a <HAL_I2C_MemTxCpltCallback>
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}

080050ce <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050ce:	b580      	push	{r7, lr}
 80050d0:	b084      	sub	sp, #16
 80050d2:	af00      	add	r7, sp, #0
 80050d4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b22      	cmp	r3, #34	; 0x22
 80050e0:	f040 80a2 	bne.w	8005228 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d921      	bls.n	8005136 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510e:	b29b      	uxth	r3, r3
 8005110:	3b01      	subs	r3, #1
 8005112:	b29a      	uxth	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511c:	b29b      	uxth	r3, r3
 800511e:	2b03      	cmp	r3, #3
 8005120:	f040 8082 	bne.w	8005228 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005132:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8005134:	e078      	b.n	8005228 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	2b02      	cmp	r3, #2
 800513c:	d074      	beq.n	8005228 <I2C_MasterReceive_RXNE+0x15a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b01      	cmp	r3, #1
 8005142:	d002      	beq.n	800514a <I2C_MasterReceive_RXNE+0x7c>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d16e      	bne.n	8005228 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f001 fa5c 	bl	8006608 <I2C_WaitOnSTOPRequestThroughIT>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d142      	bne.n	80051dc <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005174:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691a      	ldr	r2, [r3, #16]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	3b01      	subs	r3, #1
 8005196:	b29a      	uxth	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d10a      	bne.n	80051c6 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7ff fdc4 	bl	8004d4c <HAL_I2C_MemRxCpltCallback>
}
 80051c4:	e030      	b.n	8005228 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2212      	movs	r2, #18
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7ff fd7f 	bl	8004cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80051da:	e025      	b.n	8005228 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691a      	ldr	r2, [r3, #16]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	b2d2      	uxtb	r2, r2
 80051f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	3b01      	subs	r3, #1
 800520c:	b29a      	uxth	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff fd9b 	bl	8004d5e <HAL_I2C_ErrorCallback>
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005242:	b29b      	uxth	r3, r3
 8005244:	2b04      	cmp	r3, #4
 8005246:	d11b      	bne.n	8005280 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005256:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005274:	b29b      	uxth	r3, r3
 8005276:	3b01      	subs	r3, #1
 8005278:	b29a      	uxth	r2, r3
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800527e:	e0bd      	b.n	80053fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d129      	bne.n	80052de <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005298:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d00a      	beq.n	80052b6 <I2C_MasterReceive_BTF+0x86>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d007      	beq.n	80052b6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	691a      	ldr	r2, [r3, #16]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	b2d2      	uxtb	r2, r2
 80052c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80052dc:	e08e      	b.n	80053fc <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d176      	bne.n	80053d6 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d002      	beq.n	80052f4 <I2C_MasterReceive_BTF+0xc4>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d108      	bne.n	8005306 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	e019      	b.n	800533a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2b04      	cmp	r3, #4
 800530a:	d002      	beq.n	8005312 <I2C_MasterReceive_BTF+0xe2>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2b02      	cmp	r3, #2
 8005310:	d108      	bne.n	8005324 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	e00a      	b.n	800533a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b10      	cmp	r3, #16
 8005328:	d007      	beq.n	800533a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005338:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691a      	ldr	r2, [r3, #16]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	b2d2      	uxtb	r2, r2
 8005346:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691a      	ldr	r2, [r3, #16]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536a:	b2d2      	uxtb	r2, r2
 800536c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800537c:	b29b      	uxth	r3, r3
 800537e:	3b01      	subs	r3, #1
 8005380:	b29a      	uxth	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005394:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	d10a      	bne.n	80053c0 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff fcc7 	bl	8004d4c <HAL_I2C_MemRxCpltCallback>
}
 80053be:	e01d      	b.n	80053fc <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2212      	movs	r2, #18
 80053cc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f7ff fc82 	bl	8004cd8 <HAL_I2C_MasterRxCpltCallback>
}
 80053d4:	e012      	b.n	80053fc <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d117      	bne.n	8005448 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541c:	2b00      	cmp	r3, #0
 800541e:	d109      	bne.n	8005434 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005424:	b2db      	uxtb	r3, r3
 8005426:	461a      	mov	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005430:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005432:	e067      	b.n	8005504 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005438:	b2db      	uxtb	r3, r3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	b2da      	uxtb	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	611a      	str	r2, [r3, #16]
}
 8005446:	e05d      	b.n	8005504 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005450:	d133      	bne.n	80054ba <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b21      	cmp	r3, #33	; 0x21
 800545c:	d109      	bne.n	8005472 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005462:	b2db      	uxtb	r3, r3
 8005464:	461a      	mov	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800546e:	611a      	str	r2, [r3, #16]
 8005470:	e008      	b.n	8005484 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f043 0301 	orr.w	r3, r3, #1
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <I2C_Master_SB+0x92>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005492:	2b00      	cmp	r3, #0
 8005494:	d108      	bne.n	80054a8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549a:	2b00      	cmp	r3, #0
 800549c:	d032      	beq.n	8005504 <I2C_Master_SB+0x100>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02d      	beq.n	8005504 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054b6:	605a      	str	r2, [r3, #4]
}
 80054b8:	e024      	b.n	8005504 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10e      	bne.n	80054e0 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	11db      	asrs	r3, r3, #7
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	f003 0306 	and.w	r3, r3, #6
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	f063 030f 	orn	r3, r3, #15
 80054d6:	b2da      	uxtb	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	611a      	str	r2, [r3, #16]
}
 80054de:	e011      	b.n	8005504 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10d      	bne.n	8005504 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	11db      	asrs	r3, r3, #7
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	f003 0306 	and.w	r3, r3, #6
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	f063 030e 	orn	r3, r3, #14
 80054fc:	b2da      	uxtb	r2, r3
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	611a      	str	r2, [r3, #16]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr

0800550e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	b2da      	uxtb	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005526:	2b00      	cmp	r3, #0
 8005528:	d004      	beq.n	8005534 <I2C_Master_ADD10+0x26>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005530:	2b00      	cmp	r3, #0
 8005532:	d108      	bne.n	8005546 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005538:	2b00      	cmp	r3, #0
 800553a:	d00c      	beq.n	8005556 <I2C_Master_ADD10+0x48>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d007      	beq.n	8005556 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005554:	605a      	str	r2, [r3, #4]
  }
}
 8005556:	bf00      	nop
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005560:	b480      	push	{r7}
 8005562:	b091      	sub	sp, #68	; 0x44
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800556e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800557c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005584:	b2db      	uxtb	r3, r3
 8005586:	2b22      	cmp	r3, #34	; 0x22
 8005588:	f040 8174 	bne.w	8005874 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <I2C_Master_ADDR+0x54>
 8005594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005598:	2b40      	cmp	r3, #64	; 0x40
 800559a:	d10b      	bne.n	80055b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800559c:	2300      	movs	r3, #0
 800559e:	633b      	str	r3, [r7, #48]	; 0x30
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	695b      	ldr	r3, [r3, #20]
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	633b      	str	r3, [r7, #48]	; 0x30
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	e16b      	b.n	800588c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11d      	bne.n	80055f8 <I2C_Master_ADDR+0x98>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	691b      	ldr	r3, [r3, #16]
 80055c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80055c4:	d118      	bne.n	80055f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c6:	2300      	movs	r3, #0
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055da:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	651a      	str	r2, [r3, #80]	; 0x50
 80055f6:	e149      	b.n	800588c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d113      	bne.n	800562a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005602:	2300      	movs	r3, #0
 8005604:	62bb      	str	r3, [r7, #40]	; 0x28
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	62bb      	str	r3, [r7, #40]	; 0x28
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	62bb      	str	r3, [r7, #40]	; 0x28
 8005616:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	e120      	b.n	800586c <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	2b01      	cmp	r3, #1
 8005632:	f040 808a 	bne.w	800574a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800563c:	d137      	bne.n	80056ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800565c:	d113      	bne.n	8005686 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800566e:	2300      	movs	r3, #0
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	627b      	str	r3, [r7, #36]	; 0x24
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	699b      	ldr	r3, [r3, #24]
 8005680:	627b      	str	r3, [r7, #36]	; 0x24
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	e0f2      	b.n	800586c <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005686:	2300      	movs	r3, #0
 8005688:	623b      	str	r3, [r7, #32]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	623b      	str	r3, [r7, #32]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	699b      	ldr	r3, [r3, #24]
 8005698:	623b      	str	r3, [r7, #32]
 800569a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e0de      	b.n	800586c <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b0:	2b08      	cmp	r3, #8
 80056b2:	d02e      	beq.n	8005712 <I2C_Master_ADDR+0x1b2>
 80056b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d02b      	beq.n	8005712 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80056ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056bc:	2b12      	cmp	r3, #18
 80056be:	d102      	bne.n	80056c6 <I2C_Master_ADDR+0x166>
 80056c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d125      	bne.n	8005712 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80056c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c8:	2b04      	cmp	r3, #4
 80056ca:	d00e      	beq.n	80056ea <I2C_Master_ADDR+0x18a>
 80056cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d00b      	beq.n	80056ea <I2C_Master_ADDR+0x18a>
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d008      	beq.n	80056ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e6:	601a      	str	r2, [r3, #0]
 80056e8:	e007      	b.n	80056fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80056f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056fa:	2300      	movs	r3, #0
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	695b      	ldr	r3, [r3, #20]
 8005704:	61fb      	str	r3, [r7, #28]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	e0ac      	b.n	800586c <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005720:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005722:	2300      	movs	r3, #0
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	61bb      	str	r3, [r7, #24]
 8005736:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e090      	b.n	800586c <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b02      	cmp	r3, #2
 8005752:	d158      	bne.n	8005806 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005756:	2b04      	cmp	r3, #4
 8005758:	d021      	beq.n	800579e <I2C_Master_ADDR+0x23e>
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	2b02      	cmp	r3, #2
 800575e:	d01e      	beq.n	800579e <I2C_Master_ADDR+0x23e>
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b10      	cmp	r3, #16
 8005764:	d01b      	beq.n	800579e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005774:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579a:	601a      	str	r2, [r3, #0]
 800579c:	e012      	b.n	80057c4 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057ac:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057ae:	2300      	movs	r3, #0
 80057b0:	613b      	str	r3, [r7, #16]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	613b      	str	r3, [r7, #16]
 80057c2:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d2:	d14b      	bne.n	800586c <I2C_Master_ADDR+0x30c>
 80057d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057da:	d00b      	beq.n	80057f4 <I2C_Master_ADDR+0x294>
 80057dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d008      	beq.n	80057f4 <I2C_Master_ADDR+0x294>
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d005      	beq.n	80057f4 <I2C_Master_ADDR+0x294>
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	2b10      	cmp	r3, #16
 80057ec:	d002      	beq.n	80057f4 <I2C_Master_ADDR+0x294>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f0:	2b20      	cmp	r3, #32
 80057f2:	d13b      	bne.n	800586c <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005802:	605a      	str	r2, [r3, #4]
 8005804:	e032      	b.n	800586c <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005814:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005824:	d117      	bne.n	8005856 <I2C_Master_ADDR+0x2f6>
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800582c:	d00b      	beq.n	8005846 <I2C_Master_ADDR+0x2e6>
 800582e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005830:	2b01      	cmp	r3, #1
 8005832:	d008      	beq.n	8005846 <I2C_Master_ADDR+0x2e6>
 8005834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005836:	2b08      	cmp	r3, #8
 8005838:	d005      	beq.n	8005846 <I2C_Master_ADDR+0x2e6>
 800583a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800583c:	2b10      	cmp	r3, #16
 800583e:	d002      	beq.n	8005846 <I2C_Master_ADDR+0x2e6>
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b20      	cmp	r3, #32
 8005844:	d107      	bne.n	8005856 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005854:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005856:	2300      	movs	r3, #0
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695b      	ldr	r3, [r3, #20]
 8005860:	60fb      	str	r3, [r7, #12]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005872:	e00b      	b.n	800588c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	60bb      	str	r3, [r7, #8]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	60bb      	str	r3, [r7, #8]
 8005888:	68bb      	ldr	r3, [r7, #8]
}
 800588a:	e7ff      	b.n	800588c <I2C_Master_ADDR+0x32c>
 800588c:	bf00      	nop
 800588e:	3744      	adds	r7, #68	; 0x44
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d02b      	beq.n	8005908 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	781a      	ldrb	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c0:	1c5a      	adds	r2, r3, #1
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	3b01      	subs	r3, #1
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058d8:	b29b      	uxth	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d114      	bne.n	8005908 <I2C_SlaveTransmit_TXE+0x72>
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	2b29      	cmp	r3, #41	; 0x29
 80058e2:	d111      	bne.n	8005908 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2221      	movs	r2, #33	; 0x21
 80058f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2228      	movs	r2, #40	; 0x28
 80058fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f7ff f9f1 	bl	8004cea <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}

08005910 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800591c:	b29b      	uxth	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	781a      	ldrb	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800593c:	b29b      	uxth	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	b29a      	uxth	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005946:	bf00      	nop
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	bc80      	pop	{r7}
 800594e:	4770      	bx	lr

08005950 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800595e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02c      	beq.n	80059c4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	3b01      	subs	r3, #1
 800598a:	b29a      	uxth	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d114      	bne.n	80059c4 <I2C_SlaveReceive_RXNE+0x74>
 800599a:	7bfb      	ldrb	r3, [r7, #15]
 800599c:	2b2a      	cmp	r3, #42	; 0x2a
 800599e:	d111      	bne.n	80059c4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059ae:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2228      	movs	r2, #40	; 0x28
 80059ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f7ff f99c 	bl	8004cfc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d8:	b29b      	uxth	r3, r3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d012      	beq.n	8005a04 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
 8005a16:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a28:	2b28      	cmp	r3, #40	; 0x28
 8005a2a:	d127      	bne.n	8005a7c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	089b      	lsrs	r3, r3, #2
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	09db      	lsrs	r3, r3, #7
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	81bb      	strh	r3, [r7, #12]
 8005a5e:	e002      	b.n	8005a66 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005a6e:	89ba      	ldrh	r2, [r7, #12]
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff f94a 	bl	8004d0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a7a:	e00e      	b.n	8005a9a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60bb      	str	r3, [r7, #8]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	60bb      	str	r3, [r7, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	699b      	ldr	r3, [r3, #24]
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005a9a:	bf00      	nop
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ac2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60bb      	str	r3, [r7, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	60bb      	str	r3, [r7, #8]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
 8005ae0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b00:	d172      	bne.n	8005be8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b02:	7bfb      	ldrb	r3, [r7, #15]
 8005b04:	2b22      	cmp	r3, #34	; 0x22
 8005b06:	d002      	beq.n	8005b0e <I2C_Slave_STOPF+0x6a>
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d135      	bne.n	8005b7a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0204 	orr.w	r2, r3, #4
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b40:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fd ffbc 	bl	8003ac4 <HAL_DMA_GetState>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d049      	beq.n	8005be6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	4a69      	ldr	r2, [pc, #420]	; (8005cfc <I2C_Slave_STOPF+0x258>)
 8005b58:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7fd ff3a 	bl	80039d8 <HAL_DMA_Abort_IT>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d03d      	beq.n	8005be6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005b74:	4610      	mov	r0, r2
 8005b76:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b78:	e035      	b.n	8005be6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d005      	beq.n	8005b9e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b96:	f043 0204 	orr.w	r2, r3, #4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd ff86 	bl	8003ac4 <HAL_DMA_GetState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d014      	beq.n	8005be8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc2:	4a4e      	ldr	r2, [pc, #312]	; (8005cfc <I2C_Slave_STOPF+0x258>)
 8005bc4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fd ff04 	bl	80039d8 <HAL_DMA_Abort_IT>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d008      	beq.n	8005be8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005be0:	4610      	mov	r0, r2
 8005be2:	4798      	blx	r3
 8005be4:	e000      	b.n	8005be8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d03e      	beq.n	8005c70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d112      	bne.n	8005c26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	b2d2      	uxtb	r2, r2
 8005c0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	1c5a      	adds	r2, r3, #1
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c30:	2b40      	cmp	r3, #64	; 0x40
 8005c32:	d112      	bne.n	8005c5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	691a      	ldr	r2, [r3, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c3e:	b2d2      	uxtb	r2, r2
 8005c40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b29a      	uxth	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c68:	f043 0204 	orr.w	r2, r3, #4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d003      	beq.n	8005c80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 f843 	bl	8005d04 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005c7e:	e039      	b.n	8005cf4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
 8005c82:	2b2a      	cmp	r3, #42	; 0x2a
 8005c84:	d109      	bne.n	8005c9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2228      	movs	r2, #40	; 0x28
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f7ff f831 	bl	8004cfc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b28      	cmp	r3, #40	; 0x28
 8005ca4:	d111      	bne.n	8005cca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <I2C_Slave_STOPF+0x25c>)
 8005caa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2220      	movs	r2, #32
 8005cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7ff f830 	bl	8004d28 <HAL_I2C_ListenCpltCallback>
}
 8005cc8:	e014      	b.n	8005cf4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cce:	2b22      	cmp	r3, #34	; 0x22
 8005cd0:	d002      	beq.n	8005cd8 <I2C_Slave_STOPF+0x234>
 8005cd2:	7bfb      	ldrb	r3, [r7, #15]
 8005cd4:	2b22      	cmp	r3, #34	; 0x22
 8005cd6:	d10d      	bne.n	8005cf4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff f804 	bl	8004cfc <HAL_I2C_SlaveRxCpltCallback>
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	08006209 	.word	0x08006209
 8005d00:	ffff0000 	.word	0xffff0000

08005d04 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d12:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d1a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d002      	beq.n	8005d28 <I2C_ITError+0x24>
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b40      	cmp	r3, #64	; 0x40
 8005d26:	d10a      	bne.n	8005d3e <I2C_ITError+0x3a>
 8005d28:	7bfb      	ldrb	r3, [r7, #15]
 8005d2a:	2b22      	cmp	r3, #34	; 0x22
 8005d2c:	d107      	bne.n	8005d3e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d3e:	7bfb      	ldrb	r3, [r7, #15]
 8005d40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d44:	2b28      	cmp	r3, #40	; 0x28
 8005d46:	d107      	bne.n	8005d58 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2228      	movs	r2, #40	; 0x28
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d56:	e015      	b.n	8005d84 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d66:	d00a      	beq.n	8005d7e <I2C_ITError+0x7a>
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
 8005d6a:	2b60      	cmp	r3, #96	; 0x60
 8005d6c:	d007      	beq.n	8005d7e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2220      	movs	r2, #32
 8005d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d92:	d161      	bne.n	8005e58 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685a      	ldr	r2, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d020      	beq.n	8005df2 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005db4:	4a6a      	ldr	r2, [pc, #424]	; (8005f60 <I2C_ITError+0x25c>)
 8005db6:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f7fd fe0b 	bl	80039d8 <HAL_DMA_Abort_IT>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8089 	beq.w	8005edc <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0201 	bic.w	r2, r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2220      	movs	r2, #32
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	e074      	b.n	8005edc <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	4a5a      	ldr	r2, [pc, #360]	; (8005f60 <I2C_ITError+0x25c>)
 8005df8:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fd fdea 	bl	80039d8 <HAL_DMA_Abort_IT>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d068      	beq.n	8005edc <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	695b      	ldr	r3, [r3, #20]
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b40      	cmp	r3, #64	; 0x40
 8005e16:	d10b      	bne.n	8005e30 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691a      	ldr	r2, [r3, #16]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 0201 	bic.w	r2, r2, #1
 8005e3e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005e52:	4610      	mov	r0, r2
 8005e54:	4798      	blx	r3
 8005e56:	e041      	b.n	8005edc <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b60      	cmp	r3, #96	; 0x60
 8005e62:	d125      	bne.n	8005eb0 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7c:	2b40      	cmp	r3, #64	; 0x40
 8005e7e:	d10b      	bne.n	8005e98 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	691a      	ldr	r2, [r3, #16]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	b2d2      	uxtb	r2, r2
 8005e8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 0201 	bic.w	r2, r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fe ff61 	bl	8004d70 <HAL_I2C_AbortCpltCallback>
 8005eae:	e015      	b.n	8005edc <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eba:	2b40      	cmp	r3, #64	; 0x40
 8005ebc:	d10b      	bne.n	8005ed6 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	691a      	ldr	r2, [r3, #16]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	b2d2      	uxtb	r2, r2
 8005eca:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed0:	1c5a      	adds	r2, r3, #1
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7fe ff41 	bl	8004d5e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10e      	bne.n	8005f0a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d109      	bne.n	8005f0a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d104      	bne.n	8005f0a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f18:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f20:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d113      	bne.n	8005f56 <I2C_ITError+0x252>
 8005f2e:	7bfb      	ldrb	r3, [r7, #15]
 8005f30:	2b28      	cmp	r3, #40	; 0x28
 8005f32:	d110      	bne.n	8005f56 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a0b      	ldr	r2, [pc, #44]	; (8005f64 <I2C_ITError+0x260>)
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f7fe fee9 	bl	8004d28 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f56:	bf00      	nop
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	08006209 	.word	0x08006209
 8005f64:	ffff0000 	.word	0xffff0000

08005f68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b088      	sub	sp, #32
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	607a      	str	r2, [r7, #4]
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	460b      	mov	r3, r1
 8005f76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2b08      	cmp	r3, #8
 8005f82:	d006      	beq.n	8005f92 <I2C_MasterRequestWrite+0x2a>
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d003      	beq.n	8005f92 <I2C_MasterRequestWrite+0x2a>
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005f90:	d108      	bne.n	8005fa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	e00b      	b.n	8005fbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	2b12      	cmp	r3, #18
 8005faa:	d107      	bne.n	8005fbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f000 f9c5 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fe2:	d103      	bne.n	8005fec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005fea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e035      	b.n	800605c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ff8:	d108      	bne.n	800600c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ffa:	897b      	ldrh	r3, [r7, #10]
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006008:	611a      	str	r2, [r3, #16]
 800600a:	e01b      	b.n	8006044 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800600c:	897b      	ldrh	r3, [r7, #10]
 800600e:	11db      	asrs	r3, r3, #7
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0306 	and.w	r3, r3, #6
 8006016:	b2db      	uxtb	r3, r3
 8006018:	f063 030f 	orn	r3, r3, #15
 800601c:	b2da      	uxtb	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	490e      	ldr	r1, [pc, #56]	; (8006064 <I2C_MasterRequestWrite+0xfc>)
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 f9eb 	bl	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	e010      	b.n	800605c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800603a:	897b      	ldrh	r3, [r7, #10]
 800603c:	b2da      	uxtb	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	4907      	ldr	r1, [pc, #28]	; (8006068 <I2C_MasterRequestWrite+0x100>)
 800604a:	68f8      	ldr	r0, [r7, #12]
 800604c:	f000 f9db 	bl	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006050:	4603      	mov	r3, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	d001      	beq.n	800605a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800605a:	2300      	movs	r3, #0
}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}
 8006064:	00010008 	.word	0x00010008
 8006068:	00010002 	.word	0x00010002

0800606c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	603b      	str	r3, [r7, #0]
 8006078:	460b      	mov	r3, r1
 800607a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006080:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006090:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d006      	beq.n	80060a6 <I2C_MasterRequestRead+0x3a>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d003      	beq.n	80060a6 <I2C_MasterRequestRead+0x3a>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060a4:	d108      	bne.n	80060b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e00b      	b.n	80060d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	2b11      	cmp	r3, #17
 80060be:	d107      	bne.n	80060d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f93b 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f6:	d103      	bne.n	8006100 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e079      	b.n	80061f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610c:	d108      	bne.n	8006120 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f043 0301 	orr.w	r3, r3, #1
 8006116:	b2da      	uxtb	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	611a      	str	r2, [r3, #16]
 800611e:	e05f      	b.n	80061e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	11db      	asrs	r3, r3, #7
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f063 030f 	orn	r3, r3, #15
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	4930      	ldr	r1, [pc, #192]	; (8006200 <I2C_MasterRequestRead+0x194>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f961 	bl	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e054      	b.n	80061f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800614e:	897b      	ldrh	r3, [r7, #10]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4929      	ldr	r1, [pc, #164]	; (8006204 <I2C_MasterRequestRead+0x198>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f951 	bl	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e044      	b.n	80061f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	699b      	ldr	r3, [r3, #24]
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006192:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f000 f8d9 	bl	8006358 <I2C_WaitOnFlagUntilTimeout>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00d      	beq.n	80061c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ba:	d103      	bne.n	80061c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e017      	b.n	80061f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80061c8:	897b      	ldrh	r3, [r7, #10]
 80061ca:	11db      	asrs	r3, r3, #7
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 0306 	and.w	r3, r3, #6
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	f063 030e 	orn	r3, r3, #14
 80061d8:	b2da      	uxtb	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4907      	ldr	r1, [pc, #28]	; (8006204 <I2C_MasterRequestRead+0x198>)
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f000 f90d 	bl	8006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e000      	b.n	80061f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3718      	adds	r7, #24
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	00010008 	.word	0x00010008
 8006204:	00010002 	.word	0x00010002

08006208 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006222:	4b4b      	ldr	r3, [pc, #300]	; (8006350 <I2C_DMAAbort+0x148>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	08db      	lsrs	r3, r3, #3
 8006228:	4a4a      	ldr	r2, [pc, #296]	; (8006354 <I2C_DMAAbort+0x14c>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	0a1a      	lsrs	r2, r3, #8
 8006230:	4613      	mov	r3, r2
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	4413      	add	r3, r2
 8006236:	00da      	lsls	r2, r3, #3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d106      	bne.n	8006250 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	f043 0220 	orr.w	r2, r3, #32
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800624e:	e00a      	b.n	8006266 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	3b01      	subs	r3, #1
 8006254:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006264:	d0ea      	beq.n	800623c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006272:	2200      	movs	r2, #0
 8006274:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627a:	2b00      	cmp	r3, #0
 800627c:	d003      	beq.n	8006286 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006282:	2200      	movs	r2, #0
 8006284:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006294:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	2200      	movs	r2, #0
 800629a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062a8:	2200      	movs	r2, #0
 80062aa:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d003      	beq.n	80062bc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062b8:	2200      	movs	r2, #0
 80062ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f022 0201 	bic.w	r2, r2, #1
 80062ca:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	2b60      	cmp	r3, #96	; 0x60
 80062d6:	d10e      	bne.n	80062f6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80062ee:	6978      	ldr	r0, [r7, #20]
 80062f0:	f7fe fd3e 	bl	8004d70 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80062f4:	e027      	b.n	8006346 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062f6:	7cfb      	ldrb	r3, [r7, #19]
 80062f8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062fc:	2b28      	cmp	r3, #40	; 0x28
 80062fe:	d117      	bne.n	8006330 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800631e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2228      	movs	r2, #40	; 0x28
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800632e:	e007      	b.n	8006340 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2220      	movs	r2, #32
 8006334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006340:	6978      	ldr	r0, [r7, #20]
 8006342:	f7fe fd0c 	bl	8004d5e <HAL_I2C_ErrorCallback>
}
 8006346:	bf00      	nop
 8006348:	3718      	adds	r7, #24
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
 800634e:	bf00      	nop
 8006350:	20000080 	.word	0x20000080
 8006354:	14f8b589 	.word	0x14f8b589

08006358 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	4613      	mov	r3, r2
 8006366:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006368:	e025      	b.n	80063b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d021      	beq.n	80063b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006372:	f7fd f9bb 	bl	80036ec <HAL_GetTick>
 8006376:	4602      	mov	r2, r0
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	1ad3      	subs	r3, r2, r3
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d116      	bne.n	80063b6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	f043 0220 	orr.w	r2, r3, #32
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e023      	b.n	80063fe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	0c1b      	lsrs	r3, r3, #16
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d10d      	bne.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x84>
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	43da      	mvns	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	b29b      	uxth	r3, r3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	e00c      	b.n	80063f6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	43da      	mvns	r2, r3
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4013      	ands	r3, r2
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	bf0c      	ite	eq
 80063ee:	2301      	moveq	r3, #1
 80063f0:	2300      	movne	r3, #0
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	461a      	mov	r2, r3
 80063f6:	79fb      	ldrb	r3, [r7, #7]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d0b6      	beq.n	800636a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3710      	adds	r7, #16
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}

08006406 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	60f8      	str	r0, [r7, #12]
 800640e:	60b9      	str	r1, [r7, #8]
 8006410:	607a      	str	r2, [r7, #4]
 8006412:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006414:	e051      	b.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d123      	bne.n	800646e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006434:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800643e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645a:	f043 0204 	orr.w	r2, r3, #4
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2200      	movs	r2, #0
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e046      	b.n	80064fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d021      	beq.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fd f939 	bl	80036ec <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d116      	bne.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2220      	movs	r2, #32
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f043 0220 	orr.w	r2, r3, #32
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e020      	b.n	80064fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	0c1b      	lsrs	r3, r3, #16
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d10c      	bne.n	80064de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	43da      	mvns	r2, r3
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	4013      	ands	r3, r2
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2301      	movne	r3, #1
 80064d8:	2300      	moveq	r3, #0
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	e00b      	b.n	80064f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	699b      	ldr	r3, [r3, #24]
 80064e4:	43da      	mvns	r2, r3
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	4013      	ands	r3, r2
 80064ea:	b29b      	uxth	r3, r3
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	bf14      	ite	ne
 80064f0:	2301      	movne	r3, #1
 80064f2:	2300      	moveq	r3, #0
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d18d      	bne.n	8006416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006510:	e02d      	b.n	800656e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 f900 	bl	8006718 <I2C_IsAcknowledgeFailed>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e02d      	b.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d021      	beq.n	800656e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fd f8df 	bl	80036ec <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	68ba      	ldr	r2, [r7, #8]
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d116      	bne.n	800656e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2200      	movs	r2, #0
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2220      	movs	r2, #32
 800654a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	f043 0220 	orr.w	r2, r3, #32
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e007      	b.n	800657e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006578:	2b80      	cmp	r3, #128	; 0x80
 800657a:	d1ca      	bne.n	8006512 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3710      	adds	r7, #16
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006592:	e02d      	b.n	80065f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 f8bf 	bl	8006718 <I2C_IsAcknowledgeFailed>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e02d      	b.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d021      	beq.n	80065f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065ac:	f7fd f89e 	bl	80036ec <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d302      	bcc.n	80065c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d116      	bne.n	80065f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2220      	movs	r2, #32
 80065cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	f043 0220 	orr.w	r2, r3, #32
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e007      	b.n	8006600 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	695b      	ldr	r3, [r3, #20]
 80065f6:	f003 0304 	and.w	r3, r3, #4
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d1ca      	bne.n	8006594 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3710      	adds	r7, #16
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006610:	2300      	movs	r3, #0
 8006612:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006614:	4b13      	ldr	r3, [pc, #76]	; (8006664 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	08db      	lsrs	r3, r3, #3
 800661a:	4a13      	ldr	r2, [pc, #76]	; (8006668 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	0a1a      	lsrs	r2, r3, #8
 8006622:	4613      	mov	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	4413      	add	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	3b01      	subs	r3, #1
 800662e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e008      	b.n	8006658 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006654:	d0e9      	beq.n	800662a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3714      	adds	r7, #20
 800665c:	46bd      	mov	sp, r7
 800665e:	bc80      	pop	{r7}
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	20000080 	.word	0x20000080
 8006668:	14f8b589 	.word	0x14f8b589

0800666c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006678:	e042      	b.n	8006700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b10      	cmp	r3, #16
 8006686:	d119      	bne.n	80066bc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0210 	mvn.w	r2, #16
 8006690:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2200      	movs	r2, #0
 8006696:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2220      	movs	r2, #32
 800669c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e029      	b.n	8006710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066bc:	f7fd f816 	bl	80036ec <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d302      	bcc.n	80066d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d116      	bne.n	8006700 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ec:	f043 0220 	orr.w	r2, r3, #32
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e007      	b.n	8006710 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800670a:	2b40      	cmp	r3, #64	; 0x40
 800670c:	d1b5      	bne.n	800667a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800672a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672e:	d11b      	bne.n	8006768 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006738:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2220      	movs	r2, #32
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006754:	f043 0204 	orr.w	r2, r3, #4
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	bc80      	pop	{r7}
 8006772:	4770      	bx	lr

08006774 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006774:	b480      	push	{r7}
 8006776:	b083      	sub	sp, #12
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006780:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006784:	d103      	bne.n	800678e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800678c:	e007      	b.n	800679e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006792:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006796:	d102      	bne.n	800679e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2208      	movs	r2, #8
 800679c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800679e:	bf00      	nop
 80067a0:	370c      	adds	r7, #12
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr

080067a8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80067ac:	4b03      	ldr	r3, [pc, #12]	; (80067bc <HAL_PWR_EnableBkUpAccess+0x14>)
 80067ae:	2201      	movs	r2, #1
 80067b0:	601a      	str	r2, [r3, #0]
}
 80067b2:	bf00      	nop
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	420e0020 	.word	0x420e0020

080067c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e272      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	f000 8087 	beq.w	80068ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80067e0:	4b92      	ldr	r3, [pc, #584]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f003 030c 	and.w	r3, r3, #12
 80067e8:	2b04      	cmp	r3, #4
 80067ea:	d00c      	beq.n	8006806 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067ec:	4b8f      	ldr	r3, [pc, #572]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	f003 030c 	and.w	r3, r3, #12
 80067f4:	2b08      	cmp	r3, #8
 80067f6:	d112      	bne.n	800681e <HAL_RCC_OscConfig+0x5e>
 80067f8:	4b8c      	ldr	r3, [pc, #560]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d10b      	bne.n	800681e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006806:	4b89      	ldr	r3, [pc, #548]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d06c      	beq.n	80068ec <HAL_RCC_OscConfig+0x12c>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d168      	bne.n	80068ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e24c      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006826:	d106      	bne.n	8006836 <HAL_RCC_OscConfig+0x76>
 8006828:	4b80      	ldr	r3, [pc, #512]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a7f      	ldr	r2, [pc, #508]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800682e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	e02e      	b.n	8006894 <HAL_RCC_OscConfig+0xd4>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10c      	bne.n	8006858 <HAL_RCC_OscConfig+0x98>
 800683e:	4b7b      	ldr	r3, [pc, #492]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a7a      	ldr	r2, [pc, #488]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4b78      	ldr	r3, [pc, #480]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a77      	ldr	r2, [pc, #476]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006850:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e01d      	b.n	8006894 <HAL_RCC_OscConfig+0xd4>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006860:	d10c      	bne.n	800687c <HAL_RCC_OscConfig+0xbc>
 8006862:	4b72      	ldr	r3, [pc, #456]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a71      	ldr	r2, [pc, #452]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b6f      	ldr	r3, [pc, #444]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a6e      	ldr	r2, [pc, #440]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e00b      	b.n	8006894 <HAL_RCC_OscConfig+0xd4>
 800687c:	4b6b      	ldr	r3, [pc, #428]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a6a      	ldr	r2, [pc, #424]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006882:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	4b68      	ldr	r3, [pc, #416]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a67      	ldr	r2, [pc, #412]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 800688e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006892:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d013      	beq.n	80068c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689c:	f7fc ff26 	bl	80036ec <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068a2:	e008      	b.n	80068b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068a4:	f7fc ff22 	bl	80036ec <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	2b64      	cmp	r3, #100	; 0x64
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e200      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068b6:	4b5d      	ldr	r3, [pc, #372]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0f0      	beq.n	80068a4 <HAL_RCC_OscConfig+0xe4>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c4:	f7fc ff12 	bl	80036ec <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ca:	e008      	b.n	80068de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068cc:	f7fc ff0e 	bl	80036ec <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	2b64      	cmp	r3, #100	; 0x64
 80068d8:	d901      	bls.n	80068de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e1ec      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068de:	4b53      	ldr	r3, [pc, #332]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f0      	bne.n	80068cc <HAL_RCC_OscConfig+0x10c>
 80068ea:	e000      	b.n	80068ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0302 	and.w	r3, r3, #2
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d063      	beq.n	80069c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068fa:	4b4c      	ldr	r3, [pc, #304]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	f003 030c 	and.w	r3, r3, #12
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00b      	beq.n	800691e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006906:	4b49      	ldr	r3, [pc, #292]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f003 030c 	and.w	r3, r3, #12
 800690e:	2b08      	cmp	r3, #8
 8006910:	d11c      	bne.n	800694c <HAL_RCC_OscConfig+0x18c>
 8006912:	4b46      	ldr	r3, [pc, #280]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691a:	2b00      	cmp	r3, #0
 800691c:	d116      	bne.n	800694c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691e:	4b43      	ldr	r3, [pc, #268]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0302 	and.w	r3, r3, #2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_RCC_OscConfig+0x176>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d001      	beq.n	8006936 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e1c0      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006936:	4b3d      	ldr	r3, [pc, #244]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	00db      	lsls	r3, r3, #3
 8006944:	4939      	ldr	r1, [pc, #228]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	e03a      	b.n	80069c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	691b      	ldr	r3, [r3, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d020      	beq.n	8006996 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006954:	4b36      	ldr	r3, [pc, #216]	; (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006956:	2201      	movs	r2, #1
 8006958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800695a:	f7fc fec7 	bl	80036ec <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006962:	f7fc fec3 	bl	80036ec <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1a1      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006974:	4b2d      	ldr	r3, [pc, #180]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d0f0      	beq.n	8006962 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006980:	4b2a      	ldr	r3, [pc, #168]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	4927      	ldr	r1, [pc, #156]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 8006990:	4313      	orrs	r3, r2
 8006992:	600b      	str	r3, [r1, #0]
 8006994:	e015      	b.n	80069c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006996:	4b26      	ldr	r3, [pc, #152]	; (8006a30 <HAL_RCC_OscConfig+0x270>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699c:	f7fc fea6 	bl	80036ec <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069a4:	f7fc fea2 	bl	80036ec <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e180      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069b6:	4b1d      	ldr	r3, [pc, #116]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d03a      	beq.n	8006a44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d019      	beq.n	8006a0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069d6:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <HAL_RCC_OscConfig+0x274>)
 80069d8:	2201      	movs	r2, #1
 80069da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069dc:	f7fc fe86 	bl	80036ec <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069e4:	f7fc fe82 	bl	80036ec <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e160      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <HAL_RCC_OscConfig+0x26c>)
 80069f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069fa:	f003 0302 	and.w	r3, r3, #2
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006a02:	2001      	movs	r0, #1
 8006a04:	f000 fad8 	bl	8006fb8 <RCC_Delay>
 8006a08:	e01c      	b.n	8006a44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a0a:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <HAL_RCC_OscConfig+0x274>)
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a10:	f7fc fe6c 	bl	80036ec <HAL_GetTick>
 8006a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a16:	e00f      	b.n	8006a38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a18:	f7fc fe68 	bl	80036ec <HAL_GetTick>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	1ad3      	subs	r3, r2, r3
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d908      	bls.n	8006a38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006a26:	2303      	movs	r3, #3
 8006a28:	e146      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
 8006a2a:	bf00      	nop
 8006a2c:	40021000 	.word	0x40021000
 8006a30:	42420000 	.word	0x42420000
 8006a34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a38:	4b92      	ldr	r3, [pc, #584]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e9      	bne.n	8006a18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 80a6 	beq.w	8006b9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a52:	2300      	movs	r3, #0
 8006a54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a56:	4b8b      	ldr	r3, [pc, #556]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10d      	bne.n	8006a7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a62:	4b88      	ldr	r3, [pc, #544]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	4a87      	ldr	r2, [pc, #540]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	61d3      	str	r3, [r2, #28]
 8006a6e:	4b85      	ldr	r3, [pc, #532]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006a70:	69db      	ldr	r3, [r3, #28]
 8006a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a76:	60bb      	str	r3, [r7, #8]
 8006a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a7e:	4b82      	ldr	r3, [pc, #520]	; (8006c88 <HAL_RCC_OscConfig+0x4c8>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d118      	bne.n	8006abc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a8a:	4b7f      	ldr	r3, [pc, #508]	; (8006c88 <HAL_RCC_OscConfig+0x4c8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a7e      	ldr	r2, [pc, #504]	; (8006c88 <HAL_RCC_OscConfig+0x4c8>)
 8006a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a96:	f7fc fe29 	bl	80036ec <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a9e:	f7fc fe25 	bl	80036ec <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b64      	cmp	r3, #100	; 0x64
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e103      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ab0:	4b75      	ldr	r3, [pc, #468]	; (8006c88 <HAL_RCC_OscConfig+0x4c8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d106      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x312>
 8006ac4:	4b6f      	ldr	r3, [pc, #444]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	4a6e      	ldr	r2, [pc, #440]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006aca:	f043 0301 	orr.w	r3, r3, #1
 8006ace:	6213      	str	r3, [r2, #32]
 8006ad0:	e02d      	b.n	8006b2e <HAL_RCC_OscConfig+0x36e>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10c      	bne.n	8006af4 <HAL_RCC_OscConfig+0x334>
 8006ada:	4b6a      	ldr	r3, [pc, #424]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006adc:	6a1b      	ldr	r3, [r3, #32]
 8006ade:	4a69      	ldr	r2, [pc, #420]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006ae0:	f023 0301 	bic.w	r3, r3, #1
 8006ae4:	6213      	str	r3, [r2, #32]
 8006ae6:	4b67      	ldr	r3, [pc, #412]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	4a66      	ldr	r2, [pc, #408]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006aec:	f023 0304 	bic.w	r3, r3, #4
 8006af0:	6213      	str	r3, [r2, #32]
 8006af2:	e01c      	b.n	8006b2e <HAL_RCC_OscConfig+0x36e>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	68db      	ldr	r3, [r3, #12]
 8006af8:	2b05      	cmp	r3, #5
 8006afa:	d10c      	bne.n	8006b16 <HAL_RCC_OscConfig+0x356>
 8006afc:	4b61      	ldr	r3, [pc, #388]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006afe:	6a1b      	ldr	r3, [r3, #32]
 8006b00:	4a60      	ldr	r2, [pc, #384]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b02:	f043 0304 	orr.w	r3, r3, #4
 8006b06:	6213      	str	r3, [r2, #32]
 8006b08:	4b5e      	ldr	r3, [pc, #376]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b0a:	6a1b      	ldr	r3, [r3, #32]
 8006b0c:	4a5d      	ldr	r2, [pc, #372]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b0e:	f043 0301 	orr.w	r3, r3, #1
 8006b12:	6213      	str	r3, [r2, #32]
 8006b14:	e00b      	b.n	8006b2e <HAL_RCC_OscConfig+0x36e>
 8006b16:	4b5b      	ldr	r3, [pc, #364]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b18:	6a1b      	ldr	r3, [r3, #32]
 8006b1a:	4a5a      	ldr	r2, [pc, #360]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	6213      	str	r3, [r2, #32]
 8006b22:	4b58      	ldr	r3, [pc, #352]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	4a57      	ldr	r2, [pc, #348]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b28:	f023 0304 	bic.w	r3, r3, #4
 8006b2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d015      	beq.n	8006b62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b36:	f7fc fdd9 	bl	80036ec <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b3c:	e00a      	b.n	8006b54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b3e:	f7fc fdd5 	bl	80036ec <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e0b1      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b54:	4b4b      	ldr	r3, [pc, #300]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	f003 0302 	and.w	r3, r3, #2
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0ee      	beq.n	8006b3e <HAL_RCC_OscConfig+0x37e>
 8006b60:	e014      	b.n	8006b8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b62:	f7fc fdc3 	bl	80036ec <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b68:	e00a      	b.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b6a:	f7fc fdbf 	bl	80036ec <HAL_GetTick>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	1ad3      	subs	r3, r2, r3
 8006b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d901      	bls.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e09b      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b80:	4b40      	ldr	r3, [pc, #256]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1ee      	bne.n	8006b6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d105      	bne.n	8006b9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b92:	4b3c      	ldr	r3, [pc, #240]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	4a3b      	ldr	r2, [pc, #236]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69db      	ldr	r3, [r3, #28]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 8087 	beq.w	8006cb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ba8:	4b36      	ldr	r3, [pc, #216]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 030c 	and.w	r3, r3, #12
 8006bb0:	2b08      	cmp	r3, #8
 8006bb2:	d061      	beq.n	8006c78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d146      	bne.n	8006c4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bbc:	4b33      	ldr	r3, [pc, #204]	; (8006c8c <HAL_RCC_OscConfig+0x4cc>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc2:	f7fc fd93 	bl	80036ec <HAL_GetTick>
 8006bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bca:	f7fc fd8f 	bl	80036ec <HAL_GetTick>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e06d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006bdc:	4b29      	ldr	r3, [pc, #164]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1f0      	bne.n	8006bca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a1b      	ldr	r3, [r3, #32]
 8006bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf0:	d108      	bne.n	8006c04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006bf2:	4b24      	ldr	r3, [pc, #144]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	4921      	ldr	r1, [pc, #132]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c04:	4b1f      	ldr	r3, [pc, #124]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a19      	ldr	r1, [r3, #32]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	430b      	orrs	r3, r1
 8006c16:	491b      	ldr	r1, [pc, #108]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c1c:	4b1b      	ldr	r3, [pc, #108]	; (8006c8c <HAL_RCC_OscConfig+0x4cc>)
 8006c1e:	2201      	movs	r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c22:	f7fc fd63 	bl	80036ec <HAL_GetTick>
 8006c26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c28:	e008      	b.n	8006c3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c2a:	f7fc fd5f 	bl	80036ec <HAL_GetTick>
 8006c2e:	4602      	mov	r2, r0
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	1ad3      	subs	r3, r2, r3
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e03d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006c3c:	4b11      	ldr	r3, [pc, #68]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0f0      	beq.n	8006c2a <HAL_RCC_OscConfig+0x46a>
 8006c48:	e035      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c4a:	4b10      	ldr	r3, [pc, #64]	; (8006c8c <HAL_RCC_OscConfig+0x4cc>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c50:	f7fc fd4c 	bl	80036ec <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c58:	f7fc fd48 	bl	80036ec <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e026      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006c6a:	4b06      	ldr	r3, [pc, #24]	; (8006c84 <HAL_RCC_OscConfig+0x4c4>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1f0      	bne.n	8006c58 <HAL_RCC_OscConfig+0x498>
 8006c76:	e01e      	b.n	8006cb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	69db      	ldr	r3, [r3, #28]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d107      	bne.n	8006c90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006c80:	2301      	movs	r3, #1
 8006c82:	e019      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
 8006c84:	40021000 	.word	0x40021000
 8006c88:	40007000 	.word	0x40007000
 8006c8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <HAL_RCC_OscConfig+0x500>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d106      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d001      	beq.n	8006cb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e000      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	40021000 	.word	0x40021000

08006cc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b084      	sub	sp, #16
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e0d0      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cd8:	4b6a      	ldr	r3, [pc, #424]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0307 	and.w	r3, r3, #7
 8006ce0:	683a      	ldr	r2, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d910      	bls.n	8006d08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce6:	4b67      	ldr	r3, [pc, #412]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 0207 	bic.w	r2, r3, #7
 8006cee:	4965      	ldr	r1, [pc, #404]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf6:	4b63      	ldr	r3, [pc, #396]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0307 	and.w	r3, r3, #7
 8006cfe:	683a      	ldr	r2, [r7, #0]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d001      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0b8      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0302 	and.w	r3, r3, #2
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d020      	beq.n	8006d56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0304 	and.w	r3, r3, #4
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d005      	beq.n	8006d2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d20:	4b59      	ldr	r3, [pc, #356]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	4a58      	ldr	r2, [pc, #352]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f003 0308 	and.w	r3, r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d38:	4b53      	ldr	r3, [pc, #332]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d3e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006d42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d44:	4b50      	ldr	r3, [pc, #320]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	494d      	ldr	r1, [pc, #308]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d040      	beq.n	8006de4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d107      	bne.n	8006d7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6a:	4b47      	ldr	r3, [pc, #284]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d115      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e07f      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d107      	bne.n	8006d92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d82:	4b41      	ldr	r3, [pc, #260]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d109      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	e073      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e06b      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da2:	4b39      	ldr	r3, [pc, #228]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f023 0203 	bic.w	r2, r3, #3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	4936      	ldr	r1, [pc, #216]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db4:	f7fc fc9a 	bl	80036ec <HAL_GetTick>
 8006db8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dba:	e00a      	b.n	8006dd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dbc:	f7fc fc96 	bl	80036ec <HAL_GetTick>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d901      	bls.n	8006dd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dce:	2303      	movs	r3, #3
 8006dd0:	e053      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd2:	4b2d      	ldr	r3, [pc, #180]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f003 020c 	and.w	r2, r3, #12
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d1eb      	bne.n	8006dbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de4:	4b27      	ldr	r3, [pc, #156]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0307 	and.w	r3, r3, #7
 8006dec:	683a      	ldr	r2, [r7, #0]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d210      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df2:	4b24      	ldr	r3, [pc, #144]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f023 0207 	bic.w	r2, r3, #7
 8006dfa:	4922      	ldr	r1, [pc, #136]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e02:	4b20      	ldr	r3, [pc, #128]	; (8006e84 <HAL_RCC_ClockConfig+0x1c0>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d001      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e032      	b.n	8006e7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d008      	beq.n	8006e32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e20:	4b19      	ldr	r3, [pc, #100]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	4916      	ldr	r1, [pc, #88]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e2e:	4313      	orrs	r3, r2
 8006e30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0308 	and.w	r3, r3, #8
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	00db      	lsls	r3, r3, #3
 8006e4c:	490e      	ldr	r1, [pc, #56]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e52:	f000 f821 	bl	8006e98 <HAL_RCC_GetSysClockFreq>
 8006e56:	4602      	mov	r2, r0
 8006e58:	4b0b      	ldr	r3, [pc, #44]	; (8006e88 <HAL_RCC_ClockConfig+0x1c4>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	091b      	lsrs	r3, r3, #4
 8006e5e:	f003 030f 	and.w	r3, r3, #15
 8006e62:	490a      	ldr	r1, [pc, #40]	; (8006e8c <HAL_RCC_ClockConfig+0x1c8>)
 8006e64:	5ccb      	ldrb	r3, [r1, r3]
 8006e66:	fa22 f303 	lsr.w	r3, r2, r3
 8006e6a:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <HAL_RCC_ClockConfig+0x1cc>)
 8006e6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006e6e:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <HAL_RCC_ClockConfig+0x1d0>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc fc0a 	bl	800368c <HAL_InitTick>

  return HAL_OK;
 8006e78:	2300      	movs	r3, #0
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	40022000 	.word	0x40022000
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	0800fb58 	.word	0x0800fb58
 8006e90:	20000080 	.word	0x20000080
 8006e94:	20000084 	.word	0x20000084

08006e98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e98:	b490      	push	{r4, r7}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006e9e:	4b29      	ldr	r3, [pc, #164]	; (8006f44 <HAL_RCC_GetSysClockFreq+0xac>)
 8006ea0:	1d3c      	adds	r4, r7, #4
 8006ea2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ea4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006ea8:	f240 2301 	movw	r3, #513	; 0x201
 8006eac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61fb      	str	r3, [r7, #28]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ec2:	4b21      	ldr	r3, [pc, #132]	; (8006f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	f003 030c 	and.w	r3, r3, #12
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d002      	beq.n	8006ed8 <HAL_RCC_GetSysClockFreq+0x40>
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d003      	beq.n	8006ede <HAL_RCC_GetSysClockFreq+0x46>
 8006ed6:	e02b      	b.n	8006f30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006eda:	623b      	str	r3, [r7, #32]
      break;
 8006edc:	e02b      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	0c9b      	lsrs	r3, r3, #18
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	3328      	adds	r3, #40	; 0x28
 8006ee8:	443b      	add	r3, r7
 8006eea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006eee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d012      	beq.n	8006f20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006efa:	4b13      	ldr	r3, [pc, #76]	; (8006f48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	0c5b      	lsrs	r3, r3, #17
 8006f00:	f003 0301 	and.w	r3, r3, #1
 8006f04:	3328      	adds	r3, #40	; 0x28
 8006f06:	443b      	add	r3, r7
 8006f08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006f0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	4a0e      	ldr	r2, [pc, #56]	; (8006f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f12:	fb03 f202 	mul.w	r2, r3, r2
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1e:	e004      	b.n	8006f2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006f24:	fb02 f303 	mul.w	r3, r2, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	623b      	str	r3, [r7, #32]
      break;
 8006f2e:	e002      	b.n	8006f36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006f30:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006f32:	623b      	str	r3, [r7, #32]
      break;
 8006f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f36:	6a3b      	ldr	r3, [r7, #32]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3728      	adds	r7, #40	; 0x28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bc90      	pop	{r4, r7}
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	0800cee0 	.word	0x0800cee0
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	007a1200 	.word	0x007a1200
 8006f50:	003d0900 	.word	0x003d0900

08006f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bc80      	pop	{r7}
 8006f62:	4770      	bx	lr
 8006f64:	20000080 	.word	0x20000080

08006f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006f6c:	f7ff fff2 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8006f70:	4602      	mov	r2, r0
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	0a1b      	lsrs	r3, r3, #8
 8006f78:	f003 0307 	and.w	r3, r3, #7
 8006f7c:	4903      	ldr	r1, [pc, #12]	; (8006f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f7e:	5ccb      	ldrb	r3, [r1, r3]
 8006f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40021000 	.word	0x40021000
 8006f8c:	0800fb68 	.word	0x0800fb68

08006f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006f94:	f7ff ffde 	bl	8006f54 <HAL_RCC_GetHCLKFreq>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	4b05      	ldr	r3, [pc, #20]	; (8006fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	0adb      	lsrs	r3, r3, #11
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	4903      	ldr	r1, [pc, #12]	; (8006fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fa6:	5ccb      	ldrb	r3, [r1, r3]
 8006fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	40021000 	.word	0x40021000
 8006fb4:	0800fb68 	.word	0x0800fb68

08006fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006fc0:	4b0a      	ldr	r3, [pc, #40]	; (8006fec <RCC_Delay+0x34>)
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a0a      	ldr	r2, [pc, #40]	; (8006ff0 <RCC_Delay+0x38>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	0a5b      	lsrs	r3, r3, #9
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	fb02 f303 	mul.w	r3, r2, r3
 8006fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006fd4:	bf00      	nop
  }
  while (Delay --);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	1e5a      	subs	r2, r3, #1
 8006fda:	60fa      	str	r2, [r7, #12]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d1f9      	bne.n	8006fd4 <RCC_Delay+0x1c>
}
 8006fe0:	bf00      	nop
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bc80      	pop	{r7}
 8006fea:	4770      	bx	lr
 8006fec:	20000080 	.word	0x20000080
 8006ff0:	10624dd3 	.word	0x10624dd3

08006ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	613b      	str	r3, [r7, #16]
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b00      	cmp	r3, #0
 800700e:	d07d      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8007010:	2300      	movs	r3, #0
 8007012:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007014:	4b4f      	ldr	r3, [pc, #316]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007020:	4b4c      	ldr	r3, [pc, #304]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	4a4b      	ldr	r2, [pc, #300]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702a:	61d3      	str	r3, [r2, #28]
 800702c:	4b49      	ldr	r3, [pc, #292]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007034:	60bb      	str	r3, [r7, #8]
 8007036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007038:	2301      	movs	r3, #1
 800703a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800703c:	4b46      	ldr	r3, [pc, #280]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007044:	2b00      	cmp	r3, #0
 8007046:	d118      	bne.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007048:	4b43      	ldr	r3, [pc, #268]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a42      	ldr	r2, [pc, #264]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800704e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007052:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007054:	f7fc fb4a 	bl	80036ec <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800705a:	e008      	b.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800705c:	f7fc fb46 	bl	80036ec <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b64      	cmp	r3, #100	; 0x64
 8007068:	d901      	bls.n	800706e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e06d      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800706e:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007076:	2b00      	cmp	r3, #0
 8007078:	d0f0      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800707a:	4b36      	ldr	r3, [pc, #216]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007082:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d02e      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	429a      	cmp	r2, r3
 8007096:	d027      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007098:	4b2e      	ldr	r3, [pc, #184]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800709a:	6a1b      	ldr	r3, [r3, #32]
 800709c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070a0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80070a2:	4b2e      	ldr	r3, [pc, #184]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070a4:	2201      	movs	r2, #1
 80070a6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80070a8:	4b2c      	ldr	r3, [pc, #176]	; (800715c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80070aa:	2200      	movs	r2, #0
 80070ac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80070ae:	4a29      	ldr	r2, [pc, #164]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d014      	beq.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fc fb15 	bl	80036ec <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070c4:	e00a      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80070c6:	f7fc fb11 	bl	80036ec <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d901      	bls.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e036      	b.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80070dc:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	f003 0302 	and.w	r3, r3, #2
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d0ee      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80070e8:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4917      	ldr	r1, [pc, #92]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d105      	bne.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007100:	4b14      	ldr	r3, [pc, #80]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007102:	69db      	ldr	r3, [r3, #28]
 8007104:	4a13      	ldr	r2, [pc, #76]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800710a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0302 	and.w	r3, r3, #2
 8007114:	2b00      	cmp	r3, #0
 8007116:	d008      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007118:	4b0e      	ldr	r3, [pc, #56]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	490b      	ldr	r1, [pc, #44]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007126:	4313      	orrs	r3, r2
 8007128:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b00      	cmp	r3, #0
 8007134:	d008      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	4904      	ldr	r1, [pc, #16]	; (8007154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007144:	4313      	orrs	r3, r2
 8007146:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40021000 	.word	0x40021000
 8007158:	40007000 	.word	0x40007000
 800715c:	42420440 	.word	0x42420440

08007160 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007160:	b590      	push	{r4, r7, lr}
 8007162:	b08d      	sub	sp, #52	; 0x34
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007168:	4b58      	ldr	r3, [pc, #352]	; (80072cc <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800716a:	f107 040c 	add.w	r4, r7, #12
 800716e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007170:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007174:	f240 2301 	movw	r3, #513	; 0x201
 8007178:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	627b      	str	r3, [r7, #36]	; 0x24
 800717e:	2300      	movs	r3, #0
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007182:	2300      	movs	r3, #0
 8007184:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	61fb      	str	r3, [r7, #28]
 800718a:	2300      	movs	r3, #0
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2b10      	cmp	r3, #16
 8007192:	d00a      	beq.n	80071aa <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2b10      	cmp	r3, #16
 8007198:	f200 808e 	bhi.w	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d049      	beq.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d079      	beq.n	800729c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80071a8:	e086      	b.n	80072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 80071aa:	4b49      	ldr	r3, [pc, #292]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80071ac:	685b      	ldr	r3, [r3, #4]
 80071ae:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80071b0:	4b47      	ldr	r3, [pc, #284]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d07f      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	0c9b      	lsrs	r3, r3, #18
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	3330      	adds	r3, #48	; 0x30
 80071c6:	443b      	add	r3, r7
 80071c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80071cc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d017      	beq.n	8007208 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80071d8:	4b3d      	ldr	r3, [pc, #244]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	0c5b      	lsrs	r3, r3, #17
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	3330      	adds	r3, #48	; 0x30
 80071e4:	443b      	add	r3, r7
 80071e6:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80071ea:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d00d      	beq.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80071f6:	4a37      	ldr	r2, [pc, #220]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	fb02 f303 	mul.w	r3, r2, r3
 8007204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007206:	e004      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007208:	6a3b      	ldr	r3, [r7, #32]
 800720a:	4a33      	ldr	r2, [pc, #204]	; (80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007212:	4b2f      	ldr	r3, [pc, #188]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721e:	d102      	bne.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 8007220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007224:	e04a      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 8007226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007228:	005b      	lsls	r3, r3, #1
 800722a:	4a2c      	ldr	r2, [pc, #176]	; (80072dc <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	085b      	lsrs	r3, r3, #1
 8007232:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007234:	e042      	b.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 8007236:	4b26      	ldr	r3, [pc, #152]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007246:	d108      	bne.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 8007252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007256:	62bb      	str	r3, [r7, #40]	; 0x28
 8007258:	e01f      	b.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007264:	d109      	bne.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 8007266:	4b1a      	ldr	r3, [pc, #104]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	f003 0302 	and.w	r3, r3, #2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8007272:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007276:	62bb      	str	r3, [r7, #40]	; 0x28
 8007278:	e00f      	b.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007284:	d11c      	bne.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007286:	4b12      	ldr	r3, [pc, #72]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d016      	beq.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8007292:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007296:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007298:	e012      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800729a:	e011      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800729c:	f7ff fe78 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 80072a0:	4602      	mov	r2, r0
 80072a2:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	0b9b      	lsrs	r3, r3, #14
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	3301      	adds	r3, #1
 80072ae:	005b      	lsls	r3, r3, #1
 80072b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80072b6:	e004      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80072b8:	bf00      	nop
 80072ba:	e002      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80072bc:	bf00      	nop
 80072be:	e000      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 80072c0:	bf00      	nop
    }
  }
  return (frequency);
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3734      	adds	r7, #52	; 0x34
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd90      	pop	{r4, r7, pc}
 80072cc:	0800cef0 	.word	0x0800cef0
 80072d0:	40021000 	.word	0x40021000
 80072d4:	007a1200 	.word	0x007a1200
 80072d8:	003d0900 	.word	0x003d0900
 80072dc:	aaaaaaab 	.word	0xaaaaaaab

080072e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e084      	b.n	8007400 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	7c5b      	ldrb	r3, [r3, #17]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fc f838 	bl	800337c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2202      	movs	r2, #2
 8007310:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 faf4 	bl	8007900 <HAL_RTC_WaitForSynchro>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2204      	movs	r2, #4
 8007322:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	e06b      	b.n	8007400 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fbad 	bl	8007a88 <RTC_EnterInitMode>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d004      	beq.n	800733e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2204      	movs	r2, #4
 8007338:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e060      	b.n	8007400 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f022 0207 	bic.w	r2, r2, #7
 800734c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8007356:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <HAL_RTC_Init+0x128>)
 8007358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735a:	4a2b      	ldr	r2, [pc, #172]	; (8007408 <HAL_RTC_Init+0x128>)
 800735c:	f023 0301 	bic.w	r3, r3, #1
 8007360:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007362:	4b29      	ldr	r3, [pc, #164]	; (8007408 <HAL_RTC_Init+0x128>)
 8007364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007366:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	4926      	ldr	r1, [pc, #152]	; (8007408 <HAL_RTC_Init+0x128>)
 8007370:	4313      	orrs	r3, r2
 8007372:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800737c:	d003      	beq.n	8007386 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	60fb      	str	r3, [r7, #12]
 8007384:	e00e      	b.n	80073a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8007386:	2001      	movs	r0, #1
 8007388:	f7ff feea 	bl	8007160 <HAL_RCCEx_GetPeriphCLKFreq>
 800738c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d104      	bne.n	800739e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2204      	movs	r2, #4
 8007398:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e030      	b.n	8007400 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f023 010f 	bic.w	r1, r3, #15
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	0c1a      	lsrs	r2, r3, #16
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	0c1b      	lsrs	r3, r3, #16
 80073c2:	041b      	lsls	r3, r3, #16
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	b291      	uxth	r1, r2
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6812      	ldr	r2, [r2, #0]
 80073cc:	430b      	orrs	r3, r1
 80073ce:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fb81 	bl	8007ad8 <RTC_ExitInitMode>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d004      	beq.n	80073e6 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2204      	movs	r2, #4
 80073e0:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e00c      	b.n	8007400 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80073fe:	2300      	movs	r3, #0
  }
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40006c00 	.word	0x40006c00

0800740c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800740c:	b590      	push	{r4, r7, lr}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8007418:	2300      	movs	r3, #0
 800741a:	617b      	str	r3, [r7, #20]
 800741c:	2300      	movs	r3, #0
 800741e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d002      	beq.n	800742c <HAL_RTC_SetTime+0x20>
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d101      	bne.n	8007430 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e080      	b.n	8007532 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	7c1b      	ldrb	r3, [r3, #16]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d101      	bne.n	800743c <HAL_RTC_SetTime+0x30>
 8007438:	2302      	movs	r3, #2
 800743a:	e07a      	b.n	8007532 <HAL_RTC_SetTime+0x126>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2202      	movs	r2, #2
 8007446:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d113      	bne.n	8007476 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	461a      	mov	r2, r3
 8007454:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007458:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	785b      	ldrb	r3, [r3, #1]
 8007460:	4619      	mov	r1, r3
 8007462:	460b      	mov	r3, r1
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	1a5b      	subs	r3, r3, r1
 8007468:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800746a:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007470:	4413      	add	r3, r2
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	e01e      	b.n	80074b4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fb71 	bl	8007b62 <RTC_Bcd2ToByte>
 8007480:	4603      	mov	r3, r0
 8007482:	461a      	mov	r2, r3
 8007484:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8007488:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	785b      	ldrb	r3, [r3, #1]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fb66 	bl	8007b62 <RTC_Bcd2ToByte>
 8007496:	4603      	mov	r3, r0
 8007498:	461a      	mov	r2, r3
 800749a:	4613      	mov	r3, r2
 800749c:	011b      	lsls	r3, r3, #4
 800749e:	1a9b      	subs	r3, r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80074a2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	789b      	ldrb	r3, [r3, #2]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 fb5a 	bl	8007b62 <RTC_Bcd2ToByte>
 80074ae:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80074b0:	4423      	add	r3, r4
 80074b2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80074b4:	6979      	ldr	r1, [r7, #20]
 80074b6:	68f8      	ldr	r0, [r7, #12]
 80074b8:	f000 fa7f 	bl	80079ba <RTC_WriteTimeCounter>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d007      	beq.n	80074d2 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2204      	movs	r2, #4
 80074c6:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 80074ce:	2301      	movs	r3, #1
 80074d0:	e02f      	b.n	8007532 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f022 0205 	bic.w	r2, r2, #5
 80074e0:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80074e2:	68f8      	ldr	r0, [r7, #12]
 80074e4:	f000 fa90 	bl	8007a08 <RTC_ReadAlarmCounter>
 80074e8:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f0:	d018      	beq.n	8007524 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d214      	bcs.n	8007524 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007500:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007504:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007506:	6939      	ldr	r1, [r7, #16]
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f000 fa96 	bl	8007a3a <RTC_WriteAlarmCounter>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d007      	beq.n	8007524 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2204      	movs	r2, #4
 8007518:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007520:	2301      	movs	r3, #1
 8007522:	e006      	b.n	8007532 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2201      	movs	r2, #1
 8007528:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8007530:	2300      	movs	r3, #0
  }
}
 8007532:	4618      	mov	r0, r3
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	bd90      	pop	{r4, r7, pc}
	...

0800753c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b088      	sub	sp, #32
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8007548:	2300      	movs	r3, #0
 800754a:	61bb      	str	r3, [r7, #24]
 800754c:	2300      	movs	r3, #0
 800754e:	61fb      	str	r3, [r7, #28]
 8007550:	2300      	movs	r3, #0
 8007552:	617b      	str	r3, [r7, #20]
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <HAL_RTC_GetTime+0x28>
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	e0b5      	b.n	80076d4 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 0304 	and.w	r3, r3, #4
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e0ac      	b.n	80076d4 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800757a:	68f8      	ldr	r0, [r7, #12]
 800757c:	f000 f9ed 	bl	800795a <RTC_ReadTimeCounter>
 8007580:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	4a55      	ldr	r2, [pc, #340]	; (80076dc <HAL_RTC_GetTime+0x1a0>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	0adb      	lsrs	r3, r3, #11
 800758c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800758e:	69ba      	ldr	r2, [r7, #24]
 8007590:	4b52      	ldr	r3, [pc, #328]	; (80076dc <HAL_RTC_GetTime+0x1a0>)
 8007592:	fba3 1302 	umull	r1, r3, r3, r2
 8007596:	0adb      	lsrs	r3, r3, #11
 8007598:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800759c:	fb01 f303 	mul.w	r3, r1, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	4a4f      	ldr	r2, [pc, #316]	; (80076e0 <HAL_RTC_GetTime+0x1a4>)
 80075a4:	fba2 2303 	umull	r2, r3, r2, r3
 80075a8:	095b      	lsrs	r3, r3, #5
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	4a4a      	ldr	r2, [pc, #296]	; (80076dc <HAL_RTC_GetTime+0x1a0>)
 80075b4:	fba2 1203 	umull	r1, r2, r2, r3
 80075b8:	0ad2      	lsrs	r2, r2, #11
 80075ba:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80075be:	fb01 f202 	mul.w	r2, r1, r2
 80075c2:	1a9a      	subs	r2, r3, r2
 80075c4:	4b46      	ldr	r3, [pc, #280]	; (80076e0 <HAL_RTC_GetTime+0x1a4>)
 80075c6:	fba3 1302 	umull	r1, r3, r3, r2
 80075ca:	0959      	lsrs	r1, r3, #5
 80075cc:	460b      	mov	r3, r1
 80075ce:	011b      	lsls	r3, r3, #4
 80075d0:	1a5b      	subs	r3, r3, r1
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	1ad1      	subs	r1, r2, r3
 80075d6:	b2ca      	uxtb	r2, r1
 80075d8:	68bb      	ldr	r3, [r7, #8]
 80075da:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	2b17      	cmp	r3, #23
 80075e0:	d955      	bls.n	800768e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	4a3f      	ldr	r2, [pc, #252]	; (80076e4 <HAL_RTC_GetTime+0x1a8>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	091b      	lsrs	r3, r3, #4
 80075ec:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80075ee:	6939      	ldr	r1, [r7, #16]
 80075f0:	4b3c      	ldr	r3, [pc, #240]	; (80076e4 <HAL_RTC_GetTime+0x1a8>)
 80075f2:	fba3 2301 	umull	r2, r3, r3, r1
 80075f6:	091a      	lsrs	r2, r3, #4
 80075f8:	4613      	mov	r3, r2
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	4413      	add	r3, r2
 80075fe:	00db      	lsls	r3, r3, #3
 8007600:	1aca      	subs	r2, r1, r3
 8007602:	b2d2      	uxtb	r2, r2
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f9fd 	bl	8007a08 <RTC_ReadAlarmCounter>
 800760e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007616:	d008      	beq.n	800762a <HAL_RTC_GetTime+0xee>
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	429a      	cmp	r2, r3
 800761e:	d904      	bls.n	800762a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	61fb      	str	r3, [r7, #28]
 8007628:	e002      	b.n	8007630 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800762a:	f04f 33ff 	mov.w	r3, #4294967295
 800762e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	4a2d      	ldr	r2, [pc, #180]	; (80076e8 <HAL_RTC_GetTime+0x1ac>)
 8007634:	fb02 f303 	mul.w	r3, r2, r3
 8007638:	69ba      	ldr	r2, [r7, #24]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800763e:	69b9      	ldr	r1, [r7, #24]
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 f9ba 	bl	80079ba <RTC_WriteTimeCounter>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d001      	beq.n	8007650 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 800764c:	2301      	movs	r3, #1
 800764e:	e041      	b.n	80076d4 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8007650:	69fb      	ldr	r3, [r7, #28]
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d00c      	beq.n	8007672 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8007658:	69fa      	ldr	r2, [r7, #28]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	4413      	add	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007660:	69f9      	ldr	r1, [r7, #28]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f9e9 	bl	8007a3a <RTC_WriteAlarmCounter>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00a      	beq.n	8007684 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e030      	b.n	80076d4 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007672:	69f9      	ldr	r1, [r7, #28]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f000 f9e0 	bl	8007a3a <RTC_WriteAlarmCounter>
 800767a:	4603      	mov	r3, r0
 800767c:	2b00      	cmp	r3, #0
 800767e:	d001      	beq.n	8007684 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e027      	b.n	80076d4 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007684:	6979      	ldr	r1, [r7, #20]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fa88 	bl	8007b9c <RTC_DateUpdate>
 800768c:	e003      	b.n	8007696 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	b2da      	uxtb	r2, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01a      	beq.n	80076d2 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	4618      	mov	r0, r3
 80076a2:	f000 fa41 	bl	8007b28 <RTC_ByteToBcd2>
 80076a6:	4603      	mov	r3, r0
 80076a8:	461a      	mov	r2, r3
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	785b      	ldrb	r3, [r3, #1]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fa38 	bl	8007b28 <RTC_ByteToBcd2>
 80076b8:	4603      	mov	r3, r0
 80076ba:	461a      	mov	r2, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	789b      	ldrb	r3, [r3, #2]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 fa2f 	bl	8007b28 <RTC_ByteToBcd2>
 80076ca:	4603      	mov	r3, r0
 80076cc:	461a      	mov	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3720      	adds	r7, #32
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	91a2b3c5 	.word	0x91a2b3c5
 80076e0:	88888889 	.word	0x88888889
 80076e4:	aaaaaaab 	.word	0xaaaaaaab
 80076e8:	00015180 	.word	0x00015180

080076ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b088      	sub	sp, #32
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	2300      	movs	r3, #0
 80076fe:	61bb      	str	r3, [r7, #24]
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_RTC_SetDate+0x24>
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8007710:	2301      	movs	r3, #1
 8007712:	e097      	b.n	8007844 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	7c1b      	ldrb	r3, [r3, #16]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d101      	bne.n	8007720 <HAL_RTC_SetDate+0x34>
 800771c:	2302      	movs	r3, #2
 800771e:	e091      	b.n	8007844 <HAL_RTC_SetDate+0x158>
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2201      	movs	r2, #1
 8007724:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2202      	movs	r2, #2
 800772a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10c      	bne.n	800774c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	78da      	ldrb	r2, [r3, #3]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	785a      	ldrb	r2, [r3, #1]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	789a      	ldrb	r2, [r3, #2]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	739a      	strb	r2, [r3, #14]
 800774a:	e01a      	b.n	8007782 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	78db      	ldrb	r3, [r3, #3]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fa06 	bl	8007b62 <RTC_Bcd2ToByte>
 8007756:	4603      	mov	r3, r0
 8007758:	461a      	mov	r2, r3
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	785b      	ldrb	r3, [r3, #1]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f9fd 	bl	8007b62 <RTC_Bcd2ToByte>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	789b      	ldrb	r3, [r3, #2]
 8007774:	4618      	mov	r0, r3
 8007776:	f000 f9f4 	bl	8007b62 <RTC_Bcd2ToByte>
 800777a:	4603      	mov	r3, r0
 800777c:	461a      	mov	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	7bdb      	ldrb	r3, [r3, #15]
 8007786:	4618      	mov	r0, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	7b59      	ldrb	r1, [r3, #13]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	7b9b      	ldrb	r3, [r3, #14]
 8007790:	461a      	mov	r2, r3
 8007792:	f000 fadf 	bl	8007d54 <RTC_WeekDayNum>
 8007796:	4603      	mov	r3, r0
 8007798:	461a      	mov	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	7b1a      	ldrb	r2, [r3, #12]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f8d7 	bl	800795a <RTC_ReadTimeCounter>
 80077ac:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4a26      	ldr	r2, [pc, #152]	; (800784c <HAL_RTC_SetDate+0x160>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	0adb      	lsrs	r3, r3, #11
 80077b8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b18      	cmp	r3, #24
 80077be:	d93a      	bls.n	8007836 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	4a23      	ldr	r2, [pc, #140]	; (8007850 <HAL_RTC_SetDate+0x164>)
 80077c4:	fba2 2303 	umull	r2, r3, r2, r3
 80077c8:	091b      	lsrs	r3, r3, #4
 80077ca:	4a22      	ldr	r2, [pc, #136]	; (8007854 <HAL_RTC_SetDate+0x168>)
 80077cc:	fb02 f303 	mul.w	r3, r2, r3
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80077d6:	69f9      	ldr	r1, [r7, #28]
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 f8ee 	bl	80079ba <RTC_WriteTimeCounter>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d007      	beq.n	80077f4 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2204      	movs	r2, #4
 80077e8:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e027      	b.n	8007844 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 f907 	bl	8007a08 <RTC_ReadAlarmCounter>
 80077fa:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007802:	d018      	beq.n	8007836 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8007804:	69ba      	ldr	r2, [r7, #24]
 8007806:	69fb      	ldr	r3, [r7, #28]
 8007808:	429a      	cmp	r2, r3
 800780a:	d214      	bcs.n	8007836 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8007812:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007816:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007818:	69b9      	ldr	r1, [r7, #24]
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 f90d 	bl	8007a3a <RTC_WriteAlarmCounter>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2204      	movs	r2, #4
 800782a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e006      	b.n	8007844 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3720      	adds	r7, #32
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	91a2b3c5 	.word	0x91a2b3c5
 8007850:	aaaaaaab 	.word	0xaaaaaaab
 8007854:	00015180 	.word	0x00015180

08007858 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	60f8      	str	r0, [r7, #12]
 8007860:	60b9      	str	r1, [r7, #8]
 8007862:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8007864:	f107 0314 	add.w	r3, r7, #20
 8007868:	2100      	movs	r1, #0
 800786a:	460a      	mov	r2, r1
 800786c:	801a      	strh	r2, [r3, #0]
 800786e:	460a      	mov	r2, r1
 8007870:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d002      	beq.n	800787e <HAL_RTC_GetDate+0x26>
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e03a      	b.n	80078f8 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007882:	f107 0314 	add.w	r3, r7, #20
 8007886:	2200      	movs	r2, #0
 8007888:	4619      	mov	r1, r3
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fe56 	bl	800753c <HAL_RTC_GetTime>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e02e      	b.n	80078f8 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	7b1a      	ldrb	r2, [r3, #12]
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	7bda      	ldrb	r2, [r3, #15]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	7b5a      	ldrb	r2, [r3, #13]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	7b9a      	ldrb	r2, [r3, #14]
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01a      	beq.n	80078f6 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	78db      	ldrb	r3, [r3, #3]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f92f 	bl	8007b28 <RTC_ByteToBcd2>
 80078ca:	4603      	mov	r3, r0
 80078cc:	461a      	mov	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	785b      	ldrb	r3, [r3, #1]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f000 f926 	bl	8007b28 <RTC_ByteToBcd2>
 80078dc:	4603      	mov	r3, r0
 80078de:	461a      	mov	r2, r3
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	789b      	ldrb	r3, [r3, #2]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f000 f91d 	bl	8007b28 <RTC_ByteToBcd2>
 80078ee:	4603      	mov	r3, r0
 80078f0:	461a      	mov	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3718      	adds	r7, #24
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007908:	2300      	movs	r3, #0
 800790a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d101      	bne.n	8007916 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e01d      	b.n	8007952 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f022 0208 	bic.w	r2, r2, #8
 8007924:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007926:	f7fb fee1 	bl	80036ec <HAL_GetTick>
 800792a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800792c:	e009      	b.n	8007942 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800792e:	f7fb fedd 	bl	80036ec <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800793c:	d901      	bls.n	8007942 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e007      	b.n	8007952 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f003 0308 	and.w	r3, r3, #8
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0ee      	beq.n	800792e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800795a:	b480      	push	{r7}
 800795c:	b087      	sub	sp, #28
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007962:	2300      	movs	r3, #0
 8007964:	827b      	strh	r3, [r7, #18]
 8007966:	2300      	movs	r3, #0
 8007968:	823b      	strh	r3, [r7, #16]
 800796a:	2300      	movs	r3, #0
 800796c:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 800796e:	2300      	movs	r3, #0
 8007970:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69db      	ldr	r3, [r3, #28]
 8007980:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	699b      	ldr	r3, [r3, #24]
 8007988:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800798a:	8a7a      	ldrh	r2, [r7, #18]
 800798c:	8a3b      	ldrh	r3, [r7, #16]
 800798e:	429a      	cmp	r2, r3
 8007990:	d008      	beq.n	80079a4 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007992:	8a3b      	ldrh	r3, [r7, #16]
 8007994:	041a      	lsls	r2, r3, #16
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	b29b      	uxth	r3, r3
 800799e:	4313      	orrs	r3, r2
 80079a0:	617b      	str	r3, [r7, #20]
 80079a2:	e004      	b.n	80079ae <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80079a4:	8a7b      	ldrh	r3, [r7, #18]
 80079a6:	041a      	lsls	r2, r3, #16
 80079a8:	89fb      	ldrh	r3, [r7, #14]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80079ae:	697b      	ldr	r3, [r7, #20]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	371c      	adds	r7, #28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr

080079ba <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f000 f85d 	bl	8007a88 <RTC_EnterInitMode>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	e011      	b.n	80079fe <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	683a      	ldr	r2, [r7, #0]
 80079e0:	0c12      	lsrs	r2, r2, #16
 80079e2:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	683a      	ldr	r2, [r7, #0]
 80079ea:	b292      	uxth	r2, r2
 80079ec:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f000 f872 	bl	8007ad8 <RTC_ExitInitMode>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d001      	beq.n	80079fe <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	3710      	adds	r7, #16
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b085      	sub	sp, #20
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	81fb      	strh	r3, [r7, #14]
 8007a14:	2300      	movs	r3, #0
 8007a16:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a26:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007a28:	89fb      	ldrh	r3, [r7, #14]
 8007a2a:	041a      	lsls	r2, r3, #16
 8007a2c:	89bb      	ldrh	r3, [r7, #12]
 8007a2e:	4313      	orrs	r3, r2
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3714      	adds	r7, #20
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bc80      	pop	{r7}
 8007a38:	4770      	bx	lr

08007a3a <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f81d 	bl	8007a88 <RTC_EnterInitMode>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	73fb      	strb	r3, [r7, #15]
 8007a58:	e011      	b.n	8007a7e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	683a      	ldr	r2, [r7, #0]
 8007a60:	0c12      	lsrs	r2, r2, #16
 8007a62:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	b292      	uxth	r2, r2
 8007a6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f832 	bl	8007ad8 <RTC_ExitInitMode>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d001      	beq.n	8007a7e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	3710      	adds	r7, #16
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007a94:	f7fb fe2a 	bl	80036ec <HAL_GetTick>
 8007a98:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007a9a:	e009      	b.n	8007ab0 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007a9c:	f7fb fe26 	bl	80036ec <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007aaa:	d901      	bls.n	8007ab0 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e00f      	b.n	8007ad0 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f003 0320 	and.w	r3, r3, #32
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d0ee      	beq.n	8007a9c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0210 	orr.w	r2, r2, #16
 8007acc:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007ace:	2300      	movs	r3, #0
}
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	3710      	adds	r7, #16
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}

08007ad8 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0210 	bic.w	r2, r2, #16
 8007af2:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007af4:	f7fb fdfa 	bl	80036ec <HAL_GetTick>
 8007af8:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007afa:	e009      	b.n	8007b10 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007afc:	f7fb fdf6 	bl	80036ec <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b0a:	d901      	bls.n	8007b10 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	e007      	b.n	8007b20 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	f003 0320 	and.w	r3, r3, #32
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d0ee      	beq.n	8007afc <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	4603      	mov	r3, r0
 8007b30:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007b36:	e005      	b.n	8007b44 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007b3e:	79fb      	ldrb	r3, [r7, #7]
 8007b40:	3b0a      	subs	r3, #10
 8007b42:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b09      	cmp	r3, #9
 8007b48:	d8f6      	bhi.n	8007b38 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	011b      	lsls	r3, r3, #4
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	b2db      	uxtb	r3, r3
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3714      	adds	r7, #20
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bc80      	pop	{r7}
 8007b60:	4770      	bx	lr

08007b62 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b085      	sub	sp, #20
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	4603      	mov	r3, r0
 8007b6a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007b70:	79fb      	ldrb	r3, [r7, #7]
 8007b72:	091b      	lsrs	r3, r3, #4
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	005b      	lsls	r3, r3, #1
 8007b80:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	f003 030f 	and.w	r3, r3, #15
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	4413      	add	r3, r2
 8007b90:	b2db      	uxtb	r3, r3
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3714      	adds	r7, #20
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bc80      	pop	{r7}
 8007b9a:	4770      	bx	lr

08007b9c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b086      	sub	sp, #24
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	2300      	movs	r3, #0
 8007bac:	613b      	str	r3, [r7, #16]
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	7bdb      	ldrb	r3, [r3, #15]
 8007bba:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	7b5b      	ldrb	r3, [r3, #13]
 8007bc0:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	7b9b      	ldrb	r3, [r3, #14]
 8007bc6:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60bb      	str	r3, [r7, #8]
 8007bcc:	e06f      	b.n	8007cae <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	2b01      	cmp	r3, #1
 8007bd2:	d011      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	2b03      	cmp	r3, #3
 8007bd8:	d00e      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	2b05      	cmp	r3, #5
 8007bde:	d00b      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b07      	cmp	r3, #7
 8007be4:	d008      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d005      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	2b0a      	cmp	r3, #10
 8007bf0:	d002      	beq.n	8007bf8 <RTC_DateUpdate+0x5c>
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d117      	bne.n	8007c28 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2b1e      	cmp	r3, #30
 8007bfc:	d803      	bhi.n	8007c06 <RTC_DateUpdate+0x6a>
      {
        day++;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3301      	adds	r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007c04:	e050      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	d005      	beq.n	8007c18 <RTC_DateUpdate+0x7c>
        {
          month++;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007c12:	2301      	movs	r3, #1
 8007c14:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007c16:	e047      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	60fb      	str	r3, [r7, #12]
          year++;
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	3301      	adds	r3, #1
 8007c24:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007c26:	e03f      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d008      	beq.n	8007c40 <RTC_DateUpdate+0xa4>
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	2b06      	cmp	r3, #6
 8007c32:	d005      	beq.n	8007c40 <RTC_DateUpdate+0xa4>
 8007c34:	693b      	ldr	r3, [r7, #16]
 8007c36:	2b09      	cmp	r3, #9
 8007c38:	d002      	beq.n	8007c40 <RTC_DateUpdate+0xa4>
 8007c3a:	693b      	ldr	r3, [r7, #16]
 8007c3c:	2b0b      	cmp	r3, #11
 8007c3e:	d10c      	bne.n	8007c5a <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2b1d      	cmp	r3, #29
 8007c44:	d803      	bhi.n	8007c4e <RTC_DateUpdate+0xb2>
      {
        day++;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007c4c:	e02c      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	3301      	adds	r3, #1
 8007c52:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007c54:	2301      	movs	r3, #1
 8007c56:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007c58:	e026      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d123      	bne.n	8007ca8 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2b1b      	cmp	r3, #27
 8007c64:	d803      	bhi.n	8007c6e <RTC_DateUpdate+0xd2>
      {
        day++;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	3301      	adds	r3, #1
 8007c6a:	60fb      	str	r3, [r7, #12]
 8007c6c:	e01c      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2b1c      	cmp	r3, #28
 8007c72:	d111      	bne.n	8007c98 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f000 f839 	bl	8007cf0 <RTC_IsLeapYear>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d003      	beq.n	8007c8c <RTC_DateUpdate+0xf0>
        {
          day++;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3301      	adds	r3, #1
 8007c88:	60fb      	str	r3, [r7, #12]
 8007c8a:	e00d      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007c92:	2301      	movs	r3, #1
 8007c94:	60fb      	str	r3, [r7, #12]
 8007c96:	e007      	b.n	8007ca8 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b1d      	cmp	r3, #29
 8007c9c:	d104      	bne.n	8007ca8 <RTC_DateUpdate+0x10c>
      {
        month++;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	3301      	adds	r3, #1
 8007cac:	60bb      	str	r3, [r7, #8]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d38b      	bcc.n	8007bce <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	b2da      	uxtb	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	b2da      	uxtb	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8007cce:	693b      	ldr	r3, [r7, #16]
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	b2d2      	uxtb	r2, r2
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	6978      	ldr	r0, [r7, #20]
 8007cda:	f000 f83b 	bl	8007d54 <RTC_WeekDayNum>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	731a      	strb	r2, [r3, #12]
}
 8007ce6:	bf00      	nop
 8007ce8:	3718      	adds	r7, #24
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
	...

08007cf0 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007cfa:	88fb      	ldrh	r3, [r7, #6]
 8007cfc:	f003 0303 	and.w	r3, r3, #3
 8007d00:	b29b      	uxth	r3, r3
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d001      	beq.n	8007d0a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007d06:	2300      	movs	r3, #0
 8007d08:	e01d      	b.n	8007d46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <RTC_IsLeapYear+0x60>)
 8007d0e:	fba2 1203 	umull	r1, r2, r2, r3
 8007d12:	0952      	lsrs	r2, r2, #5
 8007d14:	2164      	movs	r1, #100	; 0x64
 8007d16:	fb01 f202 	mul.w	r2, r1, r2
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00f      	b.n	8007d46 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007d26:	88fb      	ldrh	r3, [r7, #6]
 8007d28:	4a09      	ldr	r2, [pc, #36]	; (8007d50 <RTC_IsLeapYear+0x60>)
 8007d2a:	fba2 1203 	umull	r1, r2, r2, r3
 8007d2e:	09d2      	lsrs	r2, r2, #7
 8007d30:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007d34:	fb01 f202 	mul.w	r2, r1, r2
 8007d38:	1a9b      	subs	r3, r3, r2
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e000      	b.n	8007d46 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007d44:	2300      	movs	r3, #0
  }
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr
 8007d50:	51eb851f 	.word	0x51eb851f

08007d54 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
 8007d60:	4613      	mov	r3, r2
 8007d62:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007d64:	2300      	movs	r3, #0
 8007d66:	60bb      	str	r3, [r7, #8]
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007d72:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d82d      	bhi.n	8007dd6 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007d7a:	78fa      	ldrb	r2, [r7, #3]
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	4413      	add	r3, r2
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	4a2c      	ldr	r2, [pc, #176]	; (8007e38 <RTC_WeekDayNum+0xe4>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	085a      	lsrs	r2, r3, #1
 8007d8e:	78bb      	ldrb	r3, [r7, #2]
 8007d90:	441a      	add	r2, r3
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	441a      	add	r2, r3
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	441a      	add	r2, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	4926      	ldr	r1, [pc, #152]	; (8007e3c <RTC_WeekDayNum+0xe8>)
 8007da4:	fba1 1303 	umull	r1, r3, r1, r3
 8007da8:	095b      	lsrs	r3, r3, #5
 8007daa:	1ad2      	subs	r2, r2, r3
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	4922      	ldr	r1, [pc, #136]	; (8007e3c <RTC_WeekDayNum+0xe8>)
 8007db2:	fba1 1303 	umull	r1, r3, r1, r3
 8007db6:	09db      	lsrs	r3, r3, #7
 8007db8:	4413      	add	r3, r2
 8007dba:	1d1a      	adds	r2, r3, #4
 8007dbc:	4b20      	ldr	r3, [pc, #128]	; (8007e40 <RTC_WeekDayNum+0xec>)
 8007dbe:	fba3 1302 	umull	r1, r3, r3, r2
 8007dc2:	1ad1      	subs	r1, r2, r3
 8007dc4:	0849      	lsrs	r1, r1, #1
 8007dc6:	440b      	add	r3, r1
 8007dc8:	0899      	lsrs	r1, r3, #2
 8007dca:	460b      	mov	r3, r1
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	1a5b      	subs	r3, r3, r1
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e029      	b.n	8007e2a <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	4413      	add	r3, r2
 8007dde:	00db      	lsls	r3, r3, #3
 8007de0:	1a9b      	subs	r3, r3, r2
 8007de2:	4a15      	ldr	r2, [pc, #84]	; (8007e38 <RTC_WeekDayNum+0xe4>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	085a      	lsrs	r2, r3, #1
 8007dea:	78bb      	ldrb	r3, [r7, #2]
 8007dec:	441a      	add	r2, r3
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	441a      	add	r2, r3
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	089b      	lsrs	r3, r3, #2
 8007df6:	441a      	add	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	4910      	ldr	r1, [pc, #64]	; (8007e3c <RTC_WeekDayNum+0xe8>)
 8007dfc:	fba1 1303 	umull	r1, r3, r1, r3
 8007e00:	095b      	lsrs	r3, r3, #5
 8007e02:	1ad2      	subs	r2, r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	490d      	ldr	r1, [pc, #52]	; (8007e3c <RTC_WeekDayNum+0xe8>)
 8007e08:	fba1 1303 	umull	r1, r3, r1, r3
 8007e0c:	09db      	lsrs	r3, r3, #7
 8007e0e:	4413      	add	r3, r2
 8007e10:	1c9a      	adds	r2, r3, #2
 8007e12:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <RTC_WeekDayNum+0xec>)
 8007e14:	fba3 1302 	umull	r1, r3, r3, r2
 8007e18:	1ad1      	subs	r1, r2, r3
 8007e1a:	0849      	lsrs	r1, r1, #1
 8007e1c:	440b      	add	r3, r1
 8007e1e:	0899      	lsrs	r1, r3, #2
 8007e20:	460b      	mov	r3, r1
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	1a5b      	subs	r3, r3, r1
 8007e26:	1ad3      	subs	r3, r2, r3
 8007e28:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	b2db      	uxtb	r3, r3
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bc80      	pop	{r7}
 8007e36:	4770      	bx	lr
 8007e38:	38e38e39 	.word	0x38e38e39
 8007e3c:	51eb851f 	.word	0x51eb851f
 8007e40:	24924925 	.word	0x24924925

08007e44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	e076      	b.n	8007f44 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d108      	bne.n	8007e70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e66:	d009      	beq.n	8007e7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	61da      	str	r2, [r3, #28]
 8007e6e:	e005      	b.n	8007e7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fb fa94 	bl	80033c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681a      	ldr	r2, [r3, #0]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f003 0302 	and.w	r3, r3, #2
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	f003 0301 	and.w	r3, r3, #1
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a1b      	ldr	r3, [r3, #32]
 8007efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f00:	ea42 0103 	orr.w	r1, r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	699b      	ldr	r3, [r3, #24]
 8007f18:	0c1a      	lsrs	r2, r3, #16
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f002 0204 	and.w	r2, r2, #4
 8007f22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	69da      	ldr	r2, [r3, #28]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007f42:	2300      	movs	r3, #0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b088      	sub	sp, #32
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	603b      	str	r3, [r7, #0]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d101      	bne.n	8007f6e <HAL_SPI_Transmit+0x22>
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	e126      	b.n	80081bc <HAL_SPI_Transmit+0x270>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2201      	movs	r2, #1
 8007f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f76:	f7fb fbb9 	bl	80036ec <HAL_GetTick>
 8007f7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007f7c:	88fb      	ldrh	r3, [r7, #6]
 8007f7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d002      	beq.n	8007f92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007f90:	e10b      	b.n	80081aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_SPI_Transmit+0x52>
 8007f98:	88fb      	ldrh	r3, [r7, #6]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d102      	bne.n	8007fa4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007fa2:	e102      	b.n	80081aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2203      	movs	r2, #3
 8007fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	68ba      	ldr	r2, [r7, #8]
 8007fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fea:	d10f      	bne.n	800800c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800800a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d007      	beq.n	800802a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008028:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	68db      	ldr	r3, [r3, #12]
 800802e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008032:	d14b      	bne.n	80080cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d002      	beq.n	8008042 <HAL_SPI_Transmit+0xf6>
 800803c:	8afb      	ldrh	r3, [r7, #22]
 800803e:	2b01      	cmp	r3, #1
 8008040:	d13e      	bne.n	80080c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008046:	881a      	ldrh	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008052:	1c9a      	adds	r2, r3, #2
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800805c:	b29b      	uxth	r3, r3
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008066:	e02b      	b.n	80080c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b02      	cmp	r3, #2
 8008074:	d112      	bne.n	800809c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800807a:	881a      	ldrh	r2, [r3, #0]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	1c9a      	adds	r2, r3, #2
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008090:	b29b      	uxth	r3, r3
 8008092:	3b01      	subs	r3, #1
 8008094:	b29a      	uxth	r2, r3
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	86da      	strh	r2, [r3, #54]	; 0x36
 800809a:	e011      	b.n	80080c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800809c:	f7fb fb26 	bl	80036ec <HAL_GetTick>
 80080a0:	4602      	mov	r2, r0
 80080a2:	69bb      	ldr	r3, [r7, #24]
 80080a4:	1ad3      	subs	r3, r2, r3
 80080a6:	683a      	ldr	r2, [r7, #0]
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d803      	bhi.n	80080b4 <HAL_SPI_Transmit+0x168>
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d102      	bne.n	80080ba <HAL_SPI_Transmit+0x16e>
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d102      	bne.n	80080c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80080be:	e074      	b.n	80081aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1ce      	bne.n	8008068 <HAL_SPI_Transmit+0x11c>
 80080ca:	e04c      	b.n	8008166 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d002      	beq.n	80080da <HAL_SPI_Transmit+0x18e>
 80080d4:	8afb      	ldrh	r3, [r7, #22]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d140      	bne.n	800815c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	330c      	adds	r3, #12
 80080e4:	7812      	ldrb	r2, [r2, #0]
 80080e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008100:	e02c      	b.n	800815c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b02      	cmp	r3, #2
 800810e:	d113      	bne.n	8008138 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	330c      	adds	r3, #12
 800811a:	7812      	ldrb	r2, [r2, #0]
 800811c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008122:	1c5a      	adds	r2, r3, #1
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	86da      	strh	r2, [r3, #54]	; 0x36
 8008136:	e011      	b.n	800815c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008138:	f7fb fad8 	bl	80036ec <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	683a      	ldr	r2, [r7, #0]
 8008144:	429a      	cmp	r2, r3
 8008146:	d803      	bhi.n	8008150 <HAL_SPI_Transmit+0x204>
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d102      	bne.n	8008156 <HAL_SPI_Transmit+0x20a>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d102      	bne.n	800815c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	77fb      	strb	r3, [r7, #31]
          goto error;
 800815a:	e026      	b.n	80081aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1cd      	bne.n	8008102 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	6839      	ldr	r1, [r7, #0]
 800816a:	68f8      	ldr	r0, [r7, #12]
 800816c:	f000 fbb8 	bl	80088e0 <SPI_EndRxTxTransaction>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d002      	beq.n	800817c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2220      	movs	r2, #32
 800817a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10a      	bne.n	800819a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008184:	2300      	movs	r3, #0
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68db      	ldr	r3, [r3, #12]
 800818e:	613b      	str	r3, [r7, #16]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	613b      	str	r3, [r7, #16]
 8008198:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	77fb      	strb	r3, [r7, #31]
 80081a6:	e000      	b.n	80081aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80081a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2201      	movs	r2, #1
 80081ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	2200      	movs	r2, #0
 80081b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80081ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3720      	adds	r7, #32
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b088      	sub	sp, #32
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	603b      	str	r3, [r7, #0]
 80081d0:	4613      	mov	r3, r2
 80081d2:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80081e0:	d112      	bne.n	8008208 <HAL_SPI_Receive+0x44>
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10e      	bne.n	8008208 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2204      	movs	r2, #4
 80081ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80081f2:	88fa      	ldrh	r2, [r7, #6]
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4613      	mov	r3, r2
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	68b9      	ldr	r1, [r7, #8]
 80081fe:	68f8      	ldr	r0, [r7, #12]
 8008200:	f000 f8f1 	bl	80083e6 <HAL_SPI_TransmitReceive>
 8008204:	4603      	mov	r3, r0
 8008206:	e0ea      	b.n	80083de <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800820e:	2b01      	cmp	r3, #1
 8008210:	d101      	bne.n	8008216 <HAL_SPI_Receive+0x52>
 8008212:	2302      	movs	r3, #2
 8008214:	e0e3      	b.n	80083de <HAL_SPI_Receive+0x21a>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800821e:	f7fb fa65 	bl	80036ec <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800822a:	b2db      	uxtb	r3, r3
 800822c:	2b01      	cmp	r3, #1
 800822e:	d002      	beq.n	8008236 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008230:	2302      	movs	r3, #2
 8008232:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008234:	e0ca      	b.n	80083cc <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d002      	beq.n	8008242 <HAL_SPI_Receive+0x7e>
 800823c:	88fb      	ldrh	r3, [r7, #6]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d102      	bne.n	8008248 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008246:	e0c1      	b.n	80083cc <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2204      	movs	r2, #4
 800824c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	2200      	movs	r2, #0
 8008254:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	88fa      	ldrh	r2, [r7, #6]
 8008260:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	88fa      	ldrh	r2, [r7, #6]
 8008266:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2200      	movs	r2, #0
 8008284:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800828e:	d10f      	bne.n	80082b0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800829e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681a      	ldr	r2, [r3, #0]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80082ae:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d007      	beq.n	80082ce <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082cc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d162      	bne.n	800839c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80082d6:	e02e      	b.n	8008336 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d115      	bne.n	8008312 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f103 020c 	add.w	r2, r3, #12
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	7812      	ldrb	r2, [r2, #0]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008310:	e011      	b.n	8008336 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008312:	f7fb f9eb 	bl	80036ec <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	683a      	ldr	r2, [r7, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d803      	bhi.n	800832a <HAL_SPI_Receive+0x166>
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008328:	d102      	bne.n	8008330 <HAL_SPI_Receive+0x16c>
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d102      	bne.n	8008336 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008334:	e04a      	b.n	80083cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800833a:	b29b      	uxth	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d1cb      	bne.n	80082d8 <HAL_SPI_Receive+0x114>
 8008340:	e031      	b.n	80083a6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f003 0301 	and.w	r3, r3, #1
 800834c:	2b01      	cmp	r3, #1
 800834e:	d113      	bne.n	8008378 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	68da      	ldr	r2, [r3, #12]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	b292      	uxth	r2, r2
 800835c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	1c9a      	adds	r2, r3, #2
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800836c:	b29b      	uxth	r3, r3
 800836e:	3b01      	subs	r3, #1
 8008370:	b29a      	uxth	r2, r3
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008376:	e011      	b.n	800839c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008378:	f7fb f9b8 	bl	80036ec <HAL_GetTick>
 800837c:	4602      	mov	r2, r0
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	683a      	ldr	r2, [r7, #0]
 8008384:	429a      	cmp	r2, r3
 8008386:	d803      	bhi.n	8008390 <HAL_SPI_Receive+0x1cc>
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838e:	d102      	bne.n	8008396 <HAL_SPI_Receive+0x1d2>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d102      	bne.n	800839c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	75fb      	strb	r3, [r7, #23]
          goto error;
 800839a:	e017      	b.n	80083cc <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083a0:	b29b      	uxth	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1cd      	bne.n	8008342 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	6839      	ldr	r1, [r7, #0]
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 fa46 	bl	800883c <SPI_EndRxTransaction>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d002      	beq.n	80083bc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2220      	movs	r2, #32
 80083ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80083c4:	2301      	movs	r3, #1
 80083c6:	75fb      	strb	r3, [r7, #23]
 80083c8:	e000      	b.n	80083cc <HAL_SPI_Receive+0x208>
  }

error :
 80083ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3718      	adds	r7, #24
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b08c      	sub	sp, #48	; 0x30
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	60f8      	str	r0, [r7, #12]
 80083ee:	60b9      	str	r1, [r7, #8]
 80083f0:	607a      	str	r2, [r7, #4]
 80083f2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80083f4:	2301      	movs	r3, #1
 80083f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008404:	2b01      	cmp	r3, #1
 8008406:	d101      	bne.n	800840c <HAL_SPI_TransmitReceive+0x26>
 8008408:	2302      	movs	r3, #2
 800840a:	e18a      	b.n	8008722 <HAL_SPI_TransmitReceive+0x33c>
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008414:	f7fb f96a 	bl	80036ec <HAL_GetTick>
 8008418:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800842a:	887b      	ldrh	r3, [r7, #2]
 800842c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800842e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008432:	2b01      	cmp	r3, #1
 8008434:	d00f      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x70>
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800843c:	d107      	bne.n	800844e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	689b      	ldr	r3, [r3, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d103      	bne.n	800844e <HAL_SPI_TransmitReceive+0x68>
 8008446:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800844a:	2b04      	cmp	r3, #4
 800844c:	d003      	beq.n	8008456 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800844e:	2302      	movs	r3, #2
 8008450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008454:	e15b      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x82>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	d002      	beq.n	8008468 <HAL_SPI_TransmitReceive+0x82>
 8008462:	887b      	ldrh	r3, [r7, #2]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d103      	bne.n	8008470 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800846e:	e14e      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b04      	cmp	r3, #4
 800847a:	d003      	beq.n	8008484 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2205      	movs	r2, #5
 8008480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2200      	movs	r2, #0
 8008488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	887a      	ldrh	r2, [r7, #2]
 8008494:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	887a      	ldrh	r2, [r7, #2]
 800849a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	887a      	ldrh	r2, [r7, #2]
 80084a6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	887a      	ldrh	r2, [r7, #2]
 80084ac:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2200      	movs	r2, #0
 80084b8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c4:	2b40      	cmp	r3, #64	; 0x40
 80084c6:	d007      	beq.n	80084d8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e0:	d178      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_SPI_TransmitReceive+0x10a>
 80084ea:	8b7b      	ldrh	r3, [r7, #26]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d166      	bne.n	80085be <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f4:	881a      	ldrh	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008500:	1c9a      	adds	r2, r3, #2
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800850a:	b29b      	uxth	r3, r3
 800850c:	3b01      	subs	r3, #1
 800850e:	b29a      	uxth	r2, r3
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008514:	e053      	b.n	80085be <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b02      	cmp	r3, #2
 8008522:	d11b      	bne.n	800855c <HAL_SPI_TransmitReceive+0x176>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d016      	beq.n	800855c <HAL_SPI_TransmitReceive+0x176>
 800852e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d113      	bne.n	800855c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	881a      	ldrh	r2, [r3, #0]
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	1c9a      	adds	r2, r3, #2
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800854e:	b29b      	uxth	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b29a      	uxth	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008558:	2300      	movs	r3, #0
 800855a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 0301 	and.w	r3, r3, #1
 8008566:	2b01      	cmp	r3, #1
 8008568:	d119      	bne.n	800859e <HAL_SPI_TransmitReceive+0x1b8>
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800856e:	b29b      	uxth	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d014      	beq.n	800859e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68da      	ldr	r2, [r3, #12]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857e:	b292      	uxth	r2, r2
 8008580:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008586:	1c9a      	adds	r2, r3, #2
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008590:	b29b      	uxth	r3, r3
 8008592:	3b01      	subs	r3, #1
 8008594:	b29a      	uxth	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800859a:	2301      	movs	r3, #1
 800859c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800859e:	f7fb f8a5 	bl	80036ec <HAL_GetTick>
 80085a2:	4602      	mov	r2, r0
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d807      	bhi.n	80085be <HAL_SPI_TransmitReceive+0x1d8>
 80085ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d003      	beq.n	80085be <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80085bc:	e0a7      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d1a6      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x130>
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1a1      	bne.n	8008516 <HAL_SPI_TransmitReceive+0x130>
 80085d2:	e07c      	b.n	80086ce <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_SPI_TransmitReceive+0x1fc>
 80085dc:	8b7b      	ldrh	r3, [r7, #26]
 80085de:	2b01      	cmp	r3, #1
 80085e0:	d16b      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	7812      	ldrb	r2, [r2, #0]
 80085ee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085fe:	b29b      	uxth	r3, r3
 8008600:	3b01      	subs	r3, #1
 8008602:	b29a      	uxth	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008608:	e057      	b.n	80086ba <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	f003 0302 	and.w	r3, r3, #2
 8008614:	2b02      	cmp	r3, #2
 8008616:	d11c      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x26c>
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800861c:	b29b      	uxth	r3, r3
 800861e:	2b00      	cmp	r3, #0
 8008620:	d017      	beq.n	8008652 <HAL_SPI_TransmitReceive+0x26c>
 8008622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008624:	2b01      	cmp	r3, #1
 8008626:	d114      	bne.n	8008652 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	330c      	adds	r3, #12
 8008632:	7812      	ldrb	r2, [r2, #0]
 8008634:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	1c5a      	adds	r2, r3, #1
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008644:	b29b      	uxth	r3, r3
 8008646:	3b01      	subs	r3, #1
 8008648:	b29a      	uxth	r2, r3
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	689b      	ldr	r3, [r3, #8]
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b01      	cmp	r3, #1
 800865e:	d119      	bne.n	8008694 <HAL_SPI_TransmitReceive+0x2ae>
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d014      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68da      	ldr	r2, [r3, #12]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008674:	b2d2      	uxtb	r2, r2
 8008676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008686:	b29b      	uxth	r3, r3
 8008688:	3b01      	subs	r3, #1
 800868a:	b29a      	uxth	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008690:	2301      	movs	r3, #1
 8008692:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008694:	f7fb f82a 	bl	80036ec <HAL_GetTick>
 8008698:	4602      	mov	r2, r0
 800869a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800869c:	1ad3      	subs	r3, r2, r3
 800869e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086a0:	429a      	cmp	r2, r3
 80086a2:	d803      	bhi.n	80086ac <HAL_SPI_TransmitReceive+0x2c6>
 80086a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d102      	bne.n	80086b2 <HAL_SPI_TransmitReceive+0x2cc>
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d103      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80086b2:	2303      	movs	r3, #3
 80086b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80086b8:	e029      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1a2      	bne.n	800860a <HAL_SPI_TransmitReceive+0x224>
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80086c8:	b29b      	uxth	r3, r3
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d19d      	bne.n	800860a <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80086ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086d2:	68f8      	ldr	r0, [r7, #12]
 80086d4:	f000 f904 	bl	80088e0 <SPI_EndRxTxTransaction>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d006      	beq.n	80086ec <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2220      	movs	r2, #32
 80086e8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80086ea:	e010      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80086f4:	2300      	movs	r3, #0
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	617b      	str	r3, [r7, #20]
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	e000      	b.n	800870e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800870c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800871e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008722:	4618      	mov	r0, r3
 8008724:	3730      	adds	r7, #48	; 0x30
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
	...

0800872c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b088      	sub	sp, #32
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	603b      	str	r3, [r7, #0]
 8008738:	4613      	mov	r3, r2
 800873a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800873c:	f7fa ffd6 	bl	80036ec <HAL_GetTick>
 8008740:	4602      	mov	r2, r0
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	1a9b      	subs	r3, r3, r2
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4413      	add	r3, r2
 800874a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800874c:	f7fa ffce 	bl	80036ec <HAL_GetTick>
 8008750:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008752:	4b39      	ldr	r3, [pc, #228]	; (8008838 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	015b      	lsls	r3, r3, #5
 8008758:	0d1b      	lsrs	r3, r3, #20
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	fb02 f303 	mul.w	r3, r2, r3
 8008760:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008762:	e054      	b.n	800880e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800876a:	d050      	beq.n	800880e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800876c:	f7fa ffbe 	bl	80036ec <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	69fa      	ldr	r2, [r7, #28]
 8008778:	429a      	cmp	r2, r3
 800877a:	d902      	bls.n	8008782 <SPI_WaitFlagStateUntilTimeout+0x56>
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d13d      	bne.n	80087fe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008790:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800879a:	d111      	bne.n	80087c0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a4:	d004      	beq.n	80087b0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ae:	d107      	bne.n	80087c0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087be:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087c8:	d10f      	bne.n	80087ea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087e8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e017      	b.n	800882e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008804:	2300      	movs	r3, #0
 8008806:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	3b01      	subs	r3, #1
 800880c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	689a      	ldr	r2, [r3, #8]
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	4013      	ands	r3, r2
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	429a      	cmp	r2, r3
 800881c:	bf0c      	ite	eq
 800881e:	2301      	moveq	r3, #1
 8008820:	2300      	movne	r3, #0
 8008822:	b2db      	uxtb	r3, r3
 8008824:	461a      	mov	r2, r3
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	429a      	cmp	r2, r3
 800882a:	d19b      	bne.n	8008764 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800882c:	2300      	movs	r3, #0
}
 800882e:	4618      	mov	r0, r3
 8008830:	3720      	adds	r7, #32
 8008832:	46bd      	mov	sp, r7
 8008834:	bd80      	pop	{r7, pc}
 8008836:	bf00      	nop
 8008838:	20000080 	.word	0x20000080

0800883c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b086      	sub	sp, #24
 8008840:	af02      	add	r7, sp, #8
 8008842:	60f8      	str	r0, [r7, #12]
 8008844:	60b9      	str	r1, [r7, #8]
 8008846:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008850:	d111      	bne.n	8008876 <SPI_EndRxTransaction+0x3a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885a:	d004      	beq.n	8008866 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	689b      	ldr	r3, [r3, #8]
 8008860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008864:	d107      	bne.n	8008876 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008874:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800887e:	d117      	bne.n	80088b0 <SPI_EndRxTransaction+0x74>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008888:	d112      	bne.n	80088b0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	9300      	str	r3, [sp, #0]
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2200      	movs	r2, #0
 8008892:	2101      	movs	r1, #1
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff ff49 	bl	800872c <SPI_WaitFlagStateUntilTimeout>
 800889a:	4603      	mov	r3, r0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d01a      	beq.n	80088d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088a4:	f043 0220 	orr.w	r2, r3, #32
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088ac:	2303      	movs	r3, #3
 80088ae:	e013      	b.n	80088d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	9300      	str	r3, [sp, #0]
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2200      	movs	r2, #0
 80088b8:	2180      	movs	r1, #128	; 0x80
 80088ba:	68f8      	ldr	r0, [r7, #12]
 80088bc:	f7ff ff36 	bl	800872c <SPI_WaitFlagStateUntilTimeout>
 80088c0:	4603      	mov	r3, r0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d007      	beq.n	80088d6 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ca:	f043 0220 	orr.w	r2, r3, #32
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e000      	b.n	80088d8 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80088d6:	2300      	movs	r3, #0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3710      	adds	r7, #16
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af02      	add	r7, sp, #8
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	2200      	movs	r2, #0
 80088f4:	2180      	movs	r1, #128	; 0x80
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff ff18 	bl	800872c <SPI_WaitFlagStateUntilTimeout>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d007      	beq.n	8008912 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008906:	f043 0220 	orr.w	r2, r3, #32
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e000      	b.n	8008914 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e03f      	b.n	80089ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f7fa fd8a 	bl	800345c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2224      	movs	r2, #36	; 0x24
 800894c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800895e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fd27 	bl	80093b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	691a      	ldr	r2, [r3, #16]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	695a      	ldr	r2, [r3, #20]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b08a      	sub	sp, #40	; 0x28
 80089ba:	af02      	add	r7, sp, #8
 80089bc:	60f8      	str	r0, [r7, #12]
 80089be:	60b9      	str	r1, [r7, #8]
 80089c0:	603b      	str	r3, [r7, #0]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80089c6:	2300      	movs	r3, #0
 80089c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	2b20      	cmp	r3, #32
 80089d4:	d17c      	bne.n	8008ad0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d002      	beq.n	80089e2 <HAL_UART_Transmit+0x2c>
 80089dc:	88fb      	ldrh	r3, [r7, #6]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e075      	b.n	8008ad2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	d101      	bne.n	80089f4 <HAL_UART_Transmit+0x3e>
 80089f0:	2302      	movs	r3, #2
 80089f2:	e06e      	b.n	8008ad2 <HAL_UART_Transmit+0x11c>
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2200      	movs	r2, #0
 8008a00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2221      	movs	r2, #33	; 0x21
 8008a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a0a:	f7fa fe6f 	bl	80036ec <HAL_GetTick>
 8008a0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	88fa      	ldrh	r2, [r7, #6]
 8008a14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	88fa      	ldrh	r2, [r7, #6]
 8008a1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a24:	d108      	bne.n	8008a38 <HAL_UART_Transmit+0x82>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d104      	bne.n	8008a38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	61bb      	str	r3, [r7, #24]
 8008a36:	e003      	b.n	8008a40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008a48:	e02a      	b.n	8008aa0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	2180      	movs	r1, #128	; 0x80
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 fada 	bl	800900e <UART_WaitOnFlagUntilTimeout>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e036      	b.n	8008ad2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d10b      	bne.n	8008a82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	881b      	ldrh	r3, [r3, #0]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008a78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	3302      	adds	r3, #2
 8008a7e:	61bb      	str	r3, [r7, #24]
 8008a80:	e007      	b.n	8008a92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	3b01      	subs	r3, #1
 8008a9a:	b29a      	uxth	r2, r3
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d1cf      	bne.n	8008a4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2140      	movs	r1, #64	; 0x40
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 faaa 	bl	800900e <UART_WaitOnFlagUntilTimeout>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d001      	beq.n	8008ac4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	e006      	b.n	8008ad2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2220      	movs	r2, #32
 8008ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	e000      	b.n	8008ad2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008ad0:	2302      	movs	r3, #2
  }
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3720      	adds	r7, #32
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b08a      	sub	sp, #40	; 0x28
 8008ade:	af02      	add	r7, sp, #8
 8008ae0:	60f8      	str	r0, [r7, #12]
 8008ae2:	60b9      	str	r1, [r7, #8]
 8008ae4:	603b      	str	r3, [r7, #0]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008aea:	2300      	movs	r3, #0
 8008aec:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	f040 808c 	bne.w	8008c14 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008afc:	68bb      	ldr	r3, [r7, #8]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d002      	beq.n	8008b08 <HAL_UART_Receive+0x2e>
 8008b02:	88fb      	ldrh	r3, [r7, #6]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d101      	bne.n	8008b0c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008b08:	2301      	movs	r3, #1
 8008b0a:	e084      	b.n	8008c16 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_UART_Receive+0x40>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e07d      	b.n	8008c16 <HAL_UART_Receive+0x13c>
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2200      	movs	r2, #0
 8008b26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2222      	movs	r2, #34	; 0x22
 8008b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	2200      	movs	r2, #0
 8008b34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008b36:	f7fa fdd9 	bl	80036ec <HAL_GetTick>
 8008b3a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	88fa      	ldrh	r2, [r7, #6]
 8008b40:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	88fa      	ldrh	r2, [r7, #6]
 8008b46:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b50:	d108      	bne.n	8008b64 <HAL_UART_Receive+0x8a>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	691b      	ldr	r3, [r3, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d104      	bne.n	8008b64 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	61bb      	str	r3, [r7, #24]
 8008b62:	e003      	b.n	8008b6c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008b74:	e043      	b.n	8008bfe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2120      	movs	r1, #32
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f000 fa44 	bl	800900e <UART_WaitOnFlagUntilTimeout>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d001      	beq.n	8008b90 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e042      	b.n	8008c16 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d10c      	bne.n	8008bb0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	b29b      	uxth	r3, r3
 8008b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	69bb      	ldr	r3, [r7, #24]
 8008ba6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	3302      	adds	r3, #2
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	e01f      	b.n	8008bf0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	689b      	ldr	r3, [r3, #8]
 8008bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bb8:	d007      	beq.n	8008bca <HAL_UART_Receive+0xf0>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	689b      	ldr	r3, [r3, #8]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10a      	bne.n	8008bd8 <HAL_UART_Receive+0xfe>
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	69fb      	ldr	r3, [r7, #28]
 8008bd4:	701a      	strb	r2, [r3, #0]
 8008bd6:	e008      	b.n	8008bea <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	69fb      	ldr	r3, [r7, #28]
 8008be8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008bea:	69fb      	ldr	r3, [r7, #28]
 8008bec:	3301      	adds	r3, #1
 8008bee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bf4:	b29b      	uxth	r3, r3
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	b29a      	uxth	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c02:	b29b      	uxth	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1b6      	bne.n	8008b76 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	e000      	b.n	8008c16 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8008c14:	2302      	movs	r3, #2
  }
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	4613      	mov	r3, r2
 8008c2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c32:	b2db      	uxtb	r3, r3
 8008c34:	2b20      	cmp	r3, #32
 8008c36:	d11d      	bne.n	8008c74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d002      	beq.n	8008c44 <HAL_UART_Receive_IT+0x26>
 8008c3e:	88fb      	ldrh	r3, [r7, #6]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d101      	bne.n	8008c48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	e016      	b.n	8008c76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d101      	bne.n	8008c56 <HAL_UART_Receive_IT+0x38>
 8008c52:	2302      	movs	r3, #2
 8008c54:	e00f      	b.n	8008c76 <HAL_UART_Receive_IT+0x58>
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008c64:	88fb      	ldrh	r3, [r7, #6]
 8008c66:	461a      	mov	r2, r3
 8008c68:	68b9      	ldr	r1, [r7, #8]
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	f000 fa19 	bl	80090a2 <UART_Start_Receive_IT>
 8008c70:	4603      	mov	r3, r0
 8008c72:	e000      	b.n	8008c76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
	...

08008c80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008cb0:	69bb      	ldr	r3, [r7, #24]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10d      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d008      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x52>
 8008cc0:	6a3b      	ldr	r3, [r7, #32]
 8008cc2:	f003 0320 	and.w	r3, r3, #32
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 fac9 	bl	8009262 <UART_Receive_IT>
      return;
 8008cd0:	e17b      	b.n	8008fca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	f000 80b1 	beq.w	8008e3c <HAL_UART_IRQHandler+0x1bc>
 8008cda:	69fb      	ldr	r3, [r7, #28]
 8008cdc:	f003 0301 	and.w	r3, r3, #1
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d105      	bne.n	8008cf0 <HAL_UART_IRQHandler+0x70>
 8008ce4:	6a3b      	ldr	r3, [r7, #32]
 8008ce6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 80a6 	beq.w	8008e3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	f003 0301 	and.w	r3, r3, #1
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d00a      	beq.n	8008d10 <HAL_UART_IRQHandler+0x90>
 8008cfa:	6a3b      	ldr	r3, [r7, #32]
 8008cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d005      	beq.n	8008d10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d08:	f043 0201 	orr.w	r2, r3, #1
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <HAL_UART_IRQHandler+0xb0>
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	f003 0301 	and.w	r3, r3, #1
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d005      	beq.n	8008d30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	f043 0202 	orr.w	r2, r3, #2
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d32:	f003 0302 	and.w	r3, r3, #2
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d00a      	beq.n	8008d50 <HAL_UART_IRQHandler+0xd0>
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d005      	beq.n	8008d50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	f043 0204 	orr.w	r2, r3, #4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00f      	beq.n	8008d7a <HAL_UART_IRQHandler+0xfa>
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f003 0320 	and.w	r3, r3, #32
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d104      	bne.n	8008d6e <HAL_UART_IRQHandler+0xee>
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d005      	beq.n	8008d7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	f043 0208 	orr.w	r2, r3, #8
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 811e 	beq.w	8008fc0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d86:	f003 0320 	and.w	r3, r3, #32
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d007      	beq.n	8008d9e <HAL_UART_IRQHandler+0x11e>
 8008d8e:	6a3b      	ldr	r3, [r7, #32]
 8008d90:	f003 0320 	and.w	r3, r3, #32
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d002      	beq.n	8008d9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fa62 	bl	8009262 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	695b      	ldr	r3, [r3, #20]
 8008da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	bf14      	ite	ne
 8008dac:	2301      	movne	r3, #1
 8008dae:	2300      	moveq	r3, #0
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	f003 0308 	and.w	r3, r3, #8
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d102      	bne.n	8008dc6 <HAL_UART_IRQHandler+0x146>
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d031      	beq.n	8008e2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f9a4 	bl	8009114 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	695b      	ldr	r3, [r3, #20]
 8008dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d023      	beq.n	8008e22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695a      	ldr	r2, [r3, #20]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d013      	beq.n	8008e1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	4a76      	ldr	r2, [pc, #472]	; (8008fd0 <HAL_UART_IRQHandler+0x350>)
 8008df8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fa fdea 	bl	80039d8 <HAL_DMA_Abort_IT>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d016      	beq.n	8008e38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e14:	4610      	mov	r0, r2
 8008e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e18:	e00e      	b.n	8008e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f8e3 	bl	8008fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e20:	e00a      	b.n	8008e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 f8df 	bl	8008fe6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e28:	e006      	b.n	8008e38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f8db 	bl	8008fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e36:	e0c3      	b.n	8008fc0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e38:	bf00      	nop
    return;
 8008e3a:	e0c1      	b.n	8008fc0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 80a1 	bne.w	8008f88 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	f003 0310 	and.w	r3, r3, #16
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 809b 	beq.w	8008f88 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8095 	beq.w	8008f88 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	695b      	ldr	r3, [r3, #20]
 8008e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d04e      	beq.n	8008f20 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008e8c:	8a3b      	ldrh	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 8098 	beq.w	8008fc4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e98:	8a3a      	ldrh	r2, [r7, #16]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	f080 8092 	bcs.w	8008fc4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	8a3a      	ldrh	r2, [r7, #16]
 8008ea4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	2b20      	cmp	r3, #32
 8008eae:	d02b      	beq.n	8008f08 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ebe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	695a      	ldr	r2, [r3, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f022 0201 	bic.w	r2, r2, #1
 8008ece:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	695a      	ldr	r2, [r3, #20]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ede:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68da      	ldr	r2, [r3, #12]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f022 0210 	bic.w	r2, r2, #16
 8008efc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fa fd2d 	bl	8003962 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	1ad3      	subs	r3, r2, r3
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	4619      	mov	r1, r3
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f86d 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f1e:	e051      	b.n	8008fc4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	1ad3      	subs	r3, r2, r3
 8008f2c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d047      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008f38:	8a7b      	ldrh	r3, [r7, #18]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d044      	beq.n	8008fc8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008f4c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	695a      	ldr	r2, [r3, #20]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0201 	bic.w	r2, r2, #1
 8008f5c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68da      	ldr	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f022 0210 	bic.w	r2, r2, #16
 8008f7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f7c:	8a7b      	ldrh	r3, [r7, #18]
 8008f7e:	4619      	mov	r1, r3
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f839 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f86:	e01f      	b.n	8008fc8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d008      	beq.n	8008fa4 <HAL_UART_IRQHandler+0x324>
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d003      	beq.n	8008fa4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f8f9 	bl	8009194 <UART_Transmit_IT>
    return;
 8008fa2:	e012      	b.n	8008fca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00d      	beq.n	8008fca <HAL_UART_IRQHandler+0x34a>
 8008fae:	6a3b      	ldr	r3, [r7, #32]
 8008fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d008      	beq.n	8008fca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 f93a 	bl	8009232 <UART_EndTransmit_IT>
    return;
 8008fbe:	e004      	b.n	8008fca <HAL_UART_IRQHandler+0x34a>
    return;
 8008fc0:	bf00      	nop
 8008fc2:	e002      	b.n	8008fca <HAL_UART_IRQHandler+0x34a>
      return;
 8008fc4:	bf00      	nop
 8008fc6:	e000      	b.n	8008fca <HAL_UART_IRQHandler+0x34a>
      return;
 8008fc8:	bf00      	nop
  }
}
 8008fca:	3728      	adds	r7, #40	; 0x28
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	0800916d 	.word	0x0800916d

08008fd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008fdc:	bf00      	nop
 8008fde:	370c      	adds	r7, #12
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bc80      	pop	{r7}
 8008fe4:	4770      	bx	lr

08008fe6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b083      	sub	sp, #12
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bc80      	pop	{r7}
 8008ff6:	4770      	bx	lr

08008ff8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b083      	sub	sp, #12
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	bc80      	pop	{r7}
 800900c:	4770      	bx	lr

0800900e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	60f8      	str	r0, [r7, #12]
 8009016:	60b9      	str	r1, [r7, #8]
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	4613      	mov	r3, r2
 800901c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800901e:	e02c      	b.n	800907a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009020:	69bb      	ldr	r3, [r7, #24]
 8009022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009026:	d028      	beq.n	800907a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d007      	beq.n	800903e <UART_WaitOnFlagUntilTimeout+0x30>
 800902e:	f7fa fb5d 	bl	80036ec <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	429a      	cmp	r2, r3
 800903c:	d21d      	bcs.n	800907a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	68da      	ldr	r2, [r3, #12]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800904c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	695a      	ldr	r2, [r3, #20]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f022 0201 	bic.w	r2, r2, #1
 800905c:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2220      	movs	r2, #32
 8009062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2220      	movs	r2, #32
 800906a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009076:	2303      	movs	r3, #3
 8009078:	e00f      	b.n	800909a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	4013      	ands	r3, r2
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	429a      	cmp	r2, r3
 8009088:	bf0c      	ite	eq
 800908a:	2301      	moveq	r3, #1
 800908c:	2300      	movne	r3, #0
 800908e:	b2db      	uxtb	r3, r3
 8009090:	461a      	mov	r2, r3
 8009092:	79fb      	ldrb	r3, [r7, #7]
 8009094:	429a      	cmp	r2, r3
 8009096:	d0c3      	beq.n	8009020 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3710      	adds	r7, #16
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b085      	sub	sp, #20
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	60f8      	str	r0, [r7, #12]
 80090aa:	60b9      	str	r1, [r7, #8]
 80090ac:	4613      	mov	r3, r2
 80090ae:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	88fa      	ldrh	r2, [r7, #6]
 80090ba:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	88fa      	ldrh	r2, [r7, #6]
 80090c0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2200      	movs	r2, #0
 80090c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2222      	movs	r2, #34	; 0x22
 80090cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68da      	ldr	r2, [r3, #12]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090e6:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	695a      	ldr	r2, [r3, #20]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f042 0201 	orr.w	r2, r2, #1
 80090f6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	68da      	ldr	r2, [r3, #12]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f042 0220 	orr.w	r2, r2, #32
 8009106:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bc80      	pop	{r7}
 8009112:	4770      	bx	lr

08009114 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68da      	ldr	r2, [r3, #12]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800912a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	695a      	ldr	r2, [r3, #20]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 0201 	bic.w	r2, r2, #1
 800913a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009140:	2b01      	cmp	r3, #1
 8009142:	d107      	bne.n	8009154 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68da      	ldr	r2, [r3, #12]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f022 0210 	bic.w	r2, r2, #16
 8009152:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2220      	movs	r2, #32
 8009158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2200      	movs	r2, #0
 8009160:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009162:	bf00      	nop
 8009164:	370c      	adds	r7, #12
 8009166:	46bd      	mov	sp, r7
 8009168:	bc80      	pop	{r7}
 800916a:	4770      	bx	lr

0800916c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2200      	movs	r2, #0
 800917e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f7ff ff2d 	bl	8008fe6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800918c:	bf00      	nop
 800918e:	3710      	adds	r7, #16
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091a2:	b2db      	uxtb	r3, r3
 80091a4:	2b21      	cmp	r3, #33	; 0x21
 80091a6:	d13e      	bne.n	8009226 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091b0:	d114      	bne.n	80091dc <UART_Transmit_IT+0x48>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d110      	bne.n	80091dc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a1b      	ldr	r3, [r3, #32]
 80091be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	461a      	mov	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091ce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a1b      	ldr	r3, [r3, #32]
 80091d4:	1c9a      	adds	r2, r3, #2
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	621a      	str	r2, [r3, #32]
 80091da:	e008      	b.n	80091ee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6a1b      	ldr	r3, [r3, #32]
 80091e0:	1c59      	adds	r1, r3, #1
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	6211      	str	r1, [r2, #32]
 80091e6:	781a      	ldrb	r2, [r3, #0]
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	3b01      	subs	r3, #1
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	4619      	mov	r1, r3
 80091fc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d10f      	bne.n	8009222 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009210:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009220:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009222:	2300      	movs	r3, #0
 8009224:	e000      	b.n	8009228 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009226:	2302      	movs	r3, #2
  }
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	bc80      	pop	{r7}
 8009230:	4770      	bx	lr

08009232 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68da      	ldr	r2, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009248:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2220      	movs	r2, #32
 800924e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff febe 	bl	8008fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009258:	2300      	movs	r3, #0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b086      	sub	sp, #24
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009270:	b2db      	uxtb	r3, r3
 8009272:	2b22      	cmp	r3, #34	; 0x22
 8009274:	f040 8099 	bne.w	80093aa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	689b      	ldr	r3, [r3, #8]
 800927c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009280:	d117      	bne.n	80092b2 <UART_Receive_IT+0x50>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d113      	bne.n	80092b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009292:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	b29b      	uxth	r3, r3
 800929c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092aa:	1c9a      	adds	r2, r3, #2
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	629a      	str	r2, [r3, #40]	; 0x28
 80092b0:	e026      	b.n	8009300 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80092b8:	2300      	movs	r3, #0
 80092ba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	689b      	ldr	r3, [r3, #8]
 80092c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c4:	d007      	beq.n	80092d6 <UART_Receive_IT+0x74>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10a      	bne.n	80092e4 <UART_Receive_IT+0x82>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	b2da      	uxtb	r2, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	701a      	strb	r2, [r3, #0]
 80092e2:	e008      	b.n	80092f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	1c5a      	adds	r2, r3, #1
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b01      	subs	r3, #1
 8009308:	b29b      	uxth	r3, r3
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	4619      	mov	r1, r3
 800930e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009310:	2b00      	cmp	r3, #0
 8009312:	d148      	bne.n	80093a6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	68da      	ldr	r2, [r3, #12]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f022 0220 	bic.w	r2, r2, #32
 8009322:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	68da      	ldr	r2, [r3, #12]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009332:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	695a      	ldr	r2, [r3, #20]
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f022 0201 	bic.w	r2, r2, #1
 8009342:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2220      	movs	r2, #32
 8009348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009350:	2b01      	cmp	r3, #1
 8009352:	d123      	bne.n	800939c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68da      	ldr	r2, [r3, #12]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f022 0210 	bic.w	r2, r2, #16
 8009368:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f003 0310 	and.w	r3, r3, #16
 8009374:	2b10      	cmp	r3, #16
 8009376:	d10a      	bne.n	800938e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009378:	2300      	movs	r3, #0
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fe2f 	bl	8008ff8 <HAL_UARTEx_RxEventCallback>
 800939a:	e002      	b.n	80093a2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f7f9 fb75 	bl	8002a8c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093a2:	2300      	movs	r3, #0
 80093a4:	e002      	b.n	80093ac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80093a6:	2300      	movs	r3, #0
 80093a8:	e000      	b.n	80093ac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80093aa:	2302      	movs	r3, #2
  }
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	3718      	adds	r7, #24
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}

080093b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	68da      	ldr	r2, [r3, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	430a      	orrs	r2, r1
 80093d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	431a      	orrs	r2, r3
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	695b      	ldr	r3, [r3, #20]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68db      	ldr	r3, [r3, #12]
 80093ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80093ee:	f023 030c 	bic.w	r3, r3, #12
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	6812      	ldr	r2, [r2, #0]
 80093f6:	68b9      	ldr	r1, [r7, #8]
 80093f8:	430b      	orrs	r3, r1
 80093fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	695b      	ldr	r3, [r3, #20]
 8009402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699a      	ldr	r2, [r3, #24]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4a2c      	ldr	r2, [pc, #176]	; (80094c8 <UART_SetConfig+0x114>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d103      	bne.n	8009424 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800941c:	f7fd fdb8 	bl	8006f90 <HAL_RCC_GetPCLK2Freq>
 8009420:	60f8      	str	r0, [r7, #12]
 8009422:	e002      	b.n	800942a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009424:	f7fd fda0 	bl	8006f68 <HAL_RCC_GetPCLK1Freq>
 8009428:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	4613      	mov	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	4413      	add	r3, r2
 8009432:	009a      	lsls	r2, r3, #2
 8009434:	441a      	add	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	009b      	lsls	r3, r3, #2
 800943c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009440:	4a22      	ldr	r2, [pc, #136]	; (80094cc <UART_SetConfig+0x118>)
 8009442:	fba2 2303 	umull	r2, r3, r2, r3
 8009446:	095b      	lsrs	r3, r3, #5
 8009448:	0119      	lsls	r1, r3, #4
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009a      	lsls	r2, r3, #2
 8009454:	441a      	add	r2, r3
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009460:	4b1a      	ldr	r3, [pc, #104]	; (80094cc <UART_SetConfig+0x118>)
 8009462:	fba3 0302 	umull	r0, r3, r3, r2
 8009466:	095b      	lsrs	r3, r3, #5
 8009468:	2064      	movs	r0, #100	; 0x64
 800946a:	fb00 f303 	mul.w	r3, r0, r3
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	011b      	lsls	r3, r3, #4
 8009472:	3332      	adds	r3, #50	; 0x32
 8009474:	4a15      	ldr	r2, [pc, #84]	; (80094cc <UART_SetConfig+0x118>)
 8009476:	fba2 2303 	umull	r2, r3, r2, r3
 800947a:	095b      	lsrs	r3, r3, #5
 800947c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009480:	4419      	add	r1, r3
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	4613      	mov	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	009a      	lsls	r2, r3, #2
 800948c:	441a      	add	r2, r3
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	009b      	lsls	r3, r3, #2
 8009494:	fbb2 f2f3 	udiv	r2, r2, r3
 8009498:	4b0c      	ldr	r3, [pc, #48]	; (80094cc <UART_SetConfig+0x118>)
 800949a:	fba3 0302 	umull	r0, r3, r3, r2
 800949e:	095b      	lsrs	r3, r3, #5
 80094a0:	2064      	movs	r0, #100	; 0x64
 80094a2:	fb00 f303 	mul.w	r3, r0, r3
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	3332      	adds	r3, #50	; 0x32
 80094ac:	4a07      	ldr	r2, [pc, #28]	; (80094cc <UART_SetConfig+0x118>)
 80094ae:	fba2 2303 	umull	r2, r3, r2, r3
 80094b2:	095b      	lsrs	r3, r3, #5
 80094b4:	f003 020f 	and.w	r2, r3, #15
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	440a      	add	r2, r1
 80094be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80094c0:	bf00      	nop
 80094c2:	3710      	adds	r7, #16
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40013800 	.word	0x40013800
 80094cc:	51eb851f 	.word	0x51eb851f

080094d0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80094d4:	4904      	ldr	r1, [pc, #16]	; (80094e8 <MX_FATFS_Init+0x18>)
 80094d6:	4805      	ldr	r0, [pc, #20]	; (80094ec <MX_FATFS_Init+0x1c>)
 80094d8:	f002 fd46 	bl	800bf68 <FATFS_LinkDriver>
 80094dc:	4603      	mov	r3, r0
 80094de:	461a      	mov	r2, r3
 80094e0:	4b03      	ldr	r3, [pc, #12]	; (80094f0 <MX_FATFS_Init+0x20>)
 80094e2:	701a      	strb	r2, [r3, #0]
	  }


  }*/
  /* USER CODE END Init */
}
 80094e4:	bf00      	nop
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	200007bc 	.word	0x200007bc
 80094ec:	2000008c 	.word	0x2000008c
 80094f0:	200007b8 	.word	0x200007b8

080094f4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b086      	sub	sp, #24
 80094f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */

	DWORD time=0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	617b      	str	r3, [r7, #20]

	RTC_TimeTypeDef sTime = {0};
 80094fe:	f107 0308 	add.w	r3, r7, #8
 8009502:	2100      	movs	r1, #0
 8009504:	460a      	mov	r2, r1
 8009506:	801a      	strh	r2, [r3, #0]
 8009508:	460a      	mov	r2, r1
 800950a:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 800950c:	2300      	movs	r3, #0
 800950e:	607b      	str	r3, [r7, #4]
	HAL_RTC_GetTime(pRTC, &sTime, RTC_FORMAT_BCD);
 8009510:	4b3f      	ldr	r3, [pc, #252]	; (8009610 <get_fattime+0x11c>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f107 0108 	add.w	r1, r7, #8
 8009518:	2201      	movs	r2, #1
 800951a:	4618      	mov	r0, r3
 800951c:	f7fe f80e 	bl	800753c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(pRTC, &DateToUpdate, RTC_FORMAT_BCD);
 8009520:	4b3b      	ldr	r3, [pc, #236]	; (8009610 <get_fattime+0x11c>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	1d39      	adds	r1, r7, #4
 8009526:	2201      	movs	r2, #1
 8009528:	4618      	mov	r0, r3
 800952a:	f7fe f995 	bl	8007858 <HAL_RTC_GetDate>
	uint8_t year = 2000+((DateToUpdate.Year>>4)&0x0F)*10+(DateToUpdate.Year&0x0F);
 800952e:	79fb      	ldrb	r3, [r7, #7]
 8009530:	091b      	lsrs	r3, r3, #4
 8009532:	b2db      	uxtb	r3, r3
 8009534:	461a      	mov	r2, r3
 8009536:	0092      	lsls	r2, r2, #2
 8009538:	4413      	add	r3, r2
 800953a:	005b      	lsls	r3, r3, #1
 800953c:	b2da      	uxtb	r2, r3
 800953e:	79fb      	ldrb	r3, [r7, #7]
 8009540:	f003 030f 	and.w	r3, r3, #15
 8009544:	b2db      	uxtb	r3, r3
 8009546:	4413      	add	r3, r2
 8009548:	b2db      	uxtb	r3, r3
 800954a:	3b30      	subs	r3, #48	; 0x30
 800954c:	74fb      	strb	r3, [r7, #19]
	year = year-1980;
 800954e:	7cfb      	ldrb	r3, [r7, #19]
 8009550:	3344      	adds	r3, #68	; 0x44
 8009552:	74fb      	strb	r3, [r7, #19]
	uint8_t month = ((DateToUpdate.Month>>4)&0x0F)*10+(DateToUpdate.Month&0x0F);
 8009554:	797b      	ldrb	r3, [r7, #5]
 8009556:	091b      	lsrs	r3, r3, #4
 8009558:	b2db      	uxtb	r3, r3
 800955a:	461a      	mov	r2, r3
 800955c:	0092      	lsls	r2, r2, #2
 800955e:	4413      	add	r3, r2
 8009560:	005b      	lsls	r3, r3, #1
 8009562:	b2da      	uxtb	r2, r3
 8009564:	797b      	ldrb	r3, [r7, #5]
 8009566:	f003 030f 	and.w	r3, r3, #15
 800956a:	b2db      	uxtb	r3, r3
 800956c:	4413      	add	r3, r2
 800956e:	74bb      	strb	r3, [r7, #18]
	uint8_t day = ((DateToUpdate.Date>>4)&0x0F)*10+(DateToUpdate.Date&0x0F);
 8009570:	79bb      	ldrb	r3, [r7, #6]
 8009572:	091b      	lsrs	r3, r3, #4
 8009574:	b2db      	uxtb	r3, r3
 8009576:	461a      	mov	r2, r3
 8009578:	0092      	lsls	r2, r2, #2
 800957a:	4413      	add	r3, r2
 800957c:	005b      	lsls	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	79bb      	ldrb	r3, [r7, #6]
 8009582:	f003 030f 	and.w	r3, r3, #15
 8009586:	b2db      	uxtb	r3, r3
 8009588:	4413      	add	r3, r2
 800958a:	747b      	strb	r3, [r7, #17]
	uint8_t hour = ((sTime.Hours>>4)&0x0F)*10+(sTime.Hours&0x0F);
 800958c:	7a3b      	ldrb	r3, [r7, #8]
 800958e:	091b      	lsrs	r3, r3, #4
 8009590:	b2db      	uxtb	r3, r3
 8009592:	461a      	mov	r2, r3
 8009594:	0092      	lsls	r2, r2, #2
 8009596:	4413      	add	r3, r2
 8009598:	005b      	lsls	r3, r3, #1
 800959a:	b2da      	uxtb	r2, r3
 800959c:	7a3b      	ldrb	r3, [r7, #8]
 800959e:	f003 030f 	and.w	r3, r3, #15
 80095a2:	b2db      	uxtb	r3, r3
 80095a4:	4413      	add	r3, r2
 80095a6:	743b      	strb	r3, [r7, #16]
	uint8_t minute = ((sTime.Minutes>>4)&0x0F)*10+(sTime.Minutes&0x0F);
 80095a8:	7a7b      	ldrb	r3, [r7, #9]
 80095aa:	091b      	lsrs	r3, r3, #4
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	4413      	add	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	b2da      	uxtb	r2, r3
 80095b8:	7a7b      	ldrb	r3, [r7, #9]
 80095ba:	f003 030f 	and.w	r3, r3, #15
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	4413      	add	r3, r2
 80095c2:	73fb      	strb	r3, [r7, #15]
	uint8_t second = ((sTime.Seconds>>4)&0x0F)*10+(sTime.Seconds&0x0F);
 80095c4:	7abb      	ldrb	r3, [r7, #10]
 80095c6:	091b      	lsrs	r3, r3, #4
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	461a      	mov	r2, r3
 80095cc:	0092      	lsls	r2, r2, #2
 80095ce:	4413      	add	r3, r2
 80095d0:	005b      	lsls	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	7abb      	ldrb	r3, [r7, #10]
 80095d6:	f003 030f 	and.w	r3, r3, #15
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	4413      	add	r3, r2
 80095de:	73bb      	strb	r3, [r7, #14]

	time= year <<25 |
 80095e0:	7cfb      	ldrb	r3, [r7, #19]
 80095e2:	065a      	lsls	r2, r3, #25
			month<< 21 |
 80095e4:	7cbb      	ldrb	r3, [r7, #18]
 80095e6:	055b      	lsls	r3, r3, #21
	time= year <<25 |
 80095e8:	431a      	orrs	r2, r3
			day << 16 |
 80095ea:	7c7b      	ldrb	r3, [r7, #17]
 80095ec:	041b      	lsls	r3, r3, #16
			month<< 21 |
 80095ee:	431a      	orrs	r2, r3
			hour << 11 |
 80095f0:	7c3b      	ldrb	r3, [r7, #16]
 80095f2:	02db      	lsls	r3, r3, #11
			day << 16 |
 80095f4:	431a      	orrs	r2, r3
			minute << 5 |
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	015b      	lsls	r3, r3, #5
			hour << 11 |
 80095fa:	4313      	orrs	r3, r2
			second >> 1;
 80095fc:	7bba      	ldrb	r2, [r7, #14]
 80095fe:	0852      	lsrs	r2, r2, #1
 8009600:	b2d2      	uxtb	r2, r2
			minute << 5 |
 8009602:	4313      	orrs	r3, r2
	time= year <<25 |
 8009604:	617b      	str	r3, [r7, #20]

  return time;
 8009606:	697b      	ldr	r3, [r7, #20]

  /* USER CODE END get_fattime */
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	200003a4 	.word	0x200003a4

08009614 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	4603      	mov	r3, r0
 800961c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (!SPISD_DetectarSD(mainSD)) {
 800961e:	4b0c      	ldr	r3, [pc, #48]	; (8009650 <USER_initialize+0x3c>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4618      	mov	r0, r3
 8009624:	f7f8 fcde 	bl	8001fe4 <SPISD_DetectarSD>
 8009628:	4603      	mov	r3, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	d106      	bne.n	800963c <USER_initialize+0x28>
		Stat = STA_NOINIT;
 800962e:	4b09      	ldr	r3, [pc, #36]	; (8009654 <USER_initialize+0x40>)
 8009630:	2201      	movs	r2, #1
 8009632:	701a      	strb	r2, [r3, #0]
		return Stat;
 8009634:	4b07      	ldr	r3, [pc, #28]	; (8009654 <USER_initialize+0x40>)
 8009636:	781b      	ldrb	r3, [r3, #0]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	e005      	b.n	8009648 <USER_initialize+0x34>
	} else {
		Stat = 0;
 800963c:	4b05      	ldr	r3, [pc, #20]	; (8009654 <USER_initialize+0x40>)
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
		return Stat;
 8009642:	4b04      	ldr	r3, [pc, #16]	; (8009654 <USER_initialize+0x40>)
 8009644:	781b      	ldrb	r3, [r3, #0]
 8009646:	b2db      	uxtb	r3, r3
	}

  /* USER CODE END INIT */
}
 8009648:	4618      	mov	r0, r3
 800964a:	3708      	adds	r7, #8
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	20000064 	.word	0x20000064
 8009654:	20000089 	.word	0x20000089

08009658 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	4603      	mov	r3, r0
 8009660:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//Stat = STA_NOINIT;
	//return Stat;
	return 0;
 8009662:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 8009664:	4618      	mov	r0, r3
 8009666:	370c      	adds	r7, #12
 8009668:	46bd      	mov	sp, r7
 800966a:	bc80      	pop	{r7}
 800966c:	4770      	bx	lr
	...

08009670 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	60b9      	str	r1, [r7, #8]
 8009678:	607a      	str	r2, [r7, #4]
 800967a:	603b      	str	r3, [r7, #0]
 800967c:	4603      	mov	r3, r0
 800967e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	for (int i = 0; i < 512; i++) {
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e007      	b.n	8009696 <USER_read+0x26>
		buff[i] = 0xFF;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	4413      	add	r3, r2
 800968c:	22ff      	movs	r2, #255	; 0xff
 800968e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	3301      	adds	r3, #1
 8009694:	617b      	str	r3, [r7, #20]
 8009696:	697b      	ldr	r3, [r7, #20]
 8009698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969c:	dbf3      	blt.n	8009686 <USER_read+0x16>
	}
	if (SPISD_LeerSector(mainSD, sector, buff)) {
 800969e:	4b08      	ldr	r3, [pc, #32]	; (80096c0 <USER_read+0x50>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	6879      	ldr	r1, [r7, #4]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7f8 fb9a 	bl	8001de0 <SPISD_LeerSector>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <USER_read+0x46>

		return RES_OK;
 80096b2:	2300      	movs	r3, #0
 80096b4:	e000      	b.n	80096b8 <USER_read+0x48>
	}
	return RES_ERROR;
 80096b6:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3718      	adds	r7, #24
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}
 80096c0:	20000064 	.word	0x20000064

080096c4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60b9      	str	r1, [r7, #8]
 80096cc:	607a      	str	r2, [r7, #4]
 80096ce:	603b      	str	r3, [r7, #0]
 80096d0:	4603      	mov	r3, r0
 80096d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	if (SPISD_EscribirSector(mainSD, sector, buff)) {
 80096d4:	4b09      	ldr	r3, [pc, #36]	; (80096fc <USER_write+0x38>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	6879      	ldr	r1, [r7, #4]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f8 fa63 	bl	8001ba8 <SPISD_EscribirSector>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d004      	beq.n	80096f2 <USER_write+0x2e>
		HAL_Delay(100);
 80096e8:	2064      	movs	r0, #100	; 0x64
 80096ea:	f7fa f809 	bl	8003700 <HAL_Delay>
		return RES_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	e000      	b.n	80096f4 <USER_write+0x30>
	}
	return RES_ERROR;
 80096f2:	2301      	movs	r3, #1

  /* USER CODE END WRITE */
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}
 80096fc:	20000064 	.word	0x20000064

08009700 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	4603      	mov	r3, r0
 8009708:	603a      	str	r2, [r7, #0]
 800970a:	71fb      	strb	r3, [r7, #7]
 800970c:	460b      	mov	r3, r1
 800970e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8009710:	2301      	movs	r3, #1
 8009712:	73fb      	strb	r3, [r7, #15]
	return res;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	bc80      	pop	{r7}
 800971e:	4770      	bx	lr

08009720 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800972a:	79fb      	ldrb	r3, [r7, #7]
 800972c:	4a08      	ldr	r2, [pc, #32]	; (8009750 <disk_status+0x30>)
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	4413      	add	r3, r2
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	79fa      	ldrb	r2, [r7, #7]
 8009738:	4905      	ldr	r1, [pc, #20]	; (8009750 <disk_status+0x30>)
 800973a:	440a      	add	r2, r1
 800973c:	7a12      	ldrb	r2, [r2, #8]
 800973e:	4610      	mov	r0, r2
 8009740:	4798      	blx	r3
 8009742:	4603      	mov	r3, r0
 8009744:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	20000c3c 	.word	0x20000c3c

08009754 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8009762:	79fb      	ldrb	r3, [r7, #7]
 8009764:	4a0d      	ldr	r2, [pc, #52]	; (800979c <disk_initialize+0x48>)
 8009766:	5cd3      	ldrb	r3, [r2, r3]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d111      	bne.n	8009790 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	4a0b      	ldr	r2, [pc, #44]	; (800979c <disk_initialize+0x48>)
 8009770:	2101      	movs	r1, #1
 8009772:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	4a09      	ldr	r2, [pc, #36]	; (800979c <disk_initialize+0x48>)
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	4413      	add	r3, r2
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	79fa      	ldrb	r2, [r7, #7]
 8009782:	4906      	ldr	r1, [pc, #24]	; (800979c <disk_initialize+0x48>)
 8009784:	440a      	add	r2, r1
 8009786:	7a12      	ldrb	r2, [r2, #8]
 8009788:	4610      	mov	r0, r2
 800978a:	4798      	blx	r3
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009790:	7bfb      	ldrb	r3, [r7, #15]
}
 8009792:	4618      	mov	r0, r3
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}
 800979a:	bf00      	nop
 800979c:	20000c3c 	.word	0x20000c3c

080097a0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097a0:	b590      	push	{r4, r7, lr}
 80097a2:	b087      	sub	sp, #28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	4a0a      	ldr	r2, [pc, #40]	; (80097dc <disk_read+0x3c>)
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	689c      	ldr	r4, [r3, #8]
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	4a07      	ldr	r2, [pc, #28]	; (80097dc <disk_read+0x3c>)
 80097c0:	4413      	add	r3, r2
 80097c2:	7a18      	ldrb	r0, [r3, #8]
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	68b9      	ldr	r1, [r7, #8]
 80097ca:	47a0      	blx	r4
 80097cc:	4603      	mov	r3, r0
 80097ce:	75fb      	strb	r3, [r7, #23]
  return res;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd90      	pop	{r4, r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000c3c 	.word	0x20000c3c

080097e0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80097e0:	b590      	push	{r4, r7, lr}
 80097e2:	b087      	sub	sp, #28
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80097f0:	7bfb      	ldrb	r3, [r7, #15]
 80097f2:	4a0a      	ldr	r2, [pc, #40]	; (800981c <disk_write+0x3c>)
 80097f4:	009b      	lsls	r3, r3, #2
 80097f6:	4413      	add	r3, r2
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	68dc      	ldr	r4, [r3, #12]
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	4a07      	ldr	r2, [pc, #28]	; (800981c <disk_write+0x3c>)
 8009800:	4413      	add	r3, r2
 8009802:	7a18      	ldrb	r0, [r3, #8]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	47a0      	blx	r4
 800980c:	4603      	mov	r3, r0
 800980e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009810:	7dfb      	ldrb	r3, [r7, #23]
}
 8009812:	4618      	mov	r0, r3
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	bd90      	pop	{r4, r7, pc}
 800981a:	bf00      	nop
 800981c:	20000c3c 	.word	0x20000c3c

08009820 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	603a      	str	r2, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
 800982c:	460b      	mov	r3, r1
 800982e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009830:	79fb      	ldrb	r3, [r7, #7]
 8009832:	4a09      	ldr	r2, [pc, #36]	; (8009858 <disk_ioctl+0x38>)
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	79fa      	ldrb	r2, [r7, #7]
 800983e:	4906      	ldr	r1, [pc, #24]	; (8009858 <disk_ioctl+0x38>)
 8009840:	440a      	add	r2, r1
 8009842:	7a10      	ldrb	r0, [r2, #8]
 8009844:	79b9      	ldrb	r1, [r7, #6]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4798      	blx	r3
 800984a:	4603      	mov	r3, r0
 800984c:	73fb      	strb	r3, [r7, #15]
  return res;
 800984e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	20000c3c 	.word	0x20000c3c

0800985c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8009870:	e007      	b.n	8009882 <mem_cpy+0x26>
		*d++ = *s++;
 8009872:	693a      	ldr	r2, [r7, #16]
 8009874:	1c53      	adds	r3, r2, #1
 8009876:	613b      	str	r3, [r7, #16]
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	1c59      	adds	r1, r3, #1
 800987c:	6179      	str	r1, [r7, #20]
 800987e:	7812      	ldrb	r2, [r2, #0]
 8009880:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d1f2      	bne.n	8009872 <mem_cpy+0x16>
}
 800988c:	bf00      	nop
 800988e:	bf00      	nop
 8009890:	371c      	adds	r7, #28
 8009892:	46bd      	mov	sp, r7
 8009894:	bc80      	pop	{r7}
 8009896:	4770      	bx	lr

08009898 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009898:	b480      	push	{r7}
 800989a:	b087      	sub	sp, #28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098a8:	e005      	b.n	80098b6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	1c5a      	adds	r2, r3, #1
 80098ae:	617a      	str	r2, [r7, #20]
 80098b0:	68ba      	ldr	r2, [r7, #8]
 80098b2:	b2d2      	uxtb	r2, r2
 80098b4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	1e5a      	subs	r2, r3, #1
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d1f4      	bne.n	80098aa <mem_set+0x12>
}
 80098c0:	bf00      	nop
 80098c2:	bf00      	nop
 80098c4:	371c      	adds	r7, #28
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bc80      	pop	{r7}
 80098ca:	4770      	bx	lr

080098cc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80098cc:	b480      	push	{r7}
 80098ce:	b089      	sub	sp, #36	; 0x24
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	60f8      	str	r0, [r7, #12]
 80098d4:	60b9      	str	r1, [r7, #8]
 80098d6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	61fb      	str	r3, [r7, #28]
 80098dc:	68bb      	ldr	r3, [r7, #8]
 80098de:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80098e4:	bf00      	nop
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	1e5a      	subs	r2, r3, #1
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00d      	beq.n	800990c <mem_cmp+0x40>
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	1c5a      	adds	r2, r3, #1
 80098f4:	61fa      	str	r2, [r7, #28]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	4619      	mov	r1, r3
 80098fa:	69bb      	ldr	r3, [r7, #24]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	61ba      	str	r2, [r7, #24]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	1acb      	subs	r3, r1, r3
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d0ec      	beq.n	80098e6 <mem_cmp+0x1a>
	return r;
 800990c:	697b      	ldr	r3, [r7, #20]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3724      	adds	r7, #36	; 0x24
 8009912:	46bd      	mov	sp, r7
 8009914:	bc80      	pop	{r7}
 8009916:	4770      	bx	lr

08009918 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009918:	b480      	push	{r7}
 800991a:	b083      	sub	sp, #12
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009922:	e002      	b.n	800992a <chk_chr+0x12>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3301      	adds	r3, #1
 8009928:	607b      	str	r3, [r7, #4]
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <chk_chr+0x26>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	4293      	cmp	r3, r2
 800993c:	d1f2      	bne.n	8009924 <chk_chr+0xc>
	return *str;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	781b      	ldrb	r3, [r3, #0]
}
 8009942:	4618      	mov	r0, r3
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	bc80      	pop	{r7}
 800994a:	4770      	bx	lr

0800994c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009956:	2300      	movs	r3, #0
 8009958:	60bb      	str	r3, [r7, #8]
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	60fb      	str	r3, [r7, #12]
 800995e:	e038      	b.n	80099d2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8009960:	492f      	ldr	r1, [pc, #188]	; (8009a20 <chk_lock+0xd4>)
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4613      	mov	r3, r2
 8009966:	005b      	lsls	r3, r3, #1
 8009968:	4413      	add	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	440b      	add	r3, r1
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d029      	beq.n	80099c8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8009974:	492a      	ldr	r1, [pc, #168]	; (8009a20 <chk_lock+0xd4>)
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4613      	mov	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	440b      	add	r3, r1
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800998a:	429a      	cmp	r2, r3
 800998c:	d11e      	bne.n	80099cc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800998e:	4924      	ldr	r1, [pc, #144]	; (8009a20 <chk_lock+0xd4>)
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	4613      	mov	r3, r2
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	440b      	add	r3, r1
 800999c:	3304      	adds	r3, #4
 800999e:	681a      	ldr	r2, [r3, #0]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d110      	bne.n	80099cc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099aa:	491d      	ldr	r1, [pc, #116]	; (8009a20 <chk_lock+0xd4>)
 80099ac:	68fa      	ldr	r2, [r7, #12]
 80099ae:	4613      	mov	r3, r2
 80099b0:	005b      	lsls	r3, r3, #1
 80099b2:	4413      	add	r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3308      	adds	r3, #8
 80099ba:	881a      	ldrh	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d102      	bne.n	80099cc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099c6:	e007      	b.n	80099d8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80099c8:	2301      	movs	r3, #1
 80099ca:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	3301      	adds	r3, #1
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d9c3      	bls.n	8009960 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2b02      	cmp	r3, #2
 80099dc:	d109      	bne.n	80099f2 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d102      	bne.n	80099ea <chk_lock+0x9e>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d101      	bne.n	80099ee <chk_lock+0xa2>
 80099ea:	2300      	movs	r3, #0
 80099ec:	e013      	b.n	8009a16 <chk_lock+0xca>
 80099ee:	2312      	movs	r3, #18
 80099f0:	e011      	b.n	8009a16 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d10b      	bne.n	8009a10 <chk_lock+0xc4>
 80099f8:	4909      	ldr	r1, [pc, #36]	; (8009a20 <chk_lock+0xd4>)
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	4613      	mov	r3, r2
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	4413      	add	r3, r2
 8009a02:	009b      	lsls	r3, r3, #2
 8009a04:	440b      	add	r3, r1
 8009a06:	330a      	adds	r3, #10
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a0e:	d101      	bne.n	8009a14 <chk_lock+0xc8>
 8009a10:	2310      	movs	r3, #16
 8009a12:	e000      	b.n	8009a16 <chk_lock+0xca>
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3714      	adds	r7, #20
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bc80      	pop	{r7}
 8009a1e:	4770      	bx	lr
 8009a20:	20000c24 	.word	0x20000c24

08009a24 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	607b      	str	r3, [r7, #4]
 8009a2e:	e002      	b.n	8009a36 <enq_lock+0x12>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	3301      	adds	r3, #1
 8009a34:	607b      	str	r3, [r7, #4]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d809      	bhi.n	8009a50 <enq_lock+0x2c>
 8009a3c:	490a      	ldr	r1, [pc, #40]	; (8009a68 <enq_lock+0x44>)
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	4613      	mov	r3, r2
 8009a42:	005b      	lsls	r3, r3, #1
 8009a44:	4413      	add	r3, r2
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d1ef      	bne.n	8009a30 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	bf14      	ite	ne
 8009a56:	2301      	movne	r3, #1
 8009a58:	2300      	moveq	r3, #0
 8009a5a:	b2db      	uxtb	r3, r3
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	370c      	adds	r7, #12
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bc80      	pop	{r7}
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	20000c24 	.word	0x20000c24

08009a6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b085      	sub	sp, #20
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009a76:	2300      	movs	r3, #0
 8009a78:	60fb      	str	r3, [r7, #12]
 8009a7a:	e02b      	b.n	8009ad4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009a7c:	4955      	ldr	r1, [pc, #340]	; (8009bd4 <inc_lock+0x168>)
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	4613      	mov	r3, r2
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d11b      	bne.n	8009ace <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009a96:	494f      	ldr	r1, [pc, #316]	; (8009bd4 <inc_lock+0x168>)
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	4613      	mov	r3, r2
 8009a9c:	005b      	lsls	r3, r3, #1
 8009a9e:	4413      	add	r3, r2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	3304      	adds	r3, #4
 8009aa6:	681a      	ldr	r2, [r3, #0]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d10d      	bne.n	8009ace <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009ab2:	4948      	ldr	r1, [pc, #288]	; (8009bd4 <inc_lock+0x168>)
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	005b      	lsls	r3, r3, #1
 8009aba:	4413      	add	r3, r2
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	440b      	add	r3, r1
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	881a      	ldrh	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009aca:	429a      	cmp	r2, r3
 8009acc:	d006      	beq.n	8009adc <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d9d0      	bls.n	8009a7c <inc_lock+0x10>
 8009ada:	e000      	b.n	8009ade <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009adc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	2b02      	cmp	r3, #2
 8009ae2:	d145      	bne.n	8009b70 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
 8009ae8:	e002      	b.n	8009af0 <inc_lock+0x84>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	3301      	adds	r3, #1
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d809      	bhi.n	8009b0a <inc_lock+0x9e>
 8009af6:	4937      	ldr	r1, [pc, #220]	; (8009bd4 <inc_lock+0x168>)
 8009af8:	68fa      	ldr	r2, [r7, #12]
 8009afa:	4613      	mov	r3, r2
 8009afc:	005b      	lsls	r3, r3, #1
 8009afe:	4413      	add	r3, r2
 8009b00:	009b      	lsls	r3, r3, #2
 8009b02:	440b      	add	r3, r1
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d1ef      	bne.n	8009aea <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b02      	cmp	r3, #2
 8009b0e:	d101      	bne.n	8009b14 <inc_lock+0xa8>
 8009b10:	2300      	movs	r3, #0
 8009b12:	e05a      	b.n	8009bca <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009b1a:	482e      	ldr	r0, [pc, #184]	; (8009bd4 <inc_lock+0x168>)
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	005b      	lsls	r3, r3, #1
 8009b22:	4413      	add	r3, r2
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4403      	add	r3, r0
 8009b28:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009b30:	4828      	ldr	r0, [pc, #160]	; (8009bd4 <inc_lock+0x168>)
 8009b32:	68fa      	ldr	r2, [r7, #12]
 8009b34:	4613      	mov	r3, r2
 8009b36:	005b      	lsls	r3, r3, #1
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4403      	add	r3, r0
 8009b3e:	3304      	adds	r3, #4
 8009b40:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009b48:	4922      	ldr	r1, [pc, #136]	; (8009bd4 <inc_lock+0x168>)
 8009b4a:	68fa      	ldr	r2, [r7, #12]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	3308      	adds	r3, #8
 8009b58:	4602      	mov	r2, r0
 8009b5a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b5c:	491d      	ldr	r1, [pc, #116]	; (8009bd4 <inc_lock+0x168>)
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	4613      	mov	r3, r2
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	4413      	add	r3, r2
 8009b66:	009b      	lsls	r3, r3, #2
 8009b68:	440b      	add	r3, r1
 8009b6a:	330a      	adds	r3, #10
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00c      	beq.n	8009b90 <inc_lock+0x124>
 8009b76:	4917      	ldr	r1, [pc, #92]	; (8009bd4 <inc_lock+0x168>)
 8009b78:	68fa      	ldr	r2, [r7, #12]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	005b      	lsls	r3, r3, #1
 8009b7e:	4413      	add	r3, r2
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	440b      	add	r3, r1
 8009b84:	330a      	adds	r3, #10
 8009b86:	881b      	ldrh	r3, [r3, #0]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d001      	beq.n	8009b90 <inc_lock+0x124>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	e01c      	b.n	8009bca <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d10b      	bne.n	8009bae <inc_lock+0x142>
 8009b96:	490f      	ldr	r1, [pc, #60]	; (8009bd4 <inc_lock+0x168>)
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	005b      	lsls	r3, r3, #1
 8009b9e:	4413      	add	r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	330a      	adds	r3, #10
 8009ba6:	881b      	ldrh	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	b299      	uxth	r1, r3
 8009bac:	e001      	b.n	8009bb2 <inc_lock+0x146>
 8009bae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009bb2:	4808      	ldr	r0, [pc, #32]	; (8009bd4 <inc_lock+0x168>)
 8009bb4:	68fa      	ldr	r2, [r7, #12]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	4413      	add	r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	4403      	add	r3, r0
 8009bc0:	330a      	adds	r3, #10
 8009bc2:	460a      	mov	r2, r1
 8009bc4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3301      	adds	r3, #1
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bc80      	pop	{r7}
 8009bd2:	4770      	bx	lr
 8009bd4:	20000c24 	.word	0x20000c24

08009bd8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	607b      	str	r3, [r7, #4]
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d82e      	bhi.n	8009c4a <dec_lock+0x72>
		n = Files[i].ctr;
 8009bec:	491b      	ldr	r1, [pc, #108]	; (8009c5c <dec_lock+0x84>)
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	005b      	lsls	r3, r3, #1
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	330a      	adds	r3, #10
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c00:	89fb      	ldrh	r3, [r7, #14]
 8009c02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c06:	d101      	bne.n	8009c0c <dec_lock+0x34>
 8009c08:	2300      	movs	r3, #0
 8009c0a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c0c:	89fb      	ldrh	r3, [r7, #14]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d002      	beq.n	8009c18 <dec_lock+0x40>
 8009c12:	89fb      	ldrh	r3, [r7, #14]
 8009c14:	3b01      	subs	r3, #1
 8009c16:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c18:	4910      	ldr	r1, [pc, #64]	; (8009c5c <dec_lock+0x84>)
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	005b      	lsls	r3, r3, #1
 8009c20:	4413      	add	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	440b      	add	r3, r1
 8009c26:	330a      	adds	r3, #10
 8009c28:	89fa      	ldrh	r2, [r7, #14]
 8009c2a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c2c:	89fb      	ldrh	r3, [r7, #14]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d108      	bne.n	8009c44 <dec_lock+0x6c>
 8009c32:	490a      	ldr	r1, [pc, #40]	; (8009c5c <dec_lock+0x84>)
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	4613      	mov	r3, r2
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	4413      	add	r3, r2
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	440b      	add	r3, r1
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c44:	2300      	movs	r3, #0
 8009c46:	737b      	strb	r3, [r7, #13]
 8009c48:	e001      	b.n	8009c4e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c4a:	2302      	movs	r3, #2
 8009c4c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bc80      	pop	{r7}
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	20000c24 	.word	0x20000c24

08009c60 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c68:	2300      	movs	r3, #0
 8009c6a:	60fb      	str	r3, [r7, #12]
 8009c6c:	e016      	b.n	8009c9c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c6e:	4910      	ldr	r1, [pc, #64]	; (8009cb0 <clear_lock+0x50>)
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	4613      	mov	r3, r2
 8009c74:	005b      	lsls	r3, r3, #1
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d108      	bne.n	8009c96 <clear_lock+0x36>
 8009c84:	490a      	ldr	r1, [pc, #40]	; (8009cb0 <clear_lock+0x50>)
 8009c86:	68fa      	ldr	r2, [r7, #12]
 8009c88:	4613      	mov	r3, r2
 8009c8a:	005b      	lsls	r3, r3, #1
 8009c8c:	4413      	add	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	440b      	add	r3, r1
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d9e5      	bls.n	8009c6e <clear_lock+0xe>
	}
}
 8009ca2:	bf00      	nop
 8009ca4:	bf00      	nop
 8009ca6:	3714      	adds	r7, #20
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	bc80      	pop	{r7}
 8009cac:	4770      	bx	lr
 8009cae:	bf00      	nop
 8009cb0:	20000c24 	.word	0x20000c24

08009cb4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d038      	beq.n	8009d3c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009cd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009cd8:	6879      	ldr	r1, [r7, #4]
 8009cda:	2301      	movs	r3, #1
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	f7ff fd7f 	bl	80097e0 <disk_write>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d002      	beq.n	8009cee <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	73fb      	strb	r3, [r7, #15]
 8009cec:	e026      	b.n	8009d3c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d218      	bcs.n	8009d3c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e010      	b.n	8009d36 <sync_window+0x82>
					wsect += fs->fsize;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d26:	6879      	ldr	r1, [r7, #4]
 8009d28:	2301      	movs	r3, #1
 8009d2a:	697a      	ldr	r2, [r7, #20]
 8009d2c:	f7ff fd58 	bl	80097e0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	3b01      	subs	r3, #1
 8009d34:	613b      	str	r3, [r7, #16]
 8009d36:	693b      	ldr	r3, [r7, #16]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d8eb      	bhi.n	8009d14 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3718      	adds	r7, #24
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d46:	b580      	push	{r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
 8009d4e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d50:	2300      	movs	r3, #0
 8009d52:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009d5a:	683a      	ldr	r2, [r7, #0]
 8009d5c:	429a      	cmp	r2, r3
 8009d5e:	d01b      	beq.n	8009d98 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7ff ffa7 	bl	8009cb4 <sync_window>
 8009d66:	4603      	mov	r3, r0
 8009d68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d113      	bne.n	8009d98 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	2301      	movs	r3, #1
 8009d7a:	683a      	ldr	r2, [r7, #0]
 8009d7c:	f7ff fd10 	bl	80097a0 <disk_read>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d004      	beq.n	8009d90 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d86:	f04f 33ff 	mov.w	r3, #4294967295
 8009d8a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ff82 	bl	8009cb4 <sync_window>
 8009db0:	4603      	mov	r3, r0
 8009db2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009db4:	7bfb      	ldrb	r3, [r7, #15]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	f040 809b 	bne.w	8009ef2 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	f040 8088 	bne.w	8009ed8 <sync_fs+0x136>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	f040 8082 	bne.w	8009ed8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f7ff fd5b 	bl	8009898 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2255      	movs	r2, #85	; 0x55
 8009de6:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	22aa      	movs	r2, #170	; 0xaa
 8009dee:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2252      	movs	r2, #82	; 0x52
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2252      	movs	r2, #82	; 0x52
 8009dfc:	705a      	strb	r2, [r3, #1]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2261      	movs	r2, #97	; 0x61
 8009e02:	709a      	strb	r2, [r3, #2]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2241      	movs	r2, #65	; 0x41
 8009e08:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2272      	movs	r2, #114	; 0x72
 8009e0e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2272      	movs	r2, #114	; 0x72
 8009e16:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2241      	movs	r2, #65	; 0x41
 8009e1e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2261      	movs	r2, #97	; 0x61
 8009e26:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	0a1b      	lsrs	r3, r3, #8
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	b2da      	uxtb	r2, r3
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e52:	0c1b      	lsrs	r3, r3, #16
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e62:	0e1b      	lsrs	r3, r3, #24
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009e80:	b29b      	uxth	r3, r3
 8009e82:	0a1b      	lsrs	r3, r3, #8
 8009e84:	b29b      	uxth	r3, r3
 8009e86:	b2da      	uxtb	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009e94:	0c1b      	lsrs	r3, r3, #16
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ea4:	0e1b      	lsrs	r3, r3, #24
 8009ea6:	b2da      	uxtb	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f7ff fc88 	bl	80097e0 <disk_write>
			fs->fsi_flag = 0;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ede:	2200      	movs	r2, #0
 8009ee0:	2100      	movs	r1, #0
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff fc9c 	bl	8009820 <disk_ioctl>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b083      	sub	sp, #12
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	3b02      	subs	r3, #2
 8009f0a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f12:	3b02      	subs	r3, #2
 8009f14:	683a      	ldr	r2, [r7, #0]
 8009f16:	429a      	cmp	r2, r3
 8009f18:	d301      	bcc.n	8009f1e <clust2sect+0x22>
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	e00a      	b.n	8009f34 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009f24:	461a      	mov	r2, r3
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	fb03 f202 	mul.w	r2, r3, r2
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009f32:	4413      	add	r3, r2
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bc80      	pop	{r7}
 8009f3c:	4770      	bx	lr

08009f3e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009f3e:	b580      	push	{r7, lr}
 8009f40:	b086      	sub	sp, #24
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
 8009f46:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	2b01      	cmp	r3, #1
 8009f4c:	d905      	bls.n	8009f5a <get_fat+0x1c>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f54:	683a      	ldr	r2, [r7, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d302      	bcc.n	8009f60 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
 8009f5e:	e0a3      	b.n	800a0a8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295
 8009f64:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d068      	beq.n	800a042 <get_fat+0x104>
 8009f70:	2b03      	cmp	r3, #3
 8009f72:	f300 808f 	bgt.w	800a094 <get_fat+0x156>
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d002      	beq.n	8009f80 <get_fat+0x42>
 8009f7a:	2b02      	cmp	r3, #2
 8009f7c:	d040      	beq.n	800a000 <get_fat+0xc2>
 8009f7e:	e089      	b.n	800a094 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	085b      	lsrs	r3, r3, #1
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	0a5b      	lsrs	r3, r3, #9
 8009f98:	4413      	add	r3, r2
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fed2 	bl	8009d46 <move_window>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d178      	bne.n	800a09a <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	60fa      	str	r2, [r7, #12]
 8009fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	5cd3      	ldrb	r3, [r2, r3]
 8009fb6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	0a5b      	lsrs	r3, r3, #9
 8009fc2:	4413      	add	r3, r2
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f7ff febd 	bl	8009d46 <move_window>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d165      	bne.n	800a09e <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	5cd3      	ldrb	r3, [r2, r3]
 8009fdc:	021b      	lsls	r3, r3, #8
 8009fde:	461a      	mov	r2, r3
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d002      	beq.n	8009ff6 <get_fat+0xb8>
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	091b      	lsrs	r3, r3, #4
 8009ff4:	e002      	b.n	8009ffc <get_fat+0xbe>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ffc:	617b      	str	r3, [r7, #20]
			break;
 8009ffe:	e053      	b.n	800a0a8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	0a1b      	lsrs	r3, r3, #8
 800a00a:	4413      	add	r3, r2
 800a00c:	4619      	mov	r1, r3
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f7ff fe99 	bl	8009d46 <move_window>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d143      	bne.n	800a0a2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	005b      	lsls	r3, r3, #1
 800a01e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	4413      	add	r3, r2
 800a026:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	3301      	adds	r3, #1
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	021b      	lsls	r3, r3, #8
 800a030:	b21a      	sxth	r2, r3
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	781b      	ldrb	r3, [r3, #0]
 800a036:	b21b      	sxth	r3, r3
 800a038:	4313      	orrs	r3, r2
 800a03a:	b21b      	sxth	r3, r3
 800a03c:	b29b      	uxth	r3, r3
 800a03e:	617b      	str	r3, [r7, #20]
			break;
 800a040:	e032      	b.n	800a0a8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	09db      	lsrs	r3, r3, #7
 800a04c:	4413      	add	r3, r2
 800a04e:	4619      	mov	r1, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7ff fe78 	bl	8009d46 <move_window>
 800a056:	4603      	mov	r3, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d124      	bne.n	800a0a6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	4413      	add	r3, r2
 800a068:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	3303      	adds	r3, #3
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	061a      	lsls	r2, r3, #24
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	3302      	adds	r3, #2
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	4313      	orrs	r3, r2
 800a07c:	693a      	ldr	r2, [r7, #16]
 800a07e:	3201      	adds	r2, #1
 800a080:	7812      	ldrb	r2, [r2, #0]
 800a082:	0212      	lsls	r2, r2, #8
 800a084:	4313      	orrs	r3, r2
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	7812      	ldrb	r2, [r2, #0]
 800a08a:	4313      	orrs	r3, r2
 800a08c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a090:	617b      	str	r3, [r7, #20]
			break;
 800a092:	e009      	b.n	800a0a8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
 800a098:	e006      	b.n	800a0a8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a09a:	bf00      	nop
 800a09c:	e004      	b.n	800a0a8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a09e:	bf00      	nop
 800a0a0:	e002      	b.n	800a0a8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0a2:	bf00      	nop
 800a0a4:	e000      	b.n	800a0a8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0a6:	bf00      	nop
		}
	}

	return val;
 800a0a8:	697b      	ldr	r3, [r7, #20]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}

0800a0b2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a0b2:	b580      	push	{r7, lr}
 800a0b4:	b088      	sub	sp, #32
 800a0b6:	af00      	add	r7, sp, #0
 800a0b8:	60f8      	str	r0, [r7, #12]
 800a0ba:	60b9      	str	r1, [r7, #8]
 800a0bc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d905      	bls.n	800a0d0 <put_fat+0x1e>
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a0ca:	68ba      	ldr	r2, [r7, #8]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d302      	bcc.n	800a0d6 <put_fat+0x24>
		res = FR_INT_ERR;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	77fb      	strb	r3, [r7, #31]
 800a0d4:	e0f6      	b.n	800a2c4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	f000 809e 	beq.w	800a21e <put_fat+0x16c>
 800a0e2:	2b03      	cmp	r3, #3
 800a0e4:	f300 80e4 	bgt.w	800a2b0 <put_fat+0x1fe>
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d002      	beq.n	800a0f2 <put_fat+0x40>
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d06f      	beq.n	800a1d0 <put_fat+0x11e>
 800a0f0:	e0de      	b.n	800a2b0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	085b      	lsrs	r3, r3, #1
 800a0fa:	697a      	ldr	r2, [r7, #20]
 800a0fc:	4413      	add	r3, r2
 800a0fe:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	0a5b      	lsrs	r3, r3, #9
 800a10a:	4413      	add	r3, r2
 800a10c:	4619      	mov	r1, r3
 800a10e:	68f8      	ldr	r0, [r7, #12]
 800a110:	f7ff fe19 	bl	8009d46 <move_window>
 800a114:	4603      	mov	r3, r0
 800a116:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a118:	7ffb      	ldrb	r3, [r7, #31]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f040 80cb 	bne.w	800a2b6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	1c5a      	adds	r2, r3, #1
 800a124:	617a      	str	r2, [r7, #20]
 800a126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	4413      	add	r3, r2
 800a12e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	f003 0301 	and.w	r3, r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	d00d      	beq.n	800a156 <put_fat+0xa4>
 800a13a:	69bb      	ldr	r3, [r7, #24]
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	b25b      	sxtb	r3, r3
 800a140:	f003 030f 	and.w	r3, r3, #15
 800a144:	b25a      	sxtb	r2, r3
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	b2db      	uxtb	r3, r3
 800a14a:	011b      	lsls	r3, r3, #4
 800a14c:	b25b      	sxtb	r3, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	b25b      	sxtb	r3, r3
 800a152:	b2db      	uxtb	r3, r3
 800a154:	e001      	b.n	800a15a <put_fat+0xa8>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	b2db      	uxtb	r3, r3
 800a15a:	69ba      	ldr	r2, [r7, #24]
 800a15c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a16c:	697b      	ldr	r3, [r7, #20]
 800a16e:	0a5b      	lsrs	r3, r3, #9
 800a170:	4413      	add	r3, r2
 800a172:	4619      	mov	r1, r3
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f7ff fde6 	bl	8009d46 <move_window>
 800a17a:	4603      	mov	r3, r0
 800a17c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a17e:	7ffb      	ldrb	r3, [r7, #31]
 800a180:	2b00      	cmp	r3, #0
 800a182:	f040 809a 	bne.w	800a2ba <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800a186:	697b      	ldr	r3, [r7, #20]
 800a188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	4413      	add	r3, r2
 800a190:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d003      	beq.n	800a1a4 <put_fat+0xf2>
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	091b      	lsrs	r3, r3, #4
 800a1a0:	b2db      	uxtb	r3, r3
 800a1a2:	e00e      	b.n	800a1c2 <put_fat+0x110>
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b25b      	sxtb	r3, r3
 800a1aa:	f023 030f 	bic.w	r3, r3, #15
 800a1ae:	b25a      	sxtb	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	0a1b      	lsrs	r3, r3, #8
 800a1b4:	b25b      	sxtb	r3, r3
 800a1b6:	f003 030f 	and.w	r3, r3, #15
 800a1ba:	b25b      	sxtb	r3, r3
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	b25b      	sxtb	r3, r3
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	69ba      	ldr	r2, [r7, #24]
 800a1c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a1ce:	e079      	b.n	800a2c4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	0a1b      	lsrs	r3, r3, #8
 800a1da:	4413      	add	r3, r2
 800a1dc:	4619      	mov	r1, r3
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f7ff fdb1 	bl	8009d46 <move_window>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1e8:	7ffb      	ldrb	r3, [r7, #31]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d167      	bne.n	800a2be <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	005b      	lsls	r3, r3, #1
 800a1f2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4413      	add	r3, r2
 800a1fa:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	b2da      	uxtb	r2, r3
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	701a      	strb	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	b29b      	uxth	r3, r3
 800a208:	0a1b      	lsrs	r3, r3, #8
 800a20a:	b29a      	uxth	r2, r3
 800a20c:	69bb      	ldr	r3, [r7, #24]
 800a20e:	3301      	adds	r3, #1
 800a210:	b2d2      	uxtb	r2, r2
 800a212:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a21c:	e052      	b.n	800a2c4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a224:	68bb      	ldr	r3, [r7, #8]
 800a226:	09db      	lsrs	r3, r3, #7
 800a228:	4413      	add	r3, r2
 800a22a:	4619      	mov	r1, r3
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f7ff fd8a 	bl	8009d46 <move_window>
 800a232:	4603      	mov	r3, r0
 800a234:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a236:	7ffb      	ldrb	r3, [r7, #31]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d142      	bne.n	800a2c2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	4413      	add	r3, r2
 800a248:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a24a:	69bb      	ldr	r3, [r7, #24]
 800a24c:	3303      	adds	r3, #3
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	061a      	lsls	r2, r3, #24
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	3302      	adds	r3, #2
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	041b      	lsls	r3, r3, #16
 800a25a:	4313      	orrs	r3, r2
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	3201      	adds	r2, #1
 800a260:	7812      	ldrb	r2, [r2, #0]
 800a262:	0212      	lsls	r2, r2, #8
 800a264:	4313      	orrs	r3, r2
 800a266:	69ba      	ldr	r2, [r7, #24]
 800a268:	7812      	ldrb	r2, [r2, #0]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	4313      	orrs	r3, r2
 800a274:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	69bb      	ldr	r3, [r7, #24]
 800a27c:	701a      	strb	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	b29b      	uxth	r3, r3
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	b29a      	uxth	r2, r3
 800a286:	69bb      	ldr	r3, [r7, #24]
 800a288:	3301      	adds	r3, #1
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	701a      	strb	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	0c1a      	lsrs	r2, r3, #16
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	3302      	adds	r3, #2
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	701a      	strb	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	0e1a      	lsrs	r2, r3, #24
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	3303      	adds	r3, #3
 800a2a2:	b2d2      	uxtb	r2, r2
 800a2a4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a2ae:	e009      	b.n	800a2c4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800a2b0:	2302      	movs	r3, #2
 800a2b2:	77fb      	strb	r3, [r7, #31]
 800a2b4:	e006      	b.n	800a2c4 <put_fat+0x212>
			if (res != FR_OK) break;
 800a2b6:	bf00      	nop
 800a2b8:	e004      	b.n	800a2c4 <put_fat+0x212>
			if (res != FR_OK) break;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <put_fat+0x212>
			if (res != FR_OK) break;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <put_fat+0x212>
			if (res != FR_OK) break;
 800a2c2:	bf00      	nop
		}
	}

	return res;
 800a2c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3720      	adds	r7, #32
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a2ce:	b580      	push	{r7, lr}
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d905      	bls.n	800a2ea <remove_chain+0x1c>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a2e4:	683a      	ldr	r2, [r7, #0]
 800a2e6:	429a      	cmp	r2, r3
 800a2e8:	d302      	bcc.n	800a2f0 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a2ea:	2302      	movs	r3, #2
 800a2ec:	73fb      	strb	r3, [r7, #15]
 800a2ee:	e043      	b.n	800a378 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a2f4:	e036      	b.n	800a364 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7ff fe20 	bl	8009f3e <get_fat>
 800a2fe:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d035      	beq.n	800a372 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d102      	bne.n	800a312 <remove_chain+0x44>
 800a30c:	2302      	movs	r3, #2
 800a30e:	73fb      	strb	r3, [r7, #15]
 800a310:	e032      	b.n	800a378 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a318:	d102      	bne.n	800a320 <remove_chain+0x52>
 800a31a:	2301      	movs	r3, #1
 800a31c:	73fb      	strb	r3, [r7, #15]
 800a31e:	e02b      	b.n	800a378 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a320:	2200      	movs	r2, #0
 800a322:	6839      	ldr	r1, [r7, #0]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f7ff fec4 	bl	800a0b2 <put_fat>
 800a32a:	4603      	mov	r3, r0
 800a32c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a32e:	7bfb      	ldrb	r3, [r7, #15]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d120      	bne.n	800a376 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d00f      	beq.n	800a360 <remove_chain+0x92>
				fs->free_clust++;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a346:	1c5a      	adds	r2, r3, #1
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a354:	f043 0301 	orr.w	r3, r3, #1
 800a358:	b2da      	uxtb	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d3c2      	bcc.n	800a2f6 <remove_chain+0x28>
 800a370:	e002      	b.n	800a378 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a372:	bf00      	nop
 800a374:	e000      	b.n	800a378 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a376:	bf00      	nop
		}
	}

	return res;
 800a378:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b086      	sub	sp, #24
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
 800a38a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d10f      	bne.n	800a3b2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a398:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <create_chain+0x2a>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d31c      	bcc.n	800a3e6 <create_chain+0x64>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	e019      	b.n	800a3e6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f7ff fdc2 	bl	8009f3e <get_fat>
 800a3ba:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d801      	bhi.n	800a3c6 <create_chain+0x44>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e076      	b.n	800a4b4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3cc:	d101      	bne.n	800a3d2 <create_chain+0x50>
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	e070      	b.n	800a4b4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d201      	bcs.n	800a3e2 <create_chain+0x60>
 800a3de:	68bb      	ldr	r3, [r7, #8]
 800a3e0:	e068      	b.n	800a4b4 <create_chain+0x132>
		scl = clst;
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3f6:	697a      	ldr	r2, [r7, #20]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d307      	bcc.n	800a40c <create_chain+0x8a>
			ncl = 2;
 800a3fc:	2302      	movs	r3, #2
 800a3fe:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	693b      	ldr	r3, [r7, #16]
 800a404:	429a      	cmp	r2, r3
 800a406:	d901      	bls.n	800a40c <create_chain+0x8a>
 800a408:	2300      	movs	r3, #0
 800a40a:	e053      	b.n	800a4b4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a40c:	6979      	ldr	r1, [r7, #20]
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f7ff fd95 	bl	8009f3e <get_fat>
 800a414:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d00e      	beq.n	800a43a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a422:	d002      	beq.n	800a42a <create_chain+0xa8>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <create_chain+0xac>
			return cs;
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	e042      	b.n	800a4b4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	429a      	cmp	r2, r3
 800a434:	d1d9      	bne.n	800a3ea <create_chain+0x68>
 800a436:	2300      	movs	r3, #0
 800a438:	e03c      	b.n	800a4b4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a43a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a43c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a440:	6979      	ldr	r1, [r7, #20]
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f7ff fe35 	bl	800a0b2 <put_fat>
 800a448:	4603      	mov	r3, r0
 800a44a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d109      	bne.n	800a466 <create_chain+0xe4>
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d006      	beq.n	800a466 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	6839      	ldr	r1, [r7, #0]
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fe28 	bl	800a0b2 <put_fat>
 800a462:	4603      	mov	r3, r0
 800a464:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a466:	7bfb      	ldrb	r3, [r7, #15]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d11a      	bne.n	800a4a2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47e:	d018      	beq.n	800a4b2 <create_chain+0x130>
			fs->free_clust--;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a486:	1e5a      	subs	r2, r3, #1
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a4a0:	e007      	b.n	800a4b2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a4a2:	7bfb      	ldrb	r3, [r7, #15]
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d102      	bne.n	800a4ae <create_chain+0x12c>
 800a4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ac:	e000      	b.n	800a4b0 <create_chain+0x12e>
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a4b2:	697b      	ldr	r3, [r7, #20]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3718      	adds	r7, #24
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a4cc:	3304      	adds	r3, #4
 800a4ce:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	0a5b      	lsrs	r3, r3, #9
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a4da:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4e2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	1d1a      	adds	r2, r3, #4
 800a4e8:	613a      	str	r2, [r7, #16]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d101      	bne.n	800a4f8 <clmt_clust+0x3c>
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	e010      	b.n	800a51a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a4f8:	697a      	ldr	r2, [r7, #20]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d307      	bcc.n	800a510 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	617b      	str	r3, [r7, #20]
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	3304      	adds	r3, #4
 800a50c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a50e:	e7e9      	b.n	800a4e4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a510:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	4413      	add	r3, r2
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	371c      	adds	r7, #28
 800a51e:	46bd      	mov	sp, r7
 800a520:	bc80      	pop	{r7}
 800a522:	4770      	bx	lr

0800a524 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b086      	sub	sp, #24
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	b29a      	uxth	r2, r3
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a53e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d007      	beq.n	800a556 <dir_sdi+0x32>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a54c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	429a      	cmp	r2, r3
 800a554:	d301      	bcc.n	800a55a <dir_sdi+0x36>
		return FR_INT_ERR;
 800a556:	2302      	movs	r3, #2
 800a558:	e074      	b.n	800a644 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a55a:	697b      	ldr	r3, [r7, #20]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d10c      	bne.n	800a57a <dir_sdi+0x56>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a566:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a56a:	2b03      	cmp	r3, #3
 800a56c:	d105      	bne.n	800a57a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a574:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a578:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d111      	bne.n	800a5a4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a586:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a58a:	461a      	mov	r2, r3
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	4293      	cmp	r3, r2
 800a590:	d301      	bcc.n	800a596 <dir_sdi+0x72>
			return FR_INT_ERR;
 800a592:	2302      	movs	r3, #2
 800a594:	e056      	b.n	800a644 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a59c:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a5a0:	613b      	str	r3, [r7, #16]
 800a5a2:	e032      	b.n	800a60a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5aa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a5b2:	e01e      	b.n	800a5f2 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5ba:	6979      	ldr	r1, [r7, #20]
 800a5bc:	4618      	mov	r0, r3
 800a5be:	f7ff fcbe 	bl	8009f3e <get_fat>
 800a5c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d101      	bne.n	800a5d0 <dir_sdi+0xac>
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e039      	b.n	800a644 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d907      	bls.n	800a5e6 <dir_sdi+0xc2>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d301      	bcc.n	800a5ea <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e02c      	b.n	800a644 <dir_sdi+0x120>
			idx -= ic;
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d2dc      	bcs.n	800a5b4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a600:	6979      	ldr	r1, [r7, #20]
 800a602:	4618      	mov	r0, r3
 800a604:	f7ff fc7a 	bl	8009efc <clust2sect>
 800a608:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d101      	bne.n	800a61c <dir_sdi+0xf8>
 800a618:	2302      	movs	r3, #2
 800a61a:	e013      	b.n	800a644 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	091a      	lsrs	r2, r3, #4
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	441a      	add	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a630:	461a      	mov	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	f003 030f 	and.w	r3, r3, #15
 800a638:	015b      	lsls	r3, r3, #5
 800a63a:	441a      	add	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a642:	2300      	movs	r3, #0
}
 800a644:	4618      	mov	r0, r3
 800a646:	3718      	adds	r7, #24
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a64c:	b590      	push	{r4, r7, lr}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a65c:	3301      	adds	r3, #1
 800a65e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	b29b      	uxth	r3, r3
 800a664:	2b00      	cmp	r3, #0
 800a666:	d004      	beq.n	800a672 <dir_next+0x26>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d101      	bne.n	800a676 <dir_next+0x2a>
		return FR_NO_FILE;
 800a672:	2304      	movs	r3, #4
 800a674:	e0dd      	b.n	800a832 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f003 030f 	and.w	r3, r3, #15
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	f040 80c6 	bne.w	800a80e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a688:	1c5a      	adds	r2, r3, #1
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10b      	bne.n	800a6b2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6a0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	f0c0 80b0 	bcc.w	800a80e <dir_next+0x1c2>
				return FR_NO_FILE;
 800a6ae:	2304      	movs	r3, #4
 800a6b0:	e0bf      	b.n	800a832 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	091b      	lsrs	r3, r3, #4
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a6bc:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a6c0:	3a01      	subs	r2, #1
 800a6c2:	4013      	ands	r3, r2
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	f040 80a2 	bne.w	800a80e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	4610      	mov	r0, r2
 800a6da:	f7ff fc30 	bl	8009f3e <get_fat>
 800a6de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d801      	bhi.n	800a6ea <dir_next+0x9e>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e0a3      	b.n	800a832 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a6ea:	697b      	ldr	r3, [r7, #20]
 800a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6f0:	d101      	bne.n	800a6f6 <dir_next+0xaa>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e09d      	b.n	800a832 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6fc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a700:	697a      	ldr	r2, [r7, #20]
 800a702:	429a      	cmp	r2, r3
 800a704:	d374      	bcc.n	800a7f0 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d101      	bne.n	800a710 <dir_next+0xc4>
 800a70c:	2304      	movs	r3, #4
 800a70e:	e090      	b.n	800a832 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a71c:	4619      	mov	r1, r3
 800a71e:	4610      	mov	r0, r2
 800a720:	f7ff fe2f 	bl	800a382 <create_chain>
 800a724:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d101      	bne.n	800a730 <dir_next+0xe4>
 800a72c:	2307      	movs	r3, #7
 800a72e:	e080      	b.n	800a832 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d101      	bne.n	800a73a <dir_next+0xee>
 800a736:	2302      	movs	r3, #2
 800a738:	e07b      	b.n	800a832 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d101      	bne.n	800a746 <dir_next+0xfa>
 800a742:	2301      	movs	r3, #1
 800a744:	e075      	b.n	800a832 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a74c:	4618      	mov	r0, r3
 800a74e:	f7ff fab1 	bl	8009cb4 <sync_window>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <dir_next+0x110>
 800a758:	2301      	movs	r3, #1
 800a75a:	e06a      	b.n	800a832 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a762:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a766:	2100      	movs	r1, #0
 800a768:	4618      	mov	r0, r3
 800a76a:	f7ff f895 	bl	8009898 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a77a:	6979      	ldr	r1, [r7, #20]
 800a77c:	4610      	mov	r0, r2
 800a77e:	f7ff fbbd 	bl	8009efc <clust2sect>
 800a782:	4603      	mov	r3, r0
 800a784:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	e01b      	b.n	800a7c6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a794:	2201      	movs	r2, #1
 800a796:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff fa87 	bl	8009cb4 <sync_window>
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d001      	beq.n	800a7b0 <dir_next+0x164>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e040      	b.n	800a832 <dir_next+0x1e6>
						dp->fs->winsect++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7b6:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	3301      	adds	r3, #1
 800a7c4:	613b      	str	r3, [r7, #16]
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7cc:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d3da      	bcc.n	800a78e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7de:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7e8:	693a      	ldr	r2, [r7, #16]
 800a7ea:	1a8a      	subs	r2, r1, r2
 800a7ec:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	697a      	ldr	r2, [r7, #20]
 800a7f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7fe:	6979      	ldr	r1, [r7, #20]
 800a800:	4618      	mov	r0, r3
 800a802:	f7ff fb7b 	bl	8009efc <clust2sect>
 800a806:	4602      	mov	r2, r0
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	b29a      	uxth	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a81e:	461a      	mov	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	015b      	lsls	r3, r3, #5
 800a828:	441a      	add	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a830:	2300      	movs	r3, #0
}
 800a832:	4618      	mov	r0, r3
 800a834:	371c      	adds	r7, #28
 800a836:	46bd      	mov	sp, r7
 800a838:	bd90      	pop	{r4, r7, pc}

0800a83a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a83a:	b580      	push	{r7, lr}
 800a83c:	b084      	sub	sp, #16
 800a83e:	af00      	add	r7, sp, #0
 800a840:	6078      	str	r0, [r7, #4]
 800a842:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a844:	2100      	movs	r1, #0
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff fe6c 	bl	800a524 <dir_sdi>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a850:	7bfb      	ldrb	r3, [r7, #15]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d131      	bne.n	800a8ba <dir_alloc+0x80>
		n = 0;
 800a856:	2300      	movs	r3, #0
 800a858:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a866:	4619      	mov	r1, r3
 800a868:	4610      	mov	r0, r2
 800a86a:	f7ff fa6c 	bl	8009d46 <move_window>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d11f      	bne.n	800a8b8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	2be5      	cmp	r3, #229	; 0xe5
 800a882:	d005      	beq.n	800a890 <dir_alloc+0x56>
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d107      	bne.n	800a8a0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	3301      	adds	r3, #1
 800a894:	60bb      	str	r3, [r7, #8]
 800a896:	68ba      	ldr	r2, [r7, #8]
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d102      	bne.n	800a8a4 <dir_alloc+0x6a>
 800a89e:	e00c      	b.n	800a8ba <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a8a4:	2101      	movs	r1, #1
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f7ff fed0 	bl	800a64c <dir_next>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a8b0:	7bfb      	ldrb	r3, [r7, #15]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0d1      	beq.n	800a85a <dir_alloc+0x20>
 800a8b6:	e000      	b.n	800a8ba <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a8b8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a8ba:	7bfb      	ldrb	r3, [r7, #15]
 800a8bc:	2b04      	cmp	r3, #4
 800a8be:	d101      	bne.n	800a8c4 <dir_alloc+0x8a>
 800a8c0:	2307      	movs	r3, #7
 800a8c2:	73fb      	strb	r3, [r7, #15]
	return res;
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3710      	adds	r7, #16
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}

0800a8ce <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b085      	sub	sp, #20
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	331b      	adds	r3, #27
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	021b      	lsls	r3, r3, #8
 800a8e0:	b21a      	sxth	r2, r3
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	331a      	adds	r3, #26
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	b21b      	sxth	r3, r3
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	b21b      	sxth	r3, r3
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a8f8:	2b03      	cmp	r3, #3
 800a8fa:	d10f      	bne.n	800a91c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	3315      	adds	r3, #21
 800a900:	781b      	ldrb	r3, [r3, #0]
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	b21a      	sxth	r2, r3
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3314      	adds	r3, #20
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	b21b      	sxth	r3, r3
 800a90e:	4313      	orrs	r3, r2
 800a910:	b21b      	sxth	r3, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	041b      	lsls	r3, r3, #16
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	4313      	orrs	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]

	return cl;
 800a91c:	68fb      	ldr	r3, [r7, #12]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr

0800a928 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	331a      	adds	r3, #26
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	b2d2      	uxtb	r2, r2
 800a93a:	701a      	strb	r2, [r3, #0]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	b29b      	uxth	r3, r3
 800a940:	0a1b      	lsrs	r3, r3, #8
 800a942:	b29a      	uxth	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	331b      	adds	r3, #27
 800a948:	b2d2      	uxtb	r2, r2
 800a94a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	0c1a      	lsrs	r2, r3, #16
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3314      	adds	r3, #20
 800a954:	b2d2      	uxtb	r2, r2
 800a956:	701a      	strb	r2, [r3, #0]
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	0c1b      	lsrs	r3, r3, #16
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	0a1b      	lsrs	r3, r3, #8
 800a960:	b29a      	uxth	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	3315      	adds	r3, #21
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	bc80      	pop	{r7}
 800a972:	4770      	bx	lr

0800a974 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b086      	sub	sp, #24
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7ff fdd0 	bl	800a524 <dir_sdi>
 800a984:	4603      	mov	r3, r0
 800a986:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a988:	7dfb      	ldrb	r3, [r7, #23]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d001      	beq.n	800a992 <dir_find+0x1e>
 800a98e:	7dfb      	ldrb	r3, [r7, #23]
 800a990:	e03b      	b.n	800aa0a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a99e:	4619      	mov	r1, r3
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	f7ff f9d0 	bl	8009d46 <move_window>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9aa:	7dfb      	ldrb	r3, [r7, #23]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d128      	bne.n	800aa02 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a9b6:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	781b      	ldrb	r3, [r3, #0]
 800a9bc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800a9be:	7bfb      	ldrb	r3, [r7, #15]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <dir_find+0x56>
 800a9c4:	2304      	movs	r3, #4
 800a9c6:	75fb      	strb	r3, [r7, #23]
 800a9c8:	e01e      	b.n	800aa08 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	330b      	adds	r3, #11
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <dir_find+0x7a>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a9de:	220b      	movs	r2, #11
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6938      	ldr	r0, [r7, #16]
 800a9e4:	f7fe ff72 	bl	80098cc <mem_cmp>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00b      	beq.n	800aa06 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f7ff fe2b 	bl	800a64c <dir_next>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0c8      	beq.n	800a992 <dir_find+0x1e>
 800aa00:	e002      	b.n	800aa08 <dir_find+0x94>
		if (res != FR_OK) break;
 800aa02:	bf00      	nop
 800aa04:	e000      	b.n	800aa08 <dir_find+0x94>
			break;
 800aa06:	bf00      	nop

	return res;
 800aa08:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3718      	adds	r7, #24
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa12:	b580      	push	{r7, lr}
 800aa14:	b084      	sub	sp, #16
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f7ff ff0c 	bl	800a83a <dir_alloc>
 800aa22:	4603      	mov	r3, r0
 800aa24:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d126      	bne.n	800aa7a <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa38:	4619      	mov	r1, r3
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	f7ff f983 	bl	8009d46 <move_window>
 800aa40:	4603      	mov	r3, r0
 800aa42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa44:	7bfb      	ldrb	r3, [r7, #15]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d117      	bne.n	800aa7a <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa50:	2220      	movs	r2, #32
 800aa52:	2100      	movs	r1, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7fe ff1f 	bl	8009898 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa66:	220b      	movs	r2, #11
 800aa68:	4619      	mov	r1, r3
 800aa6a:	f7fe fef7 	bl	800985c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aa74:	2201      	movs	r2, #1
 800aa76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b088      	sub	sp, #32
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	60fb      	str	r3, [r7, #12]
 800aa94:	e002      	b.n	800aa9c <create_name+0x18>
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3301      	adds	r3, #1
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b2f      	cmp	r3, #47	; 0x2f
 800aaa2:	d0f8      	beq.n	800aa96 <create_name+0x12>
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	2b5c      	cmp	r3, #92	; 0x5c
 800aaaa:	d0f4      	beq.n	800aa96 <create_name+0x12>
	sfn = dp->fn;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aab2:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800aab4:	220b      	movs	r2, #11
 800aab6:	2120      	movs	r1, #32
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	f7fe feed 	bl	8009898 <mem_set>
	si = i = b = 0; ni = 8;
 800aabe:	2300      	movs	r3, #0
 800aac0:	77fb      	strb	r3, [r7, #31]
 800aac2:	2300      	movs	r3, #0
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	617b      	str	r3, [r7, #20]
 800aaca:	2308      	movs	r3, #8
 800aacc:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	617a      	str	r2, [r7, #20]
 800aad4:	68fa      	ldr	r2, [r7, #12]
 800aad6:	4413      	add	r3, r2
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800aadc:	7fbb      	ldrb	r3, [r7, #30]
 800aade:	2b20      	cmp	r3, #32
 800aae0:	d953      	bls.n	800ab8a <create_name+0x106>
 800aae2:	7fbb      	ldrb	r3, [r7, #30]
 800aae4:	2b2f      	cmp	r3, #47	; 0x2f
 800aae6:	d050      	beq.n	800ab8a <create_name+0x106>
 800aae8:	7fbb      	ldrb	r3, [r7, #30]
 800aaea:	2b5c      	cmp	r3, #92	; 0x5c
 800aaec:	d04d      	beq.n	800ab8a <create_name+0x106>
		if (c == '.' || i >= ni) {
 800aaee:	7fbb      	ldrb	r3, [r7, #30]
 800aaf0:	2b2e      	cmp	r3, #46	; 0x2e
 800aaf2:	d003      	beq.n	800aafc <create_name+0x78>
 800aaf4:	693a      	ldr	r2, [r7, #16]
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d30f      	bcc.n	800ab1c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	2b08      	cmp	r3, #8
 800ab00:	d102      	bne.n	800ab08 <create_name+0x84>
 800ab02:	7fbb      	ldrb	r3, [r7, #30]
 800ab04:	2b2e      	cmp	r3, #46	; 0x2e
 800ab06:	d001      	beq.n	800ab0c <create_name+0x88>
 800ab08:	2306      	movs	r3, #6
 800ab0a:	e073      	b.n	800abf4 <create_name+0x170>
			i = 8; ni = 11;
 800ab0c:	2308      	movs	r3, #8
 800ab0e:	613b      	str	r3, [r7, #16]
 800ab10:	230b      	movs	r3, #11
 800ab12:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800ab14:	7ffb      	ldrb	r3, [r7, #31]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	77fb      	strb	r3, [r7, #31]
 800ab1a:	e035      	b.n	800ab88 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab1c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	da08      	bge.n	800ab36 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 800ab24:	7ffb      	ldrb	r3, [r7, #31]
 800ab26:	f043 0303 	orr.w	r3, r3, #3
 800ab2a:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ab2c:	7fbb      	ldrb	r3, [r7, #30]
 800ab2e:	3b80      	subs	r3, #128	; 0x80
 800ab30:	4a32      	ldr	r2, [pc, #200]	; (800abfc <create_name+0x178>)
 800ab32:	5cd3      	ldrb	r3, [r2, r3]
 800ab34:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800ab36:	7fbb      	ldrb	r3, [r7, #30]
 800ab38:	4619      	mov	r1, r3
 800ab3a:	4831      	ldr	r0, [pc, #196]	; (800ac00 <create_name+0x17c>)
 800ab3c:	f7fe feec 	bl	8009918 <chk_chr>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <create_name+0xc6>
				return FR_INVALID_NAME;
 800ab46:	2306      	movs	r3, #6
 800ab48:	e054      	b.n	800abf4 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ab4a:	7fbb      	ldrb	r3, [r7, #30]
 800ab4c:	2b40      	cmp	r3, #64	; 0x40
 800ab4e:	d907      	bls.n	800ab60 <create_name+0xdc>
 800ab50:	7fbb      	ldrb	r3, [r7, #30]
 800ab52:	2b5a      	cmp	r3, #90	; 0x5a
 800ab54:	d804      	bhi.n	800ab60 <create_name+0xdc>
				b |= 2;
 800ab56:	7ffb      	ldrb	r3, [r7, #31]
 800ab58:	f043 0302 	orr.w	r3, r3, #2
 800ab5c:	77fb      	strb	r3, [r7, #31]
 800ab5e:	e00c      	b.n	800ab7a <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800ab60:	7fbb      	ldrb	r3, [r7, #30]
 800ab62:	2b60      	cmp	r3, #96	; 0x60
 800ab64:	d909      	bls.n	800ab7a <create_name+0xf6>
 800ab66:	7fbb      	ldrb	r3, [r7, #30]
 800ab68:	2b7a      	cmp	r3, #122	; 0x7a
 800ab6a:	d806      	bhi.n	800ab7a <create_name+0xf6>
					b |= 1; c -= 0x20;
 800ab6c:	7ffb      	ldrb	r3, [r7, #31]
 800ab6e:	f043 0301 	orr.w	r3, r3, #1
 800ab72:	77fb      	strb	r3, [r7, #31]
 800ab74:	7fbb      	ldrb	r3, [r7, #30]
 800ab76:	3b20      	subs	r3, #32
 800ab78:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	613a      	str	r2, [r7, #16]
 800ab80:	68ba      	ldr	r2, [r7, #8]
 800ab82:	4413      	add	r3, r2
 800ab84:	7fba      	ldrb	r2, [r7, #30]
 800ab86:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ab88:	e7a1      	b.n	800aace <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ab8a:	68fa      	ldr	r2, [r7, #12]
 800ab8c:	697b      	ldr	r3, [r7, #20]
 800ab8e:	441a      	add	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800ab94:	7fbb      	ldrb	r3, [r7, #30]
 800ab96:	2b20      	cmp	r3, #32
 800ab98:	d801      	bhi.n	800ab9e <create_name+0x11a>
 800ab9a:	2304      	movs	r3, #4
 800ab9c:	e000      	b.n	800aba0 <create_name+0x11c>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d101      	bne.n	800abac <create_name+0x128>
 800aba8:	2306      	movs	r3, #6
 800abaa:	e023      	b.n	800abf4 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2be5      	cmp	r3, #229	; 0xe5
 800abb2:	d102      	bne.n	800abba <create_name+0x136>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	2205      	movs	r2, #5
 800abb8:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800abba:	69bb      	ldr	r3, [r7, #24]
 800abbc:	2b08      	cmp	r3, #8
 800abbe:	d102      	bne.n	800abc6 <create_name+0x142>
 800abc0:	7ffb      	ldrb	r3, [r7, #31]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800abc6:	7ffb      	ldrb	r3, [r7, #31]
 800abc8:	f003 0303 	and.w	r3, r3, #3
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d103      	bne.n	800abd8 <create_name+0x154>
 800abd0:	7fbb      	ldrb	r3, [r7, #30]
 800abd2:	f043 0310 	orr.w	r3, r3, #16
 800abd6:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800abd8:	7ffb      	ldrb	r3, [r7, #31]
 800abda:	f003 030c 	and.w	r3, r3, #12
 800abde:	2b04      	cmp	r3, #4
 800abe0:	d103      	bne.n	800abea <create_name+0x166>
 800abe2:	7fbb      	ldrb	r3, [r7, #30]
 800abe4:	f043 0308 	orr.w	r3, r3, #8
 800abe8:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	330b      	adds	r3, #11
 800abee:	7fba      	ldrb	r2, [r7, #30]
 800abf0:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800abf2:	2300      	movs	r3, #0
#endif
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3720      	adds	r7, #32
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	0800fb70 	.word	0x0800fb70
 800ac00:	0800cf00 	.word	0x0800cf00

0800ac04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	781b      	ldrb	r3, [r3, #0]
 800ac12:	2b2f      	cmp	r3, #47	; 0x2f
 800ac14:	d003      	beq.n	800ac1e <follow_path+0x1a>
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	2b5c      	cmp	r3, #92	; 0x5c
 800ac1c:	d102      	bne.n	800ac24 <follow_path+0x20>
		path++;
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	3301      	adds	r3, #1
 800ac22:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b1f      	cmp	r3, #31
 800ac32:	d80a      	bhi.n	800ac4a <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800ac34:	2100      	movs	r1, #0
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7ff fc74 	bl	800a524 <dir_sdi>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800ac48:	e045      	b.n	800acd6 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac4a:	463b      	mov	r3, r7
 800ac4c:	4619      	mov	r1, r3
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f7ff ff18 	bl	800aa84 <create_name>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d136      	bne.n	800accc <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f7ff fe88 	bl	800a974 <dir_find>
 800ac64:	4603      	mov	r3, r0
 800ac66:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ac6e:	7adb      	ldrb	r3, [r3, #11]
 800ac70:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d00a      	beq.n	800ac8e <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ac78:	7bfb      	ldrb	r3, [r7, #15]
 800ac7a:	2b04      	cmp	r3, #4
 800ac7c:	d128      	bne.n	800acd0 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d123      	bne.n	800acd0 <follow_path+0xcc>
 800ac88:	2305      	movs	r3, #5
 800ac8a:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800ac8c:	e020      	b.n	800acd0 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ac8e:	7bbb      	ldrb	r3, [r7, #14]
 800ac90:	f003 0304 	and.w	r3, r3, #4
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d11d      	bne.n	800acd4 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac9e:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	330b      	adds	r3, #11
 800aca4:	781b      	ldrb	r3, [r3, #0]
 800aca6:	f003 0310 	and.w	r3, r3, #16
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d102      	bne.n	800acb4 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800acae:	2305      	movs	r3, #5
 800acb0:	73fb      	strb	r3, [r7, #15]
 800acb2:	e010      	b.n	800acd6 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7ff fe06 	bl	800a8ce <ld_clust>
 800acc2:	4602      	mov	r2, r0
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800acca:	e7be      	b.n	800ac4a <follow_path+0x46>
			if (res != FR_OK) break;
 800accc:	bf00      	nop
 800acce:	e002      	b.n	800acd6 <follow_path+0xd2>
				break;
 800acd0:	bf00      	nop
 800acd2:	e000      	b.n	800acd6 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acd4:	bf00      	nop
		}
	}

	return res;
 800acd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ace8:	f04f 33ff 	mov.w	r3, #4294967295
 800acec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d031      	beq.n	800ad5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	617b      	str	r3, [r7, #20]
 800acfc:	e002      	b.n	800ad04 <get_ldnumber+0x24>
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	3301      	adds	r3, #1
 800ad02:	617b      	str	r3, [r7, #20]
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b20      	cmp	r3, #32
 800ad0a:	d903      	bls.n	800ad14 <get_ldnumber+0x34>
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	2b3a      	cmp	r3, #58	; 0x3a
 800ad12:	d1f4      	bne.n	800acfe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b3a      	cmp	r3, #58	; 0x3a
 800ad1a:	d11c      	bne.n	800ad56 <get_ldnumber+0x76>
			tp = *path;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	60fa      	str	r2, [r7, #12]
 800ad28:	781b      	ldrb	r3, [r3, #0]
 800ad2a:	3b30      	subs	r3, #48	; 0x30
 800ad2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	2b09      	cmp	r3, #9
 800ad32:	d80e      	bhi.n	800ad52 <get_ldnumber+0x72>
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d10a      	bne.n	800ad52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad3c:	68bb      	ldr	r3, [r7, #8]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d107      	bne.n	800ad52 <get_ldnumber+0x72>
					vol = (int)i;
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	e002      	b.n	800ad5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad56:	2300      	movs	r3, #0
 800ad58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ad5a:	693b      	ldr	r3, [r7, #16]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	371c      	adds	r7, #28
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bc80      	pop	{r7}
 800ad64:	4770      	bx	lr
	...

0800ad68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f7fe ffdd 	bl	8009d46 <move_window>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d001      	beq.n	800ad96 <check_fs+0x2e>
		return 3;
 800ad92:	2303      	movs	r3, #3
 800ad94:	e04a      	b.n	800ae2c <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	781b      	ldrb	r3, [r3, #0]
 800ada0:	021b      	lsls	r3, r3, #8
 800ada2:	b21a      	sxth	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800adaa:	b21b      	sxth	r3, r3
 800adac:	4313      	orrs	r3, r2
 800adae:	b21b      	sxth	r3, r3
 800adb0:	4a20      	ldr	r2, [pc, #128]	; (800ae34 <check_fs+0xcc>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d001      	beq.n	800adba <check_fs+0x52>
		return 2;
 800adb6:	2302      	movs	r3, #2
 800adb8:	e038      	b.n	800ae2c <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	3336      	adds	r3, #54	; 0x36
 800adbe:	3303      	adds	r3, #3
 800adc0:	781b      	ldrb	r3, [r3, #0]
 800adc2:	061a      	lsls	r2, r3, #24
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	3336      	adds	r3, #54	; 0x36
 800adc8:	3302      	adds	r3, #2
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	041b      	lsls	r3, r3, #16
 800adce:	4313      	orrs	r3, r2
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	3236      	adds	r2, #54	; 0x36
 800add4:	3201      	adds	r2, #1
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	0212      	lsls	r2, r2, #8
 800adda:	4313      	orrs	r3, r2
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ade8:	4a13      	ldr	r2, [pc, #76]	; (800ae38 <check_fs+0xd0>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d101      	bne.n	800adf2 <check_fs+0x8a>
		return 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	e01c      	b.n	800ae2c <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	3352      	adds	r3, #82	; 0x52
 800adf6:	3303      	adds	r3, #3
 800adf8:	781b      	ldrb	r3, [r3, #0]
 800adfa:	061a      	lsls	r2, r3, #24
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	3352      	adds	r3, #82	; 0x52
 800ae00:	3302      	adds	r3, #2
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	041b      	lsls	r3, r3, #16
 800ae06:	4313      	orrs	r3, r2
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	3252      	adds	r2, #82	; 0x52
 800ae0c:	3201      	adds	r2, #1
 800ae0e:	7812      	ldrb	r2, [r2, #0]
 800ae10:	0212      	lsls	r2, r2, #8
 800ae12:	4313      	orrs	r3, r2
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae20:	4a05      	ldr	r2, [pc, #20]	; (800ae38 <check_fs+0xd0>)
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d101      	bne.n	800ae2a <check_fs+0xc2>
		return 0;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e000      	b.n	800ae2c <check_fs+0xc4>

	return 1;
 800ae2a:	2301      	movs	r3, #1
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3708      	adds	r7, #8
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	ffffaa55 	.word	0xffffaa55
 800ae38:	00544146 	.word	0x00544146

0800ae3c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b096      	sub	sp, #88	; 0x58
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	4613      	mov	r3, r2
 800ae48:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae50:	68b8      	ldr	r0, [r7, #8]
 800ae52:	f7ff ff45 	bl	800ace0 <get_ldnumber>
 800ae56:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ae58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	da01      	bge.n	800ae62 <find_volume+0x26>
 800ae5e:	230b      	movs	r3, #11
 800ae60:	e2a8      	b.n	800b3b4 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ae62:	4a9d      	ldr	r2, [pc, #628]	; (800b0d8 <find_volume+0x29c>)
 800ae64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae6a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ae6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <find_volume+0x3a>
 800ae72:	230c      	movs	r3, #12
 800ae74:	e29e      	b.n	800b3b4 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae7a:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800ae7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae7e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d01b      	beq.n	800aebe <find_volume+0x82>
		stat = disk_status(fs->drv);
 800ae86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae88:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fe fc47 	bl	8009720 <disk_status>
 800ae92:	4603      	mov	r3, r0
 800ae94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ae98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10c      	bne.n	800aebe <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800aea4:	79fb      	ldrb	r3, [r7, #7]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d007      	beq.n	800aeba <find_volume+0x7e>
 800aeaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d001      	beq.n	800aeba <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800aeb6:	230a      	movs	r3, #10
 800aeb8:	e27c      	b.n	800b3b4 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800aeba:	2300      	movs	r3, #0
 800aebc:	e27a      	b.n	800b3b4 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800aebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800aec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec8:	b2da      	uxtb	r2, r3
 800aeca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aecc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800aed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7fe fc3c 	bl	8009754 <disk_initialize>
 800aedc:	4603      	mov	r3, r0
 800aede:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800aee2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aee6:	f003 0301 	and.w	r3, r3, #1
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d001      	beq.n	800aef2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800aeee:	2303      	movs	r3, #3
 800aef0:	e260      	b.n	800b3b4 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d007      	beq.n	800af08 <find_volume+0xcc>
 800aef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800af04:	230a      	movs	r3, #10
 800af06:	e255      	b.n	800b3b4 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800af08:	2300      	movs	r3, #0
 800af0a:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800af0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af0e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af10:	f7ff ff2a 	bl	800ad68 <check_fs>
 800af14:	4603      	mov	r3, r0
 800af16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800af1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d153      	bne.n	800afca <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800af22:	2300      	movs	r3, #0
 800af24:	643b      	str	r3, [r7, #64]	; 0x40
 800af26:	e028      	b.n	800af7a <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800af28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af2c:	011b      	lsls	r3, r3, #4
 800af2e:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af32:	4413      	add	r3, r2
 800af34:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800af36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af38:	3304      	adds	r3, #4
 800af3a:	781b      	ldrb	r3, [r3, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d012      	beq.n	800af66 <find_volume+0x12a>
 800af40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af42:	330b      	adds	r3, #11
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	061a      	lsls	r2, r3, #24
 800af48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4a:	330a      	adds	r3, #10
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	041b      	lsls	r3, r3, #16
 800af50:	4313      	orrs	r3, r2
 800af52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af54:	3209      	adds	r2, #9
 800af56:	7812      	ldrb	r2, [r2, #0]
 800af58:	0212      	lsls	r2, r2, #8
 800af5a:	4313      	orrs	r3, r2
 800af5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af5e:	3208      	adds	r2, #8
 800af60:	7812      	ldrb	r2, [r2, #0]
 800af62:	431a      	orrs	r2, r3
 800af64:	e000      	b.n	800af68 <find_volume+0x12c>
 800af66:	2200      	movs	r2, #0
 800af68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	3358      	adds	r3, #88	; 0x58
 800af6e:	443b      	add	r3, r7
 800af70:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800af74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af76:	3301      	adds	r3, #1
 800af78:	643b      	str	r3, [r7, #64]	; 0x40
 800af7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af7c:	2b03      	cmp	r3, #3
 800af7e:	d9d3      	bls.n	800af28 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800af80:	2300      	movs	r3, #0
 800af82:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800af84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af86:	2b00      	cmp	r3, #0
 800af88:	d002      	beq.n	800af90 <find_volume+0x154>
 800af8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af8c:	3b01      	subs	r3, #1
 800af8e:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800af90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af92:	009b      	lsls	r3, r3, #2
 800af94:	3358      	adds	r3, #88	; 0x58
 800af96:	443b      	add	r3, r7
 800af98:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800af9c:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800af9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <find_volume+0x174>
 800afa4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afa6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800afa8:	f7ff fede 	bl	800ad68 <check_fs>
 800afac:	4603      	mov	r3, r0
 800afae:	e000      	b.n	800afb2 <find_volume+0x176>
 800afb0:	2302      	movs	r3, #2
 800afb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800afb6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <find_volume+0x18e>
 800afbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc0:	3301      	adds	r3, #1
 800afc2:	643b      	str	r3, [r7, #64]	; 0x40
 800afc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc6:	2b03      	cmp	r3, #3
 800afc8:	d9e2      	bls.n	800af90 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800afca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afce:	2b03      	cmp	r3, #3
 800afd0:	d101      	bne.n	800afd6 <find_volume+0x19a>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e1ee      	b.n	800b3b4 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800afd6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d001      	beq.n	800afe2 <find_volume+0x1a6>
 800afde:	230d      	movs	r3, #13
 800afe0:	e1e8      	b.n	800b3b4 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800afe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe4:	7b1b      	ldrb	r3, [r3, #12]
 800afe6:	021b      	lsls	r3, r3, #8
 800afe8:	b21a      	sxth	r2, r3
 800afea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afec:	7adb      	ldrb	r3, [r3, #11]
 800afee:	b21b      	sxth	r3, r3
 800aff0:	4313      	orrs	r3, r2
 800aff2:	b21b      	sxth	r3, r3
 800aff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aff8:	d001      	beq.n	800affe <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800affa:	230d      	movs	r3, #13
 800affc:	e1da      	b.n	800b3b4 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	7ddb      	ldrb	r3, [r3, #23]
 800b002:	021b      	lsls	r3, r3, #8
 800b004:	b21a      	sxth	r2, r3
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	7d9b      	ldrb	r3, [r3, #22]
 800b00a:	b21b      	sxth	r3, r3
 800b00c:	4313      	orrs	r3, r2
 800b00e:	b21b      	sxth	r3, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b016:	2b00      	cmp	r3, #0
 800b018:	d112      	bne.n	800b040 <find_volume+0x204>
 800b01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b01c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b020:	061a      	lsls	r2, r3, #24
 800b022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b024:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b028:	041b      	lsls	r3, r3, #16
 800b02a:	4313      	orrs	r3, r2
 800b02c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b02e:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b032:	0212      	lsls	r2, r2, #8
 800b034:	4313      	orrs	r3, r2
 800b036:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b038:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b03c:	4313      	orrs	r3, r2
 800b03e:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b044:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	7c1a      	ldrb	r2, [r3, #16]
 800b04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04e:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d006      	beq.n	800b06a <find_volume+0x22e>
 800b05c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b05e:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b062:	2b02      	cmp	r3, #2
 800b064:	d001      	beq.n	800b06a <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800b066:	230d      	movs	r3, #13
 800b068:	e1a4      	b.n	800b3b4 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b070:	461a      	mov	r2, r3
 800b072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b074:	fb02 f303 	mul.w	r3, r2, r3
 800b078:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b07a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b07c:	7b5a      	ldrb	r2, [r3, #13]
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b086:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d00a      	beq.n	800b0a4 <find_volume+0x268>
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b094:	461a      	mov	r2, r3
 800b096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b098:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b09c:	3b01      	subs	r3, #1
 800b09e:	4013      	ands	r3, r2
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d001      	beq.n	800b0a8 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800b0a4:	230d      	movs	r3, #13
 800b0a6:	e185      	b.n	800b3b4 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0aa:	7c9b      	ldrb	r3, [r3, #18]
 800b0ac:	021b      	lsls	r3, r3, #8
 800b0ae:	b21a      	sxth	r2, r3
 800b0b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b2:	7c5b      	ldrb	r3, [r3, #17]
 800b0b4:	b21b      	sxth	r3, r3
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	b21b      	sxth	r3, r3
 800b0ba:	b29a      	uxth	r2, r3
 800b0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0be:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b0c8:	f003 030f 	and.w	r3, r3, #15
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800b0d2:	230d      	movs	r3, #13
 800b0d4:	e16e      	b.n	800b3b4 <find_volume+0x578>
 800b0d6:	bf00      	nop
 800b0d8:	20000c1c 	.word	0x20000c1c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	7d1b      	ldrb	r3, [r3, #20]
 800b0e0:	021b      	lsls	r3, r3, #8
 800b0e2:	b21a      	sxth	r2, r3
 800b0e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e6:	7cdb      	ldrb	r3, [r3, #19]
 800b0e8:	b21b      	sxth	r3, r3
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	b21b      	sxth	r3, r3
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b0f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d112      	bne.n	800b11e <find_volume+0x2e2>
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b0fe:	061a      	lsls	r2, r3, #24
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b106:	041b      	lsls	r3, r3, #16
 800b108:	4313      	orrs	r3, r2
 800b10a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b10c:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b110:	0212      	lsls	r2, r2, #8
 800b112:	4313      	orrs	r3, r2
 800b114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b116:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b11e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b120:	7bdb      	ldrb	r3, [r3, #15]
 800b122:	021b      	lsls	r3, r3, #8
 800b124:	b21a      	sxth	r2, r3
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	7b9b      	ldrb	r3, [r3, #14]
 800b12a:	b21b      	sxth	r3, r3
 800b12c:	4313      	orrs	r3, r2
 800b12e:	b21b      	sxth	r3, r3
 800b130:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b132:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b134:	2b00      	cmp	r3, #0
 800b136:	d101      	bne.n	800b13c <find_volume+0x300>
 800b138:	230d      	movs	r3, #13
 800b13a:	e13b      	b.n	800b3b4 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b13c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b13e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b140:	4413      	add	r3, r2
 800b142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b144:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b148:	0912      	lsrs	r2, r2, #4
 800b14a:	b292      	uxth	r2, r2
 800b14c:	4413      	add	r3, r2
 800b14e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b150:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b154:	429a      	cmp	r2, r3
 800b156:	d201      	bcs.n	800b15c <find_volume+0x320>
 800b158:	230d      	movs	r3, #13
 800b15a:	e12b      	b.n	800b3b4 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b164:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b168:	fbb3 f3f2 	udiv	r3, r3, r2
 800b16c:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b170:	2b00      	cmp	r3, #0
 800b172:	d101      	bne.n	800b178 <find_volume+0x33c>
 800b174:	230d      	movs	r3, #13
 800b176:	e11d      	b.n	800b3b4 <find_volume+0x578>
	fmt = FS_FAT12;
 800b178:	2301      	movs	r3, #1
 800b17a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b184:	4293      	cmp	r3, r2
 800b186:	d902      	bls.n	800b18e <find_volume+0x352>
 800b188:	2302      	movs	r3, #2
 800b18a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b194:	4293      	cmp	r3, r2
 800b196:	d902      	bls.n	800b19e <find_volume+0x362>
 800b198:	2303      	movs	r3, #3
 800b19a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a0:	1c9a      	adds	r2, r3, #2
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1ac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b1b0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b4:	441a      	add	r2, r3
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b1bc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1c0:	441a      	add	r2, r3
 800b1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c4:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b1c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b1cc:	2b03      	cmp	r3, #3
 800b1ce:	d121      	bne.n	800b214 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <find_volume+0x3a2>
 800b1da:	230d      	movs	r3, #13
 800b1dc:	e0ea      	b.n	800b3b4 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1e4:	061a      	lsls	r2, r3, #24
 800b1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b1ec:	041b      	lsls	r3, r3, #16
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1f2:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b1f6:	0212      	lsls	r2, r2, #8
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1fc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b200:	431a      	orrs	r2, r3
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	647b      	str	r3, [r7, #68]	; 0x44
 800b212:	e025      	b.n	800b260 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b216:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <find_volume+0x3e6>
 800b21e:	230d      	movs	r3, #13
 800b220:	e0c8      	b.n	800b3b4 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b224:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b228:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b22a:	441a      	add	r2, r3
 800b22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b22e:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b232:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b236:	2b02      	cmp	r3, #2
 800b238:	d104      	bne.n	800b244 <find_volume+0x408>
 800b23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b23c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	e00c      	b.n	800b25e <find_volume+0x422>
 800b244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b246:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b24a:	4613      	mov	r3, r2
 800b24c:	005b      	lsls	r3, r3, #1
 800b24e:	4413      	add	r3, r2
 800b250:	085a      	lsrs	r2, r3, #1
 800b252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b254:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b25e:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b262:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b268:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b26c:	0a5b      	lsrs	r3, r3, #9
 800b26e:	429a      	cmp	r2, r3
 800b270:	d201      	bcs.n	800b276 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800b272:	230d      	movs	r3, #13
 800b274:	e09e      	b.n	800b3b4 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b278:	f04f 32ff 	mov.w	r2, #4294967295
 800b27c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b282:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b288:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	2280      	movs	r2, #128	; 0x80
 800b290:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b298:	2b03      	cmp	r3, #3
 800b29a:	d177      	bne.n	800b38c <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	b21a      	sxth	r2, r3
 800b2a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2ac:	b21b      	sxth	r3, r3
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	b21b      	sxth	r3, r3
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d16a      	bne.n	800b38c <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b2b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2b8:	3301      	adds	r3, #1
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b2be:	f7fe fd42 	bl	8009d46 <move_window>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d161      	bne.n	800b38c <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b2d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d2:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b2d6:	021b      	lsls	r3, r3, #8
 800b2d8:	b21a      	sxth	r2, r3
 800b2da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2dc:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b2e0:	b21b      	sxth	r3, r3
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	b21b      	sxth	r3, r3
 800b2e6:	4a35      	ldr	r2, [pc, #212]	; (800b3bc <find_volume+0x580>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d14f      	bne.n	800b38c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	78db      	ldrb	r3, [r3, #3]
 800b2f0:	061a      	lsls	r2, r3, #24
 800b2f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f4:	789b      	ldrb	r3, [r3, #2]
 800b2f6:	041b      	lsls	r3, r3, #16
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2fc:	7852      	ldrb	r2, [r2, #1]
 800b2fe:	0212      	lsls	r2, r2, #8
 800b300:	4313      	orrs	r3, r2
 800b302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b304:	7812      	ldrb	r2, [r2, #0]
 800b306:	4313      	orrs	r3, r2
 800b308:	4a2d      	ldr	r2, [pc, #180]	; (800b3c0 <find_volume+0x584>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d13e      	bne.n	800b38c <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b310:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b314:	061a      	lsls	r2, r3, #24
 800b316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b318:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b31c:	041b      	lsls	r3, r3, #16
 800b31e:	4313      	orrs	r3, r2
 800b320:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b322:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b326:	0212      	lsls	r2, r2, #8
 800b328:	4313      	orrs	r3, r2
 800b32a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b32c:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b330:	4313      	orrs	r3, r2
 800b332:	4a24      	ldr	r2, [pc, #144]	; (800b3c4 <find_volume+0x588>)
 800b334:	4293      	cmp	r3, r2
 800b336:	d129      	bne.n	800b38c <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33a:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b33e:	061a      	lsls	r2, r3, #24
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b346:	041b      	lsls	r3, r3, #16
 800b348:	4313      	orrs	r3, r2
 800b34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b34c:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b350:	0212      	lsls	r2, r2, #8
 800b352:	4313      	orrs	r3, r2
 800b354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b356:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b35a:	431a      	orrs	r2, r3
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b364:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b368:	061a      	lsls	r2, r3, #24
 800b36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b36c:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b370:	041b      	lsls	r3, r3, #16
 800b372:	4313      	orrs	r3, r2
 800b374:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b376:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b37a:	0212      	lsls	r2, r2, #8
 800b37c:	4313      	orrs	r3, r2
 800b37e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b380:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b384:	431a      	orrs	r2, r3
 800b386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b388:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b392:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b396:	4b0c      	ldr	r3, [pc, #48]	; (800b3c8 <find_volume+0x58c>)
 800b398:	881b      	ldrh	r3, [r3, #0]
 800b39a:	3301      	adds	r3, #1
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	4b0a      	ldr	r3, [pc, #40]	; (800b3c8 <find_volume+0x58c>)
 800b3a0:	801a      	strh	r2, [r3, #0]
 800b3a2:	4b09      	ldr	r3, [pc, #36]	; (800b3c8 <find_volume+0x58c>)
 800b3a4:	881a      	ldrh	r2, [r3, #0]
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a8:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3ae:	f7fe fc57 	bl	8009c60 <clear_lock>
#endif

	return FR_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3758      	adds	r7, #88	; 0x58
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}
 800b3bc:	ffffaa55 	.word	0xffffaa55
 800b3c0:	41615252 	.word	0x41615252
 800b3c4:	61417272 	.word	0x61417272
 800b3c8:	20000c20 	.word	0x20000c20

0800b3cc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b084      	sub	sp, #16
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d022      	beq.n	800b424 <validate+0x58>
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d01d      	beq.n	800b424 <validate+0x58>
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b3ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d016      	beq.n	800b424 <validate+0x58>
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b3fc:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b406:	429a      	cmp	r2, r3
 800b408:	d10c      	bne.n	800b424 <validate+0x58>
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b410:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b414:	4618      	mov	r0, r3
 800b416:	f7fe f983 	bl	8009720 <disk_status>
 800b41a:	4603      	mov	r3, r0
 800b41c:	f003 0301 	and.w	r3, r3, #1
 800b420:	2b00      	cmp	r3, #0
 800b422:	d001      	beq.n	800b428 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b424:	2309      	movs	r3, #9
 800b426:	e000      	b.n	800b42a <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3710      	adds	r7, #16
 800b42e:	46bd      	mov	sp, r7
 800b430:	bd80      	pop	{r7, pc}
	...

0800b434 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b434:	b580      	push	{r7, lr}
 800b436:	b088      	sub	sp, #32
 800b438:	af00      	add	r7, sp, #0
 800b43a:	60f8      	str	r0, [r7, #12]
 800b43c:	60b9      	str	r1, [r7, #8]
 800b43e:	4613      	mov	r3, r2
 800b440:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b446:	f107 0310 	add.w	r3, r7, #16
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7ff fc48 	bl	800ace0 <get_ldnumber>
 800b450:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	2b00      	cmp	r3, #0
 800b456:	da01      	bge.n	800b45c <f_mount+0x28>
 800b458:	230b      	movs	r3, #11
 800b45a:	e02d      	b.n	800b4b8 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b45c:	4a18      	ldr	r2, [pc, #96]	; (800b4c0 <f_mount+0x8c>)
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b464:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b466:	69bb      	ldr	r3, [r7, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b46c:	69b8      	ldr	r0, [r7, #24]
 800b46e:	f7fe fbf7 	bl	8009c60 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d003      	beq.n	800b488 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b488:	68fa      	ldr	r2, [r7, #12]
 800b48a:	490d      	ldr	r1, [pc, #52]	; (800b4c0 <f_mount+0x8c>)
 800b48c:	69fb      	ldr	r3, [r7, #28]
 800b48e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d002      	beq.n	800b49e <f_mount+0x6a>
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d001      	beq.n	800b4a2 <f_mount+0x6e>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e00a      	b.n	800b4b8 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b4a2:	f107 0108 	add.w	r1, r7, #8
 800b4a6:	f107 030c 	add.w	r3, r7, #12
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f7ff fcc5 	bl	800ae3c <find_volume>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b4b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	20000c1c 	.word	0x20000c1c

0800b4c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800b4ca:	af00      	add	r7, sp, #0
 800b4cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b4d0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b4d4:	6018      	str	r0, [r3, #0]
 800b4d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b4da:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b4de:	6019      	str	r1, [r3, #0]
 800b4e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b4e4:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b4e8:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b4ea:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b4ee:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d101      	bne.n	800b4fc <f_open+0x38>
 800b4f8:	2309      	movs	r3, #9
 800b4fa:	e257      	b.n	800b9ac <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800b4fc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b500:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	2200      	movs	r2, #0
 800b508:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b50c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b510:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b514:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b518:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b51c:	7812      	ldrb	r2, [r2, #0]
 800b51e:	f002 021f 	and.w	r2, r2, #31
 800b522:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b524:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b528:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b52c:	781b      	ldrb	r3, [r3, #0]
 800b52e:	f023 0301 	bic.w	r3, r3, #1
 800b532:	b2da      	uxtb	r2, r3
 800b534:	f107 0108 	add.w	r1, r7, #8
 800b538:	f107 0320 	add.w	r3, r7, #32
 800b53c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b540:	4618      	mov	r0, r3
 800b542:	f7ff fc7b 	bl	800ae3c <find_volume>
 800b546:	4603      	mov	r3, r0
 800b548:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b54c:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b550:	2b00      	cmp	r3, #0
 800b552:	f040 8229 	bne.w	800b9a8 <f_open+0x4e4>
		INIT_BUF(dj);
 800b556:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b55a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b55e:	f107 0214 	add.w	r2, r7, #20
 800b562:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800b566:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b56a:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	f107 0320 	add.w	r3, r7, #32
 800b574:	4611      	mov	r1, r2
 800b576:	4618      	mov	r0, r3
 800b578:	f7ff fb44 	bl	800ac04 <follow_path>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800b582:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b586:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b58a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b58e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b592:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b596:	2b00      	cmp	r3, #0
 800b598:	d11d      	bne.n	800b5d6 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800b59a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d103      	bne.n	800b5aa <f_open+0xe6>
				res = FR_INVALID_NAME;
 800b5a2:	2306      	movs	r3, #6
 800b5a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b5a8:	e015      	b.n	800b5d6 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5ae:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	f023 0301 	bic.w	r3, r3, #1
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	bf14      	ite	ne
 800b5bc:	2301      	movne	r3, #1
 800b5be:	2300      	moveq	r3, #0
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	f107 0320 	add.w	r3, r7, #32
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7fe f9be 	bl	800994c <chk_lock>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b5d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	f003 031c 	and.w	r3, r3, #28
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	f000 80e6 	beq.w	800b7b6 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800b5ea:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d027      	beq.n	800b642 <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b5f2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b5f6:	2b04      	cmp	r3, #4
 800b5f8:	d10e      	bne.n	800b618 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b5fa:	f7fe fa13 	bl	8009a24 <enq_lock>
 800b5fe:	4603      	mov	r3, r0
 800b600:	2b00      	cmp	r3, #0
 800b602:	d006      	beq.n	800b612 <f_open+0x14e>
 800b604:	f107 0320 	add.w	r3, r7, #32
 800b608:	4618      	mov	r0, r3
 800b60a:	f7ff fa02 	bl	800aa12 <dir_register>
 800b60e:	4603      	mov	r3, r0
 800b610:	e000      	b.n	800b614 <f_open+0x150>
 800b612:	2312      	movs	r3, #18
 800b614:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b618:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b61c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b620:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b624:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b628:	7812      	ldrb	r2, [r2, #0]
 800b62a:	f042 0208 	orr.w	r2, r2, #8
 800b62e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b630:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b634:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b638:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b63c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800b640:	e017      	b.n	800b672 <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b642:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b646:	330b      	adds	r3, #11
 800b648:	781b      	ldrb	r3, [r3, #0]
 800b64a:	f003 0311 	and.w	r3, r3, #17
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d003      	beq.n	800b65a <f_open+0x196>
					res = FR_DENIED;
 800b652:	2307      	movs	r3, #7
 800b654:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b658:	e00b      	b.n	800b672 <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b65a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b65e:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 0304 	and.w	r3, r3, #4
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d002      	beq.n	800b672 <f_open+0x1ae>
						res = FR_EXIST;
 800b66c:	2308      	movs	r3, #8
 800b66e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b672:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b676:	2b00      	cmp	r3, #0
 800b678:	f040 80c1 	bne.w	800b7fe <f_open+0x33a>
 800b67c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b680:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	f003 0308 	and.w	r3, r3, #8
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	f000 80b7 	beq.w	800b7fe <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800b690:	f7fd ff30 	bl	80094f4 <get_fattime>
 800b694:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b698:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b69c:	330e      	adds	r3, #14
 800b69e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800b6a2:	b2d2      	uxtb	r2, r2
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	0a1b      	lsrs	r3, r3, #8
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6b4:	330f      	adds	r3, #15
 800b6b6:	b2d2      	uxtb	r2, r2
 800b6b8:	701a      	strb	r2, [r3, #0]
 800b6ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b6be:	0c1a      	lsrs	r2, r3, #16
 800b6c0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6c4:	3310      	adds	r3, #16
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b6ce:	0e1a      	lsrs	r2, r3, #24
 800b6d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6d4:	3311      	adds	r3, #17
 800b6d6:	b2d2      	uxtb	r2, r2
 800b6d8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b6da:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6de:	330b      	adds	r3, #11
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b6e4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6e8:	331c      	adds	r3, #28
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6f2:	331d      	adds	r3, #29
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	701a      	strb	r2, [r3, #0]
 800b6f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6fc:	331e      	adds	r3, #30
 800b6fe:	2200      	movs	r2, #0
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b706:	331f      	adds	r3, #31
 800b708:	2200      	movs	r2, #0
 800b70a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b70c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b710:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b718:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff f8d6 	bl	800a8ce <ld_clust>
 800b722:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800b726:	2100      	movs	r1, #0
 800b728:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800b72c:	f7ff f8fc 	bl	800a928 <st_clust>
				dj.fs->wflag = 1;
 800b730:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b734:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b738:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b73c:	2201      	movs	r2, #1
 800b73e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800b742:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b746:	2b00      	cmp	r3, #0
 800b748:	d059      	beq.n	800b7fe <f_open+0x33a>
					dw = dj.fs->winsect;
 800b74a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b74e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b752:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b756:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b75a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800b75e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b762:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b766:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b76a:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800b76e:	4618      	mov	r0, r3
 800b770:	f7fe fdad 	bl	800a2ce <remove_chain>
 800b774:	4603      	mov	r3, r0
 800b776:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800b77a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d13d      	bne.n	800b7fe <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b782:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b786:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b78a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b78e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800b792:	3a01      	subs	r2, #1
 800b794:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800b798:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b79c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b7a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7a4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7fe facc 	bl	8009d46 <move_window>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b7b4:	e023      	b.n	800b7fe <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b7b6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d11f      	bne.n	800b7fe <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b7be:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b7c2:	330b      	adds	r3, #11
 800b7c4:	781b      	ldrb	r3, [r3, #0]
 800b7c6:	f003 0310 	and.w	r3, r3, #16
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d003      	beq.n	800b7d6 <f_open+0x312>
					res = FR_NO_FILE;
 800b7ce:	2304      	movs	r3, #4
 800b7d0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b7d4:	e013      	b.n	800b7fe <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b7d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b7da:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d00a      	beq.n	800b7fe <f_open+0x33a>
 800b7e8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b7ec:	330b      	adds	r3, #11
 800b7ee:	781b      	ldrb	r3, [r3, #0]
 800b7f0:	f003 0301 	and.w	r3, r3, #1
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d002      	beq.n	800b7fe <f_open+0x33a>
						res = FR_DENIED;
 800b7f8:	2307      	movs	r3, #7
 800b7fa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800b7fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d153      	bne.n	800b8ae <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b806:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b80a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	f003 0308 	and.w	r3, r3, #8
 800b814:	2b00      	cmp	r3, #0
 800b816:	d00b      	beq.n	800b830 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800b818:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b81c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b820:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b824:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b828:	7812      	ldrb	r2, [r2, #0]
 800b82a:	f042 0220 	orr.w	r2, r2, #32
 800b82e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b830:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b834:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b83c:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b840:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b844:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800b84e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b852:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b85c:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b864:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f023 0301 	bic.w	r3, r3, #1
 800b86e:	2b00      	cmp	r3, #0
 800b870:	bf14      	ite	ne
 800b872:	2301      	movne	r3, #1
 800b874:	2300      	moveq	r3, #0
 800b876:	b2db      	uxtb	r3, r3
 800b878:	461a      	mov	r2, r3
 800b87a:	f107 0320 	add.w	r3, r7, #32
 800b87e:	4611      	mov	r1, r2
 800b880:	4618      	mov	r0, r3
 800b882:	f7fe f8f3 	bl	8009a6c <inc_lock>
 800b886:	4602      	mov	r2, r0
 800b888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b88c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800b896:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b89a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d102      	bne.n	800b8ae <f_open+0x3ea>
 800b8a8:	2302      	movs	r3, #2
 800b8aa:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b8ae:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d178      	bne.n	800b9a8 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800b8b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8ba:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b8c4:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b8c8:	7812      	ldrb	r2, [r2, #0]
 800b8ca:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800b8ce:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8d2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b8de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b8e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b8ea:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fe ffed 	bl	800a8ce <ld_clust>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b904:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b908:	331f      	adds	r3, #31
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	061a      	lsls	r2, r3, #24
 800b90e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b912:	331e      	adds	r3, #30
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	041b      	lsls	r3, r3, #16
 800b918:	4313      	orrs	r3, r2
 800b91a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b91e:	321d      	adds	r2, #29
 800b920:	7812      	ldrb	r2, [r2, #0]
 800b922:	0212      	lsls	r2, r2, #8
 800b924:	4313      	orrs	r3, r2
 800b926:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b92a:	321c      	adds	r2, #28
 800b92c:	7812      	ldrb	r2, [r2, #0]
 800b92e:	431a      	orrs	r2, r3
 800b930:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b934:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800b93e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b942:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	2200      	movs	r2, #0
 800b94a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800b94e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b952:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2200      	movs	r2, #0
 800b95a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b95e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b962:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2200      	movs	r2, #0
 800b96a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b96e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b972:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b976:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b97a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b97e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800b988:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b98c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b996:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b99a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b99e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800b9a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}

0800b9b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b9b6:	b580      	push	{r7, lr}
 800b9b8:	b08a      	sub	sp, #40	; 0x28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	60f8      	str	r0, [r7, #12]
 800b9be:	60b9      	str	r1, [r7, #8]
 800b9c0:	607a      	str	r2, [r7, #4]
 800b9c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800b9c8:	683b      	ldr	r3, [r7, #0]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7ff fcfc 	bl	800b3cc <validate>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800b9d8:	7dfb      	ldrb	r3, [r7, #23]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d001      	beq.n	800b9e2 <f_write+0x2c>
 800b9de:	7dfb      	ldrb	r3, [r7, #23]
 800b9e0:	e192      	b.n	800bd08 <f_write+0x352>
	if (fp->err)							/* Check error */
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d003      	beq.n	800b9f4 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800b9f2:	e189      	b.n	800bd08 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800b9fa:	f003 0302 	and.w	r3, r3, #2
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d101      	bne.n	800ba06 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ba02:	2307      	movs	r3, #7
 800ba04:	e180      	b.n	800bd08 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	441a      	add	r2, r3
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba16:	429a      	cmp	r2, r3
 800ba18:	f080 8158 	bcs.w	800bccc <f_write+0x316>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ba20:	e154      	b.n	800bccc <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	f040 8114 	bne.w	800bc5a <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba38:	0a5b      	lsrs	r3, r3, #9
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba42:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ba46:	3b01      	subs	r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4013      	ands	r3, r2
 800ba4c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ba4e:	7dbb      	ldrb	r3, [r7, #22]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d151      	bne.n	800baf8 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10f      	bne.n	800ba7e <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800ba64:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d121      	bne.n	800bab0 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba72:	2100      	movs	r1, #0
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7fe fc84 	bl	800a382 <create_chain>
 800ba7a:	6278      	str	r0, [r7, #36]	; 0x24
 800ba7c:	e018      	b.n	800bab0 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d008      	beq.n	800ba9a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba8e:	4619      	mov	r1, r3
 800ba90:	68f8      	ldr	r0, [r7, #12]
 800ba92:	f7fe fd13 	bl	800a4bc <clmt_clust>
 800ba96:	6278      	str	r0, [r7, #36]	; 0x24
 800ba98:	e00a      	b.n	800bab0 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baa6:	4619      	mov	r1, r3
 800baa8:	4610      	mov	r0, r2
 800baaa:	f7fe fc6a 	bl	800a382 <create_chain>
 800baae:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	f000 810f 	beq.w	800bcd6 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	2b01      	cmp	r3, #1
 800babc:	d105      	bne.n	800baca <f_write+0x114>
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2202      	movs	r2, #2
 800bac2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bac6:	2302      	movs	r3, #2
 800bac8:	e11e      	b.n	800bd08 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800baca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bacc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bad0:	d105      	bne.n	800bade <f_write+0x128>
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2201      	movs	r2, #1
 800bad6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bada:	2301      	movs	r3, #1
 800badc:	e114      	b.n	800bd08 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bae2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800baec:	2b00      	cmp	r3, #0
 800baee:	d103      	bne.n	800baf8 <f_write+0x142>
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800baf4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bafe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d01d      	beq.n	800bb42 <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb0c:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bb10:	68f9      	ldr	r1, [r7, #12]
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bb18:	2301      	movs	r3, #1
 800bb1a:	f7fd fe61 	bl	80097e0 <disk_write>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d005      	beq.n	800bb30 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e0eb      	b.n	800bd08 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bb36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb3a:	b2da      	uxtb	r2, r3
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb4e:	4619      	mov	r1, r3
 800bb50:	4610      	mov	r0, r2
 800bb52:	f7fe f9d3 	bl	8009efc <clust2sect>
 800bb56:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d105      	bne.n	800bb6a <f_write+0x1b4>
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2202      	movs	r2, #2
 800bb62:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb66:	2302      	movs	r3, #2
 800bb68:	e0ce      	b.n	800bd08 <f_write+0x352>
			sect += csect;
 800bb6a:	7dbb      	ldrb	r3, [r7, #22]
 800bb6c:	693a      	ldr	r2, [r7, #16]
 800bb6e:	4413      	add	r3, r2
 800bb70:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	0a5b      	lsrs	r3, r3, #9
 800bb76:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d048      	beq.n	800bc10 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bb7e:	7dba      	ldrb	r2, [r7, #22]
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	4413      	add	r3, r2
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bb8a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d908      	bls.n	800bba4 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb98:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bb9c:	461a      	mov	r2, r3
 800bb9e:	7dbb      	ldrb	r3, [r7, #22]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbaa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bbae:	69fb      	ldr	r3, [r7, #28]
 800bbb0:	693a      	ldr	r2, [r7, #16]
 800bbb2:	69b9      	ldr	r1, [r7, #24]
 800bbb4:	f7fd fe14 	bl	80097e0 <disk_write>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d005      	beq.n	800bbca <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	2201      	movs	r2, #1
 800bbc2:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bbc6:	2301      	movs	r3, #1
 800bbc8:	e09e      	b.n	800bd08 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	1ad3      	subs	r3, r2, r3
 800bbd4:	69fa      	ldr	r2, [r7, #28]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d916      	bls.n	800bc08 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bbe2:	693b      	ldr	r3, [r7, #16]
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	025b      	lsls	r3, r3, #9
 800bbe8:	69ba      	ldr	r2, [r7, #24]
 800bbea:	4413      	add	r3, r2
 800bbec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbf0:	4619      	mov	r1, r3
 800bbf2:	f7fd fe33 	bl	800985c <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bbfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bc08:	69fb      	ldr	r3, [r7, #28]
 800bc0a:	025b      	lsls	r3, r3, #9
 800bc0c:	623b      	str	r3, [r7, #32]
				continue;
 800bc0e:	e047      	b.n	800bca0 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc16:	693a      	ldr	r2, [r7, #16]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d01a      	beq.n	800bc52 <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d212      	bcs.n	800bc52 <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc32:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bc36:	68f9      	ldr	r1, [r7, #12]
 800bc38:	2301      	movs	r3, #1
 800bc3a:	693a      	ldr	r2, [r7, #16]
 800bc3c:	f7fd fdb0 	bl	80097a0 <disk_read>
 800bc40:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d005      	beq.n	800bc52 <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e05a      	b.n	800bd08 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	693a      	ldr	r2, [r7, #16]
 800bc56:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc64:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bc68:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bc6a:	6a3a      	ldr	r2, [r7, #32]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d901      	bls.n	800bc76 <f_write+0x2c0>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bc7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc80:	68fa      	ldr	r2, [r7, #12]
 800bc82:	4413      	add	r3, r2
 800bc84:	6a3a      	ldr	r2, [r7, #32]
 800bc86:	69b9      	ldr	r1, [r7, #24]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7fd fde7 	bl	800985c <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bc94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc98:	b2da      	uxtb	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bca0:	69ba      	ldr	r2, [r7, #24]
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	4413      	add	r3, r2
 800bca6:	61bb      	str	r3, [r7, #24]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bcae:	6a3b      	ldr	r3, [r7, #32]
 800bcb0:	441a      	add	r2, r3
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	6a3b      	ldr	r3, [r7, #32]
 800bcbe:	441a      	add	r2, r3
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	6a3b      	ldr	r3, [r7, #32]
 800bcc8:	1ad3      	subs	r3, r2, r3
 800bcca:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f47f aea7 	bne.w	800ba22 <f_write+0x6c>
 800bcd4:	e000      	b.n	800bcd8 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bcd6:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d905      	bls.n	800bcf4 <f_write+0x33e>
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bcfa:	f043 0320 	orr.w	r3, r3, #32
 800bcfe:	b2da      	uxtb	r2, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3728      	adds	r7, #40	; 0x28
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b086      	sub	sp, #24
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f7ff fb57 	bl	800b3cc <validate>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	f040 80a8 	bne.w	800be7a <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd30:	f003 0320 	and.w	r3, r3, #32
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	f000 80a0 	beq.w	800be7a <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d019      	beq.n	800bd7c <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd4e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bd52:	6879      	ldr	r1, [r7, #4]
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	f7fd fd40 	bl	80097e0 <disk_write>
 800bd60:	4603      	mov	r3, r0
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d001      	beq.n	800bd6a <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bd66:	2301      	movs	r3, #1
 800bd68:	e088      	b.n	800be7c <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd74:	b2da      	uxtb	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bd88:	4619      	mov	r1, r3
 800bd8a:	4610      	mov	r0, r2
 800bd8c:	f7fd ffdb 	bl	8009d46 <move_window>
 800bd90:	4603      	mov	r3, r0
 800bd92:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bd94:	7dfb      	ldrb	r3, [r7, #23]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d16f      	bne.n	800be7a <f_sync+0x16a>
				dir = fp->dir_ptr;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bda0:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	330b      	adds	r3, #11
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	330b      	adds	r3, #11
 800bdac:	f042 0220 	orr.w	r2, r2, #32
 800bdb0:	b2d2      	uxtb	r2, r2
 800bdb2:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	331c      	adds	r3, #28
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	331d      	adds	r3, #29
 800bdd2:	b2d2      	uxtb	r2, r2
 800bdd4:	701a      	strb	r2, [r3, #0]
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bddc:	0c1a      	lsrs	r2, r3, #16
 800bdde:	693b      	ldr	r3, [r7, #16]
 800bde0:	331e      	adds	r3, #30
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bdec:	0e1a      	lsrs	r2, r3, #24
 800bdee:	693b      	ldr	r3, [r7, #16]
 800bdf0:	331f      	adds	r3, #31
 800bdf2:	b2d2      	uxtb	r2, r2
 800bdf4:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	6938      	ldr	r0, [r7, #16]
 800be00:	f7fe fd92 	bl	800a928 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800be04:	f7fd fb76 	bl	80094f4 <get_fattime>
 800be08:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	3316      	adds	r3, #22
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	b2d2      	uxtb	r2, r2
 800be12:	701a      	strb	r2, [r3, #0]
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	b29b      	uxth	r3, r3
 800be18:	0a1b      	lsrs	r3, r3, #8
 800be1a:	b29a      	uxth	r2, r3
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	3317      	adds	r3, #23
 800be20:	b2d2      	uxtb	r2, r2
 800be22:	701a      	strb	r2, [r3, #0]
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	0c1a      	lsrs	r2, r3, #16
 800be28:	693b      	ldr	r3, [r7, #16]
 800be2a:	3318      	adds	r3, #24
 800be2c:	b2d2      	uxtb	r2, r2
 800be2e:	701a      	strb	r2, [r3, #0]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	0e1a      	lsrs	r2, r3, #24
 800be34:	693b      	ldr	r3, [r7, #16]
 800be36:	3319      	adds	r3, #25
 800be38:	b2d2      	uxtb	r2, r2
 800be3a:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	3312      	adds	r3, #18
 800be40:	2200      	movs	r2, #0
 800be42:	701a      	strb	r2, [r3, #0]
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	3313      	adds	r3, #19
 800be48:	2200      	movs	r2, #0
 800be4a:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be52:	f023 0320 	bic.w	r3, r3, #32
 800be56:	b2da      	uxtb	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800be70:	4618      	mov	r0, r3
 800be72:	f7fd ff96 	bl	8009da2 <sync_fs>
 800be76:	4603      	mov	r3, r0
 800be78:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800be7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b084      	sub	sp, #16
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	f7ff ff3f 	bl	800bd10 <f_sync>
 800be92:	4603      	mov	r3, r0
 800be94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800be96:	7bfb      	ldrb	r3, [r7, #15]
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d116      	bne.n	800beca <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f7ff fa95 	bl	800b3cc <validate>
 800bea2:	4603      	mov	r3, r0
 800bea4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bea6:	7bfb      	ldrb	r3, [r7, #15]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10e      	bne.n	800beca <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800beb2:	4618      	mov	r0, r3
 800beb4:	f7fd fe90 	bl	8009bd8 <dec_lock>
 800beb8:	4603      	mov	r3, r0
 800beba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d103      	bne.n	800beca <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	2200      	movs	r2, #0
 800bec6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800beca:	7bfb      	ldrb	r3, [r7, #15]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3710      	adds	r7, #16
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	60b9      	str	r1, [r7, #8]
 800bede:	4613      	mov	r3, r2
 800bee0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bee2:	2301      	movs	r3, #1
 800bee4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800beea:	4b1e      	ldr	r3, [pc, #120]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800beec:	7a5b      	ldrb	r3, [r3, #9]
 800beee:	b2db      	uxtb	r3, r3
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d831      	bhi.n	800bf58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bef4:	4b1b      	ldr	r3, [pc, #108]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bef6:	7a5b      	ldrb	r3, [r3, #9]
 800bef8:	b2db      	uxtb	r3, r3
 800befa:	461a      	mov	r2, r3
 800befc:	4b19      	ldr	r3, [pc, #100]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800befe:	2100      	movs	r1, #0
 800bf00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800bf02:	4b18      	ldr	r3, [pc, #96]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf04:	7a5b      	ldrb	r3, [r3, #9]
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	4a16      	ldr	r2, [pc, #88]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf0a:	009b      	lsls	r3, r3, #2
 800bf0c:	4413      	add	r3, r2
 800bf0e:	68fa      	ldr	r2, [r7, #12]
 800bf10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800bf12:	4b14      	ldr	r3, [pc, #80]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf14:	7a5b      	ldrb	r3, [r3, #9]
 800bf16:	b2db      	uxtb	r3, r3
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4b12      	ldr	r3, [pc, #72]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf1c:	4413      	add	r3, r2
 800bf1e:	79fa      	ldrb	r2, [r7, #7]
 800bf20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf24:	7a5b      	ldrb	r3, [r3, #9]
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	1c5a      	adds	r2, r3, #1
 800bf2a:	b2d1      	uxtb	r1, r2
 800bf2c:	4a0d      	ldr	r2, [pc, #52]	; (800bf64 <FATFS_LinkDriverEx+0x90>)
 800bf2e:	7251      	strb	r1, [r2, #9]
 800bf30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf32:	7dbb      	ldrb	r3, [r7, #22]
 800bf34:	3330      	adds	r3, #48	; 0x30
 800bf36:	b2da      	uxtb	r2, r3
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	223a      	movs	r2, #58	; 0x3a
 800bf42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	3302      	adds	r3, #2
 800bf48:	222f      	movs	r2, #47	; 0x2f
 800bf4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf4c:	68bb      	ldr	r3, [r7, #8]
 800bf4e:	3303      	adds	r3, #3
 800bf50:	2200      	movs	r2, #0
 800bf52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf54:	2300      	movs	r3, #0
 800bf56:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bf58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	371c      	adds	r7, #28
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bc80      	pop	{r7}
 800bf62:	4770      	bx	lr
 800bf64:	20000c3c 	.word	0x20000c3c

0800bf68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b082      	sub	sp, #8
 800bf6c:	af00      	add	r7, sp, #0
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bf72:	2200      	movs	r2, #0
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f7ff ffac 	bl	800bed4 <FATFS_LinkDriverEx>
 800bf7c:	4603      	mov	r3, r0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
	...

0800bf88 <__errno>:
 800bf88:	4b01      	ldr	r3, [pc, #4]	; (800bf90 <__errno+0x8>)
 800bf8a:	6818      	ldr	r0, [r3, #0]
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	200000a0 	.word	0x200000a0

0800bf94 <__libc_init_array>:
 800bf94:	b570      	push	{r4, r5, r6, lr}
 800bf96:	2600      	movs	r6, #0
 800bf98:	4d0c      	ldr	r5, [pc, #48]	; (800bfcc <__libc_init_array+0x38>)
 800bf9a:	4c0d      	ldr	r4, [pc, #52]	; (800bfd0 <__libc_init_array+0x3c>)
 800bf9c:	1b64      	subs	r4, r4, r5
 800bf9e:	10a4      	asrs	r4, r4, #2
 800bfa0:	42a6      	cmp	r6, r4
 800bfa2:	d109      	bne.n	800bfb8 <__libc_init_array+0x24>
 800bfa4:	f000 ff5c 	bl	800ce60 <_init>
 800bfa8:	2600      	movs	r6, #0
 800bfaa:	4d0a      	ldr	r5, [pc, #40]	; (800bfd4 <__libc_init_array+0x40>)
 800bfac:	4c0a      	ldr	r4, [pc, #40]	; (800bfd8 <__libc_init_array+0x44>)
 800bfae:	1b64      	subs	r4, r4, r5
 800bfb0:	10a4      	asrs	r4, r4, #2
 800bfb2:	42a6      	cmp	r6, r4
 800bfb4:	d105      	bne.n	800bfc2 <__libc_init_array+0x2e>
 800bfb6:	bd70      	pop	{r4, r5, r6, pc}
 800bfb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfbc:	4798      	blx	r3
 800bfbe:	3601      	adds	r6, #1
 800bfc0:	e7ee      	b.n	800bfa0 <__libc_init_array+0xc>
 800bfc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bfc6:	4798      	blx	r3
 800bfc8:	3601      	adds	r6, #1
 800bfca:	e7f2      	b.n	800bfb2 <__libc_init_array+0x1e>
 800bfcc:	0800fc24 	.word	0x0800fc24
 800bfd0:	0800fc24 	.word	0x0800fc24
 800bfd4:	0800fc24 	.word	0x0800fc24
 800bfd8:	0800fc28 	.word	0x0800fc28

0800bfdc <memset>:
 800bfdc:	4603      	mov	r3, r0
 800bfde:	4402      	add	r2, r0
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d100      	bne.n	800bfe6 <memset+0xa>
 800bfe4:	4770      	bx	lr
 800bfe6:	f803 1b01 	strb.w	r1, [r3], #1
 800bfea:	e7f9      	b.n	800bfe0 <memset+0x4>

0800bfec <siprintf>:
 800bfec:	b40e      	push	{r1, r2, r3}
 800bfee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bff2:	b500      	push	{lr}
 800bff4:	b09c      	sub	sp, #112	; 0x70
 800bff6:	ab1d      	add	r3, sp, #116	; 0x74
 800bff8:	9002      	str	r0, [sp, #8]
 800bffa:	9006      	str	r0, [sp, #24]
 800bffc:	9107      	str	r1, [sp, #28]
 800bffe:	9104      	str	r1, [sp, #16]
 800c000:	4808      	ldr	r0, [pc, #32]	; (800c024 <siprintf+0x38>)
 800c002:	4909      	ldr	r1, [pc, #36]	; (800c028 <siprintf+0x3c>)
 800c004:	f853 2b04 	ldr.w	r2, [r3], #4
 800c008:	9105      	str	r1, [sp, #20]
 800c00a:	6800      	ldr	r0, [r0, #0]
 800c00c:	a902      	add	r1, sp, #8
 800c00e:	9301      	str	r3, [sp, #4]
 800c010:	f000 f868 	bl	800c0e4 <_svfiprintf_r>
 800c014:	2200      	movs	r2, #0
 800c016:	9b02      	ldr	r3, [sp, #8]
 800c018:	701a      	strb	r2, [r3, #0]
 800c01a:	b01c      	add	sp, #112	; 0x70
 800c01c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c020:	b003      	add	sp, #12
 800c022:	4770      	bx	lr
 800c024:	200000a0 	.word	0x200000a0
 800c028:	ffff0208 	.word	0xffff0208

0800c02c <__ssputs_r>:
 800c02c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c030:	688e      	ldr	r6, [r1, #8]
 800c032:	4682      	mov	sl, r0
 800c034:	429e      	cmp	r6, r3
 800c036:	460c      	mov	r4, r1
 800c038:	4690      	mov	r8, r2
 800c03a:	461f      	mov	r7, r3
 800c03c:	d838      	bhi.n	800c0b0 <__ssputs_r+0x84>
 800c03e:	898a      	ldrh	r2, [r1, #12]
 800c040:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c044:	d032      	beq.n	800c0ac <__ssputs_r+0x80>
 800c046:	6825      	ldr	r5, [r4, #0]
 800c048:	6909      	ldr	r1, [r1, #16]
 800c04a:	3301      	adds	r3, #1
 800c04c:	eba5 0901 	sub.w	r9, r5, r1
 800c050:	6965      	ldr	r5, [r4, #20]
 800c052:	444b      	add	r3, r9
 800c054:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c058:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c05c:	106d      	asrs	r5, r5, #1
 800c05e:	429d      	cmp	r5, r3
 800c060:	bf38      	it	cc
 800c062:	461d      	movcc	r5, r3
 800c064:	0553      	lsls	r3, r2, #21
 800c066:	d531      	bpl.n	800c0cc <__ssputs_r+0xa0>
 800c068:	4629      	mov	r1, r5
 800c06a:	f000 fb6f 	bl	800c74c <_malloc_r>
 800c06e:	4606      	mov	r6, r0
 800c070:	b950      	cbnz	r0, 800c088 <__ssputs_r+0x5c>
 800c072:	230c      	movs	r3, #12
 800c074:	f04f 30ff 	mov.w	r0, #4294967295
 800c078:	f8ca 3000 	str.w	r3, [sl]
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c082:	81a3      	strh	r3, [r4, #12]
 800c084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c088:	464a      	mov	r2, r9
 800c08a:	6921      	ldr	r1, [r4, #16]
 800c08c:	f000 face 	bl	800c62c <memcpy>
 800c090:	89a3      	ldrh	r3, [r4, #12]
 800c092:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09a:	81a3      	strh	r3, [r4, #12]
 800c09c:	6126      	str	r6, [r4, #16]
 800c09e:	444e      	add	r6, r9
 800c0a0:	6026      	str	r6, [r4, #0]
 800c0a2:	463e      	mov	r6, r7
 800c0a4:	6165      	str	r5, [r4, #20]
 800c0a6:	eba5 0509 	sub.w	r5, r5, r9
 800c0aa:	60a5      	str	r5, [r4, #8]
 800c0ac:	42be      	cmp	r6, r7
 800c0ae:	d900      	bls.n	800c0b2 <__ssputs_r+0x86>
 800c0b0:	463e      	mov	r6, r7
 800c0b2:	4632      	mov	r2, r6
 800c0b4:	4641      	mov	r1, r8
 800c0b6:	6820      	ldr	r0, [r4, #0]
 800c0b8:	f000 fac6 	bl	800c648 <memmove>
 800c0bc:	68a3      	ldr	r3, [r4, #8]
 800c0be:	2000      	movs	r0, #0
 800c0c0:	1b9b      	subs	r3, r3, r6
 800c0c2:	60a3      	str	r3, [r4, #8]
 800c0c4:	6823      	ldr	r3, [r4, #0]
 800c0c6:	4433      	add	r3, r6
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	e7db      	b.n	800c084 <__ssputs_r+0x58>
 800c0cc:	462a      	mov	r2, r5
 800c0ce:	f000 fbb1 	bl	800c834 <_realloc_r>
 800c0d2:	4606      	mov	r6, r0
 800c0d4:	2800      	cmp	r0, #0
 800c0d6:	d1e1      	bne.n	800c09c <__ssputs_r+0x70>
 800c0d8:	4650      	mov	r0, sl
 800c0da:	6921      	ldr	r1, [r4, #16]
 800c0dc:	f000 face 	bl	800c67c <_free_r>
 800c0e0:	e7c7      	b.n	800c072 <__ssputs_r+0x46>
	...

0800c0e4 <_svfiprintf_r>:
 800c0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0e8:	4698      	mov	r8, r3
 800c0ea:	898b      	ldrh	r3, [r1, #12]
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	061b      	lsls	r3, r3, #24
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	4614      	mov	r4, r2
 800c0f4:	b09d      	sub	sp, #116	; 0x74
 800c0f6:	d50e      	bpl.n	800c116 <_svfiprintf_r+0x32>
 800c0f8:	690b      	ldr	r3, [r1, #16]
 800c0fa:	b963      	cbnz	r3, 800c116 <_svfiprintf_r+0x32>
 800c0fc:	2140      	movs	r1, #64	; 0x40
 800c0fe:	f000 fb25 	bl	800c74c <_malloc_r>
 800c102:	6028      	str	r0, [r5, #0]
 800c104:	6128      	str	r0, [r5, #16]
 800c106:	b920      	cbnz	r0, 800c112 <_svfiprintf_r+0x2e>
 800c108:	230c      	movs	r3, #12
 800c10a:	603b      	str	r3, [r7, #0]
 800c10c:	f04f 30ff 	mov.w	r0, #4294967295
 800c110:	e0d1      	b.n	800c2b6 <_svfiprintf_r+0x1d2>
 800c112:	2340      	movs	r3, #64	; 0x40
 800c114:	616b      	str	r3, [r5, #20]
 800c116:	2300      	movs	r3, #0
 800c118:	9309      	str	r3, [sp, #36]	; 0x24
 800c11a:	2320      	movs	r3, #32
 800c11c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c120:	2330      	movs	r3, #48	; 0x30
 800c122:	f04f 0901 	mov.w	r9, #1
 800c126:	f8cd 800c 	str.w	r8, [sp, #12]
 800c12a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c2d0 <_svfiprintf_r+0x1ec>
 800c12e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c132:	4623      	mov	r3, r4
 800c134:	469a      	mov	sl, r3
 800c136:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c13a:	b10a      	cbz	r2, 800c140 <_svfiprintf_r+0x5c>
 800c13c:	2a25      	cmp	r2, #37	; 0x25
 800c13e:	d1f9      	bne.n	800c134 <_svfiprintf_r+0x50>
 800c140:	ebba 0b04 	subs.w	fp, sl, r4
 800c144:	d00b      	beq.n	800c15e <_svfiprintf_r+0x7a>
 800c146:	465b      	mov	r3, fp
 800c148:	4622      	mov	r2, r4
 800c14a:	4629      	mov	r1, r5
 800c14c:	4638      	mov	r0, r7
 800c14e:	f7ff ff6d 	bl	800c02c <__ssputs_r>
 800c152:	3001      	adds	r0, #1
 800c154:	f000 80aa 	beq.w	800c2ac <_svfiprintf_r+0x1c8>
 800c158:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c15a:	445a      	add	r2, fp
 800c15c:	9209      	str	r2, [sp, #36]	; 0x24
 800c15e:	f89a 3000 	ldrb.w	r3, [sl]
 800c162:	2b00      	cmp	r3, #0
 800c164:	f000 80a2 	beq.w	800c2ac <_svfiprintf_r+0x1c8>
 800c168:	2300      	movs	r3, #0
 800c16a:	f04f 32ff 	mov.w	r2, #4294967295
 800c16e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c172:	f10a 0a01 	add.w	sl, sl, #1
 800c176:	9304      	str	r3, [sp, #16]
 800c178:	9307      	str	r3, [sp, #28]
 800c17a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c17e:	931a      	str	r3, [sp, #104]	; 0x68
 800c180:	4654      	mov	r4, sl
 800c182:	2205      	movs	r2, #5
 800c184:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c188:	4851      	ldr	r0, [pc, #324]	; (800c2d0 <_svfiprintf_r+0x1ec>)
 800c18a:	f000 fa41 	bl	800c610 <memchr>
 800c18e:	9a04      	ldr	r2, [sp, #16]
 800c190:	b9d8      	cbnz	r0, 800c1ca <_svfiprintf_r+0xe6>
 800c192:	06d0      	lsls	r0, r2, #27
 800c194:	bf44      	itt	mi
 800c196:	2320      	movmi	r3, #32
 800c198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c19c:	0711      	lsls	r1, r2, #28
 800c19e:	bf44      	itt	mi
 800c1a0:	232b      	movmi	r3, #43	; 0x2b
 800c1a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1a6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c1ac:	d015      	beq.n	800c1da <_svfiprintf_r+0xf6>
 800c1ae:	4654      	mov	r4, sl
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	f04f 0c0a 	mov.w	ip, #10
 800c1b6:	9a07      	ldr	r2, [sp, #28]
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1be:	3b30      	subs	r3, #48	; 0x30
 800c1c0:	2b09      	cmp	r3, #9
 800c1c2:	d94e      	bls.n	800c262 <_svfiprintf_r+0x17e>
 800c1c4:	b1b0      	cbz	r0, 800c1f4 <_svfiprintf_r+0x110>
 800c1c6:	9207      	str	r2, [sp, #28]
 800c1c8:	e014      	b.n	800c1f4 <_svfiprintf_r+0x110>
 800c1ca:	eba0 0308 	sub.w	r3, r0, r8
 800c1ce:	fa09 f303 	lsl.w	r3, r9, r3
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	46a2      	mov	sl, r4
 800c1d6:	9304      	str	r3, [sp, #16]
 800c1d8:	e7d2      	b.n	800c180 <_svfiprintf_r+0x9c>
 800c1da:	9b03      	ldr	r3, [sp, #12]
 800c1dc:	1d19      	adds	r1, r3, #4
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	9103      	str	r1, [sp, #12]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	bfbb      	ittet	lt
 800c1e6:	425b      	neglt	r3, r3
 800c1e8:	f042 0202 	orrlt.w	r2, r2, #2
 800c1ec:	9307      	strge	r3, [sp, #28]
 800c1ee:	9307      	strlt	r3, [sp, #28]
 800c1f0:	bfb8      	it	lt
 800c1f2:	9204      	strlt	r2, [sp, #16]
 800c1f4:	7823      	ldrb	r3, [r4, #0]
 800c1f6:	2b2e      	cmp	r3, #46	; 0x2e
 800c1f8:	d10c      	bne.n	800c214 <_svfiprintf_r+0x130>
 800c1fa:	7863      	ldrb	r3, [r4, #1]
 800c1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c1fe:	d135      	bne.n	800c26c <_svfiprintf_r+0x188>
 800c200:	9b03      	ldr	r3, [sp, #12]
 800c202:	3402      	adds	r4, #2
 800c204:	1d1a      	adds	r2, r3, #4
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	9203      	str	r2, [sp, #12]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	bfb8      	it	lt
 800c20e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c212:	9305      	str	r3, [sp, #20]
 800c214:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c2d4 <_svfiprintf_r+0x1f0>
 800c218:	2203      	movs	r2, #3
 800c21a:	4650      	mov	r0, sl
 800c21c:	7821      	ldrb	r1, [r4, #0]
 800c21e:	f000 f9f7 	bl	800c610 <memchr>
 800c222:	b140      	cbz	r0, 800c236 <_svfiprintf_r+0x152>
 800c224:	2340      	movs	r3, #64	; 0x40
 800c226:	eba0 000a 	sub.w	r0, r0, sl
 800c22a:	fa03 f000 	lsl.w	r0, r3, r0
 800c22e:	9b04      	ldr	r3, [sp, #16]
 800c230:	3401      	adds	r4, #1
 800c232:	4303      	orrs	r3, r0
 800c234:	9304      	str	r3, [sp, #16]
 800c236:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c23a:	2206      	movs	r2, #6
 800c23c:	4826      	ldr	r0, [pc, #152]	; (800c2d8 <_svfiprintf_r+0x1f4>)
 800c23e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c242:	f000 f9e5 	bl	800c610 <memchr>
 800c246:	2800      	cmp	r0, #0
 800c248:	d038      	beq.n	800c2bc <_svfiprintf_r+0x1d8>
 800c24a:	4b24      	ldr	r3, [pc, #144]	; (800c2dc <_svfiprintf_r+0x1f8>)
 800c24c:	bb1b      	cbnz	r3, 800c296 <_svfiprintf_r+0x1b2>
 800c24e:	9b03      	ldr	r3, [sp, #12]
 800c250:	3307      	adds	r3, #7
 800c252:	f023 0307 	bic.w	r3, r3, #7
 800c256:	3308      	adds	r3, #8
 800c258:	9303      	str	r3, [sp, #12]
 800c25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c25c:	4433      	add	r3, r6
 800c25e:	9309      	str	r3, [sp, #36]	; 0x24
 800c260:	e767      	b.n	800c132 <_svfiprintf_r+0x4e>
 800c262:	460c      	mov	r4, r1
 800c264:	2001      	movs	r0, #1
 800c266:	fb0c 3202 	mla	r2, ip, r2, r3
 800c26a:	e7a5      	b.n	800c1b8 <_svfiprintf_r+0xd4>
 800c26c:	2300      	movs	r3, #0
 800c26e:	f04f 0c0a 	mov.w	ip, #10
 800c272:	4619      	mov	r1, r3
 800c274:	3401      	adds	r4, #1
 800c276:	9305      	str	r3, [sp, #20]
 800c278:	4620      	mov	r0, r4
 800c27a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c27e:	3a30      	subs	r2, #48	; 0x30
 800c280:	2a09      	cmp	r2, #9
 800c282:	d903      	bls.n	800c28c <_svfiprintf_r+0x1a8>
 800c284:	2b00      	cmp	r3, #0
 800c286:	d0c5      	beq.n	800c214 <_svfiprintf_r+0x130>
 800c288:	9105      	str	r1, [sp, #20]
 800c28a:	e7c3      	b.n	800c214 <_svfiprintf_r+0x130>
 800c28c:	4604      	mov	r4, r0
 800c28e:	2301      	movs	r3, #1
 800c290:	fb0c 2101 	mla	r1, ip, r1, r2
 800c294:	e7f0      	b.n	800c278 <_svfiprintf_r+0x194>
 800c296:	ab03      	add	r3, sp, #12
 800c298:	9300      	str	r3, [sp, #0]
 800c29a:	462a      	mov	r2, r5
 800c29c:	4638      	mov	r0, r7
 800c29e:	4b10      	ldr	r3, [pc, #64]	; (800c2e0 <_svfiprintf_r+0x1fc>)
 800c2a0:	a904      	add	r1, sp, #16
 800c2a2:	f3af 8000 	nop.w
 800c2a6:	1c42      	adds	r2, r0, #1
 800c2a8:	4606      	mov	r6, r0
 800c2aa:	d1d6      	bne.n	800c25a <_svfiprintf_r+0x176>
 800c2ac:	89ab      	ldrh	r3, [r5, #12]
 800c2ae:	065b      	lsls	r3, r3, #25
 800c2b0:	f53f af2c 	bmi.w	800c10c <_svfiprintf_r+0x28>
 800c2b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c2b6:	b01d      	add	sp, #116	; 0x74
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	ab03      	add	r3, sp, #12
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	462a      	mov	r2, r5
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	4b06      	ldr	r3, [pc, #24]	; (800c2e0 <_svfiprintf_r+0x1fc>)
 800c2c6:	a904      	add	r1, sp, #16
 800c2c8:	f000 f87c 	bl	800c3c4 <_printf_i>
 800c2cc:	e7eb      	b.n	800c2a6 <_svfiprintf_r+0x1c2>
 800c2ce:	bf00      	nop
 800c2d0:	0800fbf0 	.word	0x0800fbf0
 800c2d4:	0800fbf6 	.word	0x0800fbf6
 800c2d8:	0800fbfa 	.word	0x0800fbfa
 800c2dc:	00000000 	.word	0x00000000
 800c2e0:	0800c02d 	.word	0x0800c02d

0800c2e4 <_printf_common>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	4616      	mov	r6, r2
 800c2ea:	4699      	mov	r9, r3
 800c2ec:	688a      	ldr	r2, [r1, #8]
 800c2ee:	690b      	ldr	r3, [r1, #16]
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	bfb8      	it	lt
 800c2f6:	4613      	movlt	r3, r2
 800c2f8:	6033      	str	r3, [r6, #0]
 800c2fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c2fe:	460c      	mov	r4, r1
 800c300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c304:	b10a      	cbz	r2, 800c30a <_printf_common+0x26>
 800c306:	3301      	adds	r3, #1
 800c308:	6033      	str	r3, [r6, #0]
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	0699      	lsls	r1, r3, #26
 800c30e:	bf42      	ittt	mi
 800c310:	6833      	ldrmi	r3, [r6, #0]
 800c312:	3302      	addmi	r3, #2
 800c314:	6033      	strmi	r3, [r6, #0]
 800c316:	6825      	ldr	r5, [r4, #0]
 800c318:	f015 0506 	ands.w	r5, r5, #6
 800c31c:	d106      	bne.n	800c32c <_printf_common+0x48>
 800c31e:	f104 0a19 	add.w	sl, r4, #25
 800c322:	68e3      	ldr	r3, [r4, #12]
 800c324:	6832      	ldr	r2, [r6, #0]
 800c326:	1a9b      	subs	r3, r3, r2
 800c328:	42ab      	cmp	r3, r5
 800c32a:	dc28      	bgt.n	800c37e <_printf_common+0x9a>
 800c32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c330:	1e13      	subs	r3, r2, #0
 800c332:	6822      	ldr	r2, [r4, #0]
 800c334:	bf18      	it	ne
 800c336:	2301      	movne	r3, #1
 800c338:	0692      	lsls	r2, r2, #26
 800c33a:	d42d      	bmi.n	800c398 <_printf_common+0xb4>
 800c33c:	4649      	mov	r1, r9
 800c33e:	4638      	mov	r0, r7
 800c340:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c344:	47c0      	blx	r8
 800c346:	3001      	adds	r0, #1
 800c348:	d020      	beq.n	800c38c <_printf_common+0xa8>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	68e5      	ldr	r5, [r4, #12]
 800c34e:	f003 0306 	and.w	r3, r3, #6
 800c352:	2b04      	cmp	r3, #4
 800c354:	bf18      	it	ne
 800c356:	2500      	movne	r5, #0
 800c358:	6832      	ldr	r2, [r6, #0]
 800c35a:	f04f 0600 	mov.w	r6, #0
 800c35e:	68a3      	ldr	r3, [r4, #8]
 800c360:	bf08      	it	eq
 800c362:	1aad      	subeq	r5, r5, r2
 800c364:	6922      	ldr	r2, [r4, #16]
 800c366:	bf08      	it	eq
 800c368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c36c:	4293      	cmp	r3, r2
 800c36e:	bfc4      	itt	gt
 800c370:	1a9b      	subgt	r3, r3, r2
 800c372:	18ed      	addgt	r5, r5, r3
 800c374:	341a      	adds	r4, #26
 800c376:	42b5      	cmp	r5, r6
 800c378:	d11a      	bne.n	800c3b0 <_printf_common+0xcc>
 800c37a:	2000      	movs	r0, #0
 800c37c:	e008      	b.n	800c390 <_printf_common+0xac>
 800c37e:	2301      	movs	r3, #1
 800c380:	4652      	mov	r2, sl
 800c382:	4649      	mov	r1, r9
 800c384:	4638      	mov	r0, r7
 800c386:	47c0      	blx	r8
 800c388:	3001      	adds	r0, #1
 800c38a:	d103      	bne.n	800c394 <_printf_common+0xb0>
 800c38c:	f04f 30ff 	mov.w	r0, #4294967295
 800c390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c394:	3501      	adds	r5, #1
 800c396:	e7c4      	b.n	800c322 <_printf_common+0x3e>
 800c398:	2030      	movs	r0, #48	; 0x30
 800c39a:	18e1      	adds	r1, r4, r3
 800c39c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3a0:	1c5a      	adds	r2, r3, #1
 800c3a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3a6:	4422      	add	r2, r4
 800c3a8:	3302      	adds	r3, #2
 800c3aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c3ae:	e7c5      	b.n	800c33c <_printf_common+0x58>
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	4638      	mov	r0, r7
 800c3b8:	47c0      	blx	r8
 800c3ba:	3001      	adds	r0, #1
 800c3bc:	d0e6      	beq.n	800c38c <_printf_common+0xa8>
 800c3be:	3601      	adds	r6, #1
 800c3c0:	e7d9      	b.n	800c376 <_printf_common+0x92>
	...

0800c3c4 <_printf_i>:
 800c3c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c8:	7e0f      	ldrb	r7, [r1, #24]
 800c3ca:	4691      	mov	r9, r2
 800c3cc:	2f78      	cmp	r7, #120	; 0x78
 800c3ce:	4680      	mov	r8, r0
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	469a      	mov	sl, r3
 800c3d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c3d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c3da:	d807      	bhi.n	800c3ec <_printf_i+0x28>
 800c3dc:	2f62      	cmp	r7, #98	; 0x62
 800c3de:	d80a      	bhi.n	800c3f6 <_printf_i+0x32>
 800c3e0:	2f00      	cmp	r7, #0
 800c3e2:	f000 80d9 	beq.w	800c598 <_printf_i+0x1d4>
 800c3e6:	2f58      	cmp	r7, #88	; 0x58
 800c3e8:	f000 80a4 	beq.w	800c534 <_printf_i+0x170>
 800c3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c3f4:	e03a      	b.n	800c46c <_printf_i+0xa8>
 800c3f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c3fa:	2b15      	cmp	r3, #21
 800c3fc:	d8f6      	bhi.n	800c3ec <_printf_i+0x28>
 800c3fe:	a101      	add	r1, pc, #4	; (adr r1, 800c404 <_printf_i+0x40>)
 800c400:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c404:	0800c45d 	.word	0x0800c45d
 800c408:	0800c471 	.word	0x0800c471
 800c40c:	0800c3ed 	.word	0x0800c3ed
 800c410:	0800c3ed 	.word	0x0800c3ed
 800c414:	0800c3ed 	.word	0x0800c3ed
 800c418:	0800c3ed 	.word	0x0800c3ed
 800c41c:	0800c471 	.word	0x0800c471
 800c420:	0800c3ed 	.word	0x0800c3ed
 800c424:	0800c3ed 	.word	0x0800c3ed
 800c428:	0800c3ed 	.word	0x0800c3ed
 800c42c:	0800c3ed 	.word	0x0800c3ed
 800c430:	0800c57f 	.word	0x0800c57f
 800c434:	0800c4a1 	.word	0x0800c4a1
 800c438:	0800c561 	.word	0x0800c561
 800c43c:	0800c3ed 	.word	0x0800c3ed
 800c440:	0800c3ed 	.word	0x0800c3ed
 800c444:	0800c5a1 	.word	0x0800c5a1
 800c448:	0800c3ed 	.word	0x0800c3ed
 800c44c:	0800c4a1 	.word	0x0800c4a1
 800c450:	0800c3ed 	.word	0x0800c3ed
 800c454:	0800c3ed 	.word	0x0800c3ed
 800c458:	0800c569 	.word	0x0800c569
 800c45c:	682b      	ldr	r3, [r5, #0]
 800c45e:	1d1a      	adds	r2, r3, #4
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	602a      	str	r2, [r5, #0]
 800c464:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c468:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c46c:	2301      	movs	r3, #1
 800c46e:	e0a4      	b.n	800c5ba <_printf_i+0x1f6>
 800c470:	6820      	ldr	r0, [r4, #0]
 800c472:	6829      	ldr	r1, [r5, #0]
 800c474:	0606      	lsls	r6, r0, #24
 800c476:	f101 0304 	add.w	r3, r1, #4
 800c47a:	d50a      	bpl.n	800c492 <_printf_i+0xce>
 800c47c:	680e      	ldr	r6, [r1, #0]
 800c47e:	602b      	str	r3, [r5, #0]
 800c480:	2e00      	cmp	r6, #0
 800c482:	da03      	bge.n	800c48c <_printf_i+0xc8>
 800c484:	232d      	movs	r3, #45	; 0x2d
 800c486:	4276      	negs	r6, r6
 800c488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c48c:	230a      	movs	r3, #10
 800c48e:	485e      	ldr	r0, [pc, #376]	; (800c608 <_printf_i+0x244>)
 800c490:	e019      	b.n	800c4c6 <_printf_i+0x102>
 800c492:	680e      	ldr	r6, [r1, #0]
 800c494:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c498:	602b      	str	r3, [r5, #0]
 800c49a:	bf18      	it	ne
 800c49c:	b236      	sxthne	r6, r6
 800c49e:	e7ef      	b.n	800c480 <_printf_i+0xbc>
 800c4a0:	682b      	ldr	r3, [r5, #0]
 800c4a2:	6820      	ldr	r0, [r4, #0]
 800c4a4:	1d19      	adds	r1, r3, #4
 800c4a6:	6029      	str	r1, [r5, #0]
 800c4a8:	0601      	lsls	r1, r0, #24
 800c4aa:	d501      	bpl.n	800c4b0 <_printf_i+0xec>
 800c4ac:	681e      	ldr	r6, [r3, #0]
 800c4ae:	e002      	b.n	800c4b6 <_printf_i+0xf2>
 800c4b0:	0646      	lsls	r6, r0, #25
 800c4b2:	d5fb      	bpl.n	800c4ac <_printf_i+0xe8>
 800c4b4:	881e      	ldrh	r6, [r3, #0]
 800c4b6:	2f6f      	cmp	r7, #111	; 0x6f
 800c4b8:	bf0c      	ite	eq
 800c4ba:	2308      	moveq	r3, #8
 800c4bc:	230a      	movne	r3, #10
 800c4be:	4852      	ldr	r0, [pc, #328]	; (800c608 <_printf_i+0x244>)
 800c4c0:	2100      	movs	r1, #0
 800c4c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c4c6:	6865      	ldr	r5, [r4, #4]
 800c4c8:	2d00      	cmp	r5, #0
 800c4ca:	bfa8      	it	ge
 800c4cc:	6821      	ldrge	r1, [r4, #0]
 800c4ce:	60a5      	str	r5, [r4, #8]
 800c4d0:	bfa4      	itt	ge
 800c4d2:	f021 0104 	bicge.w	r1, r1, #4
 800c4d6:	6021      	strge	r1, [r4, #0]
 800c4d8:	b90e      	cbnz	r6, 800c4de <_printf_i+0x11a>
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	d04d      	beq.n	800c57a <_printf_i+0x1b6>
 800c4de:	4615      	mov	r5, r2
 800c4e0:	fbb6 f1f3 	udiv	r1, r6, r3
 800c4e4:	fb03 6711 	mls	r7, r3, r1, r6
 800c4e8:	5dc7      	ldrb	r7, [r0, r7]
 800c4ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c4ee:	4637      	mov	r7, r6
 800c4f0:	42bb      	cmp	r3, r7
 800c4f2:	460e      	mov	r6, r1
 800c4f4:	d9f4      	bls.n	800c4e0 <_printf_i+0x11c>
 800c4f6:	2b08      	cmp	r3, #8
 800c4f8:	d10b      	bne.n	800c512 <_printf_i+0x14e>
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	07de      	lsls	r6, r3, #31
 800c4fe:	d508      	bpl.n	800c512 <_printf_i+0x14e>
 800c500:	6923      	ldr	r3, [r4, #16]
 800c502:	6861      	ldr	r1, [r4, #4]
 800c504:	4299      	cmp	r1, r3
 800c506:	bfde      	ittt	le
 800c508:	2330      	movle	r3, #48	; 0x30
 800c50a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c50e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c512:	1b52      	subs	r2, r2, r5
 800c514:	6122      	str	r2, [r4, #16]
 800c516:	464b      	mov	r3, r9
 800c518:	4621      	mov	r1, r4
 800c51a:	4640      	mov	r0, r8
 800c51c:	f8cd a000 	str.w	sl, [sp]
 800c520:	aa03      	add	r2, sp, #12
 800c522:	f7ff fedf 	bl	800c2e4 <_printf_common>
 800c526:	3001      	adds	r0, #1
 800c528:	d14c      	bne.n	800c5c4 <_printf_i+0x200>
 800c52a:	f04f 30ff 	mov.w	r0, #4294967295
 800c52e:	b004      	add	sp, #16
 800c530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c534:	4834      	ldr	r0, [pc, #208]	; (800c608 <_printf_i+0x244>)
 800c536:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c53a:	6829      	ldr	r1, [r5, #0]
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	f851 6b04 	ldr.w	r6, [r1], #4
 800c542:	6029      	str	r1, [r5, #0]
 800c544:	061d      	lsls	r5, r3, #24
 800c546:	d514      	bpl.n	800c572 <_printf_i+0x1ae>
 800c548:	07df      	lsls	r7, r3, #31
 800c54a:	bf44      	itt	mi
 800c54c:	f043 0320 	orrmi.w	r3, r3, #32
 800c550:	6023      	strmi	r3, [r4, #0]
 800c552:	b91e      	cbnz	r6, 800c55c <_printf_i+0x198>
 800c554:	6823      	ldr	r3, [r4, #0]
 800c556:	f023 0320 	bic.w	r3, r3, #32
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	2310      	movs	r3, #16
 800c55e:	e7af      	b.n	800c4c0 <_printf_i+0xfc>
 800c560:	6823      	ldr	r3, [r4, #0]
 800c562:	f043 0320 	orr.w	r3, r3, #32
 800c566:	6023      	str	r3, [r4, #0]
 800c568:	2378      	movs	r3, #120	; 0x78
 800c56a:	4828      	ldr	r0, [pc, #160]	; (800c60c <_printf_i+0x248>)
 800c56c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c570:	e7e3      	b.n	800c53a <_printf_i+0x176>
 800c572:	0659      	lsls	r1, r3, #25
 800c574:	bf48      	it	mi
 800c576:	b2b6      	uxthmi	r6, r6
 800c578:	e7e6      	b.n	800c548 <_printf_i+0x184>
 800c57a:	4615      	mov	r5, r2
 800c57c:	e7bb      	b.n	800c4f6 <_printf_i+0x132>
 800c57e:	682b      	ldr	r3, [r5, #0]
 800c580:	6826      	ldr	r6, [r4, #0]
 800c582:	1d18      	adds	r0, r3, #4
 800c584:	6961      	ldr	r1, [r4, #20]
 800c586:	6028      	str	r0, [r5, #0]
 800c588:	0635      	lsls	r5, r6, #24
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	d501      	bpl.n	800c592 <_printf_i+0x1ce>
 800c58e:	6019      	str	r1, [r3, #0]
 800c590:	e002      	b.n	800c598 <_printf_i+0x1d4>
 800c592:	0670      	lsls	r0, r6, #25
 800c594:	d5fb      	bpl.n	800c58e <_printf_i+0x1ca>
 800c596:	8019      	strh	r1, [r3, #0]
 800c598:	2300      	movs	r3, #0
 800c59a:	4615      	mov	r5, r2
 800c59c:	6123      	str	r3, [r4, #16]
 800c59e:	e7ba      	b.n	800c516 <_printf_i+0x152>
 800c5a0:	682b      	ldr	r3, [r5, #0]
 800c5a2:	2100      	movs	r1, #0
 800c5a4:	1d1a      	adds	r2, r3, #4
 800c5a6:	602a      	str	r2, [r5, #0]
 800c5a8:	681d      	ldr	r5, [r3, #0]
 800c5aa:	6862      	ldr	r2, [r4, #4]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f000 f82f 	bl	800c610 <memchr>
 800c5b2:	b108      	cbz	r0, 800c5b8 <_printf_i+0x1f4>
 800c5b4:	1b40      	subs	r0, r0, r5
 800c5b6:	6060      	str	r0, [r4, #4]
 800c5b8:	6863      	ldr	r3, [r4, #4]
 800c5ba:	6123      	str	r3, [r4, #16]
 800c5bc:	2300      	movs	r3, #0
 800c5be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5c2:	e7a8      	b.n	800c516 <_printf_i+0x152>
 800c5c4:	462a      	mov	r2, r5
 800c5c6:	4649      	mov	r1, r9
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	6923      	ldr	r3, [r4, #16]
 800c5cc:	47d0      	blx	sl
 800c5ce:	3001      	adds	r0, #1
 800c5d0:	d0ab      	beq.n	800c52a <_printf_i+0x166>
 800c5d2:	6823      	ldr	r3, [r4, #0]
 800c5d4:	079b      	lsls	r3, r3, #30
 800c5d6:	d413      	bmi.n	800c600 <_printf_i+0x23c>
 800c5d8:	68e0      	ldr	r0, [r4, #12]
 800c5da:	9b03      	ldr	r3, [sp, #12]
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	bfb8      	it	lt
 800c5e0:	4618      	movlt	r0, r3
 800c5e2:	e7a4      	b.n	800c52e <_printf_i+0x16a>
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	4632      	mov	r2, r6
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	47d0      	blx	sl
 800c5ee:	3001      	adds	r0, #1
 800c5f0:	d09b      	beq.n	800c52a <_printf_i+0x166>
 800c5f2:	3501      	adds	r5, #1
 800c5f4:	68e3      	ldr	r3, [r4, #12]
 800c5f6:	9903      	ldr	r1, [sp, #12]
 800c5f8:	1a5b      	subs	r3, r3, r1
 800c5fa:	42ab      	cmp	r3, r5
 800c5fc:	dcf2      	bgt.n	800c5e4 <_printf_i+0x220>
 800c5fe:	e7eb      	b.n	800c5d8 <_printf_i+0x214>
 800c600:	2500      	movs	r5, #0
 800c602:	f104 0619 	add.w	r6, r4, #25
 800c606:	e7f5      	b.n	800c5f4 <_printf_i+0x230>
 800c608:	0800fc01 	.word	0x0800fc01
 800c60c:	0800fc12 	.word	0x0800fc12

0800c610 <memchr>:
 800c610:	4603      	mov	r3, r0
 800c612:	b510      	push	{r4, lr}
 800c614:	b2c9      	uxtb	r1, r1
 800c616:	4402      	add	r2, r0
 800c618:	4293      	cmp	r3, r2
 800c61a:	4618      	mov	r0, r3
 800c61c:	d101      	bne.n	800c622 <memchr+0x12>
 800c61e:	2000      	movs	r0, #0
 800c620:	e003      	b.n	800c62a <memchr+0x1a>
 800c622:	7804      	ldrb	r4, [r0, #0]
 800c624:	3301      	adds	r3, #1
 800c626:	428c      	cmp	r4, r1
 800c628:	d1f6      	bne.n	800c618 <memchr+0x8>
 800c62a:	bd10      	pop	{r4, pc}

0800c62c <memcpy>:
 800c62c:	440a      	add	r2, r1
 800c62e:	4291      	cmp	r1, r2
 800c630:	f100 33ff 	add.w	r3, r0, #4294967295
 800c634:	d100      	bne.n	800c638 <memcpy+0xc>
 800c636:	4770      	bx	lr
 800c638:	b510      	push	{r4, lr}
 800c63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63e:	4291      	cmp	r1, r2
 800c640:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c644:	d1f9      	bne.n	800c63a <memcpy+0xe>
 800c646:	bd10      	pop	{r4, pc}

0800c648 <memmove>:
 800c648:	4288      	cmp	r0, r1
 800c64a:	b510      	push	{r4, lr}
 800c64c:	eb01 0402 	add.w	r4, r1, r2
 800c650:	d902      	bls.n	800c658 <memmove+0x10>
 800c652:	4284      	cmp	r4, r0
 800c654:	4623      	mov	r3, r4
 800c656:	d807      	bhi.n	800c668 <memmove+0x20>
 800c658:	1e43      	subs	r3, r0, #1
 800c65a:	42a1      	cmp	r1, r4
 800c65c:	d008      	beq.n	800c670 <memmove+0x28>
 800c65e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c662:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c666:	e7f8      	b.n	800c65a <memmove+0x12>
 800c668:	4601      	mov	r1, r0
 800c66a:	4402      	add	r2, r0
 800c66c:	428a      	cmp	r2, r1
 800c66e:	d100      	bne.n	800c672 <memmove+0x2a>
 800c670:	bd10      	pop	{r4, pc}
 800c672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c67a:	e7f7      	b.n	800c66c <memmove+0x24>

0800c67c <_free_r>:
 800c67c:	b538      	push	{r3, r4, r5, lr}
 800c67e:	4605      	mov	r5, r0
 800c680:	2900      	cmp	r1, #0
 800c682:	d040      	beq.n	800c706 <_free_r+0x8a>
 800c684:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c688:	1f0c      	subs	r4, r1, #4
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	bfb8      	it	lt
 800c68e:	18e4      	addlt	r4, r4, r3
 800c690:	f000 f910 	bl	800c8b4 <__malloc_lock>
 800c694:	4a1c      	ldr	r2, [pc, #112]	; (800c708 <_free_r+0x8c>)
 800c696:	6813      	ldr	r3, [r2, #0]
 800c698:	b933      	cbnz	r3, 800c6a8 <_free_r+0x2c>
 800c69a:	6063      	str	r3, [r4, #4]
 800c69c:	6014      	str	r4, [r2, #0]
 800c69e:	4628      	mov	r0, r5
 800c6a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6a4:	f000 b90c 	b.w	800c8c0 <__malloc_unlock>
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d908      	bls.n	800c6be <_free_r+0x42>
 800c6ac:	6820      	ldr	r0, [r4, #0]
 800c6ae:	1821      	adds	r1, r4, r0
 800c6b0:	428b      	cmp	r3, r1
 800c6b2:	bf01      	itttt	eq
 800c6b4:	6819      	ldreq	r1, [r3, #0]
 800c6b6:	685b      	ldreq	r3, [r3, #4]
 800c6b8:	1809      	addeq	r1, r1, r0
 800c6ba:	6021      	streq	r1, [r4, #0]
 800c6bc:	e7ed      	b.n	800c69a <_free_r+0x1e>
 800c6be:	461a      	mov	r2, r3
 800c6c0:	685b      	ldr	r3, [r3, #4]
 800c6c2:	b10b      	cbz	r3, 800c6c8 <_free_r+0x4c>
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d9fa      	bls.n	800c6be <_free_r+0x42>
 800c6c8:	6811      	ldr	r1, [r2, #0]
 800c6ca:	1850      	adds	r0, r2, r1
 800c6cc:	42a0      	cmp	r0, r4
 800c6ce:	d10b      	bne.n	800c6e8 <_free_r+0x6c>
 800c6d0:	6820      	ldr	r0, [r4, #0]
 800c6d2:	4401      	add	r1, r0
 800c6d4:	1850      	adds	r0, r2, r1
 800c6d6:	4283      	cmp	r3, r0
 800c6d8:	6011      	str	r1, [r2, #0]
 800c6da:	d1e0      	bne.n	800c69e <_free_r+0x22>
 800c6dc:	6818      	ldr	r0, [r3, #0]
 800c6de:	685b      	ldr	r3, [r3, #4]
 800c6e0:	4401      	add	r1, r0
 800c6e2:	6011      	str	r1, [r2, #0]
 800c6e4:	6053      	str	r3, [r2, #4]
 800c6e6:	e7da      	b.n	800c69e <_free_r+0x22>
 800c6e8:	d902      	bls.n	800c6f0 <_free_r+0x74>
 800c6ea:	230c      	movs	r3, #12
 800c6ec:	602b      	str	r3, [r5, #0]
 800c6ee:	e7d6      	b.n	800c69e <_free_r+0x22>
 800c6f0:	6820      	ldr	r0, [r4, #0]
 800c6f2:	1821      	adds	r1, r4, r0
 800c6f4:	428b      	cmp	r3, r1
 800c6f6:	bf01      	itttt	eq
 800c6f8:	6819      	ldreq	r1, [r3, #0]
 800c6fa:	685b      	ldreq	r3, [r3, #4]
 800c6fc:	1809      	addeq	r1, r1, r0
 800c6fe:	6021      	streq	r1, [r4, #0]
 800c700:	6063      	str	r3, [r4, #4]
 800c702:	6054      	str	r4, [r2, #4]
 800c704:	e7cb      	b.n	800c69e <_free_r+0x22>
 800c706:	bd38      	pop	{r3, r4, r5, pc}
 800c708:	20000c48 	.word	0x20000c48

0800c70c <sbrk_aligned>:
 800c70c:	b570      	push	{r4, r5, r6, lr}
 800c70e:	4e0e      	ldr	r6, [pc, #56]	; (800c748 <sbrk_aligned+0x3c>)
 800c710:	460c      	mov	r4, r1
 800c712:	6831      	ldr	r1, [r6, #0]
 800c714:	4605      	mov	r5, r0
 800c716:	b911      	cbnz	r1, 800c71e <sbrk_aligned+0x12>
 800c718:	f000 f8bc 	bl	800c894 <_sbrk_r>
 800c71c:	6030      	str	r0, [r6, #0]
 800c71e:	4621      	mov	r1, r4
 800c720:	4628      	mov	r0, r5
 800c722:	f000 f8b7 	bl	800c894 <_sbrk_r>
 800c726:	1c43      	adds	r3, r0, #1
 800c728:	d00a      	beq.n	800c740 <sbrk_aligned+0x34>
 800c72a:	1cc4      	adds	r4, r0, #3
 800c72c:	f024 0403 	bic.w	r4, r4, #3
 800c730:	42a0      	cmp	r0, r4
 800c732:	d007      	beq.n	800c744 <sbrk_aligned+0x38>
 800c734:	1a21      	subs	r1, r4, r0
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f8ac 	bl	800c894 <_sbrk_r>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d101      	bne.n	800c744 <sbrk_aligned+0x38>
 800c740:	f04f 34ff 	mov.w	r4, #4294967295
 800c744:	4620      	mov	r0, r4
 800c746:	bd70      	pop	{r4, r5, r6, pc}
 800c748:	20000c4c 	.word	0x20000c4c

0800c74c <_malloc_r>:
 800c74c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c750:	1ccd      	adds	r5, r1, #3
 800c752:	f025 0503 	bic.w	r5, r5, #3
 800c756:	3508      	adds	r5, #8
 800c758:	2d0c      	cmp	r5, #12
 800c75a:	bf38      	it	cc
 800c75c:	250c      	movcc	r5, #12
 800c75e:	2d00      	cmp	r5, #0
 800c760:	4607      	mov	r7, r0
 800c762:	db01      	blt.n	800c768 <_malloc_r+0x1c>
 800c764:	42a9      	cmp	r1, r5
 800c766:	d905      	bls.n	800c774 <_malloc_r+0x28>
 800c768:	230c      	movs	r3, #12
 800c76a:	2600      	movs	r6, #0
 800c76c:	603b      	str	r3, [r7, #0]
 800c76e:	4630      	mov	r0, r6
 800c770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c774:	4e2e      	ldr	r6, [pc, #184]	; (800c830 <_malloc_r+0xe4>)
 800c776:	f000 f89d 	bl	800c8b4 <__malloc_lock>
 800c77a:	6833      	ldr	r3, [r6, #0]
 800c77c:	461c      	mov	r4, r3
 800c77e:	bb34      	cbnz	r4, 800c7ce <_malloc_r+0x82>
 800c780:	4629      	mov	r1, r5
 800c782:	4638      	mov	r0, r7
 800c784:	f7ff ffc2 	bl	800c70c <sbrk_aligned>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	4604      	mov	r4, r0
 800c78c:	d14d      	bne.n	800c82a <_malloc_r+0xde>
 800c78e:	6834      	ldr	r4, [r6, #0]
 800c790:	4626      	mov	r6, r4
 800c792:	2e00      	cmp	r6, #0
 800c794:	d140      	bne.n	800c818 <_malloc_r+0xcc>
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	4631      	mov	r1, r6
 800c79a:	4638      	mov	r0, r7
 800c79c:	eb04 0803 	add.w	r8, r4, r3
 800c7a0:	f000 f878 	bl	800c894 <_sbrk_r>
 800c7a4:	4580      	cmp	r8, r0
 800c7a6:	d13a      	bne.n	800c81e <_malloc_r+0xd2>
 800c7a8:	6821      	ldr	r1, [r4, #0]
 800c7aa:	3503      	adds	r5, #3
 800c7ac:	1a6d      	subs	r5, r5, r1
 800c7ae:	f025 0503 	bic.w	r5, r5, #3
 800c7b2:	3508      	adds	r5, #8
 800c7b4:	2d0c      	cmp	r5, #12
 800c7b6:	bf38      	it	cc
 800c7b8:	250c      	movcc	r5, #12
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	4629      	mov	r1, r5
 800c7be:	f7ff ffa5 	bl	800c70c <sbrk_aligned>
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	d02b      	beq.n	800c81e <_malloc_r+0xd2>
 800c7c6:	6823      	ldr	r3, [r4, #0]
 800c7c8:	442b      	add	r3, r5
 800c7ca:	6023      	str	r3, [r4, #0]
 800c7cc:	e00e      	b.n	800c7ec <_malloc_r+0xa0>
 800c7ce:	6822      	ldr	r2, [r4, #0]
 800c7d0:	1b52      	subs	r2, r2, r5
 800c7d2:	d41e      	bmi.n	800c812 <_malloc_r+0xc6>
 800c7d4:	2a0b      	cmp	r2, #11
 800c7d6:	d916      	bls.n	800c806 <_malloc_r+0xba>
 800c7d8:	1961      	adds	r1, r4, r5
 800c7da:	42a3      	cmp	r3, r4
 800c7dc:	6025      	str	r5, [r4, #0]
 800c7de:	bf18      	it	ne
 800c7e0:	6059      	strne	r1, [r3, #4]
 800c7e2:	6863      	ldr	r3, [r4, #4]
 800c7e4:	bf08      	it	eq
 800c7e6:	6031      	streq	r1, [r6, #0]
 800c7e8:	5162      	str	r2, [r4, r5]
 800c7ea:	604b      	str	r3, [r1, #4]
 800c7ec:	4638      	mov	r0, r7
 800c7ee:	f104 060b 	add.w	r6, r4, #11
 800c7f2:	f000 f865 	bl	800c8c0 <__malloc_unlock>
 800c7f6:	f026 0607 	bic.w	r6, r6, #7
 800c7fa:	1d23      	adds	r3, r4, #4
 800c7fc:	1af2      	subs	r2, r6, r3
 800c7fe:	d0b6      	beq.n	800c76e <_malloc_r+0x22>
 800c800:	1b9b      	subs	r3, r3, r6
 800c802:	50a3      	str	r3, [r4, r2]
 800c804:	e7b3      	b.n	800c76e <_malloc_r+0x22>
 800c806:	6862      	ldr	r2, [r4, #4]
 800c808:	42a3      	cmp	r3, r4
 800c80a:	bf0c      	ite	eq
 800c80c:	6032      	streq	r2, [r6, #0]
 800c80e:	605a      	strne	r2, [r3, #4]
 800c810:	e7ec      	b.n	800c7ec <_malloc_r+0xa0>
 800c812:	4623      	mov	r3, r4
 800c814:	6864      	ldr	r4, [r4, #4]
 800c816:	e7b2      	b.n	800c77e <_malloc_r+0x32>
 800c818:	4634      	mov	r4, r6
 800c81a:	6876      	ldr	r6, [r6, #4]
 800c81c:	e7b9      	b.n	800c792 <_malloc_r+0x46>
 800c81e:	230c      	movs	r3, #12
 800c820:	4638      	mov	r0, r7
 800c822:	603b      	str	r3, [r7, #0]
 800c824:	f000 f84c 	bl	800c8c0 <__malloc_unlock>
 800c828:	e7a1      	b.n	800c76e <_malloc_r+0x22>
 800c82a:	6025      	str	r5, [r4, #0]
 800c82c:	e7de      	b.n	800c7ec <_malloc_r+0xa0>
 800c82e:	bf00      	nop
 800c830:	20000c48 	.word	0x20000c48

0800c834 <_realloc_r>:
 800c834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c838:	4680      	mov	r8, r0
 800c83a:	4614      	mov	r4, r2
 800c83c:	460e      	mov	r6, r1
 800c83e:	b921      	cbnz	r1, 800c84a <_realloc_r+0x16>
 800c840:	4611      	mov	r1, r2
 800c842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c846:	f7ff bf81 	b.w	800c74c <_malloc_r>
 800c84a:	b92a      	cbnz	r2, 800c858 <_realloc_r+0x24>
 800c84c:	f7ff ff16 	bl	800c67c <_free_r>
 800c850:	4625      	mov	r5, r4
 800c852:	4628      	mov	r0, r5
 800c854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c858:	f000 f838 	bl	800c8cc <_malloc_usable_size_r>
 800c85c:	4284      	cmp	r4, r0
 800c85e:	4607      	mov	r7, r0
 800c860:	d802      	bhi.n	800c868 <_realloc_r+0x34>
 800c862:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c866:	d812      	bhi.n	800c88e <_realloc_r+0x5a>
 800c868:	4621      	mov	r1, r4
 800c86a:	4640      	mov	r0, r8
 800c86c:	f7ff ff6e 	bl	800c74c <_malloc_r>
 800c870:	4605      	mov	r5, r0
 800c872:	2800      	cmp	r0, #0
 800c874:	d0ed      	beq.n	800c852 <_realloc_r+0x1e>
 800c876:	42bc      	cmp	r4, r7
 800c878:	4622      	mov	r2, r4
 800c87a:	4631      	mov	r1, r6
 800c87c:	bf28      	it	cs
 800c87e:	463a      	movcs	r2, r7
 800c880:	f7ff fed4 	bl	800c62c <memcpy>
 800c884:	4631      	mov	r1, r6
 800c886:	4640      	mov	r0, r8
 800c888:	f7ff fef8 	bl	800c67c <_free_r>
 800c88c:	e7e1      	b.n	800c852 <_realloc_r+0x1e>
 800c88e:	4635      	mov	r5, r6
 800c890:	e7df      	b.n	800c852 <_realloc_r+0x1e>
	...

0800c894 <_sbrk_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	2300      	movs	r3, #0
 800c898:	4d05      	ldr	r5, [pc, #20]	; (800c8b0 <_sbrk_r+0x1c>)
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	602b      	str	r3, [r5, #0]
 800c8a0:	f7f6 fe7c 	bl	800359c <_sbrk>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_sbrk_r+0x1a>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_sbrk_r+0x1a>
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	20000c50 	.word	0x20000c50

0800c8b4 <__malloc_lock>:
 800c8b4:	4801      	ldr	r0, [pc, #4]	; (800c8bc <__malloc_lock+0x8>)
 800c8b6:	f000 b811 	b.w	800c8dc <__retarget_lock_acquire_recursive>
 800c8ba:	bf00      	nop
 800c8bc:	20000c54 	.word	0x20000c54

0800c8c0 <__malloc_unlock>:
 800c8c0:	4801      	ldr	r0, [pc, #4]	; (800c8c8 <__malloc_unlock+0x8>)
 800c8c2:	f000 b80c 	b.w	800c8de <__retarget_lock_release_recursive>
 800c8c6:	bf00      	nop
 800c8c8:	20000c54 	.word	0x20000c54

0800c8cc <_malloc_usable_size_r>:
 800c8cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8d0:	1f18      	subs	r0, r3, #4
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	bfbc      	itt	lt
 800c8d6:	580b      	ldrlt	r3, [r1, r0]
 800c8d8:	18c0      	addlt	r0, r0, r3
 800c8da:	4770      	bx	lr

0800c8dc <__retarget_lock_acquire_recursive>:
 800c8dc:	4770      	bx	lr

0800c8de <__retarget_lock_release_recursive>:
 800c8de:	4770      	bx	lr

0800c8e0 <log>:
 800c8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8e2:	4604      	mov	r4, r0
 800c8e4:	460d      	mov	r5, r1
 800c8e6:	f000 f853 	bl	800c990 <__ieee754_log>
 800c8ea:	4622      	mov	r2, r4
 800c8ec:	4606      	mov	r6, r0
 800c8ee:	460f      	mov	r7, r1
 800c8f0:	462b      	mov	r3, r5
 800c8f2:	4620      	mov	r0, r4
 800c8f4:	4629      	mov	r1, r5
 800c8f6:	f7f4 f881 	bl	80009fc <__aeabi_dcmpun>
 800c8fa:	b998      	cbnz	r0, 800c924 <log+0x44>
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	2300      	movs	r3, #0
 800c900:	4620      	mov	r0, r4
 800c902:	4629      	mov	r1, r5
 800c904:	f7f4 f870 	bl	80009e8 <__aeabi_dcmpgt>
 800c908:	b960      	cbnz	r0, 800c924 <log+0x44>
 800c90a:	2200      	movs	r2, #0
 800c90c:	2300      	movs	r3, #0
 800c90e:	4620      	mov	r0, r4
 800c910:	4629      	mov	r1, r5
 800c912:	f7f4 f841 	bl	8000998 <__aeabi_dcmpeq>
 800c916:	b140      	cbz	r0, 800c92a <log+0x4a>
 800c918:	f7ff fb36 	bl	800bf88 <__errno>
 800c91c:	2322      	movs	r3, #34	; 0x22
 800c91e:	2600      	movs	r6, #0
 800c920:	4f06      	ldr	r7, [pc, #24]	; (800c93c <log+0x5c>)
 800c922:	6003      	str	r3, [r0, #0]
 800c924:	4630      	mov	r0, r6
 800c926:	4639      	mov	r1, r7
 800c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c92a:	f7ff fb2d 	bl	800bf88 <__errno>
 800c92e:	2321      	movs	r3, #33	; 0x21
 800c930:	6003      	str	r3, [r0, #0]
 800c932:	4803      	ldr	r0, [pc, #12]	; (800c940 <log+0x60>)
 800c934:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c938:	f000 ba8c 	b.w	800ce54 <nan>
 800c93c:	fff00000 	.word	0xfff00000
 800c940:	0800fbf5 	.word	0x0800fbf5

0800c944 <sqrt>:
 800c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c946:	4606      	mov	r6, r0
 800c948:	460f      	mov	r7, r1
 800c94a:	f000 f9d3 	bl	800ccf4 <__ieee754_sqrt>
 800c94e:	4632      	mov	r2, r6
 800c950:	4604      	mov	r4, r0
 800c952:	460d      	mov	r5, r1
 800c954:	463b      	mov	r3, r7
 800c956:	4630      	mov	r0, r6
 800c958:	4639      	mov	r1, r7
 800c95a:	f7f4 f84f 	bl	80009fc <__aeabi_dcmpun>
 800c95e:	b990      	cbnz	r0, 800c986 <sqrt+0x42>
 800c960:	2200      	movs	r2, #0
 800c962:	2300      	movs	r3, #0
 800c964:	4630      	mov	r0, r6
 800c966:	4639      	mov	r1, r7
 800c968:	f7f4 f820 	bl	80009ac <__aeabi_dcmplt>
 800c96c:	b158      	cbz	r0, 800c986 <sqrt+0x42>
 800c96e:	f7ff fb0b 	bl	800bf88 <__errno>
 800c972:	2321      	movs	r3, #33	; 0x21
 800c974:	2200      	movs	r2, #0
 800c976:	6003      	str	r3, [r0, #0]
 800c978:	2300      	movs	r3, #0
 800c97a:	4610      	mov	r0, r2
 800c97c:	4619      	mov	r1, r3
 800c97e:	f7f3 fecd 	bl	800071c <__aeabi_ddiv>
 800c982:	4604      	mov	r4, r0
 800c984:	460d      	mov	r5, r1
 800c986:	4620      	mov	r0, r4
 800c988:	4629      	mov	r1, r5
 800c98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c98c:	0000      	movs	r0, r0
	...

0800c990 <__ieee754_log>:
 800c990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c994:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c998:	4602      	mov	r2, r0
 800c99a:	460b      	mov	r3, r1
 800c99c:	460d      	mov	r5, r1
 800c99e:	b087      	sub	sp, #28
 800c9a0:	da24      	bge.n	800c9ec <__ieee754_log+0x5c>
 800c9a2:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c9a6:	4304      	orrs	r4, r0
 800c9a8:	d108      	bne.n	800c9bc <__ieee754_log+0x2c>
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	2000      	movs	r0, #0
 800c9b0:	49cb      	ldr	r1, [pc, #812]	; (800cce0 <__ieee754_log+0x350>)
 800c9b2:	f7f3 feb3 	bl	800071c <__aeabi_ddiv>
 800c9b6:	b007      	add	sp, #28
 800c9b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9bc:	2900      	cmp	r1, #0
 800c9be:	da04      	bge.n	800c9ca <__ieee754_log+0x3a>
 800c9c0:	f7f3 fbca 	bl	8000158 <__aeabi_dsub>
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	e7f3      	b.n	800c9b2 <__ieee754_log+0x22>
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	4bc5      	ldr	r3, [pc, #788]	; (800cce4 <__ieee754_log+0x354>)
 800c9ce:	f7f3 fd7b 	bl	80004c8 <__aeabi_dmul>
 800c9d2:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	460b      	mov	r3, r1
 800c9da:	460d      	mov	r5, r1
 800c9dc:	49c2      	ldr	r1, [pc, #776]	; (800cce8 <__ieee754_log+0x358>)
 800c9de:	428d      	cmp	r5, r1
 800c9e0:	dd06      	ble.n	800c9f0 <__ieee754_log+0x60>
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	f7f3 fbb9 	bl	800015c <__adddf3>
 800c9ea:	e7e4      	b.n	800c9b6 <__ieee754_log+0x26>
 800c9ec:	2600      	movs	r6, #0
 800c9ee:	e7f5      	b.n	800c9dc <__ieee754_log+0x4c>
 800c9f0:	152c      	asrs	r4, r5, #20
 800c9f2:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800c9f6:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800c9fa:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800c9fe:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800ca02:	4426      	add	r6, r4
 800ca04:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800ca08:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800ca0c:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800ca10:	ea41 0305 	orr.w	r3, r1, r5
 800ca14:	4610      	mov	r0, r2
 800ca16:	4619      	mov	r1, r3
 800ca18:	2200      	movs	r2, #0
 800ca1a:	4bb4      	ldr	r3, [pc, #720]	; (800ccec <__ieee754_log+0x35c>)
 800ca1c:	f7f3 fb9c 	bl	8000158 <__aeabi_dsub>
 800ca20:	1cab      	adds	r3, r5, #2
 800ca22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	4682      	mov	sl, r0
 800ca2a:	468b      	mov	fp, r1
 800ca2c:	f04f 0200 	mov.w	r2, #0
 800ca30:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800ca34:	dc53      	bgt.n	800cade <__ieee754_log+0x14e>
 800ca36:	2300      	movs	r3, #0
 800ca38:	f7f3 ffae 	bl	8000998 <__aeabi_dcmpeq>
 800ca3c:	b1d0      	cbz	r0, 800ca74 <__ieee754_log+0xe4>
 800ca3e:	2c00      	cmp	r4, #0
 800ca40:	f000 8122 	beq.w	800cc88 <__ieee754_log+0x2f8>
 800ca44:	4620      	mov	r0, r4
 800ca46:	f7f3 fcd5 	bl	80003f4 <__aeabi_i2d>
 800ca4a:	a391      	add	r3, pc, #580	; (adr r3, 800cc90 <__ieee754_log+0x300>)
 800ca4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca50:	4606      	mov	r6, r0
 800ca52:	460f      	mov	r7, r1
 800ca54:	f7f3 fd38 	bl	80004c8 <__aeabi_dmul>
 800ca58:	a38f      	add	r3, pc, #572	; (adr r3, 800cc98 <__ieee754_log+0x308>)
 800ca5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca5e:	4604      	mov	r4, r0
 800ca60:	460d      	mov	r5, r1
 800ca62:	4630      	mov	r0, r6
 800ca64:	4639      	mov	r1, r7
 800ca66:	f7f3 fd2f 	bl	80004c8 <__aeabi_dmul>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	460b      	mov	r3, r1
 800ca6e:	4620      	mov	r0, r4
 800ca70:	4629      	mov	r1, r5
 800ca72:	e7b8      	b.n	800c9e6 <__ieee754_log+0x56>
 800ca74:	a38a      	add	r3, pc, #552	; (adr r3, 800cca0 <__ieee754_log+0x310>)
 800ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7a:	4650      	mov	r0, sl
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	f7f3 fd23 	bl	80004c8 <__aeabi_dmul>
 800ca82:	4602      	mov	r2, r0
 800ca84:	460b      	mov	r3, r1
 800ca86:	2000      	movs	r0, #0
 800ca88:	4999      	ldr	r1, [pc, #612]	; (800ccf0 <__ieee754_log+0x360>)
 800ca8a:	f7f3 fb65 	bl	8000158 <__aeabi_dsub>
 800ca8e:	4652      	mov	r2, sl
 800ca90:	4606      	mov	r6, r0
 800ca92:	460f      	mov	r7, r1
 800ca94:	465b      	mov	r3, fp
 800ca96:	4650      	mov	r0, sl
 800ca98:	4659      	mov	r1, fp
 800ca9a:	f7f3 fd15 	bl	80004c8 <__aeabi_dmul>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	460b      	mov	r3, r1
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fd0f 	bl	80004c8 <__aeabi_dmul>
 800caaa:	4606      	mov	r6, r0
 800caac:	460f      	mov	r7, r1
 800caae:	b914      	cbnz	r4, 800cab6 <__ieee754_log+0x126>
 800cab0:	4632      	mov	r2, r6
 800cab2:	463b      	mov	r3, r7
 800cab4:	e0a2      	b.n	800cbfc <__ieee754_log+0x26c>
 800cab6:	4620      	mov	r0, r4
 800cab8:	f7f3 fc9c 	bl	80003f4 <__aeabi_i2d>
 800cabc:	a374      	add	r3, pc, #464	; (adr r3, 800cc90 <__ieee754_log+0x300>)
 800cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cac2:	4680      	mov	r8, r0
 800cac4:	4689      	mov	r9, r1
 800cac6:	f7f3 fcff 	bl	80004c8 <__aeabi_dmul>
 800caca:	a373      	add	r3, pc, #460	; (adr r3, 800cc98 <__ieee754_log+0x308>)
 800cacc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad0:	4604      	mov	r4, r0
 800cad2:	460d      	mov	r5, r1
 800cad4:	4640      	mov	r0, r8
 800cad6:	4649      	mov	r1, r9
 800cad8:	f7f3 fcf6 	bl	80004c8 <__aeabi_dmul>
 800cadc:	e0a7      	b.n	800cc2e <__ieee754_log+0x29e>
 800cade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cae2:	f7f3 fb3b 	bl	800015c <__adddf3>
 800cae6:	4602      	mov	r2, r0
 800cae8:	460b      	mov	r3, r1
 800caea:	4650      	mov	r0, sl
 800caec:	4659      	mov	r1, fp
 800caee:	f7f3 fe15 	bl	800071c <__aeabi_ddiv>
 800caf2:	e9cd 0100 	strd	r0, r1, [sp]
 800caf6:	4620      	mov	r0, r4
 800caf8:	f7f3 fc7c 	bl	80003f4 <__aeabi_i2d>
 800cafc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb04:	4610      	mov	r0, r2
 800cb06:	4619      	mov	r1, r3
 800cb08:	f7f3 fcde 	bl	80004c8 <__aeabi_dmul>
 800cb0c:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cb10:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cb14:	4602      	mov	r2, r0
 800cb16:	9305      	str	r3, [sp, #20]
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4606      	mov	r6, r0
 800cb1c:	460f      	mov	r7, r1
 800cb1e:	f7f3 fcd3 	bl	80004c8 <__aeabi_dmul>
 800cb22:	a361      	add	r3, pc, #388	; (adr r3, 800cca8 <__ieee754_log+0x318>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	4680      	mov	r8, r0
 800cb2a:	4689      	mov	r9, r1
 800cb2c:	f7f3 fccc 	bl	80004c8 <__aeabi_dmul>
 800cb30:	a35f      	add	r3, pc, #380	; (adr r3, 800ccb0 <__ieee754_log+0x320>)
 800cb32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb36:	f7f3 fb11 	bl	800015c <__adddf3>
 800cb3a:	4642      	mov	r2, r8
 800cb3c:	464b      	mov	r3, r9
 800cb3e:	f7f3 fcc3 	bl	80004c8 <__aeabi_dmul>
 800cb42:	a35d      	add	r3, pc, #372	; (adr r3, 800ccb8 <__ieee754_log+0x328>)
 800cb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb48:	f7f3 fb08 	bl	800015c <__adddf3>
 800cb4c:	4642      	mov	r2, r8
 800cb4e:	464b      	mov	r3, r9
 800cb50:	f7f3 fcba 	bl	80004c8 <__aeabi_dmul>
 800cb54:	a35a      	add	r3, pc, #360	; (adr r3, 800ccc0 <__ieee754_log+0x330>)
 800cb56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5a:	f7f3 faff 	bl	800015c <__adddf3>
 800cb5e:	4632      	mov	r2, r6
 800cb60:	463b      	mov	r3, r7
 800cb62:	f7f3 fcb1 	bl	80004c8 <__aeabi_dmul>
 800cb66:	a358      	add	r3, pc, #352	; (adr r3, 800ccc8 <__ieee754_log+0x338>)
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	4606      	mov	r6, r0
 800cb6e:	460f      	mov	r7, r1
 800cb70:	4640      	mov	r0, r8
 800cb72:	4649      	mov	r1, r9
 800cb74:	f7f3 fca8 	bl	80004c8 <__aeabi_dmul>
 800cb78:	a355      	add	r3, pc, #340	; (adr r3, 800ccd0 <__ieee754_log+0x340>)
 800cb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7e:	f7f3 faed 	bl	800015c <__adddf3>
 800cb82:	4642      	mov	r2, r8
 800cb84:	464b      	mov	r3, r9
 800cb86:	f7f3 fc9f 	bl	80004c8 <__aeabi_dmul>
 800cb8a:	a353      	add	r3, pc, #332	; (adr r3, 800ccd8 <__ieee754_log+0x348>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 fae4 	bl	800015c <__adddf3>
 800cb94:	4642      	mov	r2, r8
 800cb96:	464b      	mov	r3, r9
 800cb98:	f7f3 fc96 	bl	80004c8 <__aeabi_dmul>
 800cb9c:	460b      	mov	r3, r1
 800cb9e:	4602      	mov	r2, r0
 800cba0:	4639      	mov	r1, r7
 800cba2:	4630      	mov	r0, r6
 800cba4:	f7f3 fada 	bl	800015c <__adddf3>
 800cba8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cbac:	9b05      	ldr	r3, [sp, #20]
 800cbae:	3551      	adds	r5, #81	; 0x51
 800cbb0:	431d      	orrs	r5, r3
 800cbb2:	2d00      	cmp	r5, #0
 800cbb4:	4680      	mov	r8, r0
 800cbb6:	4689      	mov	r9, r1
 800cbb8:	dd48      	ble.n	800cc4c <__ieee754_log+0x2bc>
 800cbba:	2200      	movs	r2, #0
 800cbbc:	4b4c      	ldr	r3, [pc, #304]	; (800ccf0 <__ieee754_log+0x360>)
 800cbbe:	4650      	mov	r0, sl
 800cbc0:	4659      	mov	r1, fp
 800cbc2:	f7f3 fc81 	bl	80004c8 <__aeabi_dmul>
 800cbc6:	4652      	mov	r2, sl
 800cbc8:	465b      	mov	r3, fp
 800cbca:	f7f3 fc7d 	bl	80004c8 <__aeabi_dmul>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	460f      	mov	r7, r1
 800cbd6:	4640      	mov	r0, r8
 800cbd8:	4649      	mov	r1, r9
 800cbda:	f7f3 fabf 	bl	800015c <__adddf3>
 800cbde:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cbe2:	f7f3 fc71 	bl	80004c8 <__aeabi_dmul>
 800cbe6:	4680      	mov	r8, r0
 800cbe8:	4689      	mov	r9, r1
 800cbea:	b964      	cbnz	r4, 800cc06 <__ieee754_log+0x276>
 800cbec:	4602      	mov	r2, r0
 800cbee:	460b      	mov	r3, r1
 800cbf0:	4630      	mov	r0, r6
 800cbf2:	4639      	mov	r1, r7
 800cbf4:	f7f3 fab0 	bl	8000158 <__aeabi_dsub>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4650      	mov	r0, sl
 800cbfe:	4659      	mov	r1, fp
 800cc00:	f7f3 faaa 	bl	8000158 <__aeabi_dsub>
 800cc04:	e6d7      	b.n	800c9b6 <__ieee754_log+0x26>
 800cc06:	a322      	add	r3, pc, #136	; (adr r3, 800cc90 <__ieee754_log+0x300>)
 800cc08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc10:	f7f3 fc5a 	bl	80004c8 <__aeabi_dmul>
 800cc14:	a320      	add	r3, pc, #128	; (adr r3, 800cc98 <__ieee754_log+0x308>)
 800cc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	460d      	mov	r5, r1
 800cc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc22:	f7f3 fc51 	bl	80004c8 <__aeabi_dmul>
 800cc26:	4642      	mov	r2, r8
 800cc28:	464b      	mov	r3, r9
 800cc2a:	f7f3 fa97 	bl	800015c <__adddf3>
 800cc2e:	4602      	mov	r2, r0
 800cc30:	460b      	mov	r3, r1
 800cc32:	4630      	mov	r0, r6
 800cc34:	4639      	mov	r1, r7
 800cc36:	f7f3 fa8f 	bl	8000158 <__aeabi_dsub>
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	465b      	mov	r3, fp
 800cc3e:	f7f3 fa8b 	bl	8000158 <__aeabi_dsub>
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	4620      	mov	r0, r4
 800cc48:	4629      	mov	r1, r5
 800cc4a:	e7d9      	b.n	800cc00 <__ieee754_log+0x270>
 800cc4c:	4602      	mov	r2, r0
 800cc4e:	460b      	mov	r3, r1
 800cc50:	4650      	mov	r0, sl
 800cc52:	4659      	mov	r1, fp
 800cc54:	f7f3 fa80 	bl	8000158 <__aeabi_dsub>
 800cc58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc5c:	f7f3 fc34 	bl	80004c8 <__aeabi_dmul>
 800cc60:	4606      	mov	r6, r0
 800cc62:	460f      	mov	r7, r1
 800cc64:	2c00      	cmp	r4, #0
 800cc66:	f43f af23 	beq.w	800cab0 <__ieee754_log+0x120>
 800cc6a:	a309      	add	r3, pc, #36	; (adr r3, 800cc90 <__ieee754_log+0x300>)
 800cc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc74:	f7f3 fc28 	bl	80004c8 <__aeabi_dmul>
 800cc78:	a307      	add	r3, pc, #28	; (adr r3, 800cc98 <__ieee754_log+0x308>)
 800cc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7e:	4604      	mov	r4, r0
 800cc80:	460d      	mov	r5, r1
 800cc82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc86:	e727      	b.n	800cad8 <__ieee754_log+0x148>
 800cc88:	2000      	movs	r0, #0
 800cc8a:	2100      	movs	r1, #0
 800cc8c:	e693      	b.n	800c9b6 <__ieee754_log+0x26>
 800cc8e:	bf00      	nop
 800cc90:	fee00000 	.word	0xfee00000
 800cc94:	3fe62e42 	.word	0x3fe62e42
 800cc98:	35793c76 	.word	0x35793c76
 800cc9c:	3dea39ef 	.word	0x3dea39ef
 800cca0:	55555555 	.word	0x55555555
 800cca4:	3fd55555 	.word	0x3fd55555
 800cca8:	df3e5244 	.word	0xdf3e5244
 800ccac:	3fc2f112 	.word	0x3fc2f112
 800ccb0:	96cb03de 	.word	0x96cb03de
 800ccb4:	3fc74664 	.word	0x3fc74664
 800ccb8:	94229359 	.word	0x94229359
 800ccbc:	3fd24924 	.word	0x3fd24924
 800ccc0:	55555593 	.word	0x55555593
 800ccc4:	3fe55555 	.word	0x3fe55555
 800ccc8:	d078c69f 	.word	0xd078c69f
 800cccc:	3fc39a09 	.word	0x3fc39a09
 800ccd0:	1d8e78af 	.word	0x1d8e78af
 800ccd4:	3fcc71c5 	.word	0x3fcc71c5
 800ccd8:	9997fa04 	.word	0x9997fa04
 800ccdc:	3fd99999 	.word	0x3fd99999
 800cce0:	c3500000 	.word	0xc3500000
 800cce4:	43500000 	.word	0x43500000
 800cce8:	7fefffff 	.word	0x7fefffff
 800ccec:	3ff00000 	.word	0x3ff00000
 800ccf0:	3fe00000 	.word	0x3fe00000

0800ccf4 <__ieee754_sqrt>:
 800ccf4:	f8df c158 	ldr.w	ip, [pc, #344]	; 800ce50 <__ieee754_sqrt+0x15c>
 800ccf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfc:	ea3c 0c01 	bics.w	ip, ip, r1
 800cd00:	4606      	mov	r6, r0
 800cd02:	460d      	mov	r5, r1
 800cd04:	460c      	mov	r4, r1
 800cd06:	460a      	mov	r2, r1
 800cd08:	4607      	mov	r7, r0
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	d10f      	bne.n	800cd2e <__ieee754_sqrt+0x3a>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	460b      	mov	r3, r1
 800cd12:	f7f3 fbd9 	bl	80004c8 <__aeabi_dmul>
 800cd16:	4602      	mov	r2, r0
 800cd18:	460b      	mov	r3, r1
 800cd1a:	4630      	mov	r0, r6
 800cd1c:	4629      	mov	r1, r5
 800cd1e:	f7f3 fa1d 	bl	800015c <__adddf3>
 800cd22:	4606      	mov	r6, r0
 800cd24:	460d      	mov	r5, r1
 800cd26:	4630      	mov	r0, r6
 800cd28:	4629      	mov	r1, r5
 800cd2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd2e:	2900      	cmp	r1, #0
 800cd30:	dc0e      	bgt.n	800cd50 <__ieee754_sqrt+0x5c>
 800cd32:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cd36:	ea5c 0707 	orrs.w	r7, ip, r7
 800cd3a:	d0f4      	beq.n	800cd26 <__ieee754_sqrt+0x32>
 800cd3c:	b141      	cbz	r1, 800cd50 <__ieee754_sqrt+0x5c>
 800cd3e:	4602      	mov	r2, r0
 800cd40:	460b      	mov	r3, r1
 800cd42:	f7f3 fa09 	bl	8000158 <__aeabi_dsub>
 800cd46:	4602      	mov	r2, r0
 800cd48:	460b      	mov	r3, r1
 800cd4a:	f7f3 fce7 	bl	800071c <__aeabi_ddiv>
 800cd4e:	e7e8      	b.n	800cd22 <__ieee754_sqrt+0x2e>
 800cd50:	1521      	asrs	r1, r4, #20
 800cd52:	d075      	beq.n	800ce40 <__ieee754_sqrt+0x14c>
 800cd54:	07cc      	lsls	r4, r1, #31
 800cd56:	f04f 0400 	mov.w	r4, #0
 800cd5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cd5e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800cd62:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cd66:	bf5e      	ittt	pl
 800cd68:	0fd9      	lsrpl	r1, r3, #31
 800cd6a:	005b      	lslpl	r3, r3, #1
 800cd6c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800cd70:	0fd9      	lsrs	r1, r3, #31
 800cd72:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cd76:	2516      	movs	r5, #22
 800cd78:	4620      	mov	r0, r4
 800cd7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cd7e:	107f      	asrs	r7, r7, #1
 800cd80:	005b      	lsls	r3, r3, #1
 800cd82:	1846      	adds	r6, r0, r1
 800cd84:	4296      	cmp	r6, r2
 800cd86:	bfde      	ittt	le
 800cd88:	1b92      	suble	r2, r2, r6
 800cd8a:	1870      	addle	r0, r6, r1
 800cd8c:	1864      	addle	r4, r4, r1
 800cd8e:	0052      	lsls	r2, r2, #1
 800cd90:	3d01      	subs	r5, #1
 800cd92:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cd96:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cd9a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cd9e:	d1f0      	bne.n	800cd82 <__ieee754_sqrt+0x8e>
 800cda0:	4629      	mov	r1, r5
 800cda2:	f04f 0e20 	mov.w	lr, #32
 800cda6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800cdaa:	4282      	cmp	r2, r0
 800cdac:	eb06 0c05 	add.w	ip, r6, r5
 800cdb0:	dc02      	bgt.n	800cdb8 <__ieee754_sqrt+0xc4>
 800cdb2:	d113      	bne.n	800cddc <__ieee754_sqrt+0xe8>
 800cdb4:	459c      	cmp	ip, r3
 800cdb6:	d811      	bhi.n	800cddc <__ieee754_sqrt+0xe8>
 800cdb8:	f1bc 0f00 	cmp.w	ip, #0
 800cdbc:	eb0c 0506 	add.w	r5, ip, r6
 800cdc0:	da43      	bge.n	800ce4a <__ieee754_sqrt+0x156>
 800cdc2:	2d00      	cmp	r5, #0
 800cdc4:	db41      	blt.n	800ce4a <__ieee754_sqrt+0x156>
 800cdc6:	f100 0801 	add.w	r8, r0, #1
 800cdca:	1a12      	subs	r2, r2, r0
 800cdcc:	4640      	mov	r0, r8
 800cdce:	459c      	cmp	ip, r3
 800cdd0:	bf88      	it	hi
 800cdd2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800cdd6:	eba3 030c 	sub.w	r3, r3, ip
 800cdda:	4431      	add	r1, r6
 800cddc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800cde0:	f1be 0e01 	subs.w	lr, lr, #1
 800cde4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800cde8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdec:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800cdf0:	d1db      	bne.n	800cdaa <__ieee754_sqrt+0xb6>
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	d006      	beq.n	800ce04 <__ieee754_sqrt+0x110>
 800cdf6:	1c48      	adds	r0, r1, #1
 800cdf8:	bf0b      	itete	eq
 800cdfa:	4671      	moveq	r1, lr
 800cdfc:	3101      	addne	r1, #1
 800cdfe:	3401      	addeq	r4, #1
 800ce00:	f021 0101 	bicne.w	r1, r1, #1
 800ce04:	1063      	asrs	r3, r4, #1
 800ce06:	0849      	lsrs	r1, r1, #1
 800ce08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce0c:	07e2      	lsls	r2, r4, #31
 800ce0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce12:	bf48      	it	mi
 800ce14:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ce18:	460e      	mov	r6, r1
 800ce1a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ce1e:	e782      	b.n	800cd26 <__ieee754_sqrt+0x32>
 800ce20:	0ada      	lsrs	r2, r3, #11
 800ce22:	3815      	subs	r0, #21
 800ce24:	055b      	lsls	r3, r3, #21
 800ce26:	2a00      	cmp	r2, #0
 800ce28:	d0fa      	beq.n	800ce20 <__ieee754_sqrt+0x12c>
 800ce2a:	02d5      	lsls	r5, r2, #11
 800ce2c:	d50a      	bpl.n	800ce44 <__ieee754_sqrt+0x150>
 800ce2e:	f1c1 0420 	rsb	r4, r1, #32
 800ce32:	fa23 f404 	lsr.w	r4, r3, r4
 800ce36:	1e4d      	subs	r5, r1, #1
 800ce38:	408b      	lsls	r3, r1
 800ce3a:	4322      	orrs	r2, r4
 800ce3c:	1b41      	subs	r1, r0, r5
 800ce3e:	e789      	b.n	800cd54 <__ieee754_sqrt+0x60>
 800ce40:	4608      	mov	r0, r1
 800ce42:	e7f0      	b.n	800ce26 <__ieee754_sqrt+0x132>
 800ce44:	0052      	lsls	r2, r2, #1
 800ce46:	3101      	adds	r1, #1
 800ce48:	e7ef      	b.n	800ce2a <__ieee754_sqrt+0x136>
 800ce4a:	4680      	mov	r8, r0
 800ce4c:	e7bd      	b.n	800cdca <__ieee754_sqrt+0xd6>
 800ce4e:	bf00      	nop
 800ce50:	7ff00000 	.word	0x7ff00000

0800ce54 <nan>:
 800ce54:	2000      	movs	r0, #0
 800ce56:	4901      	ldr	r1, [pc, #4]	; (800ce5c <nan+0x8>)
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	7ff80000 	.word	0x7ff80000

0800ce60 <_init>:
 800ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce62:	bf00      	nop
 800ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce66:	bc08      	pop	{r3}
 800ce68:	469e      	mov	lr, r3
 800ce6a:	4770      	bx	lr

0800ce6c <_fini>:
 800ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce6e:	bf00      	nop
 800ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce72:	bc08      	pop	{r3}
 800ce74:	469e      	mov	lr, r3
 800ce76:	4770      	bx	lr
