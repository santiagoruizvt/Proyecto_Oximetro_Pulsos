
Oxy_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdc0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002d34  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc04  0800fc04  00020128  2**0
                  CONTENTS
  4 .ARM          00000000  0800fc04  0800fc04  00020128  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fc04  0800fc04  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc04  0800fc04  0001fc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc08  0800fc08  0001fc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  0800fc0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b38  20000128  0800fd34  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  0800fd34  00021c60  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014395  00000000  00000000  00020151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d5  00000000  00000000  000344e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  00038be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0e4  00000000  00000000  00039cd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001771f  00000000  00000000  00053db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bf45  00000000  00000000  0006b4d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7418  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  000f7468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000128 	.word	0x20000128
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ceb8 	.word	0x0800ceb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000012c 	.word	0x2000012c
 800014c:	0800ceb8 	.word	0x0800ceb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2uiz>:
 8001080:	0042      	lsls	r2, r0, #1
 8001082:	d20e      	bcs.n	80010a2 <__aeabi_f2uiz+0x22>
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30b      	bcc.n	80010a2 <__aeabi_f2uiz+0x22>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d409      	bmi.n	80010a8 <__aeabi_f2uiz+0x28>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	fa23 f002 	lsr.w	r0, r3, r2
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr
 80010a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ac:	d101      	bne.n	80010b2 <__aeabi_f2uiz+0x32>
 80010ae:	0242      	lsls	r2, r0, #9
 80010b0:	d102      	bne.n	80010b8 <__aeabi_f2uiz+0x38>
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	4770      	bx	lr
 80010b8:	f04f 0000 	mov.w	r0, #0
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <MAX30100_Init>:
//Parámetros: 		void
//Valor devuelto: 	void
//*************************************************************

void MAX30100_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t buffer=0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
	uint8_t aux=0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71bb      	strb	r3, [r7, #6]

	currentPulseDetectorState = PULSE_IDLE;
 80010ce:	4b56      	ldr	r3, [pc, #344]	; (8001228 <MAX30100_Init+0x168>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]

	//				SETEO DEL MODO
	//////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD,MAX30100_MODE_CONF,buffer);
 80010d4:	4b55      	ldr	r3, [pc, #340]	; (800122c <MAX30100_Init+0x16c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	79fa      	ldrb	r2, [r7, #7]
 80010da:	2106      	movs	r1, #6
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fd1b 	bl	8001b18 <MAX30100_I2C_Read>
	aux=(buffer&0xF8)|DEFAULT_OPERATING_MODE;
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	f023 0307 	bic.w	r3, r3, #7
 80010ea:	b25b      	sxtb	r3, r3
 80010ec:	f043 0303 	orr.w	r3, r3, #3
 80010f0:	b25b      	sxtb	r3, r3
 80010f2:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR,MODE_RG,aux);
 80010f4:	4b4e      	ldr	r3, [pc, #312]	; (8001230 <MAX30100_Init+0x170>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4a4e      	ldr	r2, [pc, #312]	; (8001234 <MAX30100_Init+0x174>)
 80010fa:	7811      	ldrb	r1, [r2, #0]
 80010fc:	79ba      	ldrb	r2, [r7, #6]
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fcec 	bl	8001adc <MAX30100_I2C_Write>
	//////////////////////////////////////////////////////////////

	//				SETEO SAMPLING_RATE
	//////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD, MAX30100_SPO2_CONF, buffer);
 8001104:	4b49      	ldr	r3, [pc, #292]	; (800122c <MAX30100_Init+0x16c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	79fa      	ldrb	r2, [r7, #7]
 800110a:	2107      	movs	r1, #7
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fd03 	bl	8001b18 <MAX30100_I2C_Read>
	aux=(buffer&0xE3)|(DEFAULT_SAMPLING_RATE<<2);
 8001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001116:	f023 031c 	bic.w	r3, r3, #28
 800111a:	b25b      	sxtb	r3, r3
 800111c:	f043 0304 	orr.w	r3, r3, #4
 8001120:	b25b      	sxtb	r3, r3
 8001122:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, MAX30100_SPO2_CONF, aux);
 8001124:	4b42      	ldr	r3, [pc, #264]	; (8001230 <MAX30100_Init+0x170>)
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79ba      	ldrb	r2, [r7, #6]
 800112a:	2107      	movs	r1, #7
 800112c:	4618      	mov	r0, r3
 800112e:	f000 fcd5 	bl	8001adc <MAX30100_I2C_Write>
	//////////////////////////////////////////////////////////////

	//				SETEO LED_Pulse_Width
	/////////////////////////////////////////////////////////////
	MAX30100_I2C_Read(MAX_ADDRESS_RD,MAX30100_SPO2_CONF, buffer);
 8001132:	4b3e      	ldr	r3, [pc, #248]	; (800122c <MAX30100_Init+0x16c>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	2107      	movs	r1, #7
 800113a:	4618      	mov	r0, r3
 800113c:	f000 fcec 	bl	8001b18 <MAX30100_I2C_Read>
	//aux=(buffer&0xFC)|(DEFAULT_LED_PULSE_WIDTH);
	aux=0x47;
 8001140:	2347      	movs	r3, #71	; 0x47
 8001142:	71bb      	strb	r3, [r7, #6]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, MAX30100_SPO2_CONF, aux);
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <MAX30100_Init+0x170>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	2107      	movs	r1, #7
 800114c:	4618      	mov	r0, r3
 800114e:	f000 fcc5 	bl	8001adc <MAX30100_I2C_Write>
	////////////////////////////////////////////////////////////7

	redLEDCurrent = (uint8_t) STARTING_RED_LED_CURRENT;
 8001152:	4b39      	ldr	r3, [pc, #228]	; (8001238 <MAX30100_Init+0x178>)
 8001154:	2208      	movs	r2, #8
 8001156:	701a      	strb	r2, [r3, #0]
	lastREDLedCurrentCheck=0;
 8001158:	4b38      	ldr	r3, [pc, #224]	; (800123c <MAX30100_Init+0x17c>)
 800115a:	f04f 0200 	mov.w	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
	IRLedCurrent=DEFAULT_IR_LED_CURRENT;
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <MAX30100_Init+0x180>)
 8001162:	220f      	movs	r2, #15
 8001164:	701a      	strb	r2, [r3, #0]

	//				SETEO_CORRIENTES_LEDs
	//////////////////////////////////////////////////////////////
	buffer=((redLEDCurrent << 4) | IRLedCurrent );
 8001166:	4b34      	ldr	r3, [pc, #208]	; (8001238 <MAX30100_Init+0x178>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	b25a      	sxtb	r2, r3
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <MAX30100_Init+0x180>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b25b      	sxtb	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b25b      	sxtb	r3, r3
 8001178:	71fb      	strb	r3, [r7, #7]
	MAX30100_I2C_Write(MAX_ADDRESS_WR, LED_CONFIGURATION, buffer);
 800117a:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <MAX30100_Init+0x170>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	4a31      	ldr	r2, [pc, #196]	; (8001244 <MAX30100_Init+0x184>)
 8001180:	7811      	ldrb	r1, [r2, #0]
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	4618      	mov	r0, r3
 8001186:	f000 fca9 	bl	8001adc <MAX30100_I2C_Write>

	//				SETEO_HighresModeEnabled
	//////////////////////////////////////////////////////////////
	//SetHighresModeEnabled();

	dcFilterIR.w = 0;
 800118a:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <MAX30100_Init+0x188>)
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
	dcFilterIR.result = 0;
 8001192:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MAX30100_Init+0x188>)
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	605a      	str	r2, [r3, #4]

	dcFilterRed.w = 0;
 800119a:	4b2c      	ldr	r3, [pc, #176]	; (800124c <MAX30100_Init+0x18c>)
 800119c:	f04f 0200 	mov.w	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
	dcFilterRed.result = 0;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <MAX30100_Init+0x18c>)
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]


	lpbFilterIR.v[0] = 0;
 80011aa:	4b29      	ldr	r3, [pc, #164]	; (8001250 <MAX30100_Init+0x190>)
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	lpbFilterIR.v[1] = 0;
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MAX30100_Init+0x190>)
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	605a      	str	r2, [r3, #4]
	lpbFilterIR.result = 0;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <MAX30100_Init+0x190>)
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]

	meanDiffIR.index = 0;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MAX30100_Init+0x194>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	meanDiffIR.sum = 0;
 80011ca:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MAX30100_Init+0x194>)
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	641a      	str	r2, [r3, #64]	; 0x40
	meanDiffIR.count = 0;
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MAX30100_Init+0x194>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44


	valuesBPM[0] = 0;
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <MAX30100_Init+0x198>)
 80011dc:	f04f 0200 	mov.w	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
	valuesBPMSum = 0;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <MAX30100_Init+0x19c>)
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
	valuesBPMCount = 0;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <MAX30100_Init+0x1a0>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
	bpmIndex = 0;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MAX30100_Init+0x1a4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]


	irACValueSqSum = 0;
 80011f6:	4b1c      	ldr	r3, [pc, #112]	; (8001268 <MAX30100_Init+0x1a8>)
 80011f8:	f04f 0200 	mov.w	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
	redACValueSqSum = 0;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MAX30100_Init+0x1ac>)
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
	samplesRecorded = 0;
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MAX30100_Init+0x1b0>)
 8001208:	2200      	movs	r2, #0
 800120a:	801a      	strh	r2, [r3, #0]
	pulsesDetected = 0;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MAX30100_Init+0x1b4>)
 800120e:	2200      	movs	r2, #0
 8001210:	801a      	strh	r2, [r3, #0]
	currentSaO2Value = 0;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MAX30100_Init+0x1b8>)
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

	lastBeatThreshold = 0;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MAX30100_Init+0x1bc>)
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]

}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	2000014c 	.word	0x2000014c
 800122c:	20000001 	.word	0x20000001
 8001230:	20000000 	.word	0x20000000
 8001234:	20000003 	.word	0x20000003
 8001238:	20000145 	.word	0x20000145
 800123c:	20000148 	.word	0x20000148
 8001240:	20000144 	.word	0x20000144
 8001244:	20000004 	.word	0x20000004
 8001248:	20000208 	.word	0x20000208
 800124c:	20000210 	.word	0x20000210
 8001250:	200001b4 	.word	0x200001b4
 8001254:	200001c0 	.word	0x200001c0
 8001258:	20000154 	.word	0x20000154
 800125c:	2000017c 	.word	0x2000017c
 8001260:	20000180 	.word	0x20000180
 8001264:	20000181 	.word	0x20000181
 8001268:	200001a4 	.word	0x200001a4
 800126c:	200001a8 	.word	0x200001a8
 8001270:	20000188 	.word	0x20000188
 8001274:	2000018a 	.word	0x2000018a
 8001278:	200001ac 	.word	0x200001ac
 800127c:	20000184 	.word	0x20000184

08001280 <Actualizar_Resultados>:

pulseoxymeter_t Actualizar_Resultados(void)
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b08d      	sub	sp, #52	; 0x34
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	pulseoxymeter_t result;
	FIFO_t fifo;

	Resetea_Resultados(&result);
 8001288:	f107 030c 	add.w	r3, r7, #12
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fbf7 	bl	8001a80 <Resetea_Resultados>

	Lectura_FIFO(&fifo);
 8001292:	f107 0308 	add.w	r3, r7, #8
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f92a 	bl	80014f0 <Lectura_FIFO>

	Filtrado_DC((float)fifo.rawIR,&IRprev_w,&ir_dcfiltrado);
 800129c:	893b      	ldrh	r3, [r7, #8]
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fcd0 	bl	8000c44 <__aeabi_ui2f>
 80012a4:	4603      	mov	r3, r0
 80012a6:	4a80      	ldr	r2, [pc, #512]	; (80014a8 <Actualizar_Resultados+0x228>)
 80012a8:	4980      	ldr	r1, [pc, #512]	; (80014ac <Actualizar_Resultados+0x22c>)
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f958 	bl	8001560 <Filtrado_DC>
	Filtrado_DC((float)fifo.rawRED,&REDprev_w,&red_dcfiltrado);
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcc6 	bl	8000c44 <__aeabi_ui2f>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4a7d      	ldr	r2, [pc, #500]	; (80014b0 <Actualizar_Resultados+0x230>)
 80012bc:	497d      	ldr	r1, [pc, #500]	; (80014b4 <Actualizar_Resultados+0x234>)
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 f94e 	bl	8001560 <Filtrado_DC>

	Mean_Median_Filter(ir_dcfiltrado,&meanDiffIR,&ir_meanfiltrado);
 80012c4:	4b78      	ldr	r3, [pc, #480]	; (80014a8 <Actualizar_Resultados+0x228>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a7b      	ldr	r2, [pc, #492]	; (80014b8 <Actualizar_Resultados+0x238>)
 80012ca:	497c      	ldr	r1, [pc, #496]	; (80014bc <Actualizar_Resultados+0x23c>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f97b 	bl	80015c8 <Mean_Median_Filter>
	Filtro_PasabajosButterworth(&ir_meanfiltrado,&lpbFilterIR,&ir_lpbfiltrado);
 80012d2:	4a7b      	ldr	r2, [pc, #492]	; (80014c0 <Actualizar_Resultados+0x240>)
 80012d4:	497b      	ldr	r1, [pc, #492]	; (80014c4 <Actualizar_Resultados+0x244>)
 80012d6:	4878      	ldr	r0, [pc, #480]	; (80014b8 <Actualizar_Resultados+0x238>)
 80012d8:	f000 f9ee 	bl	80016b8 <Filtro_PasabajosButterworth>

	irACValueSqSum  +=ir_dcfiltrado * ir_dcfiltrado;
 80012dc:	4b72      	ldr	r3, [pc, #456]	; (80014a8 <Actualizar_Resultados+0x228>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a71      	ldr	r2, [pc, #452]	; (80014a8 <Actualizar_Resultados+0x228>)
 80012e2:	6812      	ldr	r2, [r2, #0]
 80012e4:	4611      	mov	r1, r2
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fd04 	bl	8000cf4 <__aeabi_fmul>
 80012ec:	4603      	mov	r3, r0
 80012ee:	461a      	mov	r2, r3
 80012f0:	4b75      	ldr	r3, [pc, #468]	; (80014c8 <Actualizar_Resultados+0x248>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4610      	mov	r0, r2
 80012f8:	f7ff fbf4 	bl	8000ae4 <__addsf3>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	4b71      	ldr	r3, [pc, #452]	; (80014c8 <Actualizar_Resultados+0x248>)
 8001302:	601a      	str	r2, [r3, #0]
	redACValueSqSum +=red_dcfiltrado * red_dcfiltrado;
 8001304:	4b6a      	ldr	r3, [pc, #424]	; (80014b0 <Actualizar_Resultados+0x230>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a69      	ldr	r2, [pc, #420]	; (80014b0 <Actualizar_Resultados+0x230>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff fcf0 	bl	8000cf4 <__aeabi_fmul>
 8001314:	4603      	mov	r3, r0
 8001316:	461a      	mov	r2, r3
 8001318:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <Actualizar_Resultados+0x24c>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4619      	mov	r1, r3
 800131e:	4610      	mov	r0, r2
 8001320:	f7ff fbe0 	bl	8000ae4 <__addsf3>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b68      	ldr	r3, [pc, #416]	; (80014cc <Actualizar_Resultados+0x24c>)
 800132a:	601a      	str	r2, [r3, #0]
	samplesRecorded++;
 800132c:	4b68      	ldr	r3, [pc, #416]	; (80014d0 <Actualizar_Resultados+0x250>)
 800132e:	881b      	ldrh	r3, [r3, #0]
 8001330:	3301      	adds	r3, #1
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <Actualizar_Resultados+0x250>)
 8001336:	801a      	strh	r2, [r3, #0]

	if( detectPulse( ir_lpbfiltrado ) && samplesRecorded > 0 )
 8001338:	4b61      	ldr	r3, [pc, #388]	; (80014c0 <Actualizar_Resultados+0x240>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fa0b 	bl	8001758 <detectPulse>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 8084 	beq.w	8001452 <Actualizar_Resultados+0x1d2>
 800134a:	4b61      	ldr	r3, [pc, #388]	; (80014d0 <Actualizar_Resultados+0x250>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d07f      	beq.n	8001452 <Actualizar_Resultados+0x1d2>
	{
		result.pulseDetected=true;
 8001352:	2301      	movs	r3, #1
 8001354:	733b      	strb	r3, [r7, #12]
		pulsesDetected++;
 8001356:	4b5f      	ldr	r3, [pc, #380]	; (80014d4 <Actualizar_Resultados+0x254>)
 8001358:	881b      	ldrh	r3, [r3, #0]
 800135a:	3301      	adds	r3, #1
 800135c:	b29a      	uxth	r2, r3
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <Actualizar_Resultados+0x254>)
 8001360:	801a      	strh	r2, [r3, #0]

	    ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 8001362:	4b5a      	ldr	r3, [pc, #360]	; (80014cc <Actualizar_Resultados+0x24c>)
 8001364:	681c      	ldr	r4, [r3, #0]
 8001366:	4b5a      	ldr	r3, [pc, #360]	; (80014d0 <Actualizar_Resultados+0x250>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fc6e 	bl	8000c4c <__aeabi_i2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fd71 	bl	8000e5c <__aeabi_fdiv>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f853 	bl	8000428 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	f00b fb07 	bl	800c99c <sqrt>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f00b facf 	bl	800c938 <log>
 800139a:	4604      	mov	r4, r0
 800139c:	460d      	mov	r5, r1
 800139e:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <Actualizar_Resultados+0x248>)
 80013a0:	681e      	ldr	r6, [r3, #0]
 80013a2:	4b4b      	ldr	r3, [pc, #300]	; (80014d0 <Actualizar_Resultados+0x250>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fc50 	bl	8000c4c <__aeabi_i2f>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4619      	mov	r1, r3
 80013b0:	4630      	mov	r0, r6
 80013b2:	f7ff fd53 	bl	8000e5c <__aeabi_fdiv>
 80013b6:	4603      	mov	r3, r0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f835 	bl	8000428 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4610      	mov	r0, r2
 80013c4:	4619      	mov	r1, r3
 80013c6:	f00b fae9 	bl	800c99c <sqrt>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f00b fab1 	bl	800c938 <log>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4620      	mov	r0, r4
 80013dc:	4629      	mov	r1, r5
 80013de:	f7ff f9a5 	bl	800072c <__aeabi_ddiv>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4610      	mov	r0, r2
 80013e8:	4619      	mov	r1, r3
 80013ea:	f7ff fb25 	bl	8000a38 <__aeabi_d2f>
 80013ee:	4603      	mov	r3, r0
 80013f0:	4a39      	ldr	r2, [pc, #228]	; (80014d8 <Actualizar_Resultados+0x258>)
 80013f2:	6013      	str	r3, [r2, #0]

	    currentSaO2Value = 114.0 - 18.0 * ratioRMS;
 80013f4:	4b38      	ldr	r3, [pc, #224]	; (80014d8 <Actualizar_Resultados+0x258>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f815 	bl	8000428 <__aeabi_f2d>
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	4b36      	ldr	r3, [pc, #216]	; (80014dc <Actualizar_Resultados+0x25c>)
 8001404:	f7ff f868 	bl	80004d8 <__aeabi_dmul>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	4933      	ldr	r1, [pc, #204]	; (80014e0 <Actualizar_Resultados+0x260>)
 8001412:	f7fe fea9 	bl	8000168 <__aeabi_dsub>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	f7ff fb0b 	bl	8000a38 <__aeabi_d2f>
 8001422:	4603      	mov	r3, r0
 8001424:	4a2f      	ldr	r2, [pc, #188]	; (80014e4 <Actualizar_Resultados+0x264>)
 8001426:	6013      	str	r3, [r2, #0]
	    result.SaO2 = currentSaO2Value;
 8001428:	4b2e      	ldr	r3, [pc, #184]	; (80014e4 <Actualizar_Resultados+0x264>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	623b      	str	r3, [r7, #32]

	    if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 800142e:	4b29      	ldr	r3, [pc, #164]	; (80014d4 <Actualizar_Resultados+0x254>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	b29b      	uxth	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10a      	bne.n	8001452 <Actualizar_Resultados+0x1d2>
	    {
	    	irACValueSqSum = 0;
 800143c:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <Actualizar_Resultados+0x248>)
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
	        redACValueSqSum = 0;
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <Actualizar_Resultados+0x24c>)
 8001446:	f04f 0200 	mov.w	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
	        samplesRecorded = 0;
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <Actualizar_Resultados+0x250>)
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
	     }
	}

	Balance_Intensidades( REDprev_w, IRprev_w);
 8001452:	4b18      	ldr	r3, [pc, #96]	; (80014b4 <Actualizar_Resultados+0x234>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a15      	ldr	r2, [pc, #84]	; (80014ac <Actualizar_Resultados+0x22c>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f000 fa7d 	bl	800195c <Balance_Intensidades>

	result.heartBPM = currentBPM;
 8001462:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <Actualizar_Resultados+0x268>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	613b      	str	r3, [r7, #16]
	result.irCardiogram = lpbFilterIR.result;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <Actualizar_Resultados+0x244>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	617b      	str	r3, [r7, #20]
	result.irDcValue = IRprev_w;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <Actualizar_Resultados+0x22c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	61bb      	str	r3, [r7, #24]
	result.redDcValue = REDprev_w;
 8001474:	4b0f      	ldr	r3, [pc, #60]	; (80014b4 <Actualizar_Resultados+0x234>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	61fb      	str	r3, [r7, #28]
	result.lastBeatThreshold = lastBeatThreshold;
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <Actualizar_Resultados+0x26c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
	result.dcFilteredIR = ir_dcfiltrado;
 8001480:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <Actualizar_Resultados+0x228>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
	result.dcFilteredRed = red_dcfiltrado;
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <Actualizar_Resultados+0x230>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c

	return result;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	461d      	mov	r5, r3
 8001490:	f107 040c 	add.w	r4, r7, #12
 8001494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001496:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001498:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800149a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800149c:	6823      	ldr	r3, [r4, #0]
 800149e:	602b      	str	r3, [r5, #0]
}
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	3734      	adds	r7, #52	; 0x34
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a8:	20000194 	.word	0x20000194
 80014ac:	2000018c 	.word	0x2000018c
 80014b0:	20000198 	.word	0x20000198
 80014b4:	20000190 	.word	0x20000190
 80014b8:	2000019c 	.word	0x2000019c
 80014bc:	200001c0 	.word	0x200001c0
 80014c0:	200001a0 	.word	0x200001a0
 80014c4:	200001b4 	.word	0x200001b4
 80014c8:	200001a4 	.word	0x200001a4
 80014cc:	200001a8 	.word	0x200001a8
 80014d0:	20000188 	.word	0x20000188
 80014d4:	2000018a 	.word	0x2000018a
 80014d8:	200001b0 	.word	0x200001b0
 80014dc:	40320000 	.word	0x40320000
 80014e0:	405c8000 	.word	0x405c8000
 80014e4:	200001ac 	.word	0x200001ac
 80014e8:	20000150 	.word	0x20000150
 80014ec:	20000184 	.word	0x20000184

080014f0 <Lectura_FIFO>:
//Parámetros: 		FIFO_t* puntero a estructura FIFO
//Valor devuelto: 	void
//*************************************************************

void Lectura_FIFO(FIFO_t *FIFO)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af02      	add	r7, sp, #8
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t data[4]={0};
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c1, MAX_ADDRESS_WR, &FIFO_DATA, sizeof(FIFO_DATA), 10);
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <Lectura_FIFO+0x60>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b299      	uxth	r1, r3
 8001502:	230a      	movs	r3, #10
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	2301      	movs	r3, #1
 8001508:	4a12      	ldr	r2, [pc, #72]	; (8001554 <Lectura_FIFO+0x64>)
 800150a:	4813      	ldr	r0, [pc, #76]	; (8001558 <Lectura_FIFO+0x68>)
 800150c:	f002 feb0 	bl	8004270 <HAL_I2C_Master_Transmit>

	MAX30100_I2C_FIFO_Read(MAX_ADDRESS_RD,data);
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <Lectura_FIFO+0x6c>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fb1a 	bl	8001b54 <MAX30100_I2C_FIFO_Read>

	FIFO->rawIR=((data[0]<<8)|data[1]);
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	021b      	lsls	r3, r3, #8
 8001524:	b21a      	sxth	r2, r3
 8001526:	7b7b      	ldrb	r3, [r7, #13]
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b21b      	sxth	r3, r3
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	801a      	strh	r2, [r3, #0]
	FIFO->rawRED=((data[2]<<8)|data[3]);
 8001534:	7bbb      	ldrb	r3, [r7, #14]
 8001536:	021b      	lsls	r3, r3, #8
 8001538:	b21a      	sxth	r2, r3
 800153a:	7bfb      	ldrb	r3, [r7, #15]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	b29a      	uxth	r2, r3
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	805a      	strh	r2, [r3, #2]
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000000 	.word	0x20000000
 8001554:	20000002 	.word	0x20000002
 8001558:	20000230 	.word	0x20000230
 800155c:	20000001 	.word	0x20000001

08001560 <Filtrado_DC>:
//					float* dato filtrado
//Valor devuelto: 	void
//*************************************************************

void Filtrado_DC(float raw_values,float *ptrprev_w, float *output_signal)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b08a      	sub	sp, #40	; 0x28
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
	float x=0;
 800156c:	f04f 0300 	mov.w	r3, #0
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
	float w=0;
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	623b      	str	r3, [r7, #32]
	float alpha=0.95;
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <Filtrado_DC+0x64>)
 800157a:	61fb      	str	r3, [r7, #28]
	float prev_w=*ptrprev_w;
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	61bb      	str	r3, [r7, #24]
	float result=0;
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

		x=raw_values;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	627b      	str	r3, [r7, #36]	; 0x24

		w = x + alpha * prev_w;
 800158c:	69b9      	ldr	r1, [r7, #24]
 800158e:	69f8      	ldr	r0, [r7, #28]
 8001590:	f7ff fbb0 	bl	8000cf4 <__aeabi_fmul>
 8001594:	4603      	mov	r3, r0
 8001596:	4619      	mov	r1, r3
 8001598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800159a:	f7ff faa3 	bl	8000ae4 <__addsf3>
 800159e:	4603      	mov	r3, r0
 80015a0:	623b      	str	r3, [r7, #32]
		result = w - prev_w;
 80015a2:	69b9      	ldr	r1, [r7, #24]
 80015a4:	6a38      	ldr	r0, [r7, #32]
 80015a6:	f7ff fa9b 	bl	8000ae0 <__aeabi_fsub>
 80015aa:	4603      	mov	r3, r0
 80015ac:	617b      	str	r3, [r7, #20]

		*ptrprev_w=w;
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	6a3a      	ldr	r2, [r7, #32]
 80015b2:	601a      	str	r2, [r3, #0]
		*output_signal=result;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	601a      	str	r2, [r3, #0]
}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	3f733333 	.word	0x3f733333

080015c8 <Mean_Median_Filter>:
//					float* puntero a dato filtrado resultante
//Valor devuelto: 	void
//*************************************************************

void Mean_Median_Filter(float M,meanDiffFilter_t *filterValues,float *ir_meanfiltrado)
{
 80015c8:	b590      	push	{r4, r7, lr}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
		float avg = 0;
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
		float aux = 0;
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	613b      	str	r3, [r7, #16]
		filterValues->sum -= filterValues->values[filterValues->index];
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015ea:	4619      	mov	r1, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015f2:	4619      	mov	r1, r3
 80015f4:	4610      	mov	r0, r2
 80015f6:	f7ff fa73 	bl	8000ae0 <__aeabi_fsub>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->values[filterValues->index] = M;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001608:	4619      	mov	r1, r3
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	68fa      	ldr	r2, [r7, #12]
 800160e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		filterValues->sum += filterValues->values[filterValues->index];
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001616:	68bb      	ldr	r3, [r7, #8]
 8001618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800161c:	4619      	mov	r1, r3
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff fa5c 	bl	8000ae4 <__addsf3>
 800162c:	4603      	mov	r3, r0
 800162e:	461a      	mov	r2, r3
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->index++;
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163a:	3301      	adds	r3, #1
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <Mean_Median_Filter+0xec>)
 800164c:	fba3 1302 	umull	r1, r3, r3, r2
 8001650:	08d9      	lsrs	r1, r3, #3
 8001652:	460b      	mov	r3, r1
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	1a5b      	subs	r3, r3, r1
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b2da      	uxtb	r2, r3
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		if(filterValues->count < MEAN_FILTER_SIZE)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001668:	2b0e      	cmp	r3, #14
 800166a:	d807      	bhi.n	800167c <Mean_Median_Filter+0xb4>
		filterValues->count++;
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001672:	3301      	adds	r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		avg = filterValues->sum / filterValues->count;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fae0 	bl	8000c4c <__aeabi_i2f>
 800168c:	4603      	mov	r3, r0
 800168e:	4619      	mov	r1, r3
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fbe3 	bl	8000e5c <__aeabi_fdiv>
 8001696:	4603      	mov	r3, r0
 8001698:	617b      	str	r3, [r7, #20]
		aux = avg-M;
 800169a:	68f9      	ldr	r1, [r7, #12]
 800169c:	6978      	ldr	r0, [r7, #20]
 800169e:	f7ff fa1f 	bl	8000ae0 <__aeabi_fsub>
 80016a2:	4603      	mov	r3, r0
 80016a4:	613b      	str	r3, [r7, #16]
		*ir_meanfiltrado=aux;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	601a      	str	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd90      	pop	{r4, r7, pc}
 80016b4:	88888889 	.word	0x88888889

080016b8 <Filtro_PasabajosButterworth>:
//					float* puntero a dato filtrado resultante
//Valor devuelto: 	void
//*************************************************************

void Filtro_PasabajosButterworth(float* x,butterworthFilter_t* filterResult ,float*ir_lpbfiltrado)
{
 80016b8:	b5b0      	push	{r4, r5, r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	60f8      	str	r0, [r7, #12]
 80016c0:	60b9      	str	r1, [r7, #8]
 80016c2:	607a      	str	r2, [r7, #4]
	float aux=*x;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	617b      	str	r3, [r7, #20]
	filterResult->v[0] = filterResult->v[1];
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	601a      	str	r2, [r3, #0]

	  //Fs = 100Hz and Fc = 10Hz
	filterResult->v[1] = (2.452372752527856026e-1 * aux) + (0.50952544949442879485 * filterResult->v[0]);
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7fe fea8 	bl	8000428 <__aeabi_f2d>
 80016d8:	a31b      	add	r3, pc, #108	; (adr r3, 8001748 <Filtro_PasabajosButterworth+0x90>)
 80016da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016de:	f7fe fefb 	bl	80004d8 <__aeabi_dmul>
 80016e2:	4602      	mov	r2, r0
 80016e4:	460b      	mov	r3, r1
 80016e6:	4614      	mov	r4, r2
 80016e8:	461d      	mov	r5, r3
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fe9a 	bl	8000428 <__aeabi_f2d>
 80016f4:	a316      	add	r3, pc, #88	; (adr r3, 8001750 <Filtro_PasabajosButterworth+0x98>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe feed 	bl	80004d8 <__aeabi_dmul>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4620      	mov	r0, r4
 8001704:	4629      	mov	r1, r5
 8001706:	f7fe fd31 	bl	800016c <__adddf3>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f7ff f991 	bl	8000a38 <__aeabi_d2f>
 8001716:	4602      	mov	r2, r0
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	605a      	str	r2, [r3, #4]
	  //Fs = 100Hz and Fc = 4Hz

	//filterResult->v[1] = (1.367287359973195227e-1 * aux) + (0.72654252800536101020 * filterResult->v[0]);

	filterResult->result = filterResult->v[0] + filterResult->v[1];
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	4619      	mov	r1, r3
 8001726:	4610      	mov	r0, r2
 8001728:	f7ff f9dc 	bl	8000ae4 <__addsf3>
 800172c:	4603      	mov	r3, r0
 800172e:	461a      	mov	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	609a      	str	r2, [r3, #8]

	*ir_lpbfiltrado=filterResult->result;
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	601a      	str	r2, [r3, #0]
}
 800173c:	bf00      	nop
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bdb0      	pop	{r4, r5, r7, pc}
 8001744:	f3af 8000 	nop.w
 8001748:	5e7c4548 	.word	0x5e7c4548
 800174c:	3fcf63ef 	.word	0x3fcf63ef
 8001750:	50c1dd5c 	.word	0x50c1dd5c
 8001754:	3fe04e08 	.word	0x3fe04e08

08001758 <detectPulse>:
//Parámetros: 		float  datos de la salida del LPF
//					pulseoxymeter_t* puntero a estructura result
//Valor devuelto: 	void
//*************************************************************
bool detectPulse(float sensor_value)
{
 8001758:	b590      	push	{r4, r7, lr}
 800175a:	b087      	sub	sp, #28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t currentBeat = 0;
	static uint32_t lastBeat = 0;

	  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001760:	496f      	ldr	r1, [pc, #444]	; (8001920 <detectPulse+0x1c8>)
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff fc82 	bl	800106c <__aeabi_fcmpgt>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d014      	beq.n	8001798 <detectPulse+0x40>
	  {
	    currentPulseDetectorState = PULSE_IDLE;
 800176e:	4b6d      	ldr	r3, [pc, #436]	; (8001924 <detectPulse+0x1cc>)
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
	    prev_sensor_value = 0;
 8001774:	4b6c      	ldr	r3, [pc, #432]	; (8001928 <detectPulse+0x1d0>)
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
	    lastBeat = 0;
 800177c:	4b6b      	ldr	r3, [pc, #428]	; (800192c <detectPulse+0x1d4>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
	    currentBeat = 0;
 8001782:	4b6b      	ldr	r3, [pc, #428]	; (8001930 <detectPulse+0x1d8>)
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
	    values_went_down = 0;
 8001788:	4b6a      	ldr	r3, [pc, #424]	; (8001934 <detectPulse+0x1dc>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
	    lastBeatThreshold = 0;
 800178e:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <detectPulse+0x1e0>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
	    return false;
 8001794:	2300      	movs	r3, #0
 8001796:	e0be      	b.n	8001916 <detectPulse+0x1be>
	  }
	    switch(currentPulseDetectorState)
 8001798:	4b62      	ldr	r3, [pc, #392]	; (8001924 <detectPulse+0x1cc>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b02      	cmp	r3, #2
 800179e:	f000 809b 	beq.w	80018d8 <detectPulse+0x180>
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f300 80b3 	bgt.w	800190e <detectPulse+0x1b6>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <detectPulse+0x5a>
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d00f      	beq.n	80017d0 <detectPulse+0x78>
 80017b0:	e0ad      	b.n	800190e <detectPulse+0x1b6>
	     {
	       case PULSE_IDLE:
	         if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80017b2:	4962      	ldr	r1, [pc, #392]	; (800193c <detectPulse+0x1e4>)
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fc4f 	bl	8001058 <__aeabi_fcmpge>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d100      	bne.n	80017c2 <detectPulse+0x6a>
	           currentPulseDetectorState = PULSE_TRACE_UP;
	           values_went_down = 0;
	         }
	         break;
 80017c0:	e0a5      	b.n	800190e <detectPulse+0x1b6>
	           currentPulseDetectorState = PULSE_TRACE_UP;
 80017c2:	4b58      	ldr	r3, [pc, #352]	; (8001924 <detectPulse+0x1cc>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
	           values_went_down = 0;
 80017c8:	4b5a      	ldr	r3, [pc, #360]	; (8001934 <detectPulse+0x1dc>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
	         break;
 80017ce:	e09e      	b.n	800190e <detectPulse+0x1b6>

	       case PULSE_TRACE_UP:
	         if(sensor_value > prev_sensor_value)
 80017d0:	4b55      	ldr	r3, [pc, #340]	; (8001928 <detectPulse+0x1d0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff fc48 	bl	800106c <__aeabi_fcmpgt>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d00b      	beq.n	80017fa <detectPulse+0xa2>
	         {
	           currentBeat = HAL_GetTick();
 80017e2:	f002 f83d 	bl	8003860 <HAL_GetTick>
 80017e6:	4603      	mov	r3, r0
 80017e8:	4a51      	ldr	r2, [pc, #324]	; (8001930 <detectPulse+0x1d8>)
 80017ea:	6013      	str	r3, [r2, #0]
	           lastBeatThreshold = sensor_value;
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff fc47 	bl	8001080 <__aeabi_f2uiz>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4a50      	ldr	r2, [pc, #320]	; (8001938 <detectPulse+0x1e0>)
 80017f6:	6013      	str	r3, [r2, #0]

	           currentPulseDetectorState = PULSE_TRACE_DOWN;

	           return true;
	         }
	         break;
 80017f8:	e089      	b.n	800190e <detectPulse+0x1b6>
	           uint32_t beatDuration = currentBeat - lastBeat;
 80017fa:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <detectPulse+0x1d8>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b4b      	ldr	r3, [pc, #300]	; (800192c <detectPulse+0x1d4>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	60fb      	str	r3, [r7, #12]
	           lastBeat = currentBeat;
 8001806:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <detectPulse+0x1d8>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a48      	ldr	r2, [pc, #288]	; (800192c <detectPulse+0x1d4>)
 800180c:	6013      	str	r3, [r2, #0]
	           float rawBPM = 0;
 800180e:	f04f 0300 	mov.w	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
	           if(beatDuration > 0)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <detectPulse+0xd6>
	             rawBPM = 60000.0 / (float)beatDuration;
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fa12 	bl	8000c44 <__aeabi_ui2f>
 8001820:	4603      	mov	r3, r0
 8001822:	4619      	mov	r1, r3
 8001824:	4846      	ldr	r0, [pc, #280]	; (8001940 <detectPulse+0x1e8>)
 8001826:	f7ff fb19 	bl	8000e5c <__aeabi_fdiv>
 800182a:	4603      	mov	r3, r0
 800182c:	617b      	str	r3, [r7, #20]
	           valuesBPM[bpmIndex] = rawBPM;
 800182e:	4b45      	ldr	r3, [pc, #276]	; (8001944 <detectPulse+0x1ec>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	4619      	mov	r1, r3
 8001834:	4a44      	ldr	r2, [pc, #272]	; (8001948 <detectPulse+0x1f0>)
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	           valuesBPMSum = 0;
 800183c:	4b43      	ldr	r3, [pc, #268]	; (800194c <detectPulse+0x1f4>)
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e010      	b.n	800186c <detectPulse+0x114>
	             valuesBPMSum += valuesBPM[i];
 800184a:	4a3f      	ldr	r2, [pc, #252]	; (8001948 <detectPulse+0x1f0>)
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	4a3e      	ldr	r2, [pc, #248]	; (800194c <detectPulse+0x1f4>)
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff f943 	bl	8000ae4 <__addsf3>
 800185e:	4603      	mov	r3, r0
 8001860:	461a      	mov	r2, r3
 8001862:	4b3a      	ldr	r3, [pc, #232]	; (800194c <detectPulse+0x1f4>)
 8001864:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	3301      	adds	r3, #1
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	2b09      	cmp	r3, #9
 8001870:	ddeb      	ble.n	800184a <detectPulse+0xf2>
	           bpmIndex++;
 8001872:	4b34      	ldr	r3, [pc, #208]	; (8001944 <detectPulse+0x1ec>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <detectPulse+0x1ec>)
 800187c:	701a      	strb	r2, [r3, #0]
	           bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <detectPulse+0x1ec>)
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	4b33      	ldr	r3, [pc, #204]	; (8001950 <detectPulse+0x1f8>)
 8001884:	fba3 1302 	umull	r1, r3, r3, r2
 8001888:	08d9      	lsrs	r1, r3, #3
 800188a:	460b      	mov	r3, r1
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	440b      	add	r3, r1
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <detectPulse+0x1ec>)
 8001898:	701a      	strb	r2, [r3, #0]
	           if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 800189a:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <detectPulse+0x1fc>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b09      	cmp	r3, #9
 80018a0:	d805      	bhi.n	80018ae <detectPulse+0x156>
	             valuesBPMCount++;
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <detectPulse+0x1fc>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	b2da      	uxtb	r2, r3
 80018aa:	4b2a      	ldr	r3, [pc, #168]	; (8001954 <detectPulse+0x1fc>)
 80018ac:	701a      	strb	r2, [r3, #0]
	           currentBPM = valuesBPMSum / valuesBPMCount;
 80018ae:	4b27      	ldr	r3, [pc, #156]	; (800194c <detectPulse+0x1f4>)
 80018b0:	681c      	ldr	r4, [r3, #0]
 80018b2:	4b28      	ldr	r3, [pc, #160]	; (8001954 <detectPulse+0x1fc>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff f9c8 	bl	8000c4c <__aeabi_i2f>
 80018bc:	4603      	mov	r3, r0
 80018be:	4619      	mov	r1, r3
 80018c0:	4620      	mov	r0, r4
 80018c2:	f7ff facb 	bl	8000e5c <__aeabi_fdiv>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b23      	ldr	r3, [pc, #140]	; (8001958 <detectPulse+0x200>)
 80018cc:	601a      	str	r2, [r3, #0]
	           currentPulseDetectorState = PULSE_TRACE_DOWN;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <detectPulse+0x1cc>)
 80018d0:	2202      	movs	r2, #2
 80018d2:	701a      	strb	r2, [r3, #0]
	           return true;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e01e      	b.n	8001916 <detectPulse+0x1be>

	       case PULSE_TRACE_DOWN:
	         if(sensor_value < prev_sensor_value)
 80018d8:	4b13      	ldr	r3, [pc, #76]	; (8001928 <detectPulse+0x1d0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7ff fba6 	bl	8001030 <__aeabi_fcmplt>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d005      	beq.n	80018f6 <detectPulse+0x19e>
	         {
	           values_went_down++;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <detectPulse+0x1dc>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	b2da      	uxtb	r2, r3
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <detectPulse+0x1dc>)
 80018f4:	701a      	strb	r2, [r3, #0]
	         }


	         if(sensor_value < PULSE_MIN_THRESHOLD)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <detectPulse+0x1e4>)
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff fb99 	bl	8001030 <__aeabi_fcmplt>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d100      	bne.n	8001906 <detectPulse+0x1ae>
	         {
	           currentPulseDetectorState = PULSE_IDLE;
	         }
	         break;
 8001904:	e002      	b.n	800190c <detectPulse+0x1b4>
	           currentPulseDetectorState = PULSE_IDLE;
 8001906:	4b07      	ldr	r3, [pc, #28]	; (8001924 <detectPulse+0x1cc>)
 8001908:	2200      	movs	r2, #0
 800190a:	701a      	strb	r2, [r3, #0]
	         break;
 800190c:	bf00      	nop
	     }

	     prev_sensor_value = sensor_value;
 800190e:	4a06      	ldr	r2, [pc, #24]	; (8001928 <detectPulse+0x1d0>)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6013      	str	r3, [r2, #0]
	     return false;
 8001914:	2300      	movs	r3, #0

}
 8001916:	4618      	mov	r0, r3
 8001918:	371c      	adds	r7, #28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	44fa0000 	.word	0x44fa0000
 8001924:	2000014c 	.word	0x2000014c
 8001928:	20000218 	.word	0x20000218
 800192c:	2000021c 	.word	0x2000021c
 8001930:	20000220 	.word	0x20000220
 8001934:	20000224 	.word	0x20000224
 8001938:	20000184 	.word	0x20000184
 800193c:	42c80000 	.word	0x42c80000
 8001940:	476a6000 	.word	0x476a6000
 8001944:	20000181 	.word	0x20000181
 8001948:	20000154 	.word	0x20000154
 800194c:	2000017c 	.word	0x2000017c
 8001950:	cccccccd 	.word	0xcccccccd
 8001954:	20000180 	.word	0x20000180
 8001958:	20000150 	.word	0x20000150

0800195c <Balance_Intensidades>:
//Parámetros: 		float datos del led rojo
//					float datos del led IR
//Valor devuelto: 	void
//*************************************************************
void Balance_Intensidades(float redLedDC, float IRLedDC)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	uint8_t buffer=0;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]
	uint8_t aux1=0;
 800196a:	2300      	movs	r3, #0
 800196c:	73bb      	strb	r3, [r7, #14]
	uint8_t aux2=0;
 800196e:	2300      	movs	r3, #0
 8001970:	737b      	strb	r3, [r7, #13]
    aux1=(uint8_t)redLedDC;
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff fb84 	bl	8001080 <__aeabi_f2uiz>
 8001978:	4603      	mov	r3, r0
 800197a:	73bb      	strb	r3, [r7, #14]
    aux2=(uint8_t)IRLedDC;
 800197c:	6838      	ldr	r0, [r7, #0]
 800197e:	f7ff fb7f 	bl	8001080 <__aeabi_f2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	737b      	strb	r3, [r7, #13]

	if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001986:	f001 ff6b 	bl	8003860 <HAL_GetTick>
 800198a:	4603      	mov	r3, r0
 800198c:	4618      	mov	r0, r3
 800198e:	f7ff f959 	bl	8000c44 <__aeabi_ui2f>
 8001992:	4602      	mov	r2, r0
 8001994:	4b34      	ldr	r3, [pc, #208]	; (8001a68 <Balance_Intensidades+0x10c>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4619      	mov	r1, r3
 800199a:	4610      	mov	r0, r2
 800199c:	f7ff f8a0 	bl	8000ae0 <__aeabi_fsub>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4932      	ldr	r1, [pc, #200]	; (8001a6c <Balance_Intensidades+0x110>)
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fb57 	bl	8001058 <__aeabi_fcmpge>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d100      	bne.n	80019b2 <Balance_Intensidades+0x56>
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
	    }

	    lastREDLedCurrentCheck = HAL_GetTick();
	  }
}
 80019b0:	e055      	b.n	8001a5e <Balance_Intensidades+0x102>
	    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	6838      	ldr	r0, [r7, #0]
 80019b6:	f7ff f893 	bl	8000ae0 <__aeabi_fsub>
 80019ba:	4603      	mov	r3, r0
 80019bc:	492c      	ldr	r1, [pc, #176]	; (8001a70 <Balance_Intensidades+0x114>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb54 	bl	800106c <__aeabi_fcmpgt>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d01a      	beq.n	8001a00 <Balance_Intensidades+0xa4>
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <Balance_Intensidades+0x118>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b0e      	cmp	r3, #14
 80019d0:	d816      	bhi.n	8001a00 <Balance_Intensidades+0xa4>
	      redLEDCurrent++;
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <Balance_Intensidades+0x118>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	3301      	adds	r3, #1
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <Balance_Intensidades+0x118>)
 80019dc:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 80019de:	7bbb      	ldrb	r3, [r7, #14]
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	b25a      	sxtb	r2, r3
 80019e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 80019ee:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <Balance_Intensidades+0x11c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <Balance_Intensidades+0x120>)
 80019f4:	7811      	ldrb	r1, [r2, #0]
 80019f6:	7bfa      	ldrb	r2, [r7, #15]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 f86f 	bl	8001adc <MAX30100_I2C_Write>
 80019fe:	e025      	b.n	8001a4c <Balance_Intensidades+0xf0>
	    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001a00:	6839      	ldr	r1, [r7, #0]
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff f86c 	bl	8000ae0 <__aeabi_fsub>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4919      	ldr	r1, [pc, #100]	; (8001a70 <Balance_Intensidades+0x114>)
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb2d 	bl	800106c <__aeabi_fcmpgt>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d019      	beq.n	8001a4c <Balance_Intensidades+0xf0>
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <Balance_Intensidades+0x118>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d015      	beq.n	8001a4c <Balance_Intensidades+0xf0>
	      redLEDCurrent--;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <Balance_Intensidades+0x118>)
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <Balance_Intensidades+0x118>)
 8001a2a:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 8001a2c:	7bbb      	ldrb	r3, [r7, #14]
 8001a2e:	011b      	lsls	r3, r3, #4
 8001a30:	b25a      	sxtb	r2, r3
 8001a32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 8001a3c:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <Balance_Intensidades+0x11c>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	4a0e      	ldr	r2, [pc, #56]	; (8001a7c <Balance_Intensidades+0x120>)
 8001a42:	7811      	ldrb	r1, [r2, #0]
 8001a44:	7bfa      	ldrb	r2, [r7, #15]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f848 	bl	8001adc <MAX30100_I2C_Write>
	    lastREDLedCurrentCheck = HAL_GetTick();
 8001a4c:	f001 ff08 	bl	8003860 <HAL_GetTick>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff f8f6 	bl	8000c44 <__aeabi_ui2f>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a03      	ldr	r2, [pc, #12]	; (8001a68 <Balance_Intensidades+0x10c>)
 8001a5c:	6013      	str	r3, [r2, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000148 	.word	0x20000148
 8001a6c:	43fa0000 	.word	0x43fa0000
 8001a70:	477de800 	.word	0x477de800
 8001a74:	20000145 	.word	0x20000145
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	20000004 	.word	0x20000004

08001a80 <Resetea_Resultados>:
//Parámetros: 		pulseoxymeter_t* puntero a estructura result
//Valor devuelto: 	void
//*************************************************************

void Resetea_Resultados(pulseoxymeter_t *result)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	result->pulseDetected=false;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	result->heartBPM=0.0;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f04f 0200 	mov.w	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
	result->irCardiogram=0.0;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
	result->irDcValue=0.0;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
	result->redDcValue=0.0;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
	result->SaO2=currentSaO2Value;
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <Resetea_Resultados+0x58>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	615a      	str	r2, [r3, #20]
	result->lastBeatThreshold=0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	619a      	str	r2, [r3, #24]
	result->dcFilteredIR=0.0;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	61da      	str	r2, [r3, #28]
	result->dcFilteredRed=0.0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200001ac 	.word	0x200001ac

08001adc <MAX30100_I2C_Write>:
//					uint8_t data a escribir
//Valor devuelto: 	void
//*************************************************************

void MAX30100_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af02      	add	r7, sp, #8
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	71bb      	strb	r3, [r7, #6]
 8001aea:	4613      	mov	r3, r2
 8001aec:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001af2:	797b      	ldrb	r3, [r7, #5]
 8001af4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	b299      	uxth	r1, r3
 8001afa:	f107 020c 	add.w	r2, r7, #12
 8001afe:	230a      	movs	r3, #10
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2302      	movs	r3, #2
 8001b04:	4803      	ldr	r0, [pc, #12]	; (8001b14 <MAX30100_I2C_Write+0x38>)
 8001b06:	f002 fbb3 	bl	8004270 <HAL_I2C_Master_Transmit>
}
 8001b0a:	bf00      	nop
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000230 	.word	0x20000230

08001b18 <MAX30100_I2C_Read>:
//					uint8_t data a escribir
//Valor devuelto: 	void
//*************************************************************

void MAX30100_I2C_Read(uint8_t address, uint8_t reg, uint8_t data)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b086      	sub	sp, #24
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
 8001b22:	460b      	mov	r3, r1
 8001b24:	71bb      	strb	r3, [r7, #6]
 8001b26:	4613      	mov	r3, r2
 8001b28:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b2a:	79bb      	ldrb	r3, [r7, #6]
 8001b2c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b2e:	797b      	ldrb	r3, [r7, #5]
 8001b30:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Receive(&hi2c1, address, dt,2, 10);
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	b299      	uxth	r1, r3
 8001b36:	f107 020c 	add.w	r2, r7, #12
 8001b3a:	230a      	movs	r3, #10
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2302      	movs	r3, #2
 8001b40:	4803      	ldr	r0, [pc, #12]	; (8001b50 <MAX30100_I2C_Read+0x38>)
 8001b42:	f002 fc93 	bl	800446c <HAL_I2C_Master_Receive>
}
 8001b46:	bf00      	nop
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	20000230 	.word	0x20000230

08001b54 <MAX30100_I2C_FIFO_Read>:
//					por cada LED
//Parámetros: 		void
//Valor devuelto: 	void
//*************************************************************
void MAX30100_I2C_FIFO_Read(uint8_t address, uint8_t dt[4])
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(&hi2c1, address, dt,4, 10);
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	b299      	uxth	r1, r3
 8001b64:	230a      	movs	r3, #10
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2304      	movs	r3, #4
 8001b6a:	683a      	ldr	r2, [r7, #0]
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <MAX30100_I2C_FIFO_Read+0x28>)
 8001b6e:	f002 fc7d 	bl	800446c <HAL_I2C_Master_Receive>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000230 	.word	0x20000230

08001b80 <MAX30100_I2C_Reset_FIFO>:
//Descripción: 		Reseteo el registro FIFO
//Parámetros: 		void
//Valor devuelto: 	void
//*************************************************************
void MAX30100_I2C_Reset_FIFO(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_WRITE, (uint8_t)0);
 8001b84:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2102      	movs	r1, #2
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ffa5 	bl	8001adc <MAX30100_I2C_Write>
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_OVERFLOW_COUNTER, (uint8_t)0);
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2200      	movs	r2, #0
 8001b98:	2103      	movs	r1, #3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff9e 	bl	8001adc <MAX30100_I2C_Write>
	MAX30100_I2C_Write(MAX_ADDRESS_WR, (uint8_t) MAX30100_FIFO_READ, (uint8_t)0);
 8001ba0:	4b04      	ldr	r3, [pc, #16]	; (8001bb4 <MAX30100_I2C_Reset_FIFO+0x34>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	2104      	movs	r1, #4
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff97 	bl	8001adc <MAX30100_I2C_Write>
}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000000 	.word	0x20000000

08001bb8 <SPISD_EscribirSector>:
 * Escribe un sector en la SD
 * En el caso de direccionar al byte, revisa si SectorAddressing es 0
 * y multiplica el sector por 512 para apuntar al byte.
 */
uint8_t SPISD_EscribirSector(SPISD *spisd, uint32_t sector,
		const uint8_t *buffer) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bc4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001bc8:	6018      	str	r0, [r3, #0]
 8001bca:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bce:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001bd2:	6019      	str	r1, [r3, #0]
 8001bd4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bd8:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001bdc:	601a      	str	r2, [r3, #0]
	//Verificar que la memoria SD soporte direccionamiento al sector y no al byte.
	if (!spisd->sectorAddressing)
 8001bde:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001be2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	7b9b      	ldrb	r3, [r3, #14]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10a      	bne.n	8001c04 <SPISD_EscribirSector+0x4c>
		sector = sector * 512;
 8001bee:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001bf2:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001bf6:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001bfa:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8001bfe:	6812      	ldr	r2, [r2, #0]
 8001c00:	0252      	lsls	r2, r2, #9
 8001c02:	601a      	str	r2, [r3, #0]

	//El sector es uint32, pero hay que enviarlo en 4 bytes en SPISD_CMD24
	//Lo partimos en 4 partes con shifts y mascaras.
	SPISD_CMD24[4] = sector & 0xff;
 8001c04:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c08:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001c12:	711a      	strb	r2, [r3, #4]
	SPISD_CMD24[3] = (sector & 0xff00) >> 8;
 8001c14:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c18:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	0a1b      	lsrs	r3, r3, #8
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b71      	ldr	r3, [pc, #452]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001c24:	70da      	strb	r2, [r3, #3]
	SPISD_CMD24[2] = (sector & 0xff0000) >> 16;
 8001c26:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c2a:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	4b6c      	ldr	r3, [pc, #432]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001c36:	709a      	strb	r2, [r3, #2]
	SPISD_CMD24[1] = (sector & 0xff000000) >> 24;
 8001c38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c3c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	0e1b      	lsrs	r3, r3, #24
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b68      	ldr	r3, [pc, #416]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001c48:	705a      	strb	r2, [r3, #1]
	//Enviamos el comando CMD24
	SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 8001c4a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c4e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c52:	2207      	movs	r2, #7
 8001c54:	4964      	ldr	r1, [pc, #400]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f000 f978 	bl	8001f4c <SPISD_EnviarComando>
	HAL_Delay(1);
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	f001 fe09 	bl	8003874 <HAL_Delay>
	uint8_t timeout = 10;
 8001c62:	230a      	movs	r3, #10
 8001c64:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	recbuffer[0] = 0xFF;
 8001c68:	4b60      	ldr	r3, [pc, #384]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001c6a:	22ff      	movs	r2, #255	; 0xff
 8001c6c:	701a      	strb	r2, [r3, #0]
	while (timeout > 0) {
 8001c6e:	e030      	b.n	8001cd2 <SPISD_EscribirSector+0x11a>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 4);
 8001c70:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c74:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001c78:	2204      	movs	r2, #4
 8001c7a:	495c      	ldr	r1, [pc, #368]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f000 f987 	bl	8001f90 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0, todo marcha bien...
		if (recbuffer[0]==0)
 8001c82:	4b5a      	ldr	r3, [pc, #360]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d028      	beq.n	8001cdc <SPISD_EscribirSector+0x124>
			break;
		//Si no es 0
		timeout--;
 8001c8a:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		//Si paso 5 veces y no responde, reiniciamos la SD
		if (timeout == 5) {
 8001c94:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001c98:	2b05      	cmp	r3, #5
 8001c9a:	d10b      	bne.n	8001cb4 <SPISD_EscribirSector+0xfc>
			if (!SPISD_DetectarSD(spisd))
 8001c9c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ca0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f000 f9a5 	bl	8001ff4 <SPISD_DetectarSD>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <SPISD_EscribirSector+0xfc>
				return 0; // Falla la SD
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e094      	b.n	8001dde <SPISD_EscribirSector+0x226>
		}
		HAL_Delay(20);
 8001cb4:	2014      	movs	r0, #20
 8001cb6:	f001 fddd 	bl	8003874 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 8001cba:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cbe:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001cc2:	2207      	movs	r2, #7
 8001cc4:	4948      	ldr	r1, [pc, #288]	; (8001de8 <SPISD_EscribirSector+0x230>)
 8001cc6:	6818      	ldr	r0, [r3, #0]
 8001cc8:	f000 f940 	bl	8001f4c <SPISD_EnviarComando>
		HAL_Delay(2);
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f001 fdd1 	bl	8003874 <HAL_Delay>
	while (timeout > 0) {
 8001cd2:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1ca      	bne.n	8001c70 <SPISD_EscribirSector+0xb8>
 8001cda:	e000      	b.n	8001cde <SPISD_EscribirSector+0x126>
			break;
 8001cdc:	bf00      	nop
	}
	if (recbuffer[0] != 0)
 8001cde:	4b43      	ldr	r3, [pc, #268]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <SPISD_EscribirSector+0x132>
		return 0; //Fallo escribiendo.
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e079      	b.n	8001dde <SPISD_EscribirSector+0x226>
	HAL_Delay(1);
 8001cea:	2001      	movs	r0, #1
 8001cec:	f001 fdc2 	bl	8003874 <HAL_Delay>
	uint8_t outputBuffer[515]; //Armamos un buffer con start, datos y CRC (mentiroso)
	outputBuffer[0] = 0xFE; //Start
 8001cf0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001cf4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001cf8:	22fe      	movs	r2, #254	; 0xfe
 8001cfa:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d02:	e015      	b.n	8001d30 <SPISD_EscribirSector+0x178>
		outputBuffer[i + 1] = buffer[i];
 8001d04:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d08:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001d0c:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	441a      	add	r2, r3
 8001d14:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d18:	3301      	adds	r3, #1
 8001d1a:	7811      	ldrb	r1, [r2, #0]
 8001d1c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8001d20:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8001d24:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 512; i++) {
 8001d26:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001d30:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8001d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d38:	dbe4      	blt.n	8001d04 <SPISD_EscribirSector+0x14c>
	}
	outputBuffer[513] = 0xFF; //CRC mentiroso1
 8001d3a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d3e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d42:	22ff      	movs	r2, #255	; 0xff
 8001d44:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	outputBuffer[514] = 0xFF; //CRC mentiroso2
 8001d48:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d4c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001d50:	22ff      	movs	r2, #255	; 0xff
 8001d52:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001d56:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d5a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6898      	ldr	r0, [r3, #8]
 8001d62:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d66:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	899b      	ldrh	r3, [r3, #12]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	4619      	mov	r1, r3
 8001d72:	f002 f908 	bl	8003f86 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, outputBuffer, 515, 100);
 8001d76:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d7a:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	f107 0114 	add.w	r1, r7, #20
 8001d86:	2364      	movs	r3, #100	; 0x64
 8001d88:	f240 2203 	movw	r2, #515	; 0x203
 8001d8c:	f006 f9b0 	bl	80080f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001d90:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d94:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	6898      	ldr	r0, [r3, #8]
 8001d9c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001da0:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	899b      	ldrh	r3, [r3, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	4619      	mov	r1, r3
 8001dac:	f002 f8eb 	bl	8003f86 <HAL_GPIO_WritePin>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 2);
 8001db0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001db4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001db8:	2202      	movs	r2, #2
 8001dba:	490c      	ldr	r1, [pc, #48]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001dbc:	6818      	ldr	r0, [r3, #0]
 8001dbe:	f000 f8e7 	bl	8001f90 <SPISD_RecibirRespuestaComando>
	recbuffer[0] = recbuffer[0] & 0x1F; //Mascara para los 5 bits menos significativos
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	f003 031f 	and.w	r3, r3, #31
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001dce:	701a      	strb	r2, [r3, #0]
	//Debe devolver xxx00101 si el sector fue escrito correctamente.
	if (recbuffer[0] != 0x05) {
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SPISD_EscribirSector+0x234>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b05      	cmp	r3, #5
 8001dd6:	d001      	beq.n	8001ddc <SPISD_EscribirSector+0x224>
		return 0; //Error
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <SPISD_EscribirSector+0x226>
	}
	return 1;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000044 	.word	0x20000044
 8001dec:	20000228 	.word	0x20000228

08001df0 <SPISD_LeerSector>:

/**
 * Lee un sector de la SD. La misma debe estar inicializada
 *
 */
uint8_t SPISD_LeerSector(SPISD *spisd, uint32_t sector, uint8_t *buffer) {
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
	//Si la memoria direcciona al byte, multiplicamos sector*512.
	if (!spisd->sectorAddressing)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <SPISD_LeerSector+0x1a>
		sector = sector * 512;
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	025b      	lsls	r3, r3, #9
 8001e08:	60bb      	str	r3, [r7, #8]
	//Pasamos el sector/byte a 4 bytes
	SPISD_CMD17[4] = sector & 0xff;
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b4d      	ldr	r3, [pc, #308]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e10:	711a      	strb	r2, [r3, #4]
	SPISD_CMD17[3] = (sector & 0xff00) >> 8;
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	4b4a      	ldr	r3, [pc, #296]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e1a:	70da      	strb	r2, [r3, #3]
	SPISD_CMD17[2] = (sector & 0xff0000) >> 16;
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	0c1b      	lsrs	r3, r3, #16
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e24:	709a      	strb	r2, [r3, #2]
	SPISD_CMD17[1] = (sector & 0xff000000) >> 24;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0e1b      	lsrs	r3, r3, #24
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b45      	ldr	r3, [pc, #276]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e2e:	705a      	strb	r2, [r3, #1]
	//Comando 17, leer sector (o byte).
	SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001e30:	2207      	movs	r2, #7
 8001e32:	4944      	ldr	r1, [pc, #272]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f889 	bl	8001f4c <SPISD_EnviarComando>
	//Ahora la SD deberia responder on 0x00 indicando que esta lista
	//para enviar el sector.. pero esto puede tardar...
	uint8_t timeout = 10;
 8001e3a:	230a      	movs	r3, #10
 8001e3c:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001e3e:	e024      	b.n	8001e8a <SPISD_LeerSector+0x9a>
		//Busco la respuesta
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8001e40:	2201      	movs	r2, #1
 8001e42:	4941      	ldr	r1, [pc, #260]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 f8a3 	bl	8001f90 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] == 0)
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01f      	beq.n	8001e92 <SPISD_LeerSector+0xa2>
			break; //Todo funciono bien
		//Tengo que mandar el comando de vuelta.
		timeout--;
 8001e52:	7dfb      	ldrb	r3, [r7, #23]
 8001e54:	3b01      	subs	r3, #1
 8001e56:	75fb      	strb	r3, [r7, #23]
		//A veces queda en IDLE, asi que si timeout es 5, mandamos
		//de nuevo la secuencia de init
		if (timeout == 5) {
 8001e58:	7dfb      	ldrb	r3, [r7, #23]
 8001e5a:	2b05      	cmp	r3, #5
 8001e5c:	d10a      	bne.n	8001e74 <SPISD_LeerSector+0x84>
			if (!SPISD_DetectarSD(spisd))
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8c8 	bl	8001ff4 <SPISD_DetectarSD>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <SPISD_LeerSector+0x7e>
				return 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e065      	b.n	8001f3a <SPISD_LeerSector+0x14a>
			HAL_Delay(100);
 8001e6e:	2064      	movs	r0, #100	; 0x64
 8001e70:	f001 fd00 	bl	8003874 <HAL_Delay>
		}
		HAL_Delay(20);
 8001e74:	2014      	movs	r0, #20
 8001e76:	f001 fcfd 	bl	8003874 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001e7a:	2207      	movs	r2, #7
 8001e7c:	4931      	ldr	r1, [pc, #196]	; (8001f44 <SPISD_LeerSector+0x154>)
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	f000 f864 	bl	8001f4c <SPISD_EnviarComando>
		HAL_Delay(2);
 8001e84:	2002      	movs	r0, #2
 8001e86:	f001 fcf5 	bl	8003874 <HAL_Delay>
	while (timeout > 0) {
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1d7      	bne.n	8001e40 <SPISD_LeerSector+0x50>
 8001e90:	e000      	b.n	8001e94 <SPISD_LeerSector+0xa4>
			break; //Todo funciono bien
 8001e92:	bf00      	nop

	}
	//Pude haber salido por timeout o porque recbuffer[0]==0
	if (recbuffer[0] != 0)
 8001e94:	4b2c      	ldr	r3, [pc, #176]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SPISD_LeerSector+0xb0>
		return 0; //No responde mas a comandos.
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	e04c      	b.n	8001f3a <SPISD_LeerSector+0x14a>

	//Si la memoria responde 0 a CMD17, entonces va a comenzar a enviar el sector
	//El comienzo del sector es siempre 0xFE, pero depende la memoria, puede responder
	//con una cantidad de 0xFF primero. Leemos de a uno hasta que llega el primer 0xFF
	recbuffer[0] = 0xFF;
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001ea2:	22ff      	movs	r2, #255	; 0xff
 8001ea4:	701a      	strb	r2, [r3, #0]
	timeout = 100; //Maximo 100 lecturas
 8001ea6:	2364      	movs	r3, #100	; 0x64
 8001ea8:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6898      	ldr	r0, [r3, #8]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	899b      	ldrh	r3, [r3, #12]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f002 f866 	bl	8003f86 <HAL_GPIO_WritePin>
	while (timeout > 0) {
 8001eba:	e00d      	b.n	8001ed8 <SPISD_LeerSector+0xe8>
		HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 1, 100);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	4920      	ldr	r1, [pc, #128]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001ec6:	f006 fa4f 	bl	8008368 <HAL_SPI_Receive>
		//SPISD_RecibirRespuestaComando(spisd,recbuffer,1);
		if (recbuffer[0] == 0xFE) {
 8001eca:	4b1f      	ldr	r3, [pc, #124]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2bfe      	cmp	r3, #254	; 0xfe
 8001ed0:	d006      	beq.n	8001ee0 <SPISD_LeerSector+0xf0>
			break;
		}
		timeout--; //Si no hubo break, decrementamos el timeout
 8001ed2:	7dfb      	ldrb	r3, [r7, #23]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <SPISD_LeerSector+0xcc>
 8001ede:	e000      	b.n	8001ee2 <SPISD_LeerSector+0xf2>
			break;
 8001ee0:	bf00      	nop
	}

	//Si recbuffer[0] NO es 0xFE, levantamos CS y chau, la SD no responde.
	if (recbuffer[0] != 0xFE) {
 8001ee2:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2bfe      	cmp	r3, #254	; 0xfe
 8001ee8:	d009      	beq.n	8001efe <SPISD_LeerSector+0x10e>
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET); //Subo CS
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6898      	ldr	r0, [r3, #8]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	899b      	ldrh	r3, [r3, #12]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f002 f846 	bl	8003f86 <HAL_GPIO_WritePin>
		return 0;
 8001efa:	2300      	movs	r3, #0
 8001efc:	e01d      	b.n	8001f3a <SPISD_LeerSector+0x14a>
	}
	//Si recibimos el 0xFE, entonces podemos recibir los 512+2 bytes (2 de CRC).
	HAL_SPI_Receive(spisd->puertoSPI, buffer, 512, 200);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	23c8      	movs	r3, #200	; 0xc8
 8001f04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	f006 fa2d 	bl	8008368 <HAL_SPI_Receive>
	//Ahora falta el CRC
	recbuffer[0] = 0xFF;
 8001f0e:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001f10:	22ff      	movs	r2, #255	; 0xff
 8001f12:	701a      	strb	r2, [r3, #0]
	recbuffer[1] = 0xFF;
 8001f14:	4b0c      	ldr	r3, [pc, #48]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 2, 200);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	23c8      	movs	r3, #200	; 0xc8
 8001f20:	2202      	movs	r2, #2
 8001f22:	4909      	ldr	r1, [pc, #36]	; (8001f48 <SPISD_LeerSector+0x158>)
 8001f24:	f006 fa20 	bl	8008368 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6898      	ldr	r0, [r3, #8]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	899b      	ldrh	r3, [r3, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	4619      	mov	r1, r3
 8001f34:	f002 f827 	bl	8003f86 <HAL_GPIO_WritePin>
	return 1;
 8001f38:	2301      	movs	r3, #1
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	2000003c 	.word	0x2000003c
 8001f48:	20000228 	.word	0x20000228

08001f4c <SPISD_EnviarComando>:

/**
 * Envia comando a la SD controlando CS.
 */
void SPISD_EnviarComando(SPISD *spisd, uint8_t *buffer, uint16_t cantidad) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	4613      	mov	r3, r2
 8001f58:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6898      	ldr	r0, [r3, #8]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	899b      	ldrh	r3, [r3, #12]
 8001f62:	2200      	movs	r2, #0
 8001f64:	4619      	mov	r1, r3
 8001f66:	f002 f80e 	bl	8003f86 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, buffer, cantidad, 200);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	88fa      	ldrh	r2, [r7, #6]
 8001f70:	23c8      	movs	r3, #200	; 0xc8
 8001f72:	68b9      	ldr	r1, [r7, #8]
 8001f74:	f006 f8bc 	bl	80080f0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6898      	ldr	r0, [r3, #8]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	899b      	ldrh	r3, [r3, #12]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4619      	mov	r1, r3
 8001f84:	f001 ffff 	bl	8003f86 <HAL_GPIO_WritePin>
}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <SPISD_RecibirRespuestaComando>:
/**
 * Recibe por SPI una cantidad de bytes de forma bloqueante.
 * Se asegura que la linea (MOSI) este en 1 mientras se recibe.
 */
void SPISD_RecibirRespuestaComando(SPISD *spisd, uint8_t *buffer,
		uint16_t cantidad) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	80fb      	strh	r3, [r7, #6]
	//Cuando se recibe, la linea debe quedar en 1, por ende ponemos 0xFF en cada byte
	//que se quiera transmitir.
	for (int i = 0; i < cantidad; i++) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	617b      	str	r3, [r7, #20]
 8001fa2:	e007      	b.n	8001fb4 <SPISD_RecibirRespuestaComando+0x24>
		buffer[i] = 0xFF;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	4413      	add	r3, r2
 8001faa:	22ff      	movs	r2, #255	; 0xff
 8001fac:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < cantidad; i++) {
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	88fb      	ldrh	r3, [r7, #6]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	dbf3      	blt.n	8001fa4 <SPISD_RecibirRespuestaComando+0x14>
	}
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6898      	ldr	r0, [r3, #8]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	899b      	ldrh	r3, [r3, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f001 ffdd 	bl	8003f86 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(spisd->puertoSPI, buffer, cantidad, 200);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	88fa      	ldrh	r2, [r7, #6]
 8001fd2:	23c8      	movs	r3, #200	; 0xc8
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	f006 f9c7 	bl	8008368 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6898      	ldr	r0, [r3, #8]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	899b      	ldrh	r3, [r3, #12]
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f001 ffce 	bl	8003f86 <HAL_GPIO_WritePin>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
	...

08001ff4 <SPISD_DetectarSD>:

/**
 * Ejecuta la secuencia de inicializacion. Detecta el tipo de tarjeta
 * y deja esa info en la estructura.
 */
uint8_t SPISD_DetectarSD(SPISD *spisd) {
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
	//La SD recien insertada se encuentra en modo SD
	//Debemos enviar al menos 72 clocks con CS en 1
	spisd->FSM = Encendido;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6898      	ldr	r0, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	899b      	ldrh	r3, [r3, #12]
 800200a:	2201      	movs	r2, #1
 800200c:	4619      	mov	r1, r3
 800200e:	f001 ffba 	bl	8003f86 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6818      	ldr	r0, [r3, #0]
 8002016:	2364      	movs	r3, #100	; 0x64
 8002018:	220b      	movs	r2, #11
 800201a:	4957      	ldr	r1, [pc, #348]	; (8002178 <SPISD_DetectarSD+0x184>)
 800201c:	f006 f868 	bl	80080f0 <HAL_SPI_Transmit>
			100);
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6898      	ldr	r0, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	899b      	ldrh	r3, [r3, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	4619      	mov	r1, r3
 800202c:	f001 ffab 	bl	8003f86 <HAL_GPIO_WritePin>
	//Ahora debemos enviar CMD0 (Software Reset)
	SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 8002030:	2207      	movs	r2, #7
 8002032:	4952      	ldr	r1, [pc, #328]	; (800217c <SPISD_DetectarSD+0x188>)
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ff89 	bl	8001f4c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 800203a:	2201      	movs	r2, #1
 800203c:	4950      	ldr	r1, [pc, #320]	; (8002180 <SPISD_DetectarSD+0x18c>)
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f7ff ffa6 	bl	8001f90 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 8002044:	4b4e      	ldr	r3, [pc, #312]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d026      	beq.n	800209a <SPISD_DetectarSD+0xa6>
		// Hubo un error, la SD no responde 0x01 al sw reset
		// Hacemos otro intento antes de desistir...
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6898      	ldr	r0, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	899b      	ldrh	r3, [r3, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	4619      	mov	r1, r3
 8002058:	f001 ff95 	bl	8003f86 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	2364      	movs	r3, #100	; 0x64
 8002062:	220b      	movs	r2, #11
 8002064:	4944      	ldr	r1, [pc, #272]	; (8002178 <SPISD_DetectarSD+0x184>)
 8002066:	f006 f843 	bl	80080f0 <HAL_SPI_Transmit>
				100);
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6898      	ldr	r0, [r3, #8]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	899b      	ldrh	r3, [r3, #12]
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	f001 ff86 	bl	8003f86 <HAL_GPIO_WritePin>
		//Ahora debemos enviar CMD0 (Software Reset)
		SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 800207a:	2207      	movs	r2, #7
 800207c:	493f      	ldr	r1, [pc, #252]	; (800217c <SPISD_DetectarSD+0x188>)
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7ff ff64 	bl	8001f4c <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8002084:	2201      	movs	r2, #1
 8002086:	493e      	ldr	r1, [pc, #248]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff81 	bl	8001f90 <SPISD_RecibirRespuestaComando>

		if (recbuffer[0] != 0x01)
 800208e:	4b3c      	ldr	r3, [pc, #240]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d001      	beq.n	800209a <SPISD_DetectarSD+0xa6>
			return 0; //Error en la SD, no responde.
 8002096:	2300      	movs	r3, #0
 8002098:	e069      	b.n	800216e <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = sinc;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	711a      	strb	r2, [r3, #4]
	//Ahora mandamos CMD8 (Check Voltage Range)
	SPISD_EnviarComando(spisd, SPISD_CMD8, sizeof(SPISD_CMD8));
 80020a0:	2207      	movs	r2, #7
 80020a2:	4938      	ldr	r1, [pc, #224]	; (8002184 <SPISD_DetectarSD+0x190>)
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7ff ff51 	bl	8001f4c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 80020aa:	2206      	movs	r2, #6
 80020ac:	4934      	ldr	r1, [pc, #208]	; (8002180 <SPISD_DetectarSD+0x18c>)
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f7ff ff6e 	bl	8001f90 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 80020b4:	4b32      	ldr	r3, [pc, #200]	; (8002180 <SPISD_DetectarSD+0x18c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d001      	beq.n	80020c0 <SPISD_DetectarSD+0xcc>
		// Hubo un error, la SD no responde 0x01 al check voltage range
		return 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	e056      	b.n	800216e <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = version;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2202      	movs	r2, #2
 80020c4:	711a      	strb	r2, [r3, #4]

	//Ahora hay que mandar CMD55 y CMD41 (lo que genera ACMD41).
	//Este par va a devolver valores, pero en algun momento debe
	//devolver 0
	uint8_t reintento = 3;
 80020c6:	2303      	movs	r3, #3
 80020c8:	73fb      	strb	r3, [r7, #15]
	uint8_t encontrado = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73bb      	strb	r3, [r7, #14]
	while (reintento >= 0) {
		reintento--;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
 80020d0:	3b01      	subs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
		SPISD_EnviarComando(spisd, SPISD_CMD55, sizeof(SPISD_CMD55));
 80020d4:	2207      	movs	r2, #7
 80020d6:	492c      	ldr	r1, [pc, #176]	; (8002188 <SPISD_DetectarSD+0x194>)
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff ff37 	bl	8001f4c <SPISD_EnviarComando>
		//Siempre a CMD55 debe responder 0x01.
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 80020de:	2206      	movs	r2, #6
 80020e0:	4927      	ldr	r1, [pc, #156]	; (8002180 <SPISD_DetectarSD+0x18c>)
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ff54 	bl	8001f90 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] != 0x01) {
 80020e8:	4b25      	ldr	r3, [pc, #148]	; (8002180 <SPISD_DetectarSD+0x18c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d001      	beq.n	80020f4 <SPISD_DetectarSD+0x100>

			return 0;
 80020f0:	2300      	movs	r3, #0
 80020f2:	e03c      	b.n	800216e <SPISD_DetectarSD+0x17a>
		}
		//Mando CMD41 lo cual genera ACMD41.
		SPISD_EnviarComando(spisd, SPISD_CMD41, sizeof(SPISD_CMD41));
 80020f4:	2207      	movs	r2, #7
 80020f6:	4925      	ldr	r1, [pc, #148]	; (800218c <SPISD_DetectarSD+0x198>)
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff27 	bl	8001f4c <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 80020fe:	2206      	movs	r2, #6
 8002100:	491f      	ldr	r1, [pc, #124]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff ff44 	bl	8001f90 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0x00, podemos continuar
		if (recbuffer[0] == 0x00) {
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <SPISD_DetectarSD+0x18c>)
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <SPISD_DetectarSD+0x12a>
			encontrado = 1;
 8002110:	2301      	movs	r3, #1
 8002112:	73bb      	strb	r3, [r7, #14]
			break;
 8002114:	bf00      	nop
		}
		//Sino, demoramos 100ms y volvemos a probar.
		HAL_Delay(100);
	}
	if (encontrado) {
 8002116:	7bbb      	ldrb	r3, [r7, #14]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d016      	beq.n	800214a <SPISD_DetectarSD+0x156>
 800211c:	e003      	b.n	8002126 <SPISD_DetectarSD+0x132>
		HAL_Delay(100);
 800211e:	2064      	movs	r0, #100	; 0x64
 8002120:	f001 fba8 	bl	8003874 <HAL_Delay>
		reintento--;
 8002124:	e7d3      	b.n	80020ce <SPISD_DetectarSD+0xda>
		spisd->FSM = initCheck;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2203      	movs	r2, #3
 800212a:	711a      	strb	r2, [r3, #4]
	} else {
		return 0;
	}
	//Enviamos Comando 58 , para saber que tipo de memoria SD tenemos.
	SPISD_EnviarComando(spisd, SPISD_CMD58, sizeof(SPISD_CMD58));
 800212c:	2207      	movs	r2, #7
 800212e:	4918      	ldr	r1, [pc, #96]	; (8002190 <SPISD_DetectarSD+0x19c>)
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff0b 	bl	8001f4c <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 5);
 8002136:	2205      	movs	r2, #5
 8002138:	4911      	ldr	r1, [pc, #68]	; (8002180 <SPISD_DetectarSD+0x18c>)
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff ff28 	bl	8001f90 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x00) {
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <SPISD_DetectarSD+0x15e>
 8002148:	e001      	b.n	800214e <SPISD_DetectarSD+0x15a>
		return 0;
 800214a:	2300      	movs	r3, #0
 800214c:	e00f      	b.n	800216e <SPISD_DetectarSD+0x17a>
		// Fallo el CMD58
		return 0;
 800214e:	2300      	movs	r3, #0
 8002150:	e00d      	b.n	800216e <SPISD_DetectarSD+0x17a>
	}
	//Este comando informa si la SD es HC
	if ((recbuffer[1] & 0x40)) {
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <SPISD_DetectarSD+0x18c>)
 8002154:	785b      	ldrb	r3, [r3, #1]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <SPISD_DetectarSD+0x172>
		//La SD direcciona al sector (SDHC)
		spisd->sectorAddressing = 1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	739a      	strb	r2, [r3, #14]
 8002164:	e002      	b.n	800216c <SPISD_DetectarSD+0x178>
	} else {
		//La SD direcciona al byte (SD)
		spisd->sectorAddressing = 0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	739a      	strb	r2, [r3, #14]
	}
	return 1;
 800216c:	2301      	movs	r3, #1

}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000008 	.word	0x20000008
 800217c:	20000014 	.word	0x20000014
 8002180:	20000228 	.word	0x20000228
 8002184:	2000001c 	.word	0x2000001c
 8002188:	20000024 	.word	0x20000024
 800218c:	2000002c 	.word	0x2000002c
 8002190:	20000034 	.word	0x20000034

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b5b0      	push	{r4, r5, r7, lr}
 8002196:	b08e      	sub	sp, #56	; 0x38
 8002198:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800219a:	f001 fb1b 	bl	80037d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219e:	f000 fadf 	bl	8002760 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  spisd.FSM=Encendido;
 80021a2:	4b99      	ldr	r3, [pc, #612]	; (8002408 <main+0x274>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	711a      	strb	r2, [r3, #4]
  spisd.csPuerto = NSS_GPIO_Port;
 80021a8:	4b97      	ldr	r3, [pc, #604]	; (8002408 <main+0x274>)
 80021aa:	4a98      	ldr	r2, [pc, #608]	; (800240c <main+0x278>)
 80021ac:	609a      	str	r2, [r3, #8]
  spisd.csPin = NSS_Pin;
 80021ae:	4b96      	ldr	r3, [pc, #600]	; (8002408 <main+0x274>)
 80021b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021b4:	819a      	strh	r2, [r3, #12]
  spisd.puertoSPI = &hspi2;
 80021b6:	4b94      	ldr	r3, [pc, #592]	; (8002408 <main+0x274>)
 80021b8:	4a95      	ldr	r2, [pc, #596]	; (8002410 <main+0x27c>)
 80021ba:	601a      	str	r2, [r3, #0]
  spisd.sectorAddressing=1; //Asumimos SDHC (+2GB)
 80021bc:	4b92      	ldr	r3, [pc, #584]	; (8002408 <main+0x274>)
 80021be:	2201      	movs	r2, #1
 80021c0:	739a      	strb	r2, [r3, #14]
  spisd.hrtc = &hrtc;
 80021c2:	4b91      	ldr	r3, [pc, #580]	; (8002408 <main+0x274>)
 80021c4:	4a93      	ldr	r2, [pc, #588]	; (8002414 <main+0x280>)
 80021c6:	611a      	str	r2, [r3, #16]
  pRTC=&hrtc;
 80021c8:	4b93      	ldr	r3, [pc, #588]	; (8002418 <main+0x284>)
 80021ca:	4a92      	ldr	r2, [pc, #584]	; (8002414 <main+0x280>)
 80021cc:	601a      	str	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021ce:	f000 fc41 	bl	8002a54 <MX_GPIO_Init>
  MX_I2C1_Init();
 80021d2:	f000 fb21 	bl	8002818 <MX_I2C1_Init>
  MX_I2C2_Init();
 80021d6:	f000 fb4d 	bl	8002874 <MX_I2C2_Init>
  MX_SPI2_Init();
 80021da:	f000 fbc3 	bl	8002964 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80021de:	f000 fbf7 	bl	80029d0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80021e2:	f000 fb75 	bl	80028d0 <MX_RTC_Init>
  MX_FATFS_Init();
 80021e6:	f007 f99b 	bl	8009520 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80021ea:	f000 fe0f 	bl	8002e0c <SSD1306_Init>
  MAX30100_Init();
 80021ee:	f7fe ff67 	bl	80010c0 <MAX30100_Init>
  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 80021f2:	2201      	movs	r2, #1
 80021f4:	4989      	ldr	r1, [pc, #548]	; (800241c <main+0x288>)
 80021f6:	488a      	ldr	r0, [pc, #552]	; (8002420 <main+0x28c>)
 80021f8:	f006 fd41 	bl	8008c7e <HAL_UART_Receive_IT>

  SSD1306_GotoXY(95, 2);
 80021fc:	2102      	movs	r1, #2
 80021fe:	205f      	movs	r0, #95	; 0x5f
 8002200:	f000 ff6c 	bl	80030dc <SSD1306_GotoXY>
  SSD1306_Puts("v1.1",&Font_7x10,1);
 8002204:	2201      	movs	r2, #1
 8002206:	4987      	ldr	r1, [pc, #540]	; (8002424 <main+0x290>)
 8002208:	4887      	ldr	r0, [pc, #540]	; (8002428 <main+0x294>)
 800220a:	f000 fffd 	bl	8003208 <SSD1306_Puts>
  SSD1306_GotoXY(40, 0);
 800220e:	2100      	movs	r1, #0
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f000 ff63 	bl	80030dc <SSD1306_GotoXY>
  SSD1306_Puts("OXY",&Font_16x26,1);
 8002216:	2201      	movs	r2, #1
 8002218:	4984      	ldr	r1, [pc, #528]	; (800242c <main+0x298>)
 800221a:	4885      	ldr	r0, [pc, #532]	; (8002430 <main+0x29c>)
 800221c:	f000 fff4 	bl	8003208 <SSD1306_Puts>
  SSD1306_GotoXY(25, 24);
 8002220:	2118      	movs	r1, #24
 8002222:	2019      	movs	r0, #25
 8002224:	f000 ff5a 	bl	80030dc <SSD1306_GotoXY>
  SSD1306_Puts("PULSE",&Font_16x26,1);
 8002228:	2201      	movs	r2, #1
 800222a:	4980      	ldr	r1, [pc, #512]	; (800242c <main+0x298>)
 800222c:	4881      	ldr	r0, [pc, #516]	; (8002434 <main+0x2a0>)
 800222e:	f000 ffeb 	bl	8003208 <SSD1306_Puts>
  SSD1306_GotoXY(10, 50);
 8002232:	2132      	movs	r1, #50	; 0x32
 8002234:	200a      	movs	r0, #10
 8002236:	f000 ff51 	bl	80030dc <SSD1306_GotoXY>
  SSD1306_Puts("...Iniciando...",&Font_7x10,1);
 800223a:	2201      	movs	r2, #1
 800223c:	4979      	ldr	r1, [pc, #484]	; (8002424 <main+0x290>)
 800223e:	487e      	ldr	r0, [pc, #504]	; (8002438 <main+0x2a4>)
 8002240:	f000 ffe2 	bl	8003208 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8002244:	f000 fea6 	bl	8002f94 <SSD1306_UpdateScreen>
  SSD1306_ScrollRight(0x06, 0x07);
 8002248:	2107      	movs	r1, #7
 800224a:	2006      	movs	r0, #6
 800224c:	f000 fd37 	bl	8002cbe <SSD1306_ScrollRight>



  f_mount(&USERFatFS,USERPath,0);
 8002250:	2200      	movs	r2, #0
 8002252:	497a      	ldr	r1, [pc, #488]	; (800243c <main+0x2a8>)
 8002254:	487a      	ldr	r0, [pc, #488]	; (8002440 <main+0x2ac>)
 8002256:	f009 f911 	bl	800b47c <f_mount>
  f_open(&USERFile,"OXY.txt",FA_CREATE_ALWAYS | FA_WRITE);
 800225a:	220a      	movs	r2, #10
 800225c:	4979      	ldr	r1, [pc, #484]	; (8002444 <main+0x2b0>)
 800225e:	487a      	ldr	r0, [pc, #488]	; (8002448 <main+0x2b4>)
 8002260:	f009 f954 	bl	800b50c <f_open>
  uint32_t output;
  f_write(&USERFile,"VALORES:\n",strlen("VALORES:\n"),(void*)&output);
 8002264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002268:	2209      	movs	r2, #9
 800226a:	4978      	ldr	r1, [pc, #480]	; (800244c <main+0x2b8>)
 800226c:	4876      	ldr	r0, [pc, #472]	; (8002448 <main+0x2b4>)
 800226e:	f009 fbc6 	bl	800b9fe <f_write>
  f_sync(&USERFile);
 8002272:	4875      	ldr	r0, [pc, #468]	; (8002448 <main+0x2b4>)
 8002274:	f009 fd70 	bl	800bd58 <f_sync>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado){
 8002278:	4b75      	ldr	r3, [pc, #468]	; (8002450 <main+0x2bc>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d8fb      	bhi.n	8002278 <main+0xe4>
 8002280:	a201      	add	r2, pc, #4	; (adr r2, 8002288 <main+0xf4>)
 8002282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002286:	bf00      	nop
 8002288:	08002299 	.word	0x08002299
 800228c:	080022c9 	.word	0x080022c9
 8002290:	080023ad 	.word	0x080023ad
 8002294:	08002495 	.word	0x08002495
	  case INICIANDO:
	  	  //PANTALLA 1: INICIANDO EL DISPOSITIVO
/////////////////////////////////////////////////////////////////////////////

		  if(!CONTADOR_1)
 8002298:	4b6e      	ldr	r3, [pc, #440]	; (8002454 <main+0x2c0>)
 800229a:	881b      	ldrh	r3, [r3, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	f040 8221 	bne.w	80026e4 <main+0x550>
		  {
			  estado=PREPARADO;
 80022a2:	4b6b      	ldr	r3, [pc, #428]	; (8002450 <main+0x2bc>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
			  CONTADOR_1=DEMORA;
 80022a8:	4b6a      	ldr	r3, [pc, #424]	; (8002454 <main+0x2c0>)
 80022aa:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80022ae:	801a      	strh	r2, [r3, #0]
			  SSD1306_Stopscroll();
 80022b0:	f000 fd3b 	bl	8002d2a <SSD1306_Stopscroll>
			  SSD1306_Clear();
 80022b4:	f000 ffcd 	bl	8003252 <SSD1306_Clear>

			  HAL_UART_Transmit(&huart2, mensaje_START, sizeof(mensaje_START), HAL_MAX_DELAY);
 80022b8:	f04f 33ff 	mov.w	r3, #4294967295
 80022bc:	2214      	movs	r2, #20
 80022be:	4966      	ldr	r1, [pc, #408]	; (8002458 <main+0x2c4>)
 80022c0:	4857      	ldr	r0, [pc, #348]	; (8002420 <main+0x28c>)
 80022c2:	f006 fc4a 	bl	8008b5a <HAL_UART_Transmit>
		  }
		  ///////////////////////////////////////////////////////////////////
		  break;
 80022c6:	e20d      	b.n	80026e4 <main+0x550>
	  case PREPARADO:
		  	  //PANTALLA 2: PULSAR PARA COMENZAR LA MEDICIÓN
/////////////////////////////////////////////////////////////////////////////
		  SSD1306_DrawBitmap(0, 0, LOGO, 128, 64, 1);
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2340      	movs	r3, #64	; 0x40
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	4a62      	ldr	r2, [pc, #392]	; (800245c <main+0x2c8>)
 80022d4:	2100      	movs	r1, #0
 80022d6:	2000      	movs	r0, #0
 80022d8:	f000 fd30 	bl	8002d3c <SSD1306_DrawBitmap>
		  SSD1306_GotoXY(70, 0);
 80022dc:	2100      	movs	r1, #0
 80022de:	2046      	movs	r0, #70	; 0x46
 80022e0:	f000 fefc 	bl	80030dc <SSD1306_GotoXY>
		  SSD1306_Puts("'OK'",&Font_11x18,1);
 80022e4:	2201      	movs	r2, #1
 80022e6:	495e      	ldr	r1, [pc, #376]	; (8002460 <main+0x2cc>)
 80022e8:	485e      	ldr	r0, [pc, #376]	; (8002464 <main+0x2d0>)
 80022ea:	f000 ff8d 	bl	8003208 <SSD1306_Puts>
		  SSD1306_GotoXY(80, 27);
 80022ee:	211b      	movs	r1, #27
 80022f0:	2050      	movs	r0, #80	; 0x50
 80022f2:	f000 fef3 	bl	80030dc <SSD1306_GotoXY>
		  SSD1306_Puts("para",&Font_7x10,1);
 80022f6:	2201      	movs	r2, #1
 80022f8:	494a      	ldr	r1, [pc, #296]	; (8002424 <main+0x290>)
 80022fa:	485b      	ldr	r0, [pc, #364]	; (8002468 <main+0x2d4>)
 80022fc:	f000 ff84 	bl	8003208 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 50);
 8002300:	2132      	movs	r1, #50	; 0x32
 8002302:	2046      	movs	r0, #70	; 0x46
 8002304:	f000 feea 	bl	80030dc <SSD1306_GotoXY>
		  SSD1306_Puts("iniciar",&Font_7x10,1);
 8002308:	2201      	movs	r2, #1
 800230a:	4946      	ldr	r1, [pc, #280]	; (8002424 <main+0x290>)
 800230c:	4857      	ldr	r0, [pc, #348]	; (800246c <main+0x2d8>)
 800230e:	f000 ff7b 	bl	8003208 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8002312:	f000 fe3f 	bl	8002f94 <SSD1306_UpdateScreen>
////////////////////////////////////////////////////////////////////////////


		  if(!CONTADOR_1 && flag_pulsador_valido)
 8002316:	4b4f      	ldr	r3, [pc, #316]	; (8002454 <main+0x2c0>)
 8002318:	881b      	ldrh	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d118      	bne.n	8002350 <main+0x1bc>
 800231e:	4b54      	ldr	r3, [pc, #336]	; (8002470 <main+0x2dc>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d014      	beq.n	8002350 <main+0x1bc>
		  {
			estado=MIDIENDO;							//SE ESPERA QUE SE ACCIONE EL PULSADOR. CUANDO SE PULSA, FLAG_PULSADOR=1
 8002326:	4b4a      	ldr	r3, [pc, #296]	; (8002450 <main+0x2bc>)
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
			MAX30100_I2C_Reset_FIFO();				//SE RESETEA EL FIFO Y SE LIMPIA LA VARIABLE RESULT
 800232c:	f7ff fc28 	bl	8001b80 <MAX30100_I2C_Reset_FIFO>
			CONTADOR_3=DEMORA4;						//CAMBIO AL SIGUIENTE ESTADO "MIDIENDO"
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <main+0x2e0>)
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	801a      	strh	r2, [r3, #0]
			Resetea_Resultados(&result);
 8002338:	484f      	ldr	r0, [pc, #316]	; (8002478 <main+0x2e4>)
 800233a:	f7ff fba1 	bl	8001a80 <Resetea_Resultados>
			flag_limpiar=1;
 800233e:	4b4f      	ldr	r3, [pc, #316]	; (800247c <main+0x2e8>)
 8002340:	2201      	movs	r2, #1
 8002342:	701a      	strb	r2, [r3, #0]
			flag_primera=1;
 8002344:	4b4e      	ldr	r3, [pc, #312]	; (8002480 <main+0x2ec>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
			flag_pulsador_valido=0;
 800234a:	4b49      	ldr	r3, [pc, #292]	; (8002470 <main+0x2dc>)
 800234c:	2200      	movs	r2, #0
 800234e:	701a      	strb	r2, [r3, #0]


		  }

		  if(flag_limpiar)
 8002350:	4b4a      	ldr	r3, [pc, #296]	; (800247c <main+0x2e8>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <main+0x1ce>
		  {
			  SSD1306_Clear();							//FLAG PARA LIMPIAR CORRECTAMENTE LA PANTALLA Y EVITAR PARPADEOS
 8002358:	f000 ff7b 	bl	8003252 <SSD1306_Clear>
			  flag_limpiar=0;
 800235c:	4b47      	ldr	r3, [pc, #284]	; (800247c <main+0x2e8>)
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
		  }

		  if(CONTADOR_1 && !flag_pulsador_valido && !flag_mensaje)
 8002362:	4b3c      	ldr	r3, [pc, #240]	; (8002454 <main+0x2c0>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 81be 	beq.w	80026e8 <main+0x554>
 800236c:	4b40      	ldr	r3, [pc, #256]	; (8002470 <main+0x2dc>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	f083 0301 	eor.w	r3, r3, #1
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 81b6 	beq.w	80026e8 <main+0x554>
 800237c:	4b41      	ldr	r3, [pc, #260]	; (8002484 <main+0x2f0>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f083 0301 	eor.w	r3, r3, #1
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 81ae 	beq.w	80026e8 <main+0x554>
		  {
			  HAL_UART_Transmit(&huart2, mensaje_MIDIENDO, sizeof(mensaje_MIDIENDO), HAL_MAX_DELAY);
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	2211      	movs	r2, #17
 8002392:	493d      	ldr	r1, [pc, #244]	; (8002488 <main+0x2f4>)
 8002394:	4822      	ldr	r0, [pc, #136]	; (8002420 <main+0x28c>)
 8002396:	f006 fbe0 	bl	8008b5a <HAL_UART_Transmit>
			  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 800239a:	2201      	movs	r2, #1
 800239c:	491f      	ldr	r1, [pc, #124]	; (800241c <main+0x288>)
 800239e:	4820      	ldr	r0, [pc, #128]	; (8002420 <main+0x28c>)
 80023a0:	f006 fc6d 	bl	8008c7e <HAL_UART_Receive_IT>
			  flag_mensaje=1;
 80023a4:	4b37      	ldr	r3, [pc, #220]	; (8002484 <main+0x2f0>)
 80023a6:	2201      	movs	r2, #1
 80023a8:	701a      	strb	r2, [r3, #0]
		  }
		  break;
 80023aa:	e19d      	b.n	80026e8 <main+0x554>
		  	  	  	  	  	 	 	 	 	 	 	 	 //TRANSMISIÓN BLUETOOTH mensaje_START "Iniciando OXY_PULSE.."

	  case MIDIENDO:

		  result=Actualizar_Resultados();				//ACTUALIZACIÓN DE LA VARIABLE "result" IMPLEMENTANDO EL ALGORITMO EN MAX30100.c
 80023ac:	4c32      	ldr	r4, [pc, #200]	; (8002478 <main+0x2e4>)
 80023ae:	463b      	mov	r3, r7
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe ff65 	bl	8001280 <Actualizar_Resultados>
 80023b6:	4625      	mov	r5, r4
 80023b8:	463c      	mov	r4, r7
 80023ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	6823      	ldr	r3, [r4, #0]
 80023c4:	602b      	str	r3, [r5, #0]

		  estado=PRESENTACION;							//CAMBIO DE ESTADO AL SIGUIENTE CASE PARA PRESENTAR VALORES EN PANTALLA
 80023c6:	4b22      	ldr	r3, [pc, #136]	; (8002450 <main+0x2bc>)
 80023c8:	2203      	movs	r2, #3
 80023ca:	701a      	strb	r2, [r3, #0]
		  CONTADOR_1=DEMORA3; 							//DEMORA DE 27ms PARA LA CORRECTA EJECUCION DEL FILTRADO
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <main+0x2c0>)
 80023ce:	221b      	movs	r2, #27
 80023d0:	801a      	strh	r2, [r3, #0]

		  //CONTADOR_3=DEMORA4;

		  if(flag_primera && !flag_limpiar)
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <main+0x2ec>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 8188 	beq.w	80026ec <main+0x558>
 80023dc:	4b27      	ldr	r3, [pc, #156]	; (800247c <main+0x2e8>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8180 	beq.w	80026ec <main+0x558>
		  {
			  flag_rebote=0;
 80023ec:	4b27      	ldr	r3, [pc, #156]	; (800248c <main+0x2f8>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
			  flag_limpiar=1;							//LA PRIMERA VEZ QUE SE PASA POR EL CASE "MIDIENDO" DEBO LIMPIAR LA PANTALLA
 80023f2:	4b22      	ldr	r3, [pc, #136]	; (800247c <main+0x2e8>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
			  flag_primera=0;							//EN FUTUROS PASOS FLAG_PRIMERA=0
 80023f8:	4b21      	ldr	r3, [pc, #132]	; (8002480 <main+0x2ec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	701a      	strb	r2, [r3, #0]
			  CONTADOR_2=DEMORA;						//DEMORA PARA LIMPIAR PANTALLA
 80023fe:	4b24      	ldr	r3, [pc, #144]	; (8002490 <main+0x2fc>)
 8002400:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002404:	801a      	strh	r2, [r3, #0]
		  }
			//  antirrebote=ACTIVADO;
		  break;
 8002406:	e171      	b.n	80026ec <main+0x558>
 8002408:	200003ac 	.word	0x200003ac
 800240c:	40010c00 	.word	0x40010c00
 8002410:	200002ec 	.word	0x200002ec
 8002414:	200002d8 	.word	0x200002d8
 8002418:	200013ac 	.word	0x200013ac
 800241c:	200003c7 	.word	0x200003c7
 8002420:	20000344 	.word	0x20000344
 8002424:	2000004c 	.word	0x2000004c
 8002428:	0800ced0 	.word	0x0800ced0
 800242c:	2000005c 	.word	0x2000005c
 8002430:	0800ced8 	.word	0x0800ced8
 8002434:	0800cedc 	.word	0x0800cedc
 8002438:	0800cee4 	.word	0x0800cee4
 800243c:	200017c4 	.word	0x200017c4
 8002440:	200017c8 	.word	0x200017c8
 8002444:	0800cef4 	.word	0x0800cef4
 8002448:	200019f8 	.word	0x200019f8
 800244c:	0800cefc 	.word	0x0800cefc
 8002450:	200003c6 	.word	0x200003c6
 8002454:	20000068 	.word	0x20000068
 8002458:	2000006c 	.word	0x2000006c
 800245c:	0800f7b8 	.word	0x0800f7b8
 8002460:	20000054 	.word	0x20000054
 8002464:	0800cf08 	.word	0x0800cf08
 8002468:	0800cf10 	.word	0x0800cf10
 800246c:	0800cf18 	.word	0x0800cf18
 8002470:	200003c9 	.word	0x200003c9
 8002474:	200003c0 	.word	0x200003c0
 8002478:	20000388 	.word	0x20000388
 800247c:	200003ca 	.word	0x200003ca
 8002480:	200000a3 	.word	0x200000a3
 8002484:	200003cb 	.word	0x200003cb
 8002488:	20000080 	.word	0x20000080
 800248c:	200003cc 	.word	0x200003cc
 8002490:	2000006a 	.word	0x2000006a
	  case PRESENTACION:

		  if(flag_limpiar && !flag_primera)								//LIMPIO PANTALLA SOLO LA PRIMERA VEZ
 8002494:	4b97      	ldr	r3, [pc, #604]	; (80026f4 <main+0x560>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d011      	beq.n	80024c0 <main+0x32c>
 800249c:	4b96      	ldr	r3, [pc, #600]	; (80026f8 <main+0x564>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f083 0301 	eor.w	r3, r3, #1
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <main+0x32c>
		  {
			SSD1306_Clear();
 80024aa:	f000 fed2 	bl	8003252 <SSD1306_Clear>
			flag_limpiar=1;
 80024ae:	4b91      	ldr	r3, [pc, #580]	; (80026f4 <main+0x560>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	701a      	strb	r2, [r3, #0]
			flag_primera=1;
 80024b4:	4b90      	ldr	r3, [pc, #576]	; (80026f8 <main+0x564>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
			i=0;
 80024ba:	4b90      	ldr	r3, [pc, #576]	; (80026fc <main+0x568>)
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
		  }

		  if(result.pulseDetected == true)
 80024c0:	4b8f      	ldr	r3, [pc, #572]	; (8002700 <main+0x56c>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80c1 	beq.w	800264c <main+0x4b8>
		  {
				  flag_pulso_perdido=0;
 80024ca:	4b8e      	ldr	r3, [pc, #568]	; (8002704 <main+0x570>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
				  CONTADOR_4=0;
 80024d0:	4b8d      	ldr	r3, [pc, #564]	; (8002708 <main+0x574>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
				  buf1=(uint8_t)result.heartBPM;
 80024d6:	4b8a      	ldr	r3, [pc, #552]	; (8002700 <main+0x56c>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fdd0 	bl	8001080 <__aeabi_f2uiz>
 80024e0:	4603      	mov	r3, r0
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b89      	ldr	r3, [pc, #548]	; (800270c <main+0x578>)
 80024e6:	701a      	strb	r2, [r3, #0]
				  buf2=(uint8_t)result.SaO2;
 80024e8:	4b85      	ldr	r3, [pc, #532]	; (8002700 <main+0x56c>)
 80024ea:	695b      	ldr	r3, [r3, #20]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe fdc7 	bl	8001080 <__aeabi_f2uiz>
 80024f2:	4603      	mov	r3, r0
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b86      	ldr	r3, [pc, #536]	; (8002710 <main+0x57c>)
 80024f8:	701a      	strb	r2, [r3, #0]

				  if(buf2>99)
 80024fa:	4b85      	ldr	r3, [pc, #532]	; (8002710 <main+0x57c>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b63      	cmp	r3, #99	; 0x63
 8002500:	d902      	bls.n	8002508 <main+0x374>
				  {
					  buf2=99;				//PARA NO MOSTRAR PORCENTAJES MAYORES A 99%
 8002502:	4b83      	ldr	r3, [pc, #524]	; (8002710 <main+0x57c>)
 8002504:	2263      	movs	r2, #99	; 0x63
 8002506:	701a      	strb	r2, [r3, #0]
				  }

				  sprintf(bufferserie_bpm,"%s %u \n",mensaje_BPM,(unsigned)buf1);
 8002508:	4b80      	ldr	r3, [pc, #512]	; (800270c <main+0x578>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	4a81      	ldr	r2, [pc, #516]	; (8002714 <main+0x580>)
 800250e:	4982      	ldr	r1, [pc, #520]	; (8002718 <main+0x584>)
 8002510:	4882      	ldr	r0, [pc, #520]	; (800271c <main+0x588>)
 8002512:	f009 fd8f 	bl	800c034 <siprintf>
				  sprintf(bufferserie_SPO2,"%s %u \n",mensaje_SPO2,(unsigned)buf2);
 8002516:	4b7e      	ldr	r3, [pc, #504]	; (8002710 <main+0x57c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	4a81      	ldr	r2, [pc, #516]	; (8002720 <main+0x58c>)
 800251c:	497e      	ldr	r1, [pc, #504]	; (8002718 <main+0x584>)
 800251e:	4881      	ldr	r0, [pc, #516]	; (8002724 <main+0x590>)
 8002520:	f009 fd88 	bl	800c034 <siprintf>
				  //sprintf(bufferserie_bpm,"%s %u \n",mensaje_BPM,(unsigned)result.heartBPM);
				  //sprintf(bufferserie_SPO2,"%s %u \n",mensaje_SPO2,(unsigned)result.SaO2);

				  sprintf(buffer_bpm,"%u",buf1);
 8002524:	4b79      	ldr	r3, [pc, #484]	; (800270c <main+0x578>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	497f      	ldr	r1, [pc, #508]	; (8002728 <main+0x594>)
 800252c:	487f      	ldr	r0, [pc, #508]	; (800272c <main+0x598>)
 800252e:	f009 fd81 	bl	800c034 <siprintf>
				  sprintf(buffer_SO2,"%u",buf2);
 8002532:	4b77      	ldr	r3, [pc, #476]	; (8002710 <main+0x57c>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	461a      	mov	r2, r3
 8002538:	497b      	ldr	r1, [pc, #492]	; (8002728 <main+0x594>)
 800253a:	487d      	ldr	r0, [pc, #500]	; (8002730 <main+0x59c>)
 800253c:	f009 fd7a 	bl	800c034 <siprintf>

				  HAL_UART_Transmit(&huart2, (uint8_t*)bufferserie_bpm, strlen(bufferserie_bpm), HAL_MAX_DELAY);
 8002540:	4876      	ldr	r0, [pc, #472]	; (800271c <main+0x588>)
 8002542:	f7fd fe05 	bl	8000150 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
 800254e:	4973      	ldr	r1, [pc, #460]	; (800271c <main+0x588>)
 8002550:	4878      	ldr	r0, [pc, #480]	; (8002734 <main+0x5a0>)
 8002552:	f006 fb02 	bl	8008b5a <HAL_UART_Transmit>
				  HAL_UART_Transmit(&huart2, (uint8_t*)bufferserie_SPO2, strlen(bufferserie_SPO2), HAL_MAX_DELAY);
 8002556:	4873      	ldr	r0, [pc, #460]	; (8002724 <main+0x590>)
 8002558:	f7fd fdfa 	bl	8000150 <strlen>
 800255c:	4603      	mov	r3, r0
 800255e:	b29a      	uxth	r2, r3
 8002560:	f04f 33ff 	mov.w	r3, #4294967295
 8002564:	496f      	ldr	r1, [pc, #444]	; (8002724 <main+0x590>)
 8002566:	4873      	ldr	r0, [pc, #460]	; (8002734 <main+0x5a0>)
 8002568:	f006 faf7 	bl	8008b5a <HAL_UART_Transmit>

				  strcpy(vectorSD[j],bufferserie_bpm);
 800256c:	4b72      	ldr	r3, [pc, #456]	; (8002738 <main+0x5a4>)
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4613      	mov	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4a70      	ldr	r2, [pc, #448]	; (800273c <main+0x5a8>)
 800257c:	4413      	add	r3, r2
 800257e:	4967      	ldr	r1, [pc, #412]	; (800271c <main+0x588>)
 8002580:	4618      	mov	r0, r3
 8002582:	f009 fd77 	bl	800c074 <strcpy>
				  j++;
 8002586:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <main+0x5a4>)
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	b29a      	uxth	r2, r3
 800258e:	4b6a      	ldr	r3, [pc, #424]	; (8002738 <main+0x5a4>)
 8002590:	801a      	strh	r2, [r3, #0]
				  strcpy(vectorSD[j],bufferserie_SPO2);
 8002592:	4b69      	ldr	r3, [pc, #420]	; (8002738 <main+0x5a4>)
 8002594:	881b      	ldrh	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	4613      	mov	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4a66      	ldr	r2, [pc, #408]	; (800273c <main+0x5a8>)
 80025a2:	4413      	add	r3, r2
 80025a4:	495f      	ldr	r1, [pc, #380]	; (8002724 <main+0x590>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f009 fd64 	bl	800c074 <strcpy>
				  j++;
 80025ac:	4b62      	ldr	r3, [pc, #392]	; (8002738 <main+0x5a4>)
 80025ae:	881b      	ldrh	r3, [r3, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	b29a      	uxth	r2, r3
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <main+0x5a4>)
 80025b6:	801a      	strh	r2, [r3, #0]
				  /*
				  f_write(&USERFile,bufferserie_bpm,strlen(bufferserie_bpm),(void*)&output);
				  f_write(&USERFile,bufferserie_SPO2,strlen(bufferserie_SPO2),(void*)&output);
				  f_sync(&USERFile);
				  */
				  if(!flag_limpiar && buf1<100)
 80025b8:	4b4e      	ldr	r3, [pc, #312]	; (80026f4 <main+0x560>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d008      	beq.n	80025d8 <main+0x444>
 80025c6:	4b51      	ldr	r3, [pc, #324]	; (800270c <main+0x578>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b63      	cmp	r3, #99	; 0x63
 80025cc:	d804      	bhi.n	80025d8 <main+0x444>
				  {
					  SSD1306_Clear();
 80025ce:	f000 fe40 	bl	8003252 <SSD1306_Clear>
					  flag_limpiar=1;
 80025d2:	4b48      	ldr	r3, [pc, #288]	; (80026f4 <main+0x560>)
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
				  }

				  SSD1306_GotoXY(10, 5);
 80025d8:	2105      	movs	r1, #5
 80025da:	200a      	movs	r0, #10
 80025dc:	f000 fd7e 	bl	80030dc <SSD1306_GotoXY>
				  SSD1306_Puts("BPM:",&Font_11x18,1);
 80025e0:	2201      	movs	r2, #1
 80025e2:	4957      	ldr	r1, [pc, #348]	; (8002740 <main+0x5ac>)
 80025e4:	4857      	ldr	r0, [pc, #348]	; (8002744 <main+0x5b0>)
 80025e6:	f000 fe0f 	bl	8003208 <SSD1306_Puts>
				  SSD1306_GotoXY(70, 5);
 80025ea:	2105      	movs	r1, #5
 80025ec:	2046      	movs	r0, #70	; 0x46
 80025ee:	f000 fd75 	bl	80030dc <SSD1306_GotoXY>
				  SSD1306_Puts(buffer_bpm,&Font_11x18,1);
 80025f2:	2201      	movs	r2, #1
 80025f4:	4952      	ldr	r1, [pc, #328]	; (8002740 <main+0x5ac>)
 80025f6:	484d      	ldr	r0, [pc, #308]	; (800272c <main+0x598>)
 80025f8:	f000 fe06 	bl	8003208 <SSD1306_Puts>
				  //SSD1306_Putc(buf1, &Font_11x18, 1);
				  SSD1306_GotoXY(10, 35);
 80025fc:	2123      	movs	r1, #35	; 0x23
 80025fe:	200a      	movs	r0, #10
 8002600:	f000 fd6c 	bl	80030dc <SSD1306_GotoXY>
				  SSD1306_Puts("SO2:",&Font_11x18,1);
 8002604:	2201      	movs	r2, #1
 8002606:	494e      	ldr	r1, [pc, #312]	; (8002740 <main+0x5ac>)
 8002608:	484f      	ldr	r0, [pc, #316]	; (8002748 <main+0x5b4>)
 800260a:	f000 fdfd 	bl	8003208 <SSD1306_Puts>
				  SSD1306_GotoXY(70, 35);
 800260e:	2123      	movs	r1, #35	; 0x23
 8002610:	2046      	movs	r0, #70	; 0x46
 8002612:	f000 fd63 	bl	80030dc <SSD1306_GotoXY>
				  SSD1306_Puts(buffer_SO2,&Font_11x18,1);
 8002616:	2201      	movs	r2, #1
 8002618:	4949      	ldr	r1, [pc, #292]	; (8002740 <main+0x5ac>)
 800261a:	4845      	ldr	r0, [pc, #276]	; (8002730 <main+0x59c>)
 800261c:	f000 fdf4 	bl	8003208 <SSD1306_Puts>
				  //SSD1306_Putc(buf2, &Font_11x18, 1);
				  SSD1306_GotoXY(90, 35);
 8002620:	2123      	movs	r1, #35	; 0x23
 8002622:	205a      	movs	r0, #90	; 0x5a
 8002624:	f000 fd5a 	bl	80030dc <SSD1306_GotoXY>
				  SSD1306_Puts(" %",&Font_11x18,1);
 8002628:	2201      	movs	r2, #1
 800262a:	4945      	ldr	r1, [pc, #276]	; (8002740 <main+0x5ac>)
 800262c:	4847      	ldr	r0, [pc, #284]	; (800274c <main+0x5b8>)
 800262e:	f000 fdeb 	bl	8003208 <SSD1306_Puts>
				  SSD1306_UpdateScreen();
 8002632:	f000 fcaf 	bl	8002f94 <SSD1306_UpdateScreen>

				  if(flag_limpiar && buf1>100)
 8002636:	4b2f      	ldr	r3, [pc, #188]	; (80026f4 <main+0x560>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <main+0x4b8>
 800263e:	4b33      	ldr	r3, [pc, #204]	; (800270c <main+0x578>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b64      	cmp	r3, #100	; 0x64
 8002644:	d902      	bls.n	800264c <main+0x4b8>
				  {
					  flag_limpiar=0;
 8002646:	4b2b      	ldr	r3, [pc, #172]	; (80026f4 <main+0x560>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
				  }
			  }

			  if(!CONTADOR_1 && !flag_pulsador_valido)
 800264c:	4b40      	ldr	r3, [pc, #256]	; (8002750 <main+0x5bc>)
 800264e:	881b      	ldrh	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10c      	bne.n	800266e <main+0x4da>
 8002654:	4b3f      	ldr	r3, [pc, #252]	; (8002754 <main+0x5c0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	f083 0301 	eor.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d005      	beq.n	800266e <main+0x4da>
			  {
				  estado=MIDIENDO;
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <main+0x5c4>)
 8002664:	2202      	movs	r2, #2
 8002666:	701a      	strb	r2, [r3, #0]
				  CONTADOR_1=0;
 8002668:	4b39      	ldr	r3, [pc, #228]	; (8002750 <main+0x5bc>)
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]
			  }

		  	  if(flag_pulsador_valido)
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <main+0x5c0>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d03c      	beq.n	80026f0 <main+0x55c>
		  	  {
		  		  estado=PREPARADO;
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <main+0x5c4>)
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
		  		  flag_limpiar=1;
 800267c:	4b1d      	ldr	r3, [pc, #116]	; (80026f4 <main+0x560>)
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
		  		  flag_primera=1;
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <main+0x564>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
		  		  flag_pulsador_valido=0;
 8002688:	4b32      	ldr	r3, [pc, #200]	; (8002754 <main+0x5c0>)
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
		  		  for(int k=0;k<j;k++)
 800268e:	2300      	movs	r3, #0
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002692:	e01a      	b.n	80026ca <main+0x536>
		  		  {
					  f_write(&USERFile,vectorSD[k],strlen(vectorSD[k]),(void*)&output);
 8002694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002696:	4613      	mov	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	4a27      	ldr	r2, [pc, #156]	; (800273c <main+0x5a8>)
 80026a0:	189c      	adds	r4, r3, r2
 80026a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026a4:	4613      	mov	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	4413      	add	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4a23      	ldr	r2, [pc, #140]	; (800273c <main+0x5a8>)
 80026ae:	4413      	add	r3, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd fd4d 	bl	8000150 <strlen>
 80026b6:	4602      	mov	r2, r0
 80026b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026bc:	4621      	mov	r1, r4
 80026be:	4827      	ldr	r0, [pc, #156]	; (800275c <main+0x5c8>)
 80026c0:	f009 f99d 	bl	800b9fe <f_write>
		  		  for(int k=0;k<j;k++)
 80026c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c6:	3301      	adds	r3, #1
 80026c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ca:	4b1b      	ldr	r3, [pc, #108]	; (8002738 <main+0x5a4>)
 80026cc:	881b      	ldrh	r3, [r3, #0]
 80026ce:	461a      	mov	r2, r3
 80026d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d2:	4293      	cmp	r3, r2
 80026d4:	dbde      	blt.n	8002694 <main+0x500>
		  		  }
		  		  f_sync(&USERFile);
 80026d6:	4821      	ldr	r0, [pc, #132]	; (800275c <main+0x5c8>)
 80026d8:	f009 fb3e 	bl	800bd58 <f_sync>
		  		  f_close(&USERFile);
 80026dc:	481f      	ldr	r0, [pc, #124]	; (800275c <main+0x5c8>)
 80026de:	f009 fbf5 	bl	800becc <f_close>
				  default:;
				  }
			  }
*/

		  break;
 80026e2:	e005      	b.n	80026f0 <main+0x55c>
		  break;
 80026e4:	bf00      	nop
 80026e6:	e5c7      	b.n	8002278 <main+0xe4>
		  break;
 80026e8:	bf00      	nop
 80026ea:	e5c5      	b.n	8002278 <main+0xe4>
		  break;
 80026ec:	bf00      	nop
 80026ee:	e5c3      	b.n	8002278 <main+0xe4>
		  break;
 80026f0:	bf00      	nop
	  switch(estado){
 80026f2:	e5c1      	b.n	8002278 <main+0xe4>
 80026f4:	200003ca 	.word	0x200003ca
 80026f8:	200000a3 	.word	0x200000a3
 80026fc:	200003cf 	.word	0x200003cf
 8002700:	20000388 	.word	0x20000388
 8002704:	200003c8 	.word	0x200003c8
 8002708:	200003c2 	.word	0x200003c2
 800270c:	200003cd 	.word	0x200003cd
 8002710:	200003ce 	.word	0x200003ce
 8002714:	20000094 	.word	0x20000094
 8002718:	0800cf20 	.word	0x0800cf20
 800271c:	200003d4 	.word	0x200003d4
 8002720:	2000009c 	.word	0x2000009c
 8002724:	200003e8 	.word	0x200003e8
 8002728:	0800cf28 	.word	0x0800cf28
 800272c:	200003fc 	.word	0x200003fc
 8002730:	20000404 	.word	0x20000404
 8002734:	20000344 	.word	0x20000344
 8002738:	200003d0 	.word	0x200003d0
 800273c:	2000040c 	.word	0x2000040c
 8002740:	20000054 	.word	0x20000054
 8002744:	0800cf2c 	.word	0x0800cf2c
 8002748:	0800cf34 	.word	0x0800cf34
 800274c:	0800cf3c 	.word	0x0800cf3c
 8002750:	20000068 	.word	0x20000068
 8002754:	200003c9 	.word	0x200003c9
 8002758:	200003c6 	.word	0x200003c6
 800275c:	200019f8 	.word	0x200019f8

08002760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b094      	sub	sp, #80	; 0x50
 8002764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800276a:	2228      	movs	r2, #40	; 0x28
 800276c:	2100      	movs	r1, #0
 800276e:	4618      	mov	r0, r3
 8002770:	f009 fc58 	bl	800c024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002774:	f107 0314 	add.w	r3, r7, #20
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	605a      	str	r2, [r3, #4]
 800277e:	609a      	str	r2, [r3, #8]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002784:	1d3b      	adds	r3, r7, #4
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
 800278c:	609a      	str	r2, [r3, #8]
 800278e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800279e:	2301      	movs	r3, #1
 80027a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a2:	2302      	movs	r3, #2
 80027a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 f8d4 	bl	8006964 <HAL_RCC_OscConfig>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027c2:	f000 fa77 	bl	8002cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027c6:	230f      	movs	r3, #15
 80027c8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027ca:	2302      	movs	r3, #2
 80027cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027ce:	2300      	movs	r3, #0
 80027d0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027d8:	2300      	movs	r3, #0
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027dc:	f107 0314 	add.w	r3, r7, #20
 80027e0:	2102      	movs	r1, #2
 80027e2:	4618      	mov	r0, r3
 80027e4:	f004 fb40 	bl	8006e68 <HAL_RCC_ClockConfig>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027ee:	f000 fa61 	bl	8002cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027f2:	2301      	movs	r3, #1
 80027f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV128;
 80027f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80027fa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027fc:	1d3b      	adds	r3, r7, #4
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fcca 	bl	8007198 <HAL_RCCEx_PeriphCLKConfig>
 8002804:	4603      	mov	r3, r0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d001      	beq.n	800280e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800280a:	f000 fa53 	bl	8002cb4 <Error_Handler>
  }
}
 800280e:	bf00      	nop
 8002810:	3750      	adds	r7, #80	; 0x50
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800281c:	4b12      	ldr	r3, [pc, #72]	; (8002868 <MX_I2C1_Init+0x50>)
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <MX_I2C1_Init+0x54>)
 8002820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002822:	4b11      	ldr	r3, [pc, #68]	; (8002868 <MX_I2C1_Init+0x50>)
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <MX_I2C1_Init+0x58>)
 8002826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002828:	4b0f      	ldr	r3, [pc, #60]	; (8002868 <MX_I2C1_Init+0x50>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800282e:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <MX_I2C1_Init+0x50>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002834:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <MX_I2C1_Init+0x50>)
 8002836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800283a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800283c:	4b0a      	ldr	r3, [pc, #40]	; (8002868 <MX_I2C1_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <MX_I2C1_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <MX_I2C1_Init+0x50>)
 800284a:	2200      	movs	r2, #0
 800284c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800284e:	4b06      	ldr	r3, [pc, #24]	; (8002868 <MX_I2C1_Init+0x50>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002854:	4804      	ldr	r0, [pc, #16]	; (8002868 <MX_I2C1_Init+0x50>)
 8002856:	f001 fbc7 	bl	8003fe8 <HAL_I2C_Init>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002860:	f000 fa28 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002864:	bf00      	nop
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20000230 	.word	0x20000230
 800286c:	40005400 	.word	0x40005400
 8002870:	000186a0 	.word	0x000186a0

08002874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <MX_I2C2_Init+0x50>)
 800287a:	4a13      	ldr	r2, [pc, #76]	; (80028c8 <MX_I2C2_Init+0x54>)
 800287c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <MX_I2C2_Init+0x50>)
 8002880:	4a12      	ldr	r2, [pc, #72]	; (80028cc <MX_I2C2_Init+0x58>)
 8002882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <MX_I2C2_Init+0x50>)
 8002886:	2200      	movs	r2, #0
 8002888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800288a:	4b0e      	ldr	r3, [pc, #56]	; (80028c4 <MX_I2C2_Init+0x50>)
 800288c:	2200      	movs	r2, #0
 800288e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <MX_I2C2_Init+0x50>)
 8002892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002896:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002898:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <MX_I2C2_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800289e:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <MX_I2C2_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028a4:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <MX_I2C2_Init+0x50>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <MX_I2C2_Init+0x50>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028b0:	4804      	ldr	r0, [pc, #16]	; (80028c4 <MX_I2C2_Init+0x50>)
 80028b2:	f001 fb99 	bl	8003fe8 <HAL_I2C_Init>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80028bc:	f000 f9fa 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028c0:	bf00      	nop
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20000284 	.word	0x20000284
 80028c8:	40005800 	.word	0x40005800
 80028cc:	00061a80 	.word	0x00061a80

080028d0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80028d6:	1d3b      	adds	r3, r7, #4
 80028d8:	2100      	movs	r1, #0
 80028da:	460a      	mov	r2, r1
 80028dc:	801a      	strh	r2, [r3, #0]
 80028de:	460a      	mov	r2, r1
 80028e0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80028e2:	2300      	movs	r3, #0
 80028e4:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80028e6:	4b1d      	ldr	r3, [pc, #116]	; (800295c <MX_RTC_Init+0x8c>)
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <MX_RTC_Init+0x90>)
 80028ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80028ec:	4b1b      	ldr	r3, [pc, #108]	; (800295c <MX_RTC_Init+0x8c>)
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295
 80028f2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80028f4:	4b19      	ldr	r3, [pc, #100]	; (800295c <MX_RTC_Init+0x8c>)
 80028f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028fa:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028fc:	4817      	ldr	r0, [pc, #92]	; (800295c <MX_RTC_Init+0x8c>)
 80028fe:	f004 fdc1 	bl	8007484 <HAL_RTC_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d001      	beq.n	800290c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8002908:	f000 f9d4 	bl	8002cb4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 800290c:	2322      	movs	r3, #34	; 0x22
 800290e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x50;
 8002910:	2350      	movs	r3, #80	; 0x50
 8002912:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002914:	2300      	movs	r3, #0
 8002916:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002918:	1d3b      	adds	r3, r7, #4
 800291a:	2201      	movs	r2, #1
 800291c:	4619      	mov	r1, r3
 800291e:	480f      	ldr	r0, [pc, #60]	; (800295c <MX_RTC_Init+0x8c>)
 8002920:	f004 fe46 	bl	80075b0 <HAL_RTC_SetTime>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800292a:	f000 f9c3 	bl	8002cb4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800292e:	2305      	movs	r3, #5
 8002930:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8002932:	2311      	movs	r3, #17
 8002934:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x4;
 8002936:	2304      	movs	r3, #4
 8002938:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x22;
 800293a:	2322      	movs	r3, #34	; 0x22
 800293c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 800293e:	463b      	mov	r3, r7
 8002940:	2201      	movs	r2, #1
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <MX_RTC_Init+0x8c>)
 8002946:	f004 ffa3 	bl	8007890 <HAL_RTC_SetDate>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d001      	beq.n	8002954 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8002950:	f000 f9b0 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200002d8 	.word	0x200002d8
 8002960:	40002800 	.word	0x40002800

08002964 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002968:	4b17      	ldr	r3, [pc, #92]	; (80029c8 <MX_SPI2_Init+0x64>)
 800296a:	4a18      	ldr	r2, [pc, #96]	; (80029cc <MX_SPI2_Init+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800296e:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <MX_SPI2_Init+0x64>)
 8002970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002974:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002976:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <MX_SPI2_Init+0x64>)
 8002978:	2200      	movs	r2, #0
 800297a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_SPI2_Init+0x64>)
 800297e:	2200      	movs	r2, #0
 8002980:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_SPI2_Init+0x64>)
 8002984:	2200      	movs	r2, #0
 8002986:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <MX_SPI2_Init+0x64>)
 800298a:	2200      	movs	r2, #0
 800298c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_SPI2_Init+0x64>)
 8002990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002994:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002996:	4b0c      	ldr	r3, [pc, #48]	; (80029c8 <MX_SPI2_Init+0x64>)
 8002998:	2230      	movs	r2, #48	; 0x30
 800299a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800299c:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <MX_SPI2_Init+0x64>)
 800299e:	2200      	movs	r2, #0
 80029a0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <MX_SPI2_Init+0x64>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80029a8:	4b07      	ldr	r3, [pc, #28]	; (80029c8 <MX_SPI2_Init+0x64>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <MX_SPI2_Init+0x64>)
 80029b0:	220a      	movs	r2, #10
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80029b4:	4804      	ldr	r0, [pc, #16]	; (80029c8 <MX_SPI2_Init+0x64>)
 80029b6:	f005 fb17 	bl	8007fe8 <HAL_SPI_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80029c0:	f000 f978 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200002ec 	.word	0x200002ec
 80029cc:	40003800 	.word	0x40003800

080029d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__USART2_CLK_ENABLE();
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <MX_USART2_UART_Init+0x78>)
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	4a1b      	ldr	r2, [pc, #108]	; (8002a48 <MX_USART2_UART_Init+0x78>)
 80029dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e0:	61d3      	str	r3, [r2, #28]
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <MX_USART2_UART_Init+0x78>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	607b      	str	r3, [r7, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80029ee:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 80029f0:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <MX_USART2_UART_Init+0x80>)
 80029f2:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80029f4:	4b15      	ldr	r3, [pc, #84]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 80029f6:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80029fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a08:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a0e:	4b0f      	ldr	r3, [pc, #60]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a10:	220c      	movs	r2, #12
 8002a12:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a14:	4b0d      	ldr	r3, [pc, #52]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a1a:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a20:	480a      	ldr	r0, [pc, #40]	; (8002a4c <MX_USART2_UART_Init+0x7c>)
 8002a22:	f006 f84d 	bl	8008ac0 <HAL_UART_Init>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 8002a2c:	f000 f942 	bl	8002cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2100      	movs	r1, #0
 8002a34:	2026      	movs	r0, #38	; 0x26
 8002a36:	f001 f818 	bl	8003a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a3a:	2026      	movs	r0, #38	; 0x26
 8002a3c:	f001 f831 	bl	8003aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	20000344 	.word	0x20000344
 8002a50:	40004400 	.word	0x40004400

08002a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b088      	sub	sp, #32
 8002a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5a:	f107 0310 	add.w	r3, r7, #16
 8002a5e:	2200      	movs	r2, #0
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a68:	4b39      	ldr	r3, [pc, #228]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4a38      	ldr	r2, [pc, #224]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6193      	str	r3, [r2, #24]
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a80:	4b33      	ldr	r3, [pc, #204]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a86:	f043 0320 	orr.w	r3, r3, #32
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b30      	ldr	r3, [pc, #192]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0320 	and.w	r3, r3, #32
 8002a94:	60bb      	str	r3, [r7, #8]
 8002a96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a98:	4b2d      	ldr	r3, [pc, #180]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a2c      	ldr	r2, [pc, #176]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	607b      	str	r3, [r7, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab0:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a26      	ldr	r2, [pc, #152]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002ab6:	f043 0308 	orr.w	r3, r3, #8
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b24      	ldr	r3, [pc, #144]	; (8002b50 <MX_GPIO_Init+0xfc>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	603b      	str	r3, [r7, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ace:	4821      	ldr	r0, [pc, #132]	; (8002b54 <MX_GPIO_Init+0x100>)
 8002ad0:	f001 fa59 	bl	8003f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ada:	481f      	ldr	r0, [pc, #124]	; (8002b58 <MX_GPIO_Init+0x104>)
 8002adc:	f001 fa53 	bl	8003f86 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002ae0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2302      	movs	r3, #2
 8002af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002af2:	f107 0310 	add.w	r3, r7, #16
 8002af6:	4619      	mov	r1, r3
 8002af8:	4816      	ldr	r0, [pc, #88]	; (8002b54 <MX_GPIO_Init+0x100>)
 8002afa:	f001 f8a9 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002afe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b04:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <MX_GPIO_Init+0x108>)
 8002b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	f107 0310 	add.w	r3, r7, #16
 8002b10:	4619      	mov	r1, r3
 8002b12:	4810      	ldr	r0, [pc, #64]	; (8002b54 <MX_GPIO_Init+0x100>)
 8002b14:	f001 f89c 	bl	8003c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8002b18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b26:	2302      	movs	r3, #2
 8002b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8002b2a:	f107 0310 	add.w	r3, r7, #16
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4809      	ldr	r0, [pc, #36]	; (8002b58 <MX_GPIO_Init+0x104>)
 8002b32:	f001 f88d 	bl	8003c50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002b36:	2200      	movs	r2, #0
 8002b38:	2100      	movs	r1, #0
 8002b3a:	2028      	movs	r0, #40	; 0x28
 8002b3c:	f000 ff95 	bl	8003a6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002b40:	2028      	movs	r0, #40	; 0x28
 8002b42:	f000 ffae 	bl	8003aa2 <HAL_NVIC_EnableIRQ>

}
 8002b46:	bf00      	nop
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40011000 	.word	0x40011000
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	10210000 	.word	0x10210000

08002b60 <HAL_IncTick>:
//Parámetros: 		void
//Valor devuelto: 	void
//*************************************************************

void HAL_IncTick(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b64:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_IncTick+0xb4>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_IncTick+0xb8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4413      	add	r3, r2
 8002b70:	4a29      	ldr	r2, [pc, #164]	; (8002c18 <HAL_IncTick+0xb8>)
 8002b72:	6013      	str	r3, [r2, #0]

  if(CONTADOR_1)
 8002b74:	4b29      	ldr	r3, [pc, #164]	; (8002c1c <HAL_IncTick+0xbc>)
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_IncTick+0x28>
	  CONTADOR_1--;
 8002b7c:	4b27      	ldr	r3, [pc, #156]	; (8002c1c <HAL_IncTick+0xbc>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	3b01      	subs	r3, #1
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b25      	ldr	r3, [pc, #148]	; (8002c1c <HAL_IncTick+0xbc>)
 8002b86:	801a      	strh	r2, [r3, #0]

  if(CONTADOR_2)
 8002b88:	4b25      	ldr	r3, [pc, #148]	; (8002c20 <HAL_IncTick+0xc0>)
 8002b8a:	881b      	ldrh	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_IncTick+0x3c>
	  CONTADOR_2--;
 8002b90:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_IncTick+0xc0>)
 8002b92:	881b      	ldrh	r3, [r3, #0]
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_IncTick+0xc0>)
 8002b9a:	801a      	strh	r2, [r3, #0]

  if(CONTADOR_3)
 8002b9c:	4b21      	ldr	r3, [pc, #132]	; (8002c24 <HAL_IncTick+0xc4>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_IncTick+0x50>
	  CONTADOR_3--;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_IncTick+0xc4>)
 8002ba6:	881b      	ldrh	r3, [r3, #0]
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_IncTick+0xc4>)
 8002bae:	801a      	strh	r2, [r3, #0]

  if(CONTADOR_4)
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <HAL_IncTick+0xc8>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d005      	beq.n	8002bc4 <HAL_IncTick+0x64>
	  CONTADOR_4--;
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_IncTick+0xc8>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <HAL_IncTick+0xc8>)
 8002bc2:	801a      	strh	r2, [r3, #0]

  if(CONTADOR_ANTIRREBOTE)
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_IncTick+0xcc>)
 8002bc6:	881b      	ldrh	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <HAL_IncTick+0x78>
	  CONTADOR_ANTIRREBOTE--;
 8002bcc:	4b17      	ldr	r3, [pc, #92]	; (8002c2c <HAL_IncTick+0xcc>)
 8002bce:	881b      	ldrh	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	4b15      	ldr	r3, [pc, #84]	; (8002c2c <HAL_IncTick+0xcc>)
 8002bd6:	801a      	strh	r2, [r3, #0]

  if(!CONTADOR_ANTIRREBOTE && HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14)==0 && !flag_estado_irq)
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <HAL_IncTick+0xcc>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d117      	bne.n	8002c10 <HAL_IncTick+0xb0>
 8002be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002be4:	4812      	ldr	r0, [pc, #72]	; (8002c30 <HAL_IncTick+0xd0>)
 8002be6:	f001 f9b7 	bl	8003f58 <HAL_GPIO_ReadPin>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d10f      	bne.n	8002c10 <HAL_IncTick+0xb0>
 8002bf0:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_IncTick+0xd4>)
 8002bf2:	781b      	ldrb	r3, [r3, #0]
 8002bf4:	f083 0301 	eor.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_IncTick+0xb0>
  {
	  flag_pulsador_valido=1;
 8002bfe:	4b0e      	ldr	r3, [pc, #56]	; (8002c38 <HAL_IncTick+0xd8>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
	  CONTADOR_ANTIRREBOTE=0;
 8002c04:	4b09      	ldr	r3, [pc, #36]	; (8002c2c <HAL_IncTick+0xcc>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	801a      	strh	r2, [r3, #0]
	  flag_estado_irq=1;
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <HAL_IncTick+0xd4>)
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
  }
}
 8002c10:	bf00      	nop
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	200000ac 	.word	0x200000ac
 8002c18:	200017bc 	.word	0x200017bc
 8002c1c:	20000068 	.word	0x20000068
 8002c20:	2000006a 	.word	0x2000006a
 8002c24:	200003c0 	.word	0x200003c0
 8002c28:	200003c2 	.word	0x200003c2
 8002c2c:	200003c4 	.word	0x200003c4
 8002c30:	40011000 	.word	0x40011000
 8002c34:	200000a2 	.word	0x200000a2
 8002c38:	200003c9 	.word	0x200003c9

08002c3c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

		if (byte == '1')
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
*/
	//Habilito la interrupción
	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8002c44:	2201      	movs	r2, #1
 8002c46:	4904      	ldr	r1, [pc, #16]	; (8002c58 <HAL_UART_RxCpltCallback+0x1c>)
 8002c48:	4804      	ldr	r0, [pc, #16]	; (8002c5c <HAL_UART_RxCpltCallback+0x20>)
 8002c4a:	f006 f818 	bl	8008c7e <HAL_UART_Receive_IT>
}
 8002c4e:	bf00      	nop
 8002c50:	3708      	adds	r7, #8
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	200003c7 	.word	0x200003c7
 8002c5c:	20000344 	.word	0x20000344

08002c60 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
	//HAL_UART_Transmit(&huart2, &buf1, sizeof(buf1), HAL_MAX_DELAY);
	HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4904      	ldr	r1, [pc, #16]	; (8002c7c <HAL_UART_TxCpltCallback+0x1c>)
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <HAL_UART_TxCpltCallback+0x20>)
 8002c6e:	f006 f806 	bl	8008c7e <HAL_UART_Receive_IT>
}
 8002c72:	bf00      	nop
 8002c74:	3708      	adds	r7, #8
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	200003c7 	.word	0x200003c7
 8002c80:	20000344 	.word	0x20000344

08002c84 <HAL_GPIO_EXTI_Callback>:
//Descripción: 		Manejo de la interrucpción externa
//Parámetros: 		uint16_t GPIO_Pin
//Valor devuelto: 	void
//*************************************************************
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
	if(flag_estado_irq)
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <HAL_GPIO_EXTI_Callback+0x28>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d005      	beq.n	8002ca2 <HAL_GPIO_EXTI_Callback+0x1e>
	{

		flag_estado_irq=0;
 8002c96:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_GPIO_EXTI_Callback+0x28>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	701a      	strb	r2, [r3, #0]
		CONTADOR_ANTIRREBOTE=50;
 8002c9c:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8002c9e:	2232      	movs	r2, #50	; 0x32
 8002ca0:	801a      	strh	r2, [r3, #0]
	}
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	200000a2 	.word	0x200000a2
 8002cb0:	200003c4 	.word	0x200003c4

08002cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002cb8:	b672      	cpsid	i
}
 8002cba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002cbc:	e7fe      	b.n	8002cbc <Error_Handler+0x8>

08002cbe <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b082      	sub	sp, #8
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	460a      	mov	r2, r1
 8002cc8:	71fb      	strb	r3, [r7, #7]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002cce:	2226      	movs	r2, #38	; 0x26
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	2078      	movs	r0, #120	; 0x78
 8002cd4:	f000 fb40 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2100      	movs	r1, #0
 8002cdc:	2078      	movs	r0, #120	; 0x78
 8002cde:	f000 fb3b 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	2078      	movs	r0, #120	; 0x78
 8002cea:	f000 fb35 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	2078      	movs	r0, #120	; 0x78
 8002cf4:	f000 fb30 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2078      	movs	r0, #120	; 0x78
 8002d00:	f000 fb2a 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2078      	movs	r0, #120	; 0x78
 8002d0a:	f000 fb25 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 8002d0e:	22ff      	movs	r2, #255	; 0xff
 8002d10:	2100      	movs	r1, #0
 8002d12:	2078      	movs	r0, #120	; 0x78
 8002d14:	f000 fb20 	bl	8003358 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8002d18:	222f      	movs	r2, #47	; 0x2f
 8002d1a:	2100      	movs	r1, #0
 8002d1c:	2078      	movs	r0, #120	; 0x78
 8002d1e:	f000 fb1b 	bl	8003358 <ssd1306_I2C_Write>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002d2e:	222e      	movs	r2, #46	; 0x2e
 8002d30:	2100      	movs	r1, #0
 8002d32:	2078      	movs	r0, #120	; 0x78
 8002d34:	f000 fb10 	bl	8003358 <ssd1306_I2C_Write>
}
 8002d38:	bf00      	nop
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	60ba      	str	r2, [r7, #8]
 8002d44:	461a      	mov	r2, r3
 8002d46:	4603      	mov	r3, r0
 8002d48:	81fb      	strh	r3, [r7, #14]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	81bb      	strh	r3, [r7, #12]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8002d52:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d56:	3307      	adds	r3, #7
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	da00      	bge.n	8002d5e <SSD1306_DrawBitmap+0x22>
 8002d5c:	3307      	adds	r3, #7
 8002d5e:	10db      	asrs	r3, r3, #3
 8002d60:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002d66:	2300      	movs	r3, #0
 8002d68:	82bb      	strh	r3, [r7, #20]
 8002d6a:	e044      	b.n	8002df6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	827b      	strh	r3, [r7, #18]
 8002d70:	e02f      	b.n	8002dd2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002d72:	8a7b      	ldrh	r3, [r7, #18]
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002d7c:	7dfb      	ldrb	r3, [r7, #23]
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	75fb      	strb	r3, [r7, #23]
 8002d82:	e012      	b.n	8002daa <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002d84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002d88:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002d8c:	fb03 f202 	mul.w	r2, r3, r2
 8002d90:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da00      	bge.n	8002d9a <SSD1306_DrawBitmap+0x5e>
 8002d98:	3307      	adds	r3, #7
 8002d9a:	10db      	asrs	r3, r3, #3
 8002d9c:	b21b      	sxth	r3, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	461a      	mov	r2, r3
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4413      	add	r3, r2
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	da09      	bge.n	8002dc6 <SSD1306_DrawBitmap+0x8a>
 8002db2:	89fa      	ldrh	r2, [r7, #14]
 8002db4:	8a7b      	ldrh	r3, [r7, #18]
 8002db6:	4413      	add	r3, r2
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	89b9      	ldrh	r1, [r7, #12]
 8002dbc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002dbe:	b2d2      	uxtb	r2, r2
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f000 f92d 	bl	8003020 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002dc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	3301      	adds	r3, #1
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	827b      	strh	r3, [r7, #18]
 8002dd2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	dbc9      	blt.n	8002d72 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002dde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	3301      	adds	r3, #1
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	82bb      	strh	r3, [r7, #20]
 8002dea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	3301      	adds	r3, #1
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	81bb      	strh	r3, [r7, #12]
 8002df6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8002dfa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	dbb4      	blt.n	8002d6c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8002e12:	f000 fa27 	bl	8003264 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8002e16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2178      	movs	r1, #120	; 0x78
 8002e1e:	485b      	ldr	r0, [pc, #364]	; (8002f8c <SSD1306_Init+0x180>)
 8002e20:	f001 fd84 	bl	800492c <HAL_I2C_IsDeviceReady>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	e0a9      	b.n	8002f82 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8002e2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002e32:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e34:	e002      	b.n	8002e3c <SSD1306_Init+0x30>
		p--;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8002e42:	22ae      	movs	r2, #174	; 0xae
 8002e44:	2100      	movs	r1, #0
 8002e46:	2078      	movs	r0, #120	; 0x78
 8002e48:	f000 fa86 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2078      	movs	r0, #120	; 0x78
 8002e52:	f000 fa81 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002e56:	2210      	movs	r2, #16
 8002e58:	2100      	movs	r1, #0
 8002e5a:	2078      	movs	r0, #120	; 0x78
 8002e5c:	f000 fa7c 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e60:	22b0      	movs	r2, #176	; 0xb0
 8002e62:	2100      	movs	r1, #0
 8002e64:	2078      	movs	r0, #120	; 0x78
 8002e66:	f000 fa77 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002e6a:	22c8      	movs	r2, #200	; 0xc8
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2078      	movs	r0, #120	; 0x78
 8002e70:	f000 fa72 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	2078      	movs	r0, #120	; 0x78
 8002e7a:	f000 fa6d 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002e7e:	2210      	movs	r2, #16
 8002e80:	2100      	movs	r1, #0
 8002e82:	2078      	movs	r0, #120	; 0x78
 8002e84:	f000 fa68 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	2078      	movs	r0, #120	; 0x78
 8002e8e:	f000 fa63 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002e92:	2281      	movs	r2, #129	; 0x81
 8002e94:	2100      	movs	r1, #0
 8002e96:	2078      	movs	r0, #120	; 0x78
 8002e98:	f000 fa5e 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002e9c:	22ff      	movs	r2, #255	; 0xff
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	2078      	movs	r0, #120	; 0x78
 8002ea2:	f000 fa59 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002ea6:	22a1      	movs	r2, #161	; 0xa1
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	2078      	movs	r0, #120	; 0x78
 8002eac:	f000 fa54 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002eb0:	22a6      	movs	r2, #166	; 0xa6
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	2078      	movs	r0, #120	; 0x78
 8002eb6:	f000 fa4f 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002eba:	22a8      	movs	r2, #168	; 0xa8
 8002ebc:	2100      	movs	r1, #0
 8002ebe:	2078      	movs	r0, #120	; 0x78
 8002ec0:	f000 fa4a 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002ec4:	223f      	movs	r2, #63	; 0x3f
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	2078      	movs	r0, #120	; 0x78
 8002eca:	f000 fa45 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ece:	22a4      	movs	r2, #164	; 0xa4
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	2078      	movs	r0, #120	; 0x78
 8002ed4:	f000 fa40 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002ed8:	22d3      	movs	r2, #211	; 0xd3
 8002eda:	2100      	movs	r1, #0
 8002edc:	2078      	movs	r0, #120	; 0x78
 8002ede:	f000 fa3b 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	2078      	movs	r0, #120	; 0x78
 8002ee8:	f000 fa36 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002eec:	22d5      	movs	r2, #213	; 0xd5
 8002eee:	2100      	movs	r1, #0
 8002ef0:	2078      	movs	r0, #120	; 0x78
 8002ef2:	f000 fa31 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002ef6:	22f0      	movs	r2, #240	; 0xf0
 8002ef8:	2100      	movs	r1, #0
 8002efa:	2078      	movs	r0, #120	; 0x78
 8002efc:	f000 fa2c 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002f00:	22d9      	movs	r2, #217	; 0xd9
 8002f02:	2100      	movs	r1, #0
 8002f04:	2078      	movs	r0, #120	; 0x78
 8002f06:	f000 fa27 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002f0a:	2222      	movs	r2, #34	; 0x22
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	2078      	movs	r0, #120	; 0x78
 8002f10:	f000 fa22 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002f14:	22da      	movs	r2, #218	; 0xda
 8002f16:	2100      	movs	r1, #0
 8002f18:	2078      	movs	r0, #120	; 0x78
 8002f1a:	f000 fa1d 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002f1e:	2212      	movs	r2, #18
 8002f20:	2100      	movs	r1, #0
 8002f22:	2078      	movs	r0, #120	; 0x78
 8002f24:	f000 fa18 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002f28:	22db      	movs	r2, #219	; 0xdb
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	2078      	movs	r0, #120	; 0x78
 8002f2e:	f000 fa13 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002f32:	2220      	movs	r2, #32
 8002f34:	2100      	movs	r1, #0
 8002f36:	2078      	movs	r0, #120	; 0x78
 8002f38:	f000 fa0e 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002f3c:	228d      	movs	r2, #141	; 0x8d
 8002f3e:	2100      	movs	r1, #0
 8002f40:	2078      	movs	r0, #120	; 0x78
 8002f42:	f000 fa09 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002f46:	2214      	movs	r2, #20
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2078      	movs	r0, #120	; 0x78
 8002f4c:	f000 fa04 	bl	8003358 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002f50:	22af      	movs	r2, #175	; 0xaf
 8002f52:	2100      	movs	r1, #0
 8002f54:	2078      	movs	r0, #120	; 0x78
 8002f56:	f000 f9ff 	bl	8003358 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002f5a:	222e      	movs	r2, #46	; 0x2e
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	2078      	movs	r0, #120	; 0x78
 8002f60:	f000 f9fa 	bl	8003358 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002f64:	2000      	movs	r0, #0
 8002f66:	f000 f843 	bl	8002ff0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002f6a:	f000 f813 	bl	8002f94 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <SSD1306_Init+0x184>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <SSD1306_Init+0x184>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <SSD1306_Init+0x184>)
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002f80:	2301      	movs	r3, #1
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000284 	.word	0x20000284
 8002f90:	200017b0 	.word	0x200017b0

08002f94 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	71fb      	strb	r3, [r7, #7]
 8002f9e:	e01d      	b.n	8002fdc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	3b50      	subs	r3, #80	; 0x50
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2078      	movs	r0, #120	; 0x78
 8002fac:	f000 f9d4 	bl	8003358 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	2078      	movs	r0, #120	; 0x78
 8002fb6:	f000 f9cf 	bl	8003358 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002fba:	2210      	movs	r2, #16
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	2078      	movs	r0, #120	; 0x78
 8002fc0:	f000 f9ca 	bl	8003358 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	01db      	lsls	r3, r3, #7
 8002fc8:	4a08      	ldr	r2, [pc, #32]	; (8002fec <SSD1306_UpdateScreen+0x58>)
 8002fca:	441a      	add	r2, r3
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	2140      	movs	r1, #64	; 0x40
 8002fd0:	2078      	movs	r0, #120	; 0x78
 8002fd2:	f000 f95b 	bl	800328c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	3301      	adds	r3, #1
 8002fda:	71fb      	strb	r3, [r7, #7]
 8002fdc:	79fb      	ldrb	r3, [r7, #7]
 8002fde:	2b07      	cmp	r3, #7
 8002fe0:	d9de      	bls.n	8002fa0 <SSD1306_UpdateScreen+0xc>
	}
}
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	200013b0 	.word	0x200013b0

08002ff0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002ffa:	79fb      	ldrb	r3, [r7, #7]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <SSD1306_Fill+0x14>
 8003000:	2300      	movs	r3, #0
 8003002:	e000      	b.n	8003006 <SSD1306_Fill+0x16>
 8003004:	23ff      	movs	r3, #255	; 0xff
 8003006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300a:	4619      	mov	r1, r3
 800300c:	4803      	ldr	r0, [pc, #12]	; (800301c <SSD1306_Fill+0x2c>)
 800300e:	f009 f809 	bl	800c024 <memset>
}
 8003012:	bf00      	nop
 8003014:	3708      	adds	r7, #8
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200013b0 	.word	0x200013b0

08003020 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	80fb      	strh	r3, [r7, #6]
 800302a:	460b      	mov	r3, r1
 800302c:	80bb      	strh	r3, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	70fb      	strb	r3, [r7, #3]
	if (
 8003032:	88fb      	ldrh	r3, [r7, #6]
 8003034:	2b7f      	cmp	r3, #127	; 0x7f
 8003036:	d848      	bhi.n	80030ca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003038:	88bb      	ldrh	r3, [r7, #4]
 800303a:	2b3f      	cmp	r3, #63	; 0x3f
 800303c:	d845      	bhi.n	80030ca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800303e:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <SSD1306_DrawPixel+0xb4>)
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d006      	beq.n	8003054 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	2b00      	cmp	r3, #0
 800304a:	bf0c      	ite	eq
 800304c:	2301      	moveq	r3, #1
 800304e:	2300      	movne	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d11a      	bne.n	8003090 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800305a:	88fa      	ldrh	r2, [r7, #6]
 800305c:	88bb      	ldrh	r3, [r7, #4]
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	b298      	uxth	r0, r3
 8003062:	4603      	mov	r3, r0
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	4a1b      	ldr	r2, [pc, #108]	; (80030d8 <SSD1306_DrawPixel+0xb8>)
 800306a:	5cd3      	ldrb	r3, [r2, r3]
 800306c:	b25a      	sxtb	r2, r3
 800306e:	88bb      	ldrh	r3, [r7, #4]
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	2101      	movs	r1, #1
 8003076:	fa01 f303 	lsl.w	r3, r1, r3
 800307a:	b25b      	sxtb	r3, r3
 800307c:	4313      	orrs	r3, r2
 800307e:	b259      	sxtb	r1, r3
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	4603      	mov	r3, r0
 8003084:	01db      	lsls	r3, r3, #7
 8003086:	4413      	add	r3, r2
 8003088:	b2c9      	uxtb	r1, r1
 800308a:	4a13      	ldr	r2, [pc, #76]	; (80030d8 <SSD1306_DrawPixel+0xb8>)
 800308c:	54d1      	strb	r1, [r2, r3]
 800308e:	e01d      	b.n	80030cc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003090:	88fa      	ldrh	r2, [r7, #6]
 8003092:	88bb      	ldrh	r3, [r7, #4]
 8003094:	08db      	lsrs	r3, r3, #3
 8003096:	b298      	uxth	r0, r3
 8003098:	4603      	mov	r3, r0
 800309a:	01db      	lsls	r3, r3, #7
 800309c:	4413      	add	r3, r2
 800309e:	4a0e      	ldr	r2, [pc, #56]	; (80030d8 <SSD1306_DrawPixel+0xb8>)
 80030a0:	5cd3      	ldrb	r3, [r2, r3]
 80030a2:	b25a      	sxtb	r2, r3
 80030a4:	88bb      	ldrh	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	2101      	movs	r1, #1
 80030ac:	fa01 f303 	lsl.w	r3, r1, r3
 80030b0:	b25b      	sxtb	r3, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	b25b      	sxtb	r3, r3
 80030b6:	4013      	ands	r3, r2
 80030b8:	b259      	sxtb	r1, r3
 80030ba:	88fa      	ldrh	r2, [r7, #6]
 80030bc:	4603      	mov	r3, r0
 80030be:	01db      	lsls	r3, r3, #7
 80030c0:	4413      	add	r3, r2
 80030c2:	b2c9      	uxtb	r1, r1
 80030c4:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <SSD1306_DrawPixel+0xb8>)
 80030c6:	54d1      	strb	r1, [r2, r3]
 80030c8:	e000      	b.n	80030cc <SSD1306_DrawPixel+0xac>
		return;
 80030ca:	bf00      	nop
	}
}
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bc80      	pop	{r7}
 80030d2:	4770      	bx	lr
 80030d4:	200017b0 	.word	0x200017b0
 80030d8:	200013b0 	.word	0x200013b0

080030dc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	460a      	mov	r2, r1
 80030e6:	80fb      	strh	r3, [r7, #6]
 80030e8:	4613      	mov	r3, r2
 80030ea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80030ec:	4a05      	ldr	r2, [pc, #20]	; (8003104 <SSD1306_GotoXY+0x28>)
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80030f2:	4a04      	ldr	r2, [pc, #16]	; (8003104 <SSD1306_GotoXY+0x28>)
 80030f4:	88bb      	ldrh	r3, [r7, #4]
 80030f6:	8053      	strh	r3, [r2, #2]
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	200017b0 	.word	0x200017b0

08003108 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003108:	b580      	push	{r7, lr}
 800310a:	b086      	sub	sp, #24
 800310c:	af00      	add	r7, sp, #0
 800310e:	4603      	mov	r3, r0
 8003110:	6039      	str	r1, [r7, #0]
 8003112:	71fb      	strb	r3, [r7, #7]
 8003114:	4613      	mov	r3, r2
 8003116:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003118:	4b3a      	ldr	r3, [pc, #232]	; (8003204 <SSD1306_Putc+0xfc>)
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	4413      	add	r3, r2
	if (
 8003124:	2b7f      	cmp	r3, #127	; 0x7f
 8003126:	dc07      	bgt.n	8003138 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003128:	4b36      	ldr	r3, [pc, #216]	; (8003204 <SSD1306_Putc+0xfc>)
 800312a:	885b      	ldrh	r3, [r3, #2]
 800312c:	461a      	mov	r2, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	785b      	ldrb	r3, [r3, #1]
 8003132:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003134:	2b3f      	cmp	r3, #63	; 0x3f
 8003136:	dd01      	ble.n	800313c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003138:	2300      	movs	r3, #0
 800313a:	e05e      	b.n	80031fa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800313c:	2300      	movs	r3, #0
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e04b      	b.n	80031da <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	3b20      	subs	r3, #32
 800314a:	6839      	ldr	r1, [r7, #0]
 800314c:	7849      	ldrb	r1, [r1, #1]
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	4619      	mov	r1, r3
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	440b      	add	r3, r1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	881b      	ldrh	r3, [r3, #0]
 800315e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	e030      	b.n	80031c8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d010      	beq.n	8003198 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003176:	4b23      	ldr	r3, [pc, #140]	; (8003204 <SSD1306_Putc+0xfc>)
 8003178:	881a      	ldrh	r2, [r3, #0]
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	b29b      	uxth	r3, r3
 800317e:	4413      	add	r3, r2
 8003180:	b298      	uxth	r0, r3
 8003182:	4b20      	ldr	r3, [pc, #128]	; (8003204 <SSD1306_Putc+0xfc>)
 8003184:	885a      	ldrh	r2, [r3, #2]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	b29b      	uxth	r3, r3
 800318a:	4413      	add	r3, r2
 800318c:	b29b      	uxth	r3, r3
 800318e:	79ba      	ldrb	r2, [r7, #6]
 8003190:	4619      	mov	r1, r3
 8003192:	f7ff ff45 	bl	8003020 <SSD1306_DrawPixel>
 8003196:	e014      	b.n	80031c2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <SSD1306_Putc+0xfc>)
 800319a:	881a      	ldrh	r2, [r3, #0]
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	4413      	add	r3, r2
 80031a2:	b298      	uxth	r0, r3
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <SSD1306_Putc+0xfc>)
 80031a6:	885a      	ldrh	r2, [r3, #2]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	b299      	uxth	r1, r3
 80031b0:	79bb      	ldrb	r3, [r7, #6]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf0c      	ite	eq
 80031b6:	2301      	moveq	r3, #1
 80031b8:	2300      	movne	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	461a      	mov	r2, r3
 80031be:	f7ff ff2f 	bl	8003020 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	3301      	adds	r3, #1
 80031c6:	613b      	str	r3, [r7, #16]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	461a      	mov	r2, r3
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d3c8      	bcc.n	8003166 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	3301      	adds	r3, #1
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	785b      	ldrb	r3, [r3, #1]
 80031de:	461a      	mov	r2, r3
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d3ad      	bcc.n	8003142 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <SSD1306_Putc+0xfc>)
 80031e8:	881a      	ldrh	r2, [r3, #0]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4413      	add	r3, r2
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b03      	ldr	r3, [pc, #12]	; (8003204 <SSD1306_Putc+0xfc>)
 80031f6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80031f8:	79fb      	ldrb	r3, [r7, #7]
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200017b0 	.word	0x200017b0

08003208 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	4613      	mov	r3, r2
 8003214:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003216:	e012      	b.n	800323e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	79fa      	ldrb	r2, [r7, #7]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f7ff ff71 	bl	8003108 <SSD1306_Putc>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d002      	beq.n	8003238 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	e008      	b.n	800324a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3301      	adds	r3, #1
 800323c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e8      	bne.n	8003218 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	781b      	ldrb	r3, [r3, #0]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003256:	2000      	movs	r0, #0
 8003258:	f7ff feca 	bl	8002ff0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 800325c:	f7ff fe9a 	bl	8002f94 <SSD1306_UpdateScreen>
}
 8003260:	bf00      	nop
 8003262:	bd80      	pop	{r7, pc}

08003264 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <ssd1306_I2C_Init+0x24>)
 800326c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800326e:	e002      	b.n	8003276 <ssd1306_I2C_Init+0x12>
		p--;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3b01      	subs	r3, #1
 8003274:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d1f9      	bne.n	8003270 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	0003d090 	.word	0x0003d090

0800328c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800328c:	b590      	push	{r4, r7, lr}
 800328e:	b0c7      	sub	sp, #284	; 0x11c
 8003290:	af02      	add	r7, sp, #8
 8003292:	4604      	mov	r4, r0
 8003294:	4608      	mov	r0, r1
 8003296:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800329a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800329e:	600a      	str	r2, [r1, #0]
 80032a0:	4619      	mov	r1, r3
 80032a2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032a6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80032aa:	4622      	mov	r2, r4
 80032ac:	701a      	strb	r2, [r3, #0]
 80032ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032b2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80032b6:	4602      	mov	r2, r0
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80032c2:	460a      	mov	r2, r1
 80032c4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80032c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80032ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80032ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80032d2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80032d6:	7812      	ldrb	r2, [r2, #0]
 80032d8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80032e0:	e015      	b.n	800330e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80032e2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032e6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80032ea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	441a      	add	r2, r3
 80032f2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80032f6:	3301      	adds	r3, #1
 80032f8:	7811      	ldrb	r1, [r2, #0]
 80032fa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80032fe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8003302:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8003304:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003308:	3301      	adds	r3, #1
 800330a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800330e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003312:	b29b      	uxth	r3, r3
 8003314:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8003318:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800331c:	8812      	ldrh	r2, [r2, #0]
 800331e:	429a      	cmp	r2, r3
 8003320:	d8df      	bhi.n	80032e2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8003322:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003326:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	b299      	uxth	r1, r3
 800332e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8003332:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	b29b      	uxth	r3, r3
 800333c:	f107 020c 	add.w	r2, r7, #12
 8003340:	200a      	movs	r0, #10
 8003342:	9000      	str	r0, [sp, #0]
 8003344:	4803      	ldr	r0, [pc, #12]	; (8003354 <ssd1306_I2C_WriteMulti+0xc8>)
 8003346:	f000 ff93 	bl	8004270 <HAL_I2C_Master_Transmit>
}
 800334a:	bf00      	nop
 800334c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8003350:	46bd      	mov	sp, r7
 8003352:	bd90      	pop	{r4, r7, pc}
 8003354:	20000284 	.word	0x20000284

08003358 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af02      	add	r7, sp, #8
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
 8003362:	460b      	mov	r3, r1
 8003364:	71bb      	strb	r3, [r7, #6]
 8003366:	4613      	mov	r3, r2
 8003368:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800336a:	79bb      	ldrb	r3, [r7, #6]
 800336c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800336e:	797b      	ldrb	r3, [r7, #5]
 8003370:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	b299      	uxth	r1, r3
 8003376:	f107 020c 	add.w	r2, r7, #12
 800337a:	230a      	movs	r3, #10
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2302      	movs	r3, #2
 8003380:	4803      	ldr	r0, [pc, #12]	; (8003390 <ssd1306_I2C_Write+0x38>)
 8003382:	f000 ff75 	bl	8004270 <HAL_I2C_Master_Transmit>
}
 8003386:	bf00      	nop
 8003388:	3710      	adds	r7, #16
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	20000284 	.word	0x20000284

08003394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <HAL_MspInit+0x5c>)
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <HAL_MspInit+0x5c>)
 80033a0:	f043 0301 	orr.w	r3, r3, #1
 80033a4:	6193      	str	r3, [r2, #24]
 80033a6:	4b12      	ldr	r3, [pc, #72]	; (80033f0 <HAL_MspInit+0x5c>)
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <HAL_MspInit+0x5c>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a0e      	ldr	r2, [pc, #56]	; (80033f0 <HAL_MspInit+0x5c>)
 80033b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <HAL_MspInit+0x5c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033c6:	607b      	str	r3, [r7, #4]
 80033c8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_MspInit+0x60>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	4a04      	ldr	r2, [pc, #16]	; (80033f4 <HAL_MspInit+0x60>)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40010000 	.word	0x40010000

080033f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a33      	ldr	r2, [pc, #204]	; (80034e0 <HAL_I2C_MspInit+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d12c      	bne.n	8003472 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003418:	4b32      	ldr	r3, [pc, #200]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	4a31      	ldr	r2, [pc, #196]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800341e:	f043 0308 	orr.w	r3, r3, #8
 8003422:	6193      	str	r3, [r2, #24]
 8003424:	4b2f      	ldr	r3, [pc, #188]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	617b      	str	r3, [r7, #20]
 800342e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003430:	23c0      	movs	r3, #192	; 0xc0
 8003432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003434:	2312      	movs	r3, #18
 8003436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003438:	2303      	movs	r3, #3
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800343c:	f107 0318 	add.w	r3, r7, #24
 8003440:	4619      	mov	r1, r3
 8003442:	4829      	ldr	r0, [pc, #164]	; (80034e8 <HAL_I2C_MspInit+0xf0>)
 8003444:	f000 fc04 	bl	8003c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003448:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800344e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003452:	61d3      	str	r3, [r2, #28]
 8003454:	4b23      	ldr	r3, [pc, #140]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 8003456:	69db      	ldr	r3, [r3, #28]
 8003458:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
 8003462:	2100      	movs	r1, #0
 8003464:	201f      	movs	r0, #31
 8003466:	f000 fb00 	bl	8003a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800346a:	201f      	movs	r0, #31
 800346c:	f000 fb19 	bl	8003aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003470:	e031      	b.n	80034d6 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <HAL_I2C_MspInit+0xf4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d12c      	bne.n	80034d6 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800347c:	4b19      	ldr	r3, [pc, #100]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	6193      	str	r3, [r2, #24]
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003494:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349a:	2312      	movs	r3, #18
 800349c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800349e:	2303      	movs	r3, #3
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80034a2:	f107 0318 	add.w	r3, r7, #24
 80034a6:	4619      	mov	r1, r3
 80034a8:	480f      	ldr	r0, [pc, #60]	; (80034e8 <HAL_I2C_MspInit+0xf0>)
 80034aa:	f000 fbd1 	bl	8003c50 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80034ae:	4b0d      	ldr	r3, [pc, #52]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	4a0c      	ldr	r2, [pc, #48]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 80034b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034b8:	61d3      	str	r3, [r2, #28]
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <HAL_I2C_MspInit+0xec>)
 80034bc:	69db      	ldr	r3, [r3, #28]
 80034be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c2:	60bb      	str	r3, [r7, #8]
 80034c4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 80034c6:	2200      	movs	r2, #0
 80034c8:	2100      	movs	r1, #0
 80034ca:	2021      	movs	r0, #33	; 0x21
 80034cc:	f000 facd 	bl	8003a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80034d0:	2021      	movs	r0, #33	; 0x21
 80034d2:	f000 fae6 	bl	8003aa2 <HAL_NVIC_EnableIRQ>
}
 80034d6:	bf00      	nop
 80034d8:	3728      	adds	r7, #40	; 0x28
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40005400 	.word	0x40005400
 80034e4:	40021000 	.word	0x40021000
 80034e8:	40010c00 	.word	0x40010c00
 80034ec:	40005800 	.word	0x40005800

080034f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_RTC_MspInit+0x3c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d110      	bne.n	8003524 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8003502:	f003 fa23 	bl	800694c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8003506:	4b0a      	ldr	r3, [pc, #40]	; (8003530 <HAL_RTC_MspInit+0x40>)
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4a09      	ldr	r2, [pc, #36]	; (8003530 <HAL_RTC_MspInit+0x40>)
 800350c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003510:	61d3      	str	r3, [r2, #28]
 8003512:	4b07      	ldr	r3, [pc, #28]	; (8003530 <HAL_RTC_MspInit+0x40>)
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <HAL_RTC_MspInit+0x44>)
 8003520:	2201      	movs	r2, #1
 8003522:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003524:	bf00      	nop
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40002800 	.word	0x40002800
 8003530:	40021000 	.word	0x40021000
 8003534:	4242043c 	.word	0x4242043c

08003538 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b088      	sub	sp, #32
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003540:	f107 0310 	add.w	r3, r7, #16
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
 8003548:	605a      	str	r2, [r3, #4]
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_SPI_MspInit+0x8c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d131      	bne.n	80035bc <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003558:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 800355a:	69db      	ldr	r3, [r3, #28]
 800355c:	4a1a      	ldr	r2, [pc, #104]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 800355e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003562:	61d3      	str	r3, [r2, #28]
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003570:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 8003576:	f043 0308 	orr.w	r3, r3, #8
 800357a:	6193      	str	r3, [r2, #24]
 800357c:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <HAL_SPI_MspInit+0x90>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	60bb      	str	r3, [r7, #8]
 8003586:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8003588:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800358c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800358e:	2302      	movs	r3, #2
 8003590:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003592:	2303      	movs	r3, #3
 8003594:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003596:	f107 0310 	add.w	r3, r7, #16
 800359a:	4619      	mov	r1, r3
 800359c:	480b      	ldr	r0, [pc, #44]	; (80035cc <HAL_SPI_MspInit+0x94>)
 800359e:	f000 fb57 	bl	8003c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80035a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035b0:	f107 0310 	add.w	r3, r7, #16
 80035b4:	4619      	mov	r1, r3
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <HAL_SPI_MspInit+0x94>)
 80035b8:	f000 fb4a 	bl	8003c50 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80035bc:	bf00      	nop
 80035be:	3720      	adds	r7, #32
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40003800 	.word	0x40003800
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010c00 	.word	0x40010c00

080035d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d8:	f107 0310 	add.w	r3, r7, #16
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	609a      	str	r2, [r3, #8]
 80035e4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <HAL_UART_MspInit+0x98>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d137      	bne.n	8003660 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f0:	4b1e      	ldr	r3, [pc, #120]	; (800366c <HAL_UART_MspInit+0x9c>)
 80035f2:	69db      	ldr	r3, [r3, #28]
 80035f4:	4a1d      	ldr	r2, [pc, #116]	; (800366c <HAL_UART_MspInit+0x9c>)
 80035f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fa:	61d3      	str	r3, [r2, #28]
 80035fc:	4b1b      	ldr	r3, [pc, #108]	; (800366c <HAL_UART_MspInit+0x9c>)
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	60fb      	str	r3, [r7, #12]
 8003606:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003608:	4b18      	ldr	r3, [pc, #96]	; (800366c <HAL_UART_MspInit+0x9c>)
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	4a17      	ldr	r2, [pc, #92]	; (800366c <HAL_UART_MspInit+0x9c>)
 800360e:	f043 0304 	orr.w	r3, r3, #4
 8003612:	6193      	str	r3, [r2, #24]
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <HAL_UART_MspInit+0x9c>)
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003620:	2304      	movs	r3, #4
 8003622:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003624:	2302      	movs	r3, #2
 8003626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003628:	2303      	movs	r3, #3
 800362a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800362c:	f107 0310 	add.w	r3, r7, #16
 8003630:	4619      	mov	r1, r3
 8003632:	480f      	ldr	r0, [pc, #60]	; (8003670 <HAL_UART_MspInit+0xa0>)
 8003634:	f000 fb0c 	bl	8003c50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003638:	2308      	movs	r3, #8
 800363a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003640:	2300      	movs	r3, #0
 8003642:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003644:	f107 0310 	add.w	r3, r7, #16
 8003648:	4619      	mov	r1, r3
 800364a:	4809      	ldr	r0, [pc, #36]	; (8003670 <HAL_UART_MspInit+0xa0>)
 800364c:	f000 fb00 	bl	8003c50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003650:	2200      	movs	r2, #0
 8003652:	2100      	movs	r1, #0
 8003654:	2026      	movs	r0, #38	; 0x26
 8003656:	f000 fa08 	bl	8003a6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800365a:	2026      	movs	r0, #38	; 0x26
 800365c:	f000 fa21 	bl	8003aa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40004400 	.word	0x40004400
 800366c:	40021000 	.word	0x40021000
 8003670:	40010800 	.word	0x40010800

08003674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003678:	e7fe      	b.n	8003678 <NMI_Handler+0x4>

0800367a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800367a:	b480      	push	{r7}
 800367c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800367e:	e7fe      	b.n	800367e <HardFault_Handler+0x4>

08003680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003684:	e7fe      	b.n	8003684 <MemManage_Handler+0x4>

08003686 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003686:	b480      	push	{r7}
 8003688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800368a:	e7fe      	b.n	800368a <BusFault_Handler+0x4>

0800368c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003690:	e7fe      	b.n	8003690 <UsageFault_Handler+0x4>

08003692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr

0800369e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bc80      	pop	{r7}
 80036a8:	4770      	bx	lr

080036aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80036aa:	b480      	push	{r7}
 80036ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr

080036b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036b6:	b580      	push	{r7, lr}
 80036b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036ba:	f7ff fa51 	bl	8002b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
	...

080036c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036c8:	4802      	ldr	r0, [pc, #8]	; (80036d4 <I2C1_EV_IRQHandler+0x10>)
 80036ca:	f001 fa5d 	bl	8004b88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036ce:	bf00      	nop
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000230 	.word	0x20000230

080036d8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80036dc:	4802      	ldr	r0, [pc, #8]	; (80036e8 <I2C2_EV_IRQHandler+0x10>)
 80036de:	f001 fa53 	bl	8004b88 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000284 	.word	0x20000284

080036ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036f0:	4802      	ldr	r0, [pc, #8]	; (80036fc <USART2_IRQHandler+0x10>)
 80036f2:	f005 faf5 	bl	8008ce0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036f6:	bf00      	nop
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000344 	.word	0x20000344

08003700 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8003704:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003708:	f000 fc56 	bl	8003fb8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800370c:	bf00      	nop
 800370e:	bd80      	pop	{r7, pc}

08003710 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003718:	4a14      	ldr	r2, [pc, #80]	; (800376c <_sbrk+0x5c>)
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <_sbrk+0x60>)
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003724:	4b13      	ldr	r3, [pc, #76]	; (8003774 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d102      	bne.n	8003732 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <_sbrk+0x64>)
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <_sbrk+0x68>)
 8003730:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <_sbrk+0x64>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	429a      	cmp	r2, r3
 800373e:	d207      	bcs.n	8003750 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003740:	f008 fc46 	bl	800bfd0 <__errno>
 8003744:	4603      	mov	r3, r0
 8003746:	220c      	movs	r2, #12
 8003748:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800374a:	f04f 33ff 	mov.w	r3, #4294967295
 800374e:	e009      	b.n	8003764 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003750:	4b08      	ldr	r3, [pc, #32]	; (8003774 <_sbrk+0x64>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <_sbrk+0x64>)
 8003760:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003762:	68fb      	ldr	r3, [r7, #12]
}
 8003764:	4618      	mov	r0, r3
 8003766:	3718      	adds	r7, #24
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20005000 	.word	0x20005000
 8003770:	00000400 	.word	0x00000400
 8003774:	200017b8 	.word	0x200017b8
 8003778:	20001c60 	.word	0x20001c60

0800377c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800378a:	490d      	ldr	r1, [pc, #52]	; (80037c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800378c:	4a0d      	ldr	r2, [pc, #52]	; (80037c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800378e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003790:	e002      	b.n	8003798 <LoopCopyDataInit>

08003792 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003792:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003794:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003796:	3304      	adds	r3, #4

08003798 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003798:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800379a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800379c:	d3f9      	bcc.n	8003792 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800379e:	4a0a      	ldr	r2, [pc, #40]	; (80037c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80037a0:	4c0a      	ldr	r4, [pc, #40]	; (80037cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80037a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037a4:	e001      	b.n	80037aa <LoopFillZerobss>

080037a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037a8:	3204      	adds	r2, #4

080037aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ac:	d3fb      	bcc.n	80037a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ae:	f7ff ffe5 	bl	800377c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037b2:	f008 fc13 	bl	800bfdc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80037b6:	f7fe fced 	bl	8002194 <main>
  bx lr
 80037ba:	4770      	bx	lr
  ldr r0, =_sdata
 80037bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037c0:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80037c4:	0800fc0c 	.word	0x0800fc0c
  ldr r2, =_sbss
 80037c8:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80037cc:	20001c60 	.word	0x20001c60

080037d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80037d0:	e7fe      	b.n	80037d0 <ADC1_2_IRQHandler>
	...

080037d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d8:	4b08      	ldr	r3, [pc, #32]	; (80037fc <HAL_Init+0x28>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a07      	ldr	r2, [pc, #28]	; (80037fc <HAL_Init+0x28>)
 80037de:	f043 0310 	orr.w	r3, r3, #16
 80037e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037e4:	2003      	movs	r0, #3
 80037e6:	f000 f935 	bl	8003a54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037ea:	200f      	movs	r0, #15
 80037ec:	f000 f808 	bl	8003800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037f0:	f7ff fdd0 	bl	8003394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40022000 	.word	0x40022000

08003800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003808:	4b12      	ldr	r3, [pc, #72]	; (8003854 <HAL_InitTick+0x54>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b12      	ldr	r3, [pc, #72]	; (8003858 <HAL_InitTick+0x58>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	4619      	mov	r1, r3
 8003812:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003816:	fbb3 f3f1 	udiv	r3, r3, r1
 800381a:	fbb2 f3f3 	udiv	r3, r2, r3
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f94d 	bl	8003abe <HAL_SYSTICK_Config>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e00e      	b.n	800384c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b0f      	cmp	r3, #15
 8003832:	d80a      	bhi.n	800384a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003834:	2200      	movs	r2, #0
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	f04f 30ff 	mov.w	r0, #4294967295
 800383c:	f000 f915 	bl	8003a6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003840:	4a06      	ldr	r2, [pc, #24]	; (800385c <HAL_InitTick+0x5c>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003846:	2300      	movs	r3, #0
 8003848:	e000      	b.n	800384c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	200000a4 	.word	0x200000a4
 8003858:	200000ac 	.word	0x200000ac
 800385c:	200000a8 	.word	0x200000a8

08003860 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return uwTick;
 8003864:	4b02      	ldr	r3, [pc, #8]	; (8003870 <HAL_GetTick+0x10>)
 8003866:	681b      	ldr	r3, [r3, #0]
}
 8003868:	4618      	mov	r0, r3
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr
 8003870:	200017bc 	.word	0x200017bc

08003874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800387c:	f7ff fff0 	bl	8003860 <HAL_GetTick>
 8003880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388c:	d005      	beq.n	800389a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <HAL_Delay+0x44>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800389a:	bf00      	nop
 800389c:	f7ff ffe0 	bl	8003860 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d8f7      	bhi.n	800389c <HAL_Delay+0x28>
  {
  }
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	3710      	adds	r7, #16
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200000ac 	.word	0x200000ac

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4906      	ldr	r1, [pc, #24]	; (8003954 <__NVIC_EnableIRQ+0x34>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr
 8003954:	e000e100 	.word	0xe000e100

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	; (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	; (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	79fb      	ldrb	r3, [r7, #7]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr

08003a10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a20:	d301      	bcc.n	8003a26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a22:	2301      	movs	r3, #1
 8003a24:	e00f      	b.n	8003a46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a26:	4a0a      	ldr	r2, [pc, #40]	; (8003a50 <SysTick_Config+0x40>)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3b01      	subs	r3, #1
 8003a2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a2e:	210f      	movs	r1, #15
 8003a30:	f04f 30ff 	mov.w	r0, #4294967295
 8003a34:	f7ff ff90 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a38:	4b05      	ldr	r3, [pc, #20]	; (8003a50 <SysTick_Config+0x40>)
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a3e:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <SysTick_Config+0x40>)
 8003a40:	2207      	movs	r2, #7
 8003a42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	e000e010 	.word	0xe000e010

08003a54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff2d 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b086      	sub	sp, #24
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	4603      	mov	r3, r0
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7c:	f7ff ff42 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	6978      	ldr	r0, [r7, #20]
 8003a88:	f7ff ff90 	bl	80039ac <NVIC_EncodePriority>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff5f 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f7ff ff35 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b082      	sub	sp, #8
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7ff ffa2 	bl	8003a10 <SysTick_Config>
 8003acc:	4603      	mov	r3, r0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3708      	adds	r7, #8
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}

08003ad6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d008      	beq.n	8003afe <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2204      	movs	r2, #4
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e020      	b.n	8003b40 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 020e 	bic.w	r2, r2, #14
 8003b0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0201 	bic.w	r2, r2, #1
 8003b1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2101      	movs	r1, #1
 8003b28:	fa01 f202 	lsl.w	r2, r1, r2
 8003b2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
	...

08003b4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d005      	beq.n	8003b6e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2204      	movs	r2, #4
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	73fb      	strb	r3, [r7, #15]
 8003b6c:	e051      	b.n	8003c12 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 020e 	bic.w	r2, r2, #14
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0201 	bic.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a22      	ldr	r2, [pc, #136]	; (8003c1c <HAL_DMA_Abort_IT+0xd0>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d029      	beq.n	8003bec <HAL_DMA_Abort_IT+0xa0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_DMA_Abort_IT+0xd4>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d022      	beq.n	8003be8 <HAL_DMA_Abort_IT+0x9c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1f      	ldr	r2, [pc, #124]	; (8003c24 <HAL_DMA_Abort_IT+0xd8>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d01a      	beq.n	8003be2 <HAL_DMA_Abort_IT+0x96>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <HAL_DMA_Abort_IT+0xdc>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d012      	beq.n	8003bdc <HAL_DMA_Abort_IT+0x90>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1c      	ldr	r2, [pc, #112]	; (8003c2c <HAL_DMA_Abort_IT+0xe0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_DMA_Abort_IT+0x8a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1a      	ldr	r2, [pc, #104]	; (8003c30 <HAL_DMA_Abort_IT+0xe4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d102      	bne.n	8003bd0 <HAL_DMA_Abort_IT+0x84>
 8003bca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003bce:	e00e      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	e00b      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bda:	e008      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003be0:	e005      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be6:	e002      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003be8:	2310      	movs	r3, #16
 8003bea:	e000      	b.n	8003bee <HAL_DMA_Abort_IT+0xa2>
 8003bec:	2301      	movs	r3, #1
 8003bee:	4a11      	ldr	r2, [pc, #68]	; (8003c34 <HAL_DMA_Abort_IT+0xe8>)
 8003bf0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	4798      	blx	r3
    } 
  }
  return status;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40020008 	.word	0x40020008
 8003c20:	4002001c 	.word	0x4002001c
 8003c24:	40020030 	.word	0x40020030
 8003c28:	40020044 	.word	0x40020044
 8003c2c:	40020058 	.word	0x40020058
 8003c30:	4002006c 	.word	0x4002006c
 8003c34:	40020000 	.word	0x40020000

08003c38 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b08b      	sub	sp, #44	; 0x2c
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c62:	e169      	b.n	8003f38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c64:	2201      	movs	r2, #1
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69fa      	ldr	r2, [r7, #28]
 8003c74:	4013      	ands	r3, r2
 8003c76:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	f040 8158 	bne.w	8003f32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4a9a      	ldr	r2, [pc, #616]	; (8003ef0 <HAL_GPIO_Init+0x2a0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d05e      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
 8003c8c:	4a98      	ldr	r2, [pc, #608]	; (8003ef0 <HAL_GPIO_Init+0x2a0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d875      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003c92:	4a98      	ldr	r2, [pc, #608]	; (8003ef4 <HAL_GPIO_Init+0x2a4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d058      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
 8003c98:	4a96      	ldr	r2, [pc, #600]	; (8003ef4 <HAL_GPIO_Init+0x2a4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d86f      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003c9e:	4a96      	ldr	r2, [pc, #600]	; (8003ef8 <HAL_GPIO_Init+0x2a8>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d052      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
 8003ca4:	4a94      	ldr	r2, [pc, #592]	; (8003ef8 <HAL_GPIO_Init+0x2a8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d869      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003caa:	4a94      	ldr	r2, [pc, #592]	; (8003efc <HAL_GPIO_Init+0x2ac>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04c      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
 8003cb0:	4a92      	ldr	r2, [pc, #584]	; (8003efc <HAL_GPIO_Init+0x2ac>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d863      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003cb6:	4a92      	ldr	r2, [pc, #584]	; (8003f00 <HAL_GPIO_Init+0x2b0>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d046      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
 8003cbc:	4a90      	ldr	r2, [pc, #576]	; (8003f00 <HAL_GPIO_Init+0x2b0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d85d      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003cc2:	2b12      	cmp	r3, #18
 8003cc4:	d82a      	bhi.n	8003d1c <HAL_GPIO_Init+0xcc>
 8003cc6:	2b12      	cmp	r3, #18
 8003cc8:	d859      	bhi.n	8003d7e <HAL_GPIO_Init+0x12e>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <HAL_GPIO_Init+0x80>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d4b 	.word	0x08003d4b
 8003cd4:	08003d25 	.word	0x08003d25
 8003cd8:	08003d37 	.word	0x08003d37
 8003cdc:	08003d79 	.word	0x08003d79
 8003ce0:	08003d7f 	.word	0x08003d7f
 8003ce4:	08003d7f 	.word	0x08003d7f
 8003ce8:	08003d7f 	.word	0x08003d7f
 8003cec:	08003d7f 	.word	0x08003d7f
 8003cf0:	08003d7f 	.word	0x08003d7f
 8003cf4:	08003d7f 	.word	0x08003d7f
 8003cf8:	08003d7f 	.word	0x08003d7f
 8003cfc:	08003d7f 	.word	0x08003d7f
 8003d00:	08003d7f 	.word	0x08003d7f
 8003d04:	08003d7f 	.word	0x08003d7f
 8003d08:	08003d7f 	.word	0x08003d7f
 8003d0c:	08003d7f 	.word	0x08003d7f
 8003d10:	08003d7f 	.word	0x08003d7f
 8003d14:	08003d2d 	.word	0x08003d2d
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	4a79      	ldr	r2, [pc, #484]	; (8003f04 <HAL_GPIO_Init+0x2b4>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d013      	beq.n	8003d4a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d22:	e02c      	b.n	8003d7e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	623b      	str	r3, [r7, #32]
          break;
 8003d2a:	e029      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	3304      	adds	r3, #4
 8003d32:	623b      	str	r3, [r7, #32]
          break;
 8003d34:	e024      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	3308      	adds	r3, #8
 8003d3c:	623b      	str	r3, [r7, #32]
          break;
 8003d3e:	e01f      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	330c      	adds	r3, #12
 8003d46:	623b      	str	r3, [r7, #32]
          break;
 8003d48:	e01a      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d52:	2304      	movs	r3, #4
 8003d54:	623b      	str	r3, [r7, #32]
          break;
 8003d56:	e013      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d60:	2308      	movs	r3, #8
 8003d62:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	69fa      	ldr	r2, [r7, #28]
 8003d68:	611a      	str	r2, [r3, #16]
          break;
 8003d6a:	e009      	b.n	8003d80 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	615a      	str	r2, [r3, #20]
          break;
 8003d76:	e003      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	623b      	str	r3, [r7, #32]
          break;
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x130>
          break;
 8003d7e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2bff      	cmp	r3, #255	; 0xff
 8003d84:	d801      	bhi.n	8003d8a <HAL_GPIO_Init+0x13a>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	e001      	b.n	8003d8e <HAL_GPIO_Init+0x13e>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2bff      	cmp	r3, #255	; 0xff
 8003d94:	d802      	bhi.n	8003d9c <HAL_GPIO_Init+0x14c>
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	e002      	b.n	8003da2 <HAL_GPIO_Init+0x152>
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9e:	3b08      	subs	r3, #8
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	210f      	movs	r1, #15
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	43db      	mvns	r3, r3
 8003db2:	401a      	ands	r2, r3
 8003db4:	6a39      	ldr	r1, [r7, #32]
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dbc:	431a      	orrs	r2, r3
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f000 80b1 	beq.w	8003f32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dd0:	4b4d      	ldr	r3, [pc, #308]	; (8003f08 <HAL_GPIO_Init+0x2b8>)
 8003dd2:	699b      	ldr	r3, [r3, #24]
 8003dd4:	4a4c      	ldr	r2, [pc, #304]	; (8003f08 <HAL_GPIO_Init+0x2b8>)
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	6193      	str	r3, [r2, #24]
 8003ddc:	4b4a      	ldr	r3, [pc, #296]	; (8003f08 <HAL_GPIO_Init+0x2b8>)
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	f003 0301 	and.w	r3, r3, #1
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003de8:	4a48      	ldr	r2, [pc, #288]	; (8003f0c <HAL_GPIO_Init+0x2bc>)
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	089b      	lsrs	r3, r3, #2
 8003dee:	3302      	adds	r3, #2
 8003df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	220f      	movs	r2, #15
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	4a40      	ldr	r2, [pc, #256]	; (8003f10 <HAL_GPIO_Init+0x2c0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d013      	beq.n	8003e3c <HAL_GPIO_Init+0x1ec>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a3f      	ldr	r2, [pc, #252]	; (8003f14 <HAL_GPIO_Init+0x2c4>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00d      	beq.n	8003e38 <HAL_GPIO_Init+0x1e8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3e      	ldr	r2, [pc, #248]	; (8003f18 <HAL_GPIO_Init+0x2c8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <HAL_GPIO_Init+0x1e4>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3d      	ldr	r2, [pc, #244]	; (8003f1c <HAL_GPIO_Init+0x2cc>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d101      	bne.n	8003e30 <HAL_GPIO_Init+0x1e0>
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e006      	b.n	8003e3e <HAL_GPIO_Init+0x1ee>
 8003e30:	2304      	movs	r3, #4
 8003e32:	e004      	b.n	8003e3e <HAL_GPIO_Init+0x1ee>
 8003e34:	2302      	movs	r3, #2
 8003e36:	e002      	b.n	8003e3e <HAL_GPIO_Init+0x1ee>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <HAL_GPIO_Init+0x1ee>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e40:	f002 0203 	and.w	r2, r2, #3
 8003e44:	0092      	lsls	r2, r2, #2
 8003e46:	4093      	lsls	r3, r2
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e4e:	492f      	ldr	r1, [pc, #188]	; (8003f0c <HAL_GPIO_Init+0x2bc>)
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	089b      	lsrs	r3, r3, #2
 8003e54:	3302      	adds	r3, #2
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d006      	beq.n	8003e76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003e68:	4b2d      	ldr	r3, [pc, #180]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	492c      	ldr	r1, [pc, #176]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e006      	b.n	8003e84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e76:	4b2a      	ldr	r3, [pc, #168]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	43db      	mvns	r3, r3
 8003e7e:	4928      	ldr	r1, [pc, #160]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e80:	4013      	ands	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d006      	beq.n	8003e9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003e90:	4b23      	ldr	r3, [pc, #140]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	4922      	ldr	r1, [pc, #136]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	43db      	mvns	r3, r3
 8003ea6:	491e      	ldr	r1, [pc, #120]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003eba:	689a      	ldr	r2, [r3, #8]
 8003ebc:	4918      	ldr	r1, [pc, #96]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	608b      	str	r3, [r1, #8]
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003ec6:	4b16      	ldr	r3, [pc, #88]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	4914      	ldr	r1, [pc, #80]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d021      	beq.n	8003f24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	490e      	ldr	r1, [pc, #56]	; (8003f20 <HAL_GPIO_Init+0x2d0>)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60cb      	str	r3, [r1, #12]
 8003eec:	e021      	b.n	8003f32 <HAL_GPIO_Init+0x2e2>
 8003eee:	bf00      	nop
 8003ef0:	10320000 	.word	0x10320000
 8003ef4:	10310000 	.word	0x10310000
 8003ef8:	10220000 	.word	0x10220000
 8003efc:	10210000 	.word	0x10210000
 8003f00:	10120000 	.word	0x10120000
 8003f04:	10110000 	.word	0x10110000
 8003f08:	40021000 	.word	0x40021000
 8003f0c:	40010000 	.word	0x40010000
 8003f10:	40010800 	.word	0x40010800
 8003f14:	40010c00 	.word	0x40010c00
 8003f18:	40011000 	.word	0x40011000
 8003f1c:	40011400 	.word	0x40011400
 8003f20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003f24:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_GPIO_Init+0x304>)
 8003f26:	68da      	ldr	r2, [r3, #12]
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	4909      	ldr	r1, [pc, #36]	; (8003f54 <HAL_GPIO_Init+0x304>)
 8003f2e:	4013      	ands	r3, r2
 8003f30:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	3301      	adds	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f47f ae8e 	bne.w	8003c64 <HAL_GPIO_Init+0x14>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	372c      	adds	r7, #44	; 0x2c
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr
 8003f54:	40010400 	.word	0x40010400

08003f58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689a      	ldr	r2, [r3, #8]
 8003f68:	887b      	ldrh	r3, [r7, #2]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	73fb      	strb	r3, [r7, #15]
 8003f74:	e001      	b.n	8003f7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr

08003f86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
 8003f8e:	460b      	mov	r3, r1
 8003f90:	807b      	strh	r3, [r7, #2]
 8003f92:	4613      	mov	r3, r2
 8003f94:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f96:	787b      	ldrb	r3, [r7, #1]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f9c:	887a      	ldrh	r2, [r7, #2]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003fa2:	e003      	b.n	8003fac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	041a      	lsls	r2, r3, #16
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	611a      	str	r2, [r3, #16]
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fc2:	4b08      	ldr	r3, [pc, #32]	; (8003fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	88fb      	ldrh	r3, [r7, #6]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d006      	beq.n	8003fdc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fce:	4a05      	ldr	r2, [pc, #20]	; (8003fe4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fd4:	88fb      	ldrh	r3, [r7, #6]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fe54 	bl	8002c84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40010400 	.word	0x40010400

08003fe8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e12b      	b.n	8004252 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7ff f9f2 	bl	80033f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	; 0x24
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 0201 	bic.w	r2, r2, #1
 800402a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800403a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800404a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800404c:	f003 f85e 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 8004050:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	4a81      	ldr	r2, [pc, #516]	; (800425c <HAL_I2C_Init+0x274>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d807      	bhi.n	800406c <HAL_I2C_Init+0x84>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4a80      	ldr	r2, [pc, #512]	; (8004260 <HAL_I2C_Init+0x278>)
 8004060:	4293      	cmp	r3, r2
 8004062:	bf94      	ite	ls
 8004064:	2301      	movls	r3, #1
 8004066:	2300      	movhi	r3, #0
 8004068:	b2db      	uxtb	r3, r3
 800406a:	e006      	b.n	800407a <HAL_I2C_Init+0x92>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a7d      	ldr	r2, [pc, #500]	; (8004264 <HAL_I2C_Init+0x27c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	bf94      	ite	ls
 8004074:	2301      	movls	r3, #1
 8004076:	2300      	movhi	r3, #0
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e0e7      	b.n	8004252 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	4a78      	ldr	r2, [pc, #480]	; (8004268 <HAL_I2C_Init+0x280>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	0c9b      	lsrs	r3, r3, #18
 800408c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68ba      	ldr	r2, [r7, #8]
 800409e:	430a      	orrs	r2, r1
 80040a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	4a6a      	ldr	r2, [pc, #424]	; (800425c <HAL_I2C_Init+0x274>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d802      	bhi.n	80040bc <HAL_I2C_Init+0xd4>
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3301      	adds	r3, #1
 80040ba:	e009      	b.n	80040d0 <HAL_I2C_Init+0xe8>
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	4a69      	ldr	r2, [pc, #420]	; (800426c <HAL_I2C_Init+0x284>)
 80040c8:	fba2 2303 	umull	r2, r3, r2, r3
 80040cc:	099b      	lsrs	r3, r3, #6
 80040ce:	3301      	adds	r3, #1
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6812      	ldr	r2, [r2, #0]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80040e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	495c      	ldr	r1, [pc, #368]	; (800425c <HAL_I2C_Init+0x274>)
 80040ec:	428b      	cmp	r3, r1
 80040ee:	d819      	bhi.n	8004124 <HAL_I2C_Init+0x13c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	1e59      	subs	r1, r3, #1
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fe:	1c59      	adds	r1, r3, #1
 8004100:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004104:	400b      	ands	r3, r1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <HAL_I2C_Init+0x138>
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1e59      	subs	r1, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	fbb1 f3f3 	udiv	r3, r1, r3
 8004118:	3301      	adds	r3, #1
 800411a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411e:	e051      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004120:	2304      	movs	r3, #4
 8004122:	e04f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d111      	bne.n	8004150 <HAL_I2C_Init+0x168>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	440b      	add	r3, r1
 800413a:	fbb0 f3f3 	udiv	r3, r0, r3
 800413e:	3301      	adds	r3, #1
 8004140:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	e012      	b.n	8004176 <HAL_I2C_Init+0x18e>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	0099      	lsls	r1, r3, #2
 8004160:	440b      	add	r3, r1
 8004162:	fbb0 f3f3 	udiv	r3, r0, r3
 8004166:	3301      	adds	r3, #1
 8004168:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800416c:	2b00      	cmp	r3, #0
 800416e:	bf0c      	ite	eq
 8004170:	2301      	moveq	r3, #1
 8004172:	2300      	movne	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_Init+0x196>
 800417a:	2301      	movs	r3, #1
 800417c:	e022      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d10e      	bne.n	80041a4 <HAL_I2C_Init+0x1bc>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	1e58      	subs	r0, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6859      	ldr	r1, [r3, #4]
 800418e:	460b      	mov	r3, r1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	440b      	add	r3, r1
 8004194:	fbb0 f3f3 	udiv	r3, r0, r3
 8004198:	3301      	adds	r3, #1
 800419a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	e00f      	b.n	80041c4 <HAL_I2C_Init+0x1dc>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	1e58      	subs	r0, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	0099      	lsls	r1, r3, #2
 80041b4:	440b      	add	r3, r1
 80041b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ba:	3301      	adds	r3, #1
 80041bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	6809      	ldr	r1, [r1, #0]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80041f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6911      	ldr	r1, [r2, #16]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	68d2      	ldr	r2, [r2, #12]
 80041fe:	4311      	orrs	r1, r2
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6812      	ldr	r2, [r2, #0]
 8004204:	430b      	orrs	r3, r1
 8004206:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	000186a0 	.word	0x000186a0
 8004260:	001e847f 	.word	0x001e847f
 8004264:	003d08ff 	.word	0x003d08ff
 8004268:	431bde83 	.word	0x431bde83
 800426c:	10624dd3 	.word	0x10624dd3

08004270 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004284:	f7ff faec 	bl	8003860 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 80e0 	bne.w	8004458 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	4970      	ldr	r1, [pc, #448]	; (8004464 <HAL_I2C_Master_Transmit+0x1f4>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f002 f92a 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0d3      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2C_Master_Transmit+0x50>
 80042bc:	2302      	movs	r3, #2
 80042be:	e0cc      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d007      	beq.n	80042e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2221      	movs	r2, #33	; 0x21
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2210      	movs	r2, #16
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	893a      	ldrh	r2, [r7, #8]
 8004316:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a50      	ldr	r2, [pc, #320]	; (8004468 <HAL_I2C_Master_Transmit+0x1f8>)
 8004326:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	6a3a      	ldr	r2, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f001 feec 	bl	800610c <I2C_MasterRequestWrite>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e08d      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433e:	2300      	movs	r3, #0
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	613b      	str	r3, [r7, #16]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004354:	e066      	b.n	8004424 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	6a39      	ldr	r1, [r7, #32]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f002 f9a4 	bl	80066a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00d      	beq.n	8004382 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b04      	cmp	r3, #4
 800436c:	d107      	bne.n	800437e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e06b      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004386:	781a      	ldrb	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800439c:	b29b      	uxth	r3, r3
 800439e:	3b01      	subs	r3, #1
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d11b      	bne.n	80043f8 <HAL_I2C_Master_Transmit+0x188>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d017      	beq.n	80043f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	781a      	ldrb	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	6a39      	ldr	r1, [r7, #32]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f002 f994 	bl	800672a <I2C_WaitOnBTFFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d00d      	beq.n	8004424 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	2b04      	cmp	r3, #4
 800440e:	d107      	bne.n	8004420 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e01a      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d194      	bne.n	8004356 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800443a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004454:	2300      	movs	r3, #0
 8004456:	e000      	b.n	800445a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004458:	2302      	movs	r3, #2
  }
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	00100002 	.word	0x00100002
 8004468:	ffff0000 	.word	0xffff0000

0800446c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	; 0x30
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	461a      	mov	r2, r3
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
 800447c:	4613      	mov	r3, r2
 800447e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004480:	2300      	movs	r3, #0
 8004482:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004484:	f7ff f9ec 	bl	8003860 <HAL_GetTick>
 8004488:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b20      	cmp	r3, #32
 8004494:	f040 823f 	bne.w	8004916 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	2319      	movs	r3, #25
 800449e:	2201      	movs	r2, #1
 80044a0:	497f      	ldr	r1, [pc, #508]	; (80046a0 <HAL_I2C_Master_Receive+0x234>)
 80044a2:	68f8      	ldr	r0, [r7, #12]
 80044a4:	f002 f82a 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
 80044b0:	e232      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_I2C_Master_Receive+0x54>
 80044bc:	2302      	movs	r3, #2
 80044be:	e22b      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d007      	beq.n	80044e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0201 	orr.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2222      	movs	r2, #34	; 0x22
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2210      	movs	r2, #16
 8004502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	893a      	ldrh	r2, [r7, #8]
 8004516:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	4a5f      	ldr	r2, [pc, #380]	; (80046a4 <HAL_I2C_Master_Receive+0x238>)
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004528:	8979      	ldrh	r1, [r7, #10]
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 fe6e 	bl	8006210 <I2C_MasterRequestRead>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d001      	beq.n	800453e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e1ec      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004546:	2300      	movs	r3, #0
 8004548:	61fb      	str	r3, [r7, #28]
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	695b      	ldr	r3, [r3, #20]
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e1c0      	b.n	80048f0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004572:	2b01      	cmp	r3, #1
 8004574:	d11e      	bne.n	80045b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004586:	b672      	cpsid	i
}
 8004588:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458a:	2300      	movs	r3, #0
 800458c:	61bb      	str	r3, [r7, #24]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	61bb      	str	r3, [r7, #24]
 800459e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045b0:	b662      	cpsie	i
}
 80045b2:	e035      	b.n	8004620 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d11e      	bne.n	80045fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80045cc:	b672      	cpsid	i
}
 80045ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80045f6:	b662      	cpsie	i
}
 80045f8:	e012      	b.n	8004620 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004608:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004620:	e166      	b.n	80048f0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004626:	2b03      	cmp	r3, #3
 8004628:	f200 811f 	bhi.w	800486a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004630:	2b01      	cmp	r3, #1
 8004632:	d123      	bne.n	800467c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f002 f8e9 	bl	8006810 <I2C_WaitOnRXNEFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004644:	2301      	movs	r3, #1
 8004646:	e167      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	; 0x2a
 800467a:	e139      	b.n	80048f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b02      	cmp	r3, #2
 8004682:	d152      	bne.n	800472a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468a:	2200      	movs	r2, #0
 800468c:	4906      	ldr	r1, [pc, #24]	; (80046a8 <HAL_I2C_Master_Receive+0x23c>)
 800468e:	68f8      	ldr	r0, [r7, #12]
 8004690:	f001 ff34 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d008      	beq.n	80046ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e13c      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
 800469e:	bf00      	nop
 80046a0:	00100002 	.word	0x00100002
 80046a4:	ffff0000 	.word	0xffff0000
 80046a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80046ac:	b672      	cpsid	i
}
 80046ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691a      	ldr	r2, [r3, #16]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046dc:	3b01      	subs	r3, #1
 80046de:	b29a      	uxth	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	3b01      	subs	r3, #1
 80046ec:	b29a      	uxth	r2, r3
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80046f2:	b662      	cpsie	i
}
 80046f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004728:	e0e2      	b.n	80048f0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800472a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004730:	2200      	movs	r2, #0
 8004732:	497b      	ldr	r1, [pc, #492]	; (8004920 <HAL_I2C_Master_Receive+0x4b4>)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f001 fee1 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e0e9      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004752:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004754:	b672      	cpsid	i
}
 8004756:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800478a:	4b66      	ldr	r3, [pc, #408]	; (8004924 <HAL_I2C_Master_Receive+0x4b8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	08db      	lsrs	r3, r3, #3
 8004790:	4a65      	ldr	r2, [pc, #404]	; (8004928 <HAL_I2C_Master_Receive+0x4bc>)
 8004792:	fba2 2303 	umull	r2, r3, r2, r3
 8004796:	0a1a      	lsrs	r2, r3, #8
 8004798:	4613      	mov	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4413      	add	r3, r2
 800479e:	00da      	lsls	r2, r3, #3
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80047a4:	6a3b      	ldr	r3, [r7, #32]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d118      	bne.n	80047e2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ca:	f043 0220 	orr.w	r2, r3, #32
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80047d2:	b662      	cpsie	i
}
 80047d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e09a      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d1d9      	bne.n	80047a4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	691a      	ldr	r2, [r3, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480a:	b2d2      	uxtb	r2, r2
 800480c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481c:	3b01      	subs	r3, #1
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004828:	b29b      	uxth	r3, r3
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8004832:	b662      	cpsie	i
}
 8004834:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004852:	3b01      	subs	r3, #1
 8004854:	b29a      	uxth	r2, r3
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800485e:	b29b      	uxth	r3, r3
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004868:	e042      	b.n	80048f0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800486a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800486e:	68f8      	ldr	r0, [r7, #12]
 8004870:	f001 ffce 	bl	8006810 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e04c      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691a      	ldr	r2, [r3, #16]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	1c5a      	adds	r2, r3, #1
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d118      	bne.n	80048f0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	3b01      	subs	r3, #1
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	f47f ae94 	bne.w	8004622 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3728      	adds	r7, #40	; 0x28
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	00010004 	.word	0x00010004
 8004924:	200000a4 	.word	0x200000a4
 8004928:	14f8b589 	.word	0x14f8b589

0800492c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af02      	add	r7, sp, #8
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	460b      	mov	r3, r1
 800493a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800493c:	f7fe ff90 	bl	8003860 <HAL_GetTick>
 8004940:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004942:	2301      	movs	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b20      	cmp	r3, #32
 8004950:	f040 8111 	bne.w	8004b76 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	2319      	movs	r3, #25
 800495a:	2201      	movs	r2, #1
 800495c:	4988      	ldr	r1, [pc, #544]	; (8004b80 <HAL_I2C_IsDeviceReady+0x254>)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f001 fdcc 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
 800496c:	e104      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_I2C_IsDeviceReady+0x50>
 8004978:	2302      	movs	r3, #2
 800497a:	e0fd      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0301 	and.w	r3, r3, #1
 800498e:	2b01      	cmp	r3, #1
 8004990:	d007      	beq.n	80049a2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f042 0201 	orr.w	r2, r2, #1
 80049a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2224      	movs	r2, #36	; 0x24
 80049b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2200      	movs	r2, #0
 80049be:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4a70      	ldr	r2, [pc, #448]	; (8004b84 <HAL_I2C_IsDeviceReady+0x258>)
 80049c4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049d4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80049d6:	69fb      	ldr	r3, [r7, #28]
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	2200      	movs	r2, #0
 80049de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f001 fd8a 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00d      	beq.n	8004a0a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049fc:	d103      	bne.n	8004a06 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e0b6      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a0a:	897b      	ldrh	r3, [r7, #10]
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004a18:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7fe ff21 	bl	8003860 <HAL_GetTick>
 8004a1e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0302 	and.w	r3, r3, #2
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a44:	bf0c      	ite	eq
 8004a46:	2301      	moveq	r3, #1
 8004a48:	2300      	movne	r3, #0
 8004a4a:	b2db      	uxtb	r3, r3
 8004a4c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a4e:	e025      	b.n	8004a9c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004a50:	f7fe ff06 	bl	8003860 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	683a      	ldr	r2, [r7, #0]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d302      	bcc.n	8004a66 <HAL_I2C_IsDeviceReady+0x13a>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	22a0      	movs	r2, #160	; 0xa0
 8004a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	695b      	ldr	r3, [r3, #20]
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	bf0c      	ite	eq
 8004a7c:	2301      	moveq	r3, #1
 8004a7e:	2300      	movne	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2ba0      	cmp	r3, #160	; 0xa0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_I2C_IsDeviceReady+0x188>
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <HAL_I2C_IsDeviceReady+0x188>
 8004aae:	7dbb      	ldrb	r3, [r7, #22]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0cd      	beq.n	8004a50 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d129      	bne.n	8004b1e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ad8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	613b      	str	r3, [r7, #16]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	613b      	str	r3, [r7, #16]
 8004aee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2319      	movs	r3, #25
 8004af6:	2201      	movs	r2, #1
 8004af8:	4921      	ldr	r1, [pc, #132]	; (8004b80 <HAL_I2C_IsDeviceReady+0x254>)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f001 fcfe 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e036      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e02c      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b2c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b36:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2319      	movs	r3, #25
 8004b3e:	2201      	movs	r2, #1
 8004b40:	490f      	ldr	r1, [pc, #60]	; (8004b80 <HAL_I2C_IsDeviceReady+0x254>)
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f001 fcda 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e012      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	f4ff af32 	bcc.w	80049c6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e000      	b.n	8004b78 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004b76:	2302      	movs	r3, #2
  }
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3720      	adds	r7, #32
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	00100002 	.word	0x00100002
 8004b84:	ffff0000 	.word	0xffff0000

08004b88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b088      	sub	sp, #32
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ba8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb0:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d003      	beq.n	8004bc0 <HAL_I2C_EV_IRQHandler+0x38>
 8004bb8:	7bfb      	ldrb	r3, [r7, #15]
 8004bba:	2b40      	cmp	r3, #64	; 0x40
 8004bbc:	f040 80c1 	bne.w	8004d42 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10d      	bne.n	8004bf6 <HAL_I2C_EV_IRQHandler+0x6e>
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004be0:	d003      	beq.n	8004bea <HAL_I2C_EV_IRQHandler+0x62>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004be8:	d101      	bne.n	8004bee <HAL_I2C_EV_IRQHandler+0x66>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <HAL_I2C_EV_IRQHandler+0x68>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f000 8132 	beq.w	8004e5a <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	f003 0301 	and.w	r3, r3, #1
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00c      	beq.n	8004c1a <HAL_I2C_EV_IRQHandler+0x92>
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	0a5b      	lsrs	r3, r3, #9
 8004c04:	f003 0301 	and.w	r3, r3, #1
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d006      	beq.n	8004c1a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f001 fe83 	bl	8006918 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fcc8 	bl	80055a8 <I2C_Master_SB>
 8004c18:	e092      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	08db      	lsrs	r3, r3, #3
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d009      	beq.n	8004c3a <HAL_I2C_EV_IRQHandler+0xb2>
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	0a5b      	lsrs	r3, r3, #9
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd3d 	bl	80056b2 <I2C_Master_ADD10>
 8004c38:	e082      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	085b      	lsrs	r3, r3, #1
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_I2C_EV_IRQHandler+0xd2>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	0a5b      	lsrs	r3, r3, #9
 8004c4a:	f003 0301 	and.w	r3, r3, #1
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fd56 	bl	8005704 <I2C_Master_ADDR>
 8004c58:	e072      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	089b      	lsrs	r3, r3, #2
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d03b      	beq.n	8004cde <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c74:	f000 80f3 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	09db      	lsrs	r3, r3, #7
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00f      	beq.n	8004ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	0a9b      	lsrs	r3, r3, #10
 8004c88:	f003 0301 	and.w	r3, r3, #1
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_I2C_EV_IRQHandler+0x11c>
 8004c90:	69fb      	ldr	r3, [r7, #28]
 8004c92:	089b      	lsrs	r3, r3, #2
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d103      	bne.n	8004ca4 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f942 	bl	8004f26 <I2C_MasterTransmit_TXE>
 8004ca2:	e04d      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 80d6 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004cb2:	697b      	ldr	r3, [r7, #20]
 8004cb4:	0a5b      	lsrs	r3, r3, #9
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80cf 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004cc0:	7bbb      	ldrb	r3, [r7, #14]
 8004cc2:	2b21      	cmp	r3, #33	; 0x21
 8004cc4:	d103      	bne.n	8004cce <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f9c9 	bl	800505e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ccc:	e0c7      	b.n	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
 8004cd0:	2b40      	cmp	r3, #64	; 0x40
 8004cd2:	f040 80c4 	bne.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fa37 	bl	800514a <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004cdc:	e0bf      	b.n	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cec:	f000 80b7 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004cf0:	69fb      	ldr	r3, [r7, #28]
 8004cf2:	099b      	lsrs	r3, r3, #6
 8004cf4:	f003 0301 	and.w	r3, r3, #1
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00f      	beq.n	8004d1c <HAL_I2C_EV_IRQHandler+0x194>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	0a9b      	lsrs	r3, r3, #10
 8004d00:	f003 0301 	and.w	r3, r3, #1
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d009      	beq.n	8004d1c <HAL_I2C_EV_IRQHandler+0x194>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	089b      	lsrs	r3, r3, #2
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d103      	bne.n	8004d1c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f000 faac 	bl	8005272 <I2C_MasterReceive_RXNE>
 8004d1a:	e011      	b.n	8004d40 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	089b      	lsrs	r3, r3, #2
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 809a 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	0a5b      	lsrs	r3, r3, #9
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 8093 	beq.w	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fb4b 	bl	80053d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d3e:	e08e      	b.n	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
 8004d40:	e08d      	b.n	8004e5e <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	695b      	ldr	r3, [r3, #20]
 8004d50:	61fb      	str	r3, [r7, #28]
 8004d52:	e007      	b.n	8004d64 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	085b      	lsrs	r3, r3, #1
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <HAL_I2C_EV_IRQHandler+0x20e>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	0a5b      	lsrs	r3, r3, #9
 8004d74:	f003 0301 	and.w	r3, r3, #1
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00c      	beq.n	8004d96 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d003      	beq.n	8004d8c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004d8c:	69b9      	ldr	r1, [r7, #24]
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 ff0f 	bl	8005bb2 <I2C_Slave_ADDR>
 8004d94:	e066      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	091b      	lsrs	r3, r3, #4
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d009      	beq.n	8004db6 <HAL_I2C_EV_IRQHandler+0x22e>
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	0a5b      	lsrs	r3, r3, #9
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d003      	beq.n	8004db6 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 ff4a 	bl	8005c48 <I2C_Slave_STOPF>
 8004db4:	e056      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004db6:	7bbb      	ldrb	r3, [r7, #14]
 8004db8:	2b21      	cmp	r3, #33	; 0x21
 8004dba:	d002      	beq.n	8004dc2 <HAL_I2C_EV_IRQHandler+0x23a>
 8004dbc:	7bbb      	ldrb	r3, [r7, #14]
 8004dbe:	2b29      	cmp	r3, #41	; 0x29
 8004dc0:	d125      	bne.n	8004e0e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00f      	beq.n	8004dee <HAL_I2C_EV_IRQHandler+0x266>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	0a9b      	lsrs	r3, r3, #10
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d009      	beq.n	8004dee <HAL_I2C_EV_IRQHandler+0x266>
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	089b      	lsrs	r3, r3, #2
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d103      	bne.n	8004dee <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fe27 	bl	8005a3a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004dec:	e039      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	089b      	lsrs	r3, r3, #2
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d033      	beq.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2da>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	0a5b      	lsrs	r3, r3, #9
 8004dfe:	f003 0301 	and.w	r3, r3, #1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d02d      	beq.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fe54 	bl	8005ab4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e0c:	e029      	b.n	8004e62 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	099b      	lsrs	r3, r3, #6
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00f      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	0a9b      	lsrs	r3, r3, #10
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d009      	beq.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2b2>
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	089b      	lsrs	r3, r3, #2
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d103      	bne.n	8004e3a <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fe5e 	bl	8005af4 <I2C_SlaveReceive_RXNE>
 8004e38:	e014      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	089b      	lsrs	r3, r3, #2
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00e      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	0a5b      	lsrs	r3, r3, #9
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d008      	beq.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 fe8c 	bl	8005b70 <I2C_SlaveReceive_BTF>
 8004e58:	e004      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004e5a:	bf00      	nop
 8004e5c:	e002      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e5e:	bf00      	nop
 8004e60:	e000      	b.n	8004e64 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e62:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004e64:	3720      	adds	r7, #32
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004e72:	bf00      	nop
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b083      	sub	sp, #12
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004e96:	bf00      	nop
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bc80      	pop	{r7}
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bc80      	pop	{r7}
 8004eb0:	4770      	bx	lr

08004eb2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b083      	sub	sp, #12
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	70fb      	strb	r3, [r7, #3]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bc80      	pop	{r7}
 8004eca:	4770      	bx	lr

08004ecc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bc80      	pop	{r7}
 8004edc:	4770      	bx	lr

08004ede <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bc80      	pop	{r7}
 8004f00:	4770      	bx	lr

08004f02 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bc80      	pop	{r7}
 8004f12:	4770      	bx	lr

08004f14 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr

08004f26 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b084      	sub	sp, #16
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f3c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f42:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d150      	bne.n	8004fee <I2C_MasterTransmit_TXE+0xc8>
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b21      	cmp	r3, #33	; 0x21
 8004f50:	d14d      	bne.n	8004fee <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b08      	cmp	r3, #8
 8004f56:	d01d      	beq.n	8004f94 <I2C_MasterTransmit_TXE+0x6e>
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b20      	cmp	r3, #32
 8004f5c:	d01a      	beq.n	8004f94 <I2C_MasterTransmit_TXE+0x6e>
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f64:	d016      	beq.n	8004f94 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f74:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2211      	movs	r2, #17
 8004f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2220      	movs	r2, #32
 8004f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f7ff ff6c 	bl	8004e6a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f92:	e060      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fa2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b40      	cmp	r3, #64	; 0x40
 8004fcc:	d107      	bne.n	8004fde <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f7ff ff81 	bl	8004ede <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fdc:	e03b      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff ff3f 	bl	8004e6a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004fec:	e033      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004fee:	7bfb      	ldrb	r3, [r7, #15]
 8004ff0:	2b21      	cmp	r3, #33	; 0x21
 8004ff2:	d005      	beq.n	8005000 <I2C_MasterTransmit_TXE+0xda>
 8004ff4:	7bbb      	ldrb	r3, [r7, #14]
 8004ff6:	2b40      	cmp	r3, #64	; 0x40
 8004ff8:	d12d      	bne.n	8005056 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ffa:	7bfb      	ldrb	r3, [r7, #15]
 8004ffc:	2b22      	cmp	r3, #34	; 0x22
 8004ffe:	d12a      	bne.n	8005056 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d108      	bne.n	800501c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800501a:	e01c      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d103      	bne.n	8005030 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f88e 	bl	800514a <I2C_MemoryTransmit_TXE_BTF>
}
 800502e:	e012      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	781a      	ldrb	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504a:	b29b      	uxth	r3, r3
 800504c:	3b01      	subs	r3, #1
 800504e:	b29a      	uxth	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005054:	e7ff      	b.n	8005056 <I2C_MasterTransmit_TXE+0x130>
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b084      	sub	sp, #16
 8005062:	af00      	add	r7, sp, #0
 8005064:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b21      	cmp	r3, #33	; 0x21
 8005076:	d164      	bne.n	8005142 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800507c:	b29b      	uxth	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d012      	beq.n	80050a8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	781a      	ldrb	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509c:	b29b      	uxth	r3, r3
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80050a6:	e04c      	b.n	8005142 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d01d      	beq.n	80050ea <I2C_MasterTransmit_BTF+0x8c>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d01a      	beq.n	80050ea <I2C_MasterTransmit_BTF+0x8c>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050ba:	d016      	beq.n	80050ea <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050ca:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2211      	movs	r2, #17
 80050d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7ff fec1 	bl	8004e6a <HAL_I2C_MasterTxCpltCallback>
}
 80050e8:	e02b      	b.n	8005142 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	685a      	ldr	r2, [r3, #4]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80050f8:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005108:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d107      	bne.n	8005134 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f7ff fed6 	bl	8004ede <HAL_I2C_MemTxCpltCallback>
}
 8005132:	e006      	b.n	8005142 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fe94 	bl	8004e6a <HAL_I2C_MasterTxCpltCallback>
}
 8005142:	bf00      	nop
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005158:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10b      	bne.n	8005182 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	b2da      	uxtb	r2, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800517a:	1c9a      	adds	r2, r3, #2
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005180:	e073      	b.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005186:	b29b      	uxth	r3, r3
 8005188:	121b      	asrs	r3, r3, #8
 800518a:	b2da      	uxtb	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005196:	1c5a      	adds	r2, r3, #1
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800519c:	e065      	b.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d10b      	bne.n	80051be <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051bc:	e055      	b.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	d151      	bne.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
 80051c8:	2b22      	cmp	r3, #34	; 0x22
 80051ca:	d10d      	bne.n	80051e8 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051da:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80051e6:	e040      	b.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d015      	beq.n	800521e <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	2b21      	cmp	r3, #33	; 0x21
 80051f6:	d112      	bne.n	800521e <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fc:	781a      	ldrb	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005212:	b29b      	uxth	r3, r3
 8005214:	3b01      	subs	r3, #1
 8005216:	b29a      	uxth	r2, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800521c:	e025      	b.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d120      	bne.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	2b21      	cmp	r3, #33	; 0x21
 800522c:	d11d      	bne.n	800526a <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800523c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800524c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2220      	movs	r2, #32
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fe3a 	bl	8004ede <HAL_I2C_MemTxCpltCallback>
}
 800526a:	bf00      	nop
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b22      	cmp	r3, #34	; 0x22
 8005284:	f040 80a2 	bne.w	80053cc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2b03      	cmp	r3, #3
 8005294:	d921      	bls.n	80052da <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691a      	ldr	r2, [r3, #16]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	1c5a      	adds	r2, r3, #1
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	3b01      	subs	r3, #1
 80052b6:	b29a      	uxth	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	f040 8082 	bne.w	80053cc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80052d8:	e078      	b.n	80053cc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d074      	beq.n	80053cc <I2C_MasterReceive_RXNE+0x15a>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d002      	beq.n	80052ee <I2C_MasterReceive_RXNE+0x7c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d16e      	bne.n	80053cc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f001 fa5c 	bl	80067ac <I2C_WaitOnSTOPRequestThroughIT>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d142      	bne.n	8005380 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005308:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005318:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691a      	ldr	r2, [r3, #16]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b40      	cmp	r3, #64	; 0x40
 8005352:	d10a      	bne.n	800536a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fdc4 	bl	8004ef0 <HAL_I2C_MemRxCpltCallback>
}
 8005368:	e030      	b.n	80053cc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2212      	movs	r2, #18
 8005376:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fd7f 	bl	8004e7c <HAL_I2C_MasterRxCpltCallback>
}
 800537e:	e025      	b.n	80053cc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800538e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691a      	ldr	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	3b01      	subs	r3, #1
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f7ff fd9b 	bl	8004f02 <HAL_I2C_ErrorCallback>
}
 80053cc:	bf00      	nop
 80053ce:	3710      	adds	r7, #16
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e6:	b29b      	uxth	r3, r3
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d11b      	bne.n	8005424 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691a      	ldr	r2, [r3, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005406:	b2d2      	uxtb	r2, r2
 8005408:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540e:	1c5a      	adds	r2, r3, #1
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005422:	e0bd      	b.n	80055a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005428:	b29b      	uxth	r3, r3
 800542a:	2b03      	cmp	r3, #3
 800542c:	d129      	bne.n	8005482 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800543c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2b04      	cmp	r3, #4
 8005442:	d00a      	beq.n	800545a <I2C_MasterReceive_BTF+0x86>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d007      	beq.n	800545a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005458:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691a      	ldr	r2, [r3, #16]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005480:	e08e      	b.n	80055a0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005486:	b29b      	uxth	r3, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d176      	bne.n	800557a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2b01      	cmp	r3, #1
 8005490:	d002      	beq.n	8005498 <I2C_MasterReceive_BTF+0xc4>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2b10      	cmp	r3, #16
 8005496:	d108      	bne.n	80054aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	e019      	b.n	80054de <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b04      	cmp	r3, #4
 80054ae:	d002      	beq.n	80054b6 <I2C_MasterReceive_BTF+0xe2>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d108      	bne.n	80054c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	e00a      	b.n	80054de <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b10      	cmp	r3, #16
 80054cc:	d007      	beq.n	80054de <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	691a      	ldr	r2, [r3, #16]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005520:	b29b      	uxth	r3, r3
 8005522:	3b01      	subs	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005538:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d10a      	bne.n	8005564 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fcc7 	bl	8004ef0 <HAL_I2C_MemRxCpltCallback>
}
 8005562:	e01d      	b.n	80055a0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2212      	movs	r2, #18
 8005570:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7ff fc82 	bl	8004e7c <HAL_I2C_MasterRxCpltCallback>
}
 8005578:	e012      	b.n	80055a0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	b2d2      	uxtb	r2, r2
 8005586:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055a0:	bf00      	nop
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b083      	sub	sp, #12
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b40      	cmp	r3, #64	; 0x40
 80055ba:	d117      	bne.n	80055ec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d109      	bne.n	80055d8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	461a      	mov	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055d4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80055d6:	e067      	b.n	80056a8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
}
 80055ea:	e05d      	b.n	80056a8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80055f4:	d133      	bne.n	800565e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b21      	cmp	r3, #33	; 0x21
 8005600:	d109      	bne.n	8005616 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	b2db      	uxtb	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005612:	611a      	str	r2, [r3, #16]
 8005614:	e008      	b.n	8005628 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	b2db      	uxtb	r3, r3
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	b2da      	uxtb	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	2b00      	cmp	r3, #0
 800562e:	d004      	beq.n	800563a <I2C_Master_SB+0x92>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d108      	bne.n	800564c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563e:	2b00      	cmp	r3, #0
 8005640:	d032      	beq.n	80056a8 <I2C_Master_SB+0x100>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d02d      	beq.n	80056a8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565a:	605a      	str	r2, [r3, #4]
}
 800565c:	e024      	b.n	80056a8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10e      	bne.n	8005684 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566a:	b29b      	uxth	r3, r3
 800566c:	11db      	asrs	r3, r3, #7
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 0306 	and.w	r3, r3, #6
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f063 030f 	orn	r3, r3, #15
 800567a:	b2da      	uxtb	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	611a      	str	r2, [r3, #16]
}
 8005682:	e011      	b.n	80056a8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005688:	2b01      	cmp	r3, #1
 800568a:	d10d      	bne.n	80056a8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005690:	b29b      	uxth	r3, r3
 8005692:	11db      	asrs	r3, r3, #7
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0306 	and.w	r3, r3, #6
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f063 030e 	orn	r3, r3, #14
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bc80      	pop	{r7}
 80056b0:	4770      	bx	lr

080056b2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d004      	beq.n	80056d8 <I2C_Master_ADD10+0x26>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d108      	bne.n	80056ea <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d00c      	beq.n	80056fa <I2C_Master_ADD10+0x48>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f8:	605a      	str	r2, [r3, #4]
  }
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	bc80      	pop	{r7}
 8005702:	4770      	bx	lr

08005704 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005704:	b480      	push	{r7}
 8005706:	b091      	sub	sp, #68	; 0x44
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005712:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b22      	cmp	r3, #34	; 0x22
 800572c:	f040 8174 	bne.w	8005a18 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10f      	bne.n	8005758 <I2C_Master_ADDR+0x54>
 8005738:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800573c:	2b40      	cmp	r3, #64	; 0x40
 800573e:	d10b      	bne.n	8005758 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005740:	2300      	movs	r3, #0
 8005742:	633b      	str	r3, [r7, #48]	; 0x30
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	633b      	str	r3, [r7, #48]	; 0x30
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	633b      	str	r3, [r7, #48]	; 0x30
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	e16b      	b.n	8005a30 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11d      	bne.n	800579c <I2C_Master_ADDR+0x98>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005768:	d118      	bne.n	800579c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800576a:	2300      	movs	r3, #0
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	699b      	ldr	r3, [r3, #24]
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800578e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005794:	1c5a      	adds	r2, r3, #1
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	651a      	str	r2, [r3, #80]	; 0x50
 800579a:	e149      	b.n	8005a30 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d113      	bne.n	80057ce <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057a6:	2300      	movs	r3, #0
 80057a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80057ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e120      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	f040 808a 	bne.w	80058ee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80057e0:	d137      	bne.n	8005852 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057f0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005800:	d113      	bne.n	800582a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005810:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005812:	2300      	movs	r3, #0
 8005814:	627b      	str	r3, [r7, #36]	; 0x24
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	627b      	str	r3, [r7, #36]	; 0x24
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	627b      	str	r3, [r7, #36]	; 0x24
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	e0f2      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800582a:	2300      	movs	r3, #0
 800582c:	623b      	str	r3, [r7, #32]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695b      	ldr	r3, [r3, #20]
 8005834:	623b      	str	r3, [r7, #32]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800584e:	601a      	str	r2, [r3, #0]
 8005850:	e0de      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b08      	cmp	r3, #8
 8005856:	d02e      	beq.n	80058b6 <I2C_Master_ADDR+0x1b2>
 8005858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800585a:	2b20      	cmp	r3, #32
 800585c:	d02b      	beq.n	80058b6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800585e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005860:	2b12      	cmp	r3, #18
 8005862:	d102      	bne.n	800586a <I2C_Master_ADDR+0x166>
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	2b01      	cmp	r3, #1
 8005868:	d125      	bne.n	80058b6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800586a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586c:	2b04      	cmp	r3, #4
 800586e:	d00e      	beq.n	800588e <I2C_Master_ADDR+0x18a>
 8005870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005872:	2b02      	cmp	r3, #2
 8005874:	d00b      	beq.n	800588e <I2C_Master_ADDR+0x18a>
 8005876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005878:	2b10      	cmp	r3, #16
 800587a:	d008      	beq.n	800588e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800588a:	601a      	str	r2, [r3, #0]
 800588c:	e007      	b.n	800589e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800589c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	61fb      	str	r3, [r7, #28]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	61fb      	str	r3, [r7, #28]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	e0ac      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058c4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058c6:	2300      	movs	r3, #0
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058ea:	601a      	str	r2, [r3, #0]
 80058ec:	e090      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d158      	bne.n	80059aa <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80058f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fa:	2b04      	cmp	r3, #4
 80058fc:	d021      	beq.n	8005942 <I2C_Master_ADDR+0x23e>
 80058fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005900:	2b02      	cmp	r3, #2
 8005902:	d01e      	beq.n	8005942 <I2C_Master_ADDR+0x23e>
 8005904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005906:	2b10      	cmp	r3, #16
 8005908:	d01b      	beq.n	8005942 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005918:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800591a:	2300      	movs	r3, #0
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	695b      	ldr	r3, [r3, #20]
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	617b      	str	r3, [r7, #20]
 800592e:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593e:	601a      	str	r2, [r3, #0]
 8005940:	e012      	b.n	8005968 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005950:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005952:	2300      	movs	r3, #0
 8005954:	613b      	str	r3, [r7, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005976:	d14b      	bne.n	8005a10 <I2C_Master_ADDR+0x30c>
 8005978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800597e:	d00b      	beq.n	8005998 <I2C_Master_ADDR+0x294>
 8005980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005982:	2b01      	cmp	r3, #1
 8005984:	d008      	beq.n	8005998 <I2C_Master_ADDR+0x294>
 8005986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005988:	2b08      	cmp	r3, #8
 800598a:	d005      	beq.n	8005998 <I2C_Master_ADDR+0x294>
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	2b10      	cmp	r3, #16
 8005990:	d002      	beq.n	8005998 <I2C_Master_ADDR+0x294>
 8005992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005994:	2b20      	cmp	r3, #32
 8005996:	d13b      	bne.n	8005a10 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059a6:	605a      	str	r2, [r3, #4]
 80059a8:	e032      	b.n	8005a10 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059b8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059c8:	d117      	bne.n	80059fa <I2C_Master_ADDR+0x2f6>
 80059ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80059d0:	d00b      	beq.n	80059ea <I2C_Master_ADDR+0x2e6>
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d008      	beq.n	80059ea <I2C_Master_ADDR+0x2e6>
 80059d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d005      	beq.n	80059ea <I2C_Master_ADDR+0x2e6>
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d002      	beq.n	80059ea <I2C_Master_ADDR+0x2e6>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d107      	bne.n	80059fa <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80059f8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059fa:	2300      	movs	r3, #0
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699b      	ldr	r3, [r3, #24]
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005a16:	e00b      	b.n	8005a30 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a18:	2300      	movs	r3, #0
 8005a1a:	60bb      	str	r3, [r7, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	60bb      	str	r3, [r7, #8]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	60bb      	str	r3, [r7, #8]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
}
 8005a2e:	e7ff      	b.n	8005a30 <I2C_Master_ADDR+0x32c>
 8005a30:	bf00      	nop
 8005a32:	3744      	adds	r7, #68	; 0x44
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bc80      	pop	{r7}
 8005a38:	4770      	bx	lr

08005a3a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a48:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02b      	beq.n	8005aac <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d114      	bne.n	8005aac <I2C_SlaveTransmit_TXE+0x72>
 8005a82:	7bfb      	ldrb	r3, [r7, #15]
 8005a84:	2b29      	cmp	r3, #41	; 0x29
 8005a86:	d111      	bne.n	8005aac <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a96:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2221      	movs	r2, #33	; 0x21
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2228      	movs	r2, #40	; 0x28
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f7ff f9f1 	bl	8004e8e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005aac:	bf00      	nop
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d011      	beq.n	8005aea <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bc80      	pop	{r7}
 8005af2:	4770      	bx	lr

08005af4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d02c      	beq.n	8005b68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29a      	uxth	r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d114      	bne.n	8005b68 <I2C_SlaveReceive_RXNE+0x74>
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b2a      	cmp	r3, #42	; 0x2a
 8005b42:	d111      	bne.n	8005b68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	685a      	ldr	r2, [r3, #4]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2222      	movs	r2, #34	; 0x22
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2228      	movs	r2, #40	; 0x28
 8005b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff f99c 	bl	8004ea0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d012      	beq.n	8005ba8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	691a      	ldr	r2, [r3, #16]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	b2d2      	uxtb	r2, r2
 8005b8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bc80      	pop	{r7}
 8005bb0:	4770      	bx	lr

08005bb2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
 8005bba:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bcc:	2b28      	cmp	r3, #40	; 0x28
 8005bce:	d127      	bne.n	8005c20 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bde:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	089b      	lsrs	r3, r3, #2
 8005be4:	f003 0301 	and.w	r3, r3, #1
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005bec:	2301      	movs	r3, #1
 8005bee:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	09db      	lsrs	r3, r3, #7
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d103      	bne.n	8005c04 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	81bb      	strh	r3, [r7, #12]
 8005c02:	e002      	b.n	8005c0a <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005c12:	89ba      	ldrh	r2, [r7, #12]
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	4619      	mov	r1, r3
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff f94a 	bl	8004eb2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005c1e:	e00e      	b.n	8005c3e <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c20:	2300      	movs	r3, #0
 8005c22:	60bb      	str	r3, [r7, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699b      	ldr	r3, [r3, #24]
 8005c32:	60bb      	str	r3, [r7, #8]
 8005c34:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005c68:	2300      	movs	r3, #0
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695b      	ldr	r3, [r3, #20]
 8005c72:	60bb      	str	r3, [r7, #8]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0201 	orr.w	r2, r2, #1
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ca4:	d172      	bne.n	8005d8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b22      	cmp	r3, #34	; 0x22
 8005caa:	d002      	beq.n	8005cb2 <I2C_Slave_STOPF+0x6a>
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	2b2a      	cmp	r3, #42	; 0x2a
 8005cb0:	d135      	bne.n	8005d1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cce:	f043 0204 	orr.w	r2, r3, #4
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ce4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7fd ffa4 	bl	8003c38 <HAL_DMA_GetState>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d049      	beq.n	8005d8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	4a69      	ldr	r2, [pc, #420]	; (8005ea0 <I2C_Slave_STOPF+0x258>)
 8005cfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd ff22 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d03d      	beq.n	8005d8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d18:	4610      	mov	r0, r2
 8005d1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d1c:	e035      	b.n	8005d8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d005      	beq.n	8005d42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f043 0204 	orr.w	r2, r3, #4
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fd ff6e 	bl	8003c38 <HAL_DMA_GetState>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d014      	beq.n	8005d8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d66:	4a4e      	ldr	r2, [pc, #312]	; (8005ea0 <I2C_Slave_STOPF+0x258>)
 8005d68:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fd feec 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d008      	beq.n	8005d8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	e000      	b.n	8005d8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005d8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d03e      	beq.n	8005e14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	695b      	ldr	r3, [r3, #20]
 8005d9c:	f003 0304 	and.w	r3, r3, #4
 8005da0:	2b04      	cmp	r3, #4
 8005da2:	d112      	bne.n	8005dca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	691a      	ldr	r2, [r3, #16]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dae:	b2d2      	uxtb	r2, r2
 8005db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	1c5a      	adds	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dd4:	2b40      	cmp	r3, #64	; 0x40
 8005dd6:	d112      	bne.n	8005dfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	691a      	ldr	r2, [r3, #16]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de2:	b2d2      	uxtb	r2, r2
 8005de4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	3b01      	subs	r3, #1
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d005      	beq.n	8005e14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0c:	f043 0204 	orr.w	r2, r3, #4
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f843 	bl	8005ea8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005e22:	e039      	b.n	8005e98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b2a      	cmp	r3, #42	; 0x2a
 8005e28:	d109      	bne.n	8005e3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2228      	movs	r2, #40	; 0x28
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff f831 	bl	8004ea0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b28      	cmp	r3, #40	; 0x28
 8005e48:	d111      	bne.n	8005e6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a15      	ldr	r2, [pc, #84]	; (8005ea4 <I2C_Slave_STOPF+0x25c>)
 8005e4e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2220      	movs	r2, #32
 8005e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff f830 	bl	8004ecc <HAL_I2C_ListenCpltCallback>
}
 8005e6c:	e014      	b.n	8005e98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e72:	2b22      	cmp	r3, #34	; 0x22
 8005e74:	d002      	beq.n	8005e7c <I2C_Slave_STOPF+0x234>
 8005e76:	7bfb      	ldrb	r3, [r7, #15]
 8005e78:	2b22      	cmp	r3, #34	; 0x22
 8005e7a:	d10d      	bne.n	8005e98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2220      	movs	r2, #32
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff f804 	bl	8004ea0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005e98:	bf00      	nop
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	080063ad 	.word	0x080063ad
 8005ea4:	ffff0000 	.word	0xffff0000

08005ea8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ebe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d002      	beq.n	8005ecc <I2C_ITError+0x24>
 8005ec6:	7bbb      	ldrb	r3, [r7, #14]
 8005ec8:	2b40      	cmp	r3, #64	; 0x40
 8005eca:	d10a      	bne.n	8005ee2 <I2C_ITError+0x3a>
 8005ecc:	7bfb      	ldrb	r3, [r7, #15]
 8005ece:	2b22      	cmp	r3, #34	; 0x22
 8005ed0:	d107      	bne.n	8005ee2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ee0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ee2:	7bfb      	ldrb	r3, [r7, #15]
 8005ee4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ee8:	2b28      	cmp	r3, #40	; 0x28
 8005eea:	d107      	bne.n	8005efc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2228      	movs	r2, #40	; 0x28
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005efa:	e015      	b.n	8005f28 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f0a:	d00a      	beq.n	8005f22 <I2C_ITError+0x7a>
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b60      	cmp	r3, #96	; 0x60
 8005f10:	d007      	beq.n	8005f22 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2220      	movs	r2, #32
 8005f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f36:	d161      	bne.n	8005ffc <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f46:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f4c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d020      	beq.n	8005f96 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f58:	4a6a      	ldr	r2, [pc, #424]	; (8006104 <I2C_ITError+0x25c>)
 8005f5a:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f60:	4618      	mov	r0, r3
 8005f62:	f7fd fdf3 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8089 	beq.w	8006080 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 0201 	bic.w	r2, r2, #1
 8005f7c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	e074      	b.n	8006080 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	4a5a      	ldr	r2, [pc, #360]	; (8006104 <I2C_ITError+0x25c>)
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7fd fdd2 	bl	8003b4c <HAL_DMA_Abort_IT>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d068      	beq.n	8006080 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	695b      	ldr	r3, [r3, #20]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d10b      	bne.n	8005fd4 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	691a      	ldr	r2, [r3, #16]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	b2d2      	uxtb	r2, r2
 8005fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ff6:	4610      	mov	r0, r2
 8005ff8:	4798      	blx	r3
 8005ffa:	e041      	b.n	8006080 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b60      	cmp	r3, #96	; 0x60
 8006006:	d125      	bne.n	8006054 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006020:	2b40      	cmp	r3, #64	; 0x40
 8006022:	d10b      	bne.n	800603c <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	691a      	ldr	r2, [r3, #16]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0201 	bic.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f7fe ff61 	bl	8004f14 <HAL_I2C_AbortCpltCallback>
 8006052:	e015      	b.n	8006080 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d10b      	bne.n	800607a <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fe ff41 	bl	8004f02 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006084:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d10e      	bne.n	80060ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006096:	2b00      	cmp	r3, #0
 8006098:	d109      	bne.n	80060ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d104      	bne.n	80060ae <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80060bc:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c4:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f003 0304 	and.w	r3, r3, #4
 80060ce:	2b04      	cmp	r3, #4
 80060d0:	d113      	bne.n	80060fa <I2C_ITError+0x252>
 80060d2:	7bfb      	ldrb	r3, [r7, #15]
 80060d4:	2b28      	cmp	r3, #40	; 0x28
 80060d6:	d110      	bne.n	80060fa <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a0b      	ldr	r2, [pc, #44]	; (8006108 <I2C_ITError+0x260>)
 80060dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2220      	movs	r2, #32
 80060e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7fe fee9 	bl	8004ecc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	080063ad 	.word	0x080063ad
 8006108:	ffff0000 	.word	0xffff0000

0800610c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b088      	sub	sp, #32
 8006110:	af02      	add	r7, sp, #8
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	460b      	mov	r3, r1
 800611a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d006      	beq.n	8006136 <I2C_MasterRequestWrite+0x2a>
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d003      	beq.n	8006136 <I2C_MasterRequestWrite+0x2a>
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006134:	d108      	bne.n	8006148 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006144:	601a      	str	r2, [r3, #0]
 8006146:	e00b      	b.n	8006160 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614c:	2b12      	cmp	r3, #18
 800614e:	d107      	bne.n	8006160 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800615e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f9c5 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00d      	beq.n	8006194 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006186:	d103      	bne.n	8006190 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800618e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e035      	b.n	8006200 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	691b      	ldr	r3, [r3, #16]
 8006198:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800619c:	d108      	bne.n	80061b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800619e:	897b      	ldrh	r3, [r7, #10]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	461a      	mov	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80061ac:	611a      	str	r2, [r3, #16]
 80061ae:	e01b      	b.n	80061e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80061b0:	897b      	ldrh	r3, [r7, #10]
 80061b2:	11db      	asrs	r3, r3, #7
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 0306 	and.w	r3, r3, #6
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	f063 030f 	orn	r3, r3, #15
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	490e      	ldr	r1, [pc, #56]	; (8006208 <I2C_MasterRequestWrite+0xfc>)
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f9eb 	bl	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061d4:	4603      	mov	r3, r0
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d001      	beq.n	80061de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e010      	b.n	8006200 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80061de:	897b      	ldrh	r3, [r7, #10]
 80061e0:	b2da      	uxtb	r2, r3
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	4907      	ldr	r1, [pc, #28]	; (800620c <I2C_MasterRequestWrite+0x100>)
 80061ee:	68f8      	ldr	r0, [r7, #12]
 80061f0:	f000 f9db 	bl	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d001      	beq.n	80061fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	00010008 	.word	0x00010008
 800620c:	00010002 	.word	0x00010002

08006210 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af02      	add	r7, sp, #8
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]
 800621c:	460b      	mov	r3, r1
 800621e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006224:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006234:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	2b08      	cmp	r3, #8
 800623a:	d006      	beq.n	800624a <I2C_MasterRequestRead+0x3a>
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d003      	beq.n	800624a <I2C_MasterRequestRead+0x3a>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006248:	d108      	bne.n	800625c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006258:	601a      	str	r2, [r3, #0]
 800625a:	e00b      	b.n	8006274 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	2b11      	cmp	r3, #17
 8006262:	d107      	bne.n	8006274 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006272:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f93b 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00d      	beq.n	80062a8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800629a:	d103      	bne.n	80062a4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e079      	b.n	800639c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	691b      	ldr	r3, [r3, #16]
 80062ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b0:	d108      	bne.n	80062c4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80062b2:	897b      	ldrh	r3, [r7, #10]
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	611a      	str	r2, [r3, #16]
 80062c2:	e05f      	b.n	8006384 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80062c4:	897b      	ldrh	r3, [r7, #10]
 80062c6:	11db      	asrs	r3, r3, #7
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	f003 0306 	and.w	r3, r3, #6
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	f063 030f 	orn	r3, r3, #15
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4930      	ldr	r1, [pc, #192]	; (80063a4 <I2C_MasterRequestRead+0x194>)
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f000 f961 	bl	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e054      	b.n	800639c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80062f2:	897b      	ldrh	r3, [r7, #10]
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	4929      	ldr	r1, [pc, #164]	; (80063a8 <I2C_MasterRequestRead+0x198>)
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 f951 	bl	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e044      	b.n	800639c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006312:	2300      	movs	r3, #0
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	613b      	str	r3, [r7, #16]
 8006326:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006336:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f000 f8d9 	bl	80064fc <I2C_WaitOnFlagUntilTimeout>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00d      	beq.n	800636c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800635e:	d103      	bne.n	8006368 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006366:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e017      	b.n	800639c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800636c:	897b      	ldrh	r3, [r7, #10]
 800636e:	11db      	asrs	r3, r3, #7
 8006370:	b2db      	uxtb	r3, r3
 8006372:	f003 0306 	and.w	r3, r3, #6
 8006376:	b2db      	uxtb	r3, r3
 8006378:	f063 030e 	orn	r3, r3, #14
 800637c:	b2da      	uxtb	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	4907      	ldr	r1, [pc, #28]	; (80063a8 <I2C_MasterRequestRead+0x198>)
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f90d 	bl	80065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800639a:	2300      	movs	r3, #0
}
 800639c:	4618      	mov	r0, r3
 800639e:	3718      	adds	r7, #24
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	00010008 	.word	0x00010008
 80063a8:	00010002 	.word	0x00010002

080063ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b086      	sub	sp, #24
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063bc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80063c6:	4b4b      	ldr	r3, [pc, #300]	; (80064f4 <I2C_DMAAbort+0x148>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	08db      	lsrs	r3, r3, #3
 80063cc:	4a4a      	ldr	r2, [pc, #296]	; (80064f8 <I2C_DMAAbort+0x14c>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	0a1a      	lsrs	r2, r3, #8
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	00da      	lsls	r2, r3, #3
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f043 0220 	orr.w	r2, r3, #32
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80063f2:	e00a      	b.n	800640a <I2C_DMAAbort+0x5e>
    }
    count--;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006408:	d0ea      	beq.n	80063e0 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800640e:	2b00      	cmp	r3, #0
 8006410:	d003      	beq.n	800641a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006416:	2200      	movs	r2, #0
 8006418:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006426:	2200      	movs	r2, #0
 8006428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006438:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	2200      	movs	r2, #0
 800643e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	2200      	movs	r2, #0
 800644e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006454:	2b00      	cmp	r3, #0
 8006456:	d003      	beq.n	8006460 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800645c:	2200      	movs	r2, #0
 800645e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 0201 	bic.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b60      	cmp	r3, #96	; 0x60
 800647a:	d10e      	bne.n	800649a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	2200      	movs	r2, #0
 8006490:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006492:	6978      	ldr	r0, [r7, #20]
 8006494:	f7fe fd3e 	bl	8004f14 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006498:	e027      	b.n	80064ea <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800649a:	7cfb      	ldrb	r3, [r7, #19]
 800649c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064a0:	2b28      	cmp	r3, #40	; 0x28
 80064a2:	d117      	bne.n	80064d4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	681a      	ldr	r2, [r3, #0]
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0201 	orr.w	r2, r2, #1
 80064b2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064c2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2200      	movs	r2, #0
 80064c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	2228      	movs	r2, #40	; 0x28
 80064ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064d2:	e007      	b.n	80064e4 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7fe fd0c 	bl	8004f02 <HAL_I2C_ErrorCallback>
}
 80064ea:	bf00      	nop
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200000a4 	.word	0x200000a4
 80064f8:	14f8b589 	.word	0x14f8b589

080064fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	60f8      	str	r0, [r7, #12]
 8006504:	60b9      	str	r1, [r7, #8]
 8006506:	603b      	str	r3, [r7, #0]
 8006508:	4613      	mov	r3, r2
 800650a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650c:	e025      	b.n	800655a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006514:	d021      	beq.n	800655a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006516:	f7fd f9a3 	bl	8003860 <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	429a      	cmp	r2, r3
 8006524:	d302      	bcc.n	800652c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d116      	bne.n	800655a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2220      	movs	r2, #32
 8006536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006546:	f043 0220 	orr.w	r2, r3, #32
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e023      	b.n	80065a2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	0c1b      	lsrs	r3, r3, #16
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	d10d      	bne.n	8006580 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	43da      	mvns	r2, r3
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	4013      	ands	r3, r2
 8006570:	b29b      	uxth	r3, r3
 8006572:	2b00      	cmp	r3, #0
 8006574:	bf0c      	ite	eq
 8006576:	2301      	moveq	r3, #1
 8006578:	2300      	movne	r3, #0
 800657a:	b2db      	uxtb	r3, r3
 800657c:	461a      	mov	r2, r3
 800657e:	e00c      	b.n	800659a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	699b      	ldr	r3, [r3, #24]
 8006586:	43da      	mvns	r2, r3
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	b29b      	uxth	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0b6      	beq.n	800650e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80065a0:	2300      	movs	r3, #0
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b084      	sub	sp, #16
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	60f8      	str	r0, [r7, #12]
 80065b2:	60b9      	str	r1, [r7, #8]
 80065b4:	607a      	str	r2, [r7, #4]
 80065b6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80065b8:	e051      	b.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c8:	d123      	bne.n	8006612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065d8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065e2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2220      	movs	r2, #32
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e046      	b.n	80066a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d021      	beq.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661a:	f7fd f921 	bl	8003860 <HAL_GetTick>
 800661e:	4602      	mov	r2, r0
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	1ad3      	subs	r3, r2, r3
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d116      	bne.n	800665e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664a:	f043 0220 	orr.w	r2, r3, #32
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e020      	b.n	80066a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	0c1b      	lsrs	r3, r3, #16
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b01      	cmp	r3, #1
 8006666:	d10c      	bne.n	8006682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	695b      	ldr	r3, [r3, #20]
 800666e:	43da      	mvns	r2, r3
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	4013      	ands	r3, r2
 8006674:	b29b      	uxth	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	bf14      	ite	ne
 800667a:	2301      	movne	r3, #1
 800667c:	2300      	moveq	r3, #0
 800667e:	b2db      	uxtb	r3, r3
 8006680:	e00b      	b.n	800669a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	43da      	mvns	r2, r3
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	4013      	ands	r3, r2
 800668e:	b29b      	uxth	r3, r3
 8006690:	2b00      	cmp	r3, #0
 8006692:	bf14      	ite	ne
 8006694:	2301      	movne	r3, #1
 8006696:	2300      	moveq	r3, #0
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b00      	cmp	r3, #0
 800669c:	d18d      	bne.n	80065ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800669e:	2300      	movs	r3, #0
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	60b9      	str	r1, [r7, #8]
 80066b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80066b4:	e02d      	b.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f900 	bl	80068bc <I2C_IsAcknowledgeFailed>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	e02d      	b.n	8006722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066cc:	d021      	beq.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ce:	f7fd f8c7 	bl	8003860 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	429a      	cmp	r2, r3
 80066dc:	d302      	bcc.n	80066e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d116      	bne.n	8006712 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066fe:	f043 0220 	orr.w	r2, r3, #32
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e007      	b.n	8006722 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d1ca      	bne.n	80066b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	3710      	adds	r7, #16
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006736:	e02d      	b.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 f8bf 	bl	80068bc <I2C_IsAcknowledgeFailed>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e02d      	b.n	80067a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d021      	beq.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006750:	f7fd f886 	bl	8003860 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	429a      	cmp	r2, r3
 800675e:	d302      	bcc.n	8006766 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d116      	bne.n	8006794 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006780:	f043 0220 	orr.w	r2, r3, #32
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006790:	2301      	movs	r3, #1
 8006792:	e007      	b.n	80067a4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b04      	cmp	r3, #4
 80067a0:	d1ca      	bne.n	8006738 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b085      	sub	sp, #20
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	08db      	lsrs	r3, r3, #3
 80067be:	4a13      	ldr	r2, [pc, #76]	; (800680c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	0a1a      	lsrs	r2, r3, #8
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d107      	bne.n	80067ea <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	f043 0220 	orr.w	r2, r3, #32
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e008      	b.n	80067fc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067f8:	d0e9      	beq.n	80067ce <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	bc80      	pop	{r7}
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	200000a4 	.word	0x200000a4
 800680c:	14f8b589 	.word	0x14f8b589

08006810 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800681c:	e042      	b.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	f003 0310 	and.w	r3, r3, #16
 8006828:	2b10      	cmp	r3, #16
 800682a:	d119      	bne.n	8006860 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f06f 0210 	mvn.w	r2, #16
 8006834:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e029      	b.n	80068b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006860:	f7fc fffe 	bl	8003860 <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	429a      	cmp	r2, r3
 800686e:	d302      	bcc.n	8006876 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d116      	bne.n	80068a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2220      	movs	r2, #32
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	f043 0220 	orr.w	r2, r3, #32
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e007      	b.n	80068b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ae:	2b40      	cmp	r3, #64	; 0x40
 80068b0:	d1b5      	bne.n	800681e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068d2:	d11b      	bne.n	800690c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80068dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f8:	f043 0204 	orr.w	r2, r3, #4
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e000      	b.n	800690e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	370c      	adds	r7, #12
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006924:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006928:	d103      	bne.n	8006932 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006930:	e007      	b.n	8006942 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006936:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800693a:	d102      	bne.n	8006942 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2208      	movs	r2, #8
 8006940:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006942:	bf00      	nop
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800694c:	b480      	push	{r7}
 800694e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8006950:	4b03      	ldr	r3, [pc, #12]	; (8006960 <HAL_PWR_EnableBkUpAccess+0x14>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
}
 8006956:	bf00      	nop
 8006958:	46bd      	mov	sp, r7
 800695a:	bc80      	pop	{r7}
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	420e0020 	.word	0x420e0020

08006964 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e272      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 8087 	beq.w	8006a92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006984:	4b92      	ldr	r3, [pc, #584]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f003 030c 	and.w	r3, r3, #12
 800698c:	2b04      	cmp	r3, #4
 800698e:	d00c      	beq.n	80069aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006990:	4b8f      	ldr	r3, [pc, #572]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	f003 030c 	and.w	r3, r3, #12
 8006998:	2b08      	cmp	r3, #8
 800699a:	d112      	bne.n	80069c2 <HAL_RCC_OscConfig+0x5e>
 800699c:	4b8c      	ldr	r3, [pc, #560]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069a8:	d10b      	bne.n	80069c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069aa:	4b89      	ldr	r3, [pc, #548]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d06c      	beq.n	8006a90 <HAL_RCC_OscConfig+0x12c>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d168      	bne.n	8006a90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e24c      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ca:	d106      	bne.n	80069da <HAL_RCC_OscConfig+0x76>
 80069cc:	4b80      	ldr	r3, [pc, #512]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	4a7f      	ldr	r2, [pc, #508]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069d6:	6013      	str	r3, [r2, #0]
 80069d8:	e02e      	b.n	8006a38 <HAL_RCC_OscConfig+0xd4>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d10c      	bne.n	80069fc <HAL_RCC_OscConfig+0x98>
 80069e2:	4b7b      	ldr	r3, [pc, #492]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a7a      	ldr	r2, [pc, #488]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4b78      	ldr	r3, [pc, #480]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a77      	ldr	r2, [pc, #476]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 80069f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	e01d      	b.n	8006a38 <HAL_RCC_OscConfig+0xd4>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a04:	d10c      	bne.n	8006a20 <HAL_RCC_OscConfig+0xbc>
 8006a06:	4b72      	ldr	r3, [pc, #456]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a71      	ldr	r2, [pc, #452]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b6f      	ldr	r3, [pc, #444]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a6e      	ldr	r2, [pc, #440]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]
 8006a1e:	e00b      	b.n	8006a38 <HAL_RCC_OscConfig+0xd4>
 8006a20:	4b6b      	ldr	r3, [pc, #428]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a6a      	ldr	r2, [pc, #424]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a2a:	6013      	str	r3, [r2, #0]
 8006a2c:	4b68      	ldr	r3, [pc, #416]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a67      	ldr	r2, [pc, #412]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d013      	beq.n	8006a68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fc ff0e 	bl	8003860 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a48:	f7fc ff0a 	bl	8003860 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b64      	cmp	r3, #100	; 0x64
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e200      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a5a:	4b5d      	ldr	r3, [pc, #372]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0xe4>
 8006a66:	e014      	b.n	8006a92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a68:	f7fc fefa 	bl	8003860 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a70:	f7fc fef6 	bl	8003860 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b64      	cmp	r3, #100	; 0x64
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e1ec      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a82:	4b53      	ldr	r3, [pc, #332]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f0      	bne.n	8006a70 <HAL_RCC_OscConfig+0x10c>
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d063      	beq.n	8006b66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a9e:	4b4c      	ldr	r3, [pc, #304]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00b      	beq.n	8006ac2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006aaa:	4b49      	ldr	r3, [pc, #292]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	f003 030c 	and.w	r3, r3, #12
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d11c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x18c>
 8006ab6:	4b46      	ldr	r3, [pc, #280]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d116      	bne.n	8006af0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ac2:	4b43      	ldr	r3, [pc, #268]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d005      	beq.n	8006ada <HAL_RCC_OscConfig+0x176>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e1c0      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ada:	4b3d      	ldr	r3, [pc, #244]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	4939      	ldr	r1, [pc, #228]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aee:	e03a      	b.n	8006b66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d020      	beq.n	8006b3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006af8:	4b36      	ldr	r3, [pc, #216]	; (8006bd4 <HAL_RCC_OscConfig+0x270>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7fc feaf 	bl	8003860 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b06:	f7fc feab 	bl	8003860 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e1a1      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b18:	4b2d      	ldr	r3, [pc, #180]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0302 	and.w	r3, r3, #2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d0f0      	beq.n	8006b06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b24:	4b2a      	ldr	r3, [pc, #168]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	00db      	lsls	r3, r3, #3
 8006b32:	4927      	ldr	r1, [pc, #156]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006b34:	4313      	orrs	r3, r2
 8006b36:	600b      	str	r3, [r1, #0]
 8006b38:	e015      	b.n	8006b66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b3a:	4b26      	ldr	r3, [pc, #152]	; (8006bd4 <HAL_RCC_OscConfig+0x270>)
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b40:	f7fc fe8e 	bl	8003860 <HAL_GetTick>
 8006b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b46:	e008      	b.n	8006b5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b48:	f7fc fe8a 	bl	8003860 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e180      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5a:	4b1d      	ldr	r3, [pc, #116]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1f0      	bne.n	8006b48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d03a      	beq.n	8006be8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d019      	beq.n	8006bae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b7a:	4b17      	ldr	r3, [pc, #92]	; (8006bd8 <HAL_RCC_OscConfig+0x274>)
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b80:	f7fc fe6e 	bl	8003860 <HAL_GetTick>
 8006b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b86:	e008      	b.n	8006b9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b88:	f7fc fe6a 	bl	8003860 <HAL_GetTick>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	1ad3      	subs	r3, r2, r3
 8006b92:	2b02      	cmp	r3, #2
 8006b94:	d901      	bls.n	8006b9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006b96:	2303      	movs	r3, #3
 8006b98:	e160      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006b9a:	4b0d      	ldr	r3, [pc, #52]	; (8006bd0 <HAL_RCC_OscConfig+0x26c>)
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d0f0      	beq.n	8006b88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	f000 fad8 	bl	800715c <RCC_Delay>
 8006bac:	e01c      	b.n	8006be8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bae:	4b0a      	ldr	r3, [pc, #40]	; (8006bd8 <HAL_RCC_OscConfig+0x274>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bb4:	f7fc fe54 	bl	8003860 <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bba:	e00f      	b.n	8006bdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fc fe50 	bl	8003860 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d908      	bls.n	8006bdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e146      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000
 8006bd4:	42420000 	.word	0x42420000
 8006bd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bdc:	4b92      	ldr	r3, [pc, #584]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d1e9      	bne.n	8006bbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 80a6 	beq.w	8006d42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bfa:	4b8b      	ldr	r3, [pc, #556]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d10d      	bne.n	8006c22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c06:	4b88      	ldr	r3, [pc, #544]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c08:	69db      	ldr	r3, [r3, #28]
 8006c0a:	4a87      	ldr	r2, [pc, #540]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c10:	61d3      	str	r3, [r2, #28]
 8006c12:	4b85      	ldr	r3, [pc, #532]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	60bb      	str	r3, [r7, #8]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c22:	4b82      	ldr	r3, [pc, #520]	; (8006e2c <HAL_RCC_OscConfig+0x4c8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d118      	bne.n	8006c60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c2e:	4b7f      	ldr	r3, [pc, #508]	; (8006e2c <HAL_RCC_OscConfig+0x4c8>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a7e      	ldr	r2, [pc, #504]	; (8006e2c <HAL_RCC_OscConfig+0x4c8>)
 8006c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c3a:	f7fc fe11 	bl	8003860 <HAL_GetTick>
 8006c3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c40:	e008      	b.n	8006c54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c42:	f7fc fe0d 	bl	8003860 <HAL_GetTick>
 8006c46:	4602      	mov	r2, r0
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	1ad3      	subs	r3, r2, r3
 8006c4c:	2b64      	cmp	r3, #100	; 0x64
 8006c4e:	d901      	bls.n	8006c54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	e103      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c54:	4b75      	ldr	r3, [pc, #468]	; (8006e2c <HAL_RCC_OscConfig+0x4c8>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d0f0      	beq.n	8006c42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d106      	bne.n	8006c76 <HAL_RCC_OscConfig+0x312>
 8006c68:	4b6f      	ldr	r3, [pc, #444]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	4a6e      	ldr	r2, [pc, #440]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c6e:	f043 0301 	orr.w	r3, r3, #1
 8006c72:	6213      	str	r3, [r2, #32]
 8006c74:	e02d      	b.n	8006cd2 <HAL_RCC_OscConfig+0x36e>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10c      	bne.n	8006c98 <HAL_RCC_OscConfig+0x334>
 8006c7e:	4b6a      	ldr	r3, [pc, #424]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	4a69      	ldr	r2, [pc, #420]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	6213      	str	r3, [r2, #32]
 8006c8a:	4b67      	ldr	r3, [pc, #412]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	4a66      	ldr	r2, [pc, #408]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006c90:	f023 0304 	bic.w	r3, r3, #4
 8006c94:	6213      	str	r3, [r2, #32]
 8006c96:	e01c      	b.n	8006cd2 <HAL_RCC_OscConfig+0x36e>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d10c      	bne.n	8006cba <HAL_RCC_OscConfig+0x356>
 8006ca0:	4b61      	ldr	r3, [pc, #388]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006ca2:	6a1b      	ldr	r3, [r3, #32]
 8006ca4:	4a60      	ldr	r2, [pc, #384]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006ca6:	f043 0304 	orr.w	r3, r3, #4
 8006caa:	6213      	str	r3, [r2, #32]
 8006cac:	4b5e      	ldr	r3, [pc, #376]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	4a5d      	ldr	r2, [pc, #372]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cb2:	f043 0301 	orr.w	r3, r3, #1
 8006cb6:	6213      	str	r3, [r2, #32]
 8006cb8:	e00b      	b.n	8006cd2 <HAL_RCC_OscConfig+0x36e>
 8006cba:	4b5b      	ldr	r3, [pc, #364]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	4a5a      	ldr	r2, [pc, #360]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cc0:	f023 0301 	bic.w	r3, r3, #1
 8006cc4:	6213      	str	r3, [r2, #32]
 8006cc6:	4b58      	ldr	r3, [pc, #352]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	4a57      	ldr	r2, [pc, #348]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006ccc:	f023 0304 	bic.w	r3, r3, #4
 8006cd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d015      	beq.n	8006d06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cda:	f7fc fdc1 	bl	8003860 <HAL_GetTick>
 8006cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ce0:	e00a      	b.n	8006cf8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ce2:	f7fc fdbd 	bl	8003860 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d901      	bls.n	8006cf8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e0b1      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cf8:	4b4b      	ldr	r3, [pc, #300]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0ee      	beq.n	8006ce2 <HAL_RCC_OscConfig+0x37e>
 8006d04:	e014      	b.n	8006d30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d06:	f7fc fdab 	bl	8003860 <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d0c:	e00a      	b.n	8006d24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d0e:	f7fc fda7 	bl	8003860 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d901      	bls.n	8006d24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006d20:	2303      	movs	r3, #3
 8006d22:	e09b      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d24:	4b40      	ldr	r3, [pc, #256]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1ee      	bne.n	8006d0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d105      	bne.n	8006d42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d36:	4b3c      	ldr	r3, [pc, #240]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4a3b      	ldr	r2, [pc, #236]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69db      	ldr	r3, [r3, #28]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8087 	beq.w	8006e5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d4c:	4b36      	ldr	r3, [pc, #216]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	f003 030c 	and.w	r3, r3, #12
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	d061      	beq.n	8006e1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d146      	bne.n	8006dee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d60:	4b33      	ldr	r3, [pc, #204]	; (8006e30 <HAL_RCC_OscConfig+0x4cc>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d66:	f7fc fd7b 	bl	8003860 <HAL_GetTick>
 8006d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d6c:	e008      	b.n	8006d80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d6e:	f7fc fd77 	bl	8003860 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d901      	bls.n	8006d80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e06d      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d80:	4b29      	ldr	r3, [pc, #164]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1f0      	bne.n	8006d6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d94:	d108      	bne.n	8006da8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006d96:	4b24      	ldr	r3, [pc, #144]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	689b      	ldr	r3, [r3, #8]
 8006da2:	4921      	ldr	r1, [pc, #132]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006da4:	4313      	orrs	r3, r2
 8006da6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006da8:	4b1f      	ldr	r3, [pc, #124]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a19      	ldr	r1, [r3, #32]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db8:	430b      	orrs	r3, r1
 8006dba:	491b      	ldr	r1, [pc, #108]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dc0:	4b1b      	ldr	r3, [pc, #108]	; (8006e30 <HAL_RCC_OscConfig+0x4cc>)
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dc6:	f7fc fd4b 	bl	8003860 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dcc:	e008      	b.n	8006de0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dce:	f7fc fd47 	bl	8003860 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d901      	bls.n	8006de0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e03d      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d0f0      	beq.n	8006dce <HAL_RCC_OscConfig+0x46a>
 8006dec:	e035      	b.n	8006e5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dee:	4b10      	ldr	r3, [pc, #64]	; (8006e30 <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df4:	f7fc fd34 	bl	8003860 <HAL_GetTick>
 8006df8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006dfa:	e008      	b.n	8006e0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dfc:	f7fc fd30 	bl	8003860 <HAL_GetTick>
 8006e00:	4602      	mov	r2, r0
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e026      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e0e:	4b06      	ldr	r3, [pc, #24]	; (8006e28 <HAL_RCC_OscConfig+0x4c4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1f0      	bne.n	8006dfc <HAL_RCC_OscConfig+0x498>
 8006e1a:	e01e      	b.n	8006e5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d107      	bne.n	8006e34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e019      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
 8006e28:	40021000 	.word	0x40021000
 8006e2c:	40007000 	.word	0x40007000
 8006e30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006e34:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <HAL_RCC_OscConfig+0x500>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6a1b      	ldr	r3, [r3, #32]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d106      	bne.n	8006e56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d001      	beq.n	8006e5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	e000      	b.n	8006e5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}
 8006e64:	40021000 	.word	0x40021000

08006e68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	e0d0      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e7c:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	683a      	ldr	r2, [r7, #0]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d910      	bls.n	8006eac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e8a:	4b67      	ldr	r3, [pc, #412]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f023 0207 	bic.w	r2, r3, #7
 8006e92:	4965      	ldr	r1, [pc, #404]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e9a:	4b63      	ldr	r3, [pc, #396]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d001      	beq.n	8006eac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e0b8      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d020      	beq.n	8006efa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0304 	and.w	r3, r3, #4
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d005      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ec4:	4b59      	ldr	r3, [pc, #356]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	4a58      	ldr	r2, [pc, #352]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006eca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ece:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0308 	and.w	r3, r3, #8
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006edc:	4b53      	ldr	r3, [pc, #332]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	4a52      	ldr	r2, [pc, #328]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ee2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006ee6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ee8:	4b50      	ldr	r3, [pc, #320]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	494d      	ldr	r1, [pc, #308]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d040      	beq.n	8006f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d107      	bne.n	8006f1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f0e:	4b47      	ldr	r3, [pc, #284]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d115      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e07f      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d107      	bne.n	8006f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f26:	4b41      	ldr	r3, [pc, #260]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e073      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f36:	4b3d      	ldr	r3, [pc, #244]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e06b      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f46:	4b39      	ldr	r3, [pc, #228]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f023 0203 	bic.w	r2, r3, #3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	4936      	ldr	r1, [pc, #216]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f54:	4313      	orrs	r3, r2
 8006f56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f58:	f7fc fc82 	bl	8003860 <HAL_GetTick>
 8006f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f5e:	e00a      	b.n	8006f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f60:	f7fc fc7e 	bl	8003860 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e053      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f003 020c 	and.w	r2, r3, #12
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	009b      	lsls	r3, r3, #2
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d1eb      	bne.n	8006f60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f88:	4b27      	ldr	r3, [pc, #156]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d210      	bcs.n	8006fb8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f96:	4b24      	ldr	r3, [pc, #144]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f023 0207 	bic.w	r2, r3, #7
 8006f9e:	4922      	ldr	r1, [pc, #136]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fa6:	4b20      	ldr	r3, [pc, #128]	; (8007028 <HAL_RCC_ClockConfig+0x1c0>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d001      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e032      	b.n	800701e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fc4:	4b19      	ldr	r3, [pc, #100]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	68db      	ldr	r3, [r3, #12]
 8006fd0:	4916      	ldr	r1, [pc, #88]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0308 	and.w	r3, r3, #8
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d009      	beq.n	8006ff6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006fe2:	4b12      	ldr	r3, [pc, #72]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	00db      	lsls	r3, r3, #3
 8006ff0:	490e      	ldr	r1, [pc, #56]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ff6:	f000 f821 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	4b0b      	ldr	r3, [pc, #44]	; (800702c <HAL_RCC_ClockConfig+0x1c4>)
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	091b      	lsrs	r3, r3, #4
 8007002:	f003 030f 	and.w	r3, r3, #15
 8007006:	490a      	ldr	r1, [pc, #40]	; (8007030 <HAL_RCC_ClockConfig+0x1c8>)
 8007008:	5ccb      	ldrb	r3, [r1, r3]
 800700a:	fa22 f303 	lsr.w	r3, r2, r3
 800700e:	4a09      	ldr	r2, [pc, #36]	; (8007034 <HAL_RCC_ClockConfig+0x1cc>)
 8007010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007012:	4b09      	ldr	r3, [pc, #36]	; (8007038 <HAL_RCC_ClockConfig+0x1d0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4618      	mov	r0, r3
 8007018:	f7fc fbf2 	bl	8003800 <HAL_InitTick>

  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40022000 	.word	0x40022000
 800702c:	40021000 	.word	0x40021000
 8007030:	0800fbb8 	.word	0x0800fbb8
 8007034:	200000a4 	.word	0x200000a4
 8007038:	200000a8 	.word	0x200000a8

0800703c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800703c:	b490      	push	{r4, r7}
 800703e:	b08a      	sub	sp, #40	; 0x28
 8007040:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007042:	4b29      	ldr	r3, [pc, #164]	; (80070e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8007044:	1d3c      	adds	r4, r7, #4
 8007046:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800704c:	f240 2301 	movw	r3, #513	; 0x201
 8007050:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	61fb      	str	r3, [r7, #28]
 8007056:	2300      	movs	r3, #0
 8007058:	61bb      	str	r3, [r7, #24]
 800705a:	2300      	movs	r3, #0
 800705c:	627b      	str	r3, [r7, #36]	; 0x24
 800705e:	2300      	movs	r3, #0
 8007060:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8007062:	2300      	movs	r3, #0
 8007064:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8007066:	4b21      	ldr	r3, [pc, #132]	; (80070ec <HAL_RCC_GetSysClockFreq+0xb0>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f003 030c 	and.w	r3, r3, #12
 8007072:	2b04      	cmp	r3, #4
 8007074:	d002      	beq.n	800707c <HAL_RCC_GetSysClockFreq+0x40>
 8007076:	2b08      	cmp	r3, #8
 8007078:	d003      	beq.n	8007082 <HAL_RCC_GetSysClockFreq+0x46>
 800707a:	e02b      	b.n	80070d4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800707c:	4b1c      	ldr	r3, [pc, #112]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800707e:	623b      	str	r3, [r7, #32]
      break;
 8007080:	e02b      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	0c9b      	lsrs	r3, r3, #18
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	3328      	adds	r3, #40	; 0x28
 800708c:	443b      	add	r3, r7
 800708e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007092:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d012      	beq.n	80070c4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800709e:	4b13      	ldr	r3, [pc, #76]	; (80070ec <HAL_RCC_GetSysClockFreq+0xb0>)
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	0c5b      	lsrs	r3, r3, #17
 80070a4:	f003 0301 	and.w	r3, r3, #1
 80070a8:	3328      	adds	r3, #40	; 0x28
 80070aa:	443b      	add	r3, r7
 80070ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80070b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	4a0e      	ldr	r2, [pc, #56]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070b6:	fb03 f202 	mul.w	r2, r3, r2
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
 80070c2:	e004      	b.n	80070ce <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	4a0b      	ldr	r2, [pc, #44]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80070ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d0:	623b      	str	r3, [r7, #32]
      break;
 80070d2:	e002      	b.n	80070da <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80070d4:	4b06      	ldr	r3, [pc, #24]	; (80070f0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80070d6:	623b      	str	r3, [r7, #32]
      break;
 80070d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070da:	6a3b      	ldr	r3, [r7, #32]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3728      	adds	r7, #40	; 0x28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bc90      	pop	{r4, r7}
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	0800cf40 	.word	0x0800cf40
 80070ec:	40021000 	.word	0x40021000
 80070f0:	007a1200 	.word	0x007a1200
 80070f4:	003d0900 	.word	0x003d0900

080070f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070f8:	b480      	push	{r7}
 80070fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070fc:	4b02      	ldr	r3, [pc, #8]	; (8007108 <HAL_RCC_GetHCLKFreq+0x10>)
 80070fe:	681b      	ldr	r3, [r3, #0]
}
 8007100:	4618      	mov	r0, r3
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	200000a4 	.word	0x200000a4

0800710c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007110:	f7ff fff2 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 8007114:	4602      	mov	r2, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	0a1b      	lsrs	r3, r3, #8
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4903      	ldr	r1, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007122:	5ccb      	ldrb	r3, [r1, r3]
 8007124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40021000 	.word	0x40021000
 8007130:	0800fbc8 	.word	0x0800fbc8

08007134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007138:	f7ff ffde 	bl	80070f8 <HAL_RCC_GetHCLKFreq>
 800713c:	4602      	mov	r2, r0
 800713e:	4b05      	ldr	r3, [pc, #20]	; (8007154 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	0adb      	lsrs	r3, r3, #11
 8007144:	f003 0307 	and.w	r3, r3, #7
 8007148:	4903      	ldr	r1, [pc, #12]	; (8007158 <HAL_RCC_GetPCLK2Freq+0x24>)
 800714a:	5ccb      	ldrb	r3, [r1, r3]
 800714c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007150:	4618      	mov	r0, r3
 8007152:	bd80      	pop	{r7, pc}
 8007154:	40021000 	.word	0x40021000
 8007158:	0800fbc8 	.word	0x0800fbc8

0800715c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8007164:	4b0a      	ldr	r3, [pc, #40]	; (8007190 <RCC_Delay+0x34>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a0a      	ldr	r2, [pc, #40]	; (8007194 <RCC_Delay+0x38>)
 800716a:	fba2 2303 	umull	r2, r3, r2, r3
 800716e:	0a5b      	lsrs	r3, r3, #9
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8007178:	bf00      	nop
  }
  while (Delay --);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1e5a      	subs	r2, r3, #1
 800717e:	60fa      	str	r2, [r7, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1f9      	bne.n	8007178 <RCC_Delay+0x1c>
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	3714      	adds	r7, #20
 800718a:	46bd      	mov	sp, r7
 800718c:	bc80      	pop	{r7}
 800718e:	4770      	bx	lr
 8007190:	200000a4 	.word	0x200000a4
 8007194:	10624dd3 	.word	0x10624dd3

08007198 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	613b      	str	r3, [r7, #16]
 80071a4:	2300      	movs	r3, #0
 80071a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d07d      	beq.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80071b4:	2300      	movs	r3, #0
 80071b6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071b8:	4b4f      	ldr	r3, [pc, #316]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ba:	69db      	ldr	r3, [r3, #28]
 80071bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10d      	bne.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80071c4:	4b4c      	ldr	r3, [pc, #304]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071c6:	69db      	ldr	r3, [r3, #28]
 80071c8:	4a4b      	ldr	r2, [pc, #300]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ce:	61d3      	str	r3, [r2, #28]
 80071d0:	4b49      	ldr	r3, [pc, #292]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071dc:	2301      	movs	r3, #1
 80071de:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071e0:	4b46      	ldr	r3, [pc, #280]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d118      	bne.n	800721e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80071ec:	4b43      	ldr	r3, [pc, #268]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a42      	ldr	r2, [pc, #264]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80071f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071f8:	f7fc fb32 	bl	8003860 <HAL_GetTick>
 80071fc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80071fe:	e008      	b.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007200:	f7fc fb2e 	bl	8003860 <HAL_GetTick>
 8007204:	4602      	mov	r2, r0
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	1ad3      	subs	r3, r2, r3
 800720a:	2b64      	cmp	r3, #100	; 0x64
 800720c:	d901      	bls.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800720e:	2303      	movs	r3, #3
 8007210:	e06d      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007212:	4b3a      	ldr	r3, [pc, #232]	; (80072fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721a:	2b00      	cmp	r3, #0
 800721c:	d0f0      	beq.n	8007200 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800721e:	4b36      	ldr	r3, [pc, #216]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007226:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d02e      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	429a      	cmp	r2, r3
 800723a:	d027      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800723c:	4b2e      	ldr	r3, [pc, #184]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800723e:	6a1b      	ldr	r3, [r3, #32]
 8007240:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007244:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007246:	4b2e      	ldr	r3, [pc, #184]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8007248:	2201      	movs	r2, #1
 800724a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800724c:	4b2c      	ldr	r3, [pc, #176]	; (8007300 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800724e:	2200      	movs	r2, #0
 8007250:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8007252:	4a29      	ldr	r2, [pc, #164]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b00      	cmp	r3, #0
 8007260:	d014      	beq.n	800728c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007262:	f7fc fafd 	bl	8003860 <HAL_GetTick>
 8007266:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007268:	e00a      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800726a:	f7fc faf9 	bl	8003860 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	f241 3288 	movw	r2, #5000	; 0x1388
 8007278:	4293      	cmp	r3, r2
 800727a:	d901      	bls.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800727c:	2303      	movs	r3, #3
 800727e:	e036      	b.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007280:	4b1d      	ldr	r3, [pc, #116]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007282:	6a1b      	ldr	r3, [r3, #32]
 8007284:	f003 0302 	and.w	r3, r3, #2
 8007288:	2b00      	cmp	r3, #0
 800728a:	d0ee      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800728c:	4b1a      	ldr	r3, [pc, #104]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	4917      	ldr	r1, [pc, #92]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800729a:	4313      	orrs	r3, r2
 800729c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800729e:	7dfb      	ldrb	r3, [r7, #23]
 80072a0:	2b01      	cmp	r3, #1
 80072a2:	d105      	bne.n	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072a4:	4b14      	ldr	r3, [pc, #80]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	4a13      	ldr	r2, [pc, #76]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	490b      	ldr	r1, [pc, #44]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072ca:	4313      	orrs	r3, r2
 80072cc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f003 0310 	and.w	r3, r3, #16
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d008      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	4904      	ldr	r1, [pc, #16]	; (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80072e8:	4313      	orrs	r3, r2
 80072ea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3718      	adds	r7, #24
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	40021000 	.word	0x40021000
 80072fc:	40007000 	.word	0x40007000
 8007300:	42420440 	.word	0x42420440

08007304 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007304:	b590      	push	{r4, r7, lr}
 8007306:	b08d      	sub	sp, #52	; 0x34
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800730c:	4b58      	ldr	r3, [pc, #352]	; (8007470 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800730e:	f107 040c 	add.w	r4, r7, #12
 8007312:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007314:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007318:	f240 2301 	movw	r3, #513	; 0x201
 800731c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800731e:	2300      	movs	r3, #0
 8007320:	627b      	str	r3, [r7, #36]	; 0x24
 8007322:	2300      	movs	r3, #0
 8007324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007326:	2300      	movs	r3, #0
 8007328:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800732a:	2300      	movs	r3, #0
 800732c:	61fb      	str	r3, [r7, #28]
 800732e:	2300      	movs	r3, #0
 8007330:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b10      	cmp	r3, #16
 8007336:	d00a      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b10      	cmp	r3, #16
 800733c:	f200 808e 	bhi.w	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b01      	cmp	r3, #1
 8007344:	d049      	beq.n	80073da <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2b02      	cmp	r3, #2
 800734a:	d079      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 800734c:	e086      	b.n	800745c <HAL_RCCEx_GetPeriphCLKFreq+0x158>
      temp_reg = RCC->CFGR;
 800734e:	4b49      	ldr	r3, [pc, #292]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8007354:	4b47      	ldr	r3, [pc, #284]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d07f      	beq.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	0c9b      	lsrs	r3, r3, #18
 8007364:	f003 030f 	and.w	r3, r3, #15
 8007368:	3330      	adds	r3, #48	; 0x30
 800736a:	443b      	add	r3, r7
 800736c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8007370:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d017      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800737c:	4b3d      	ldr	r3, [pc, #244]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	0c5b      	lsrs	r3, r3, #17
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	3330      	adds	r3, #48	; 0x30
 8007388:	443b      	add	r3, r7
 800738a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800738e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00d      	beq.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800739a:	4a37      	ldr	r2, [pc, #220]	; (8007478 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800739c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739e:	fbb2 f2f3 	udiv	r2, r2, r3
 80073a2:	6a3b      	ldr	r3, [r7, #32]
 80073a4:	fb02 f303 	mul.w	r3, r2, r3
 80073a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073aa:	e004      	b.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80073ac:	6a3b      	ldr	r3, [r7, #32]
 80073ae:	4a33      	ldr	r2, [pc, #204]	; (800747c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80073b0:	fb02 f303 	mul.w	r3, r2, r3
 80073b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80073b6:	4b2f      	ldr	r3, [pc, #188]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073c2:	d102      	bne.n	80073ca <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          frequency = pllclk;
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073c8:	e04a      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
          frequency = (pllclk * 2) / 3;
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	4a2c      	ldr	r2, [pc, #176]	; (8007480 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 80073d0:	fba2 2303 	umull	r2, r3, r2, r3
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80073d8:	e042      	b.n	8007460 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>
      temp_reg = RCC->BDCR;
 80073da:	4b26      	ldr	r3, [pc, #152]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ea:	d108      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d003      	beq.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0xfa>
        frequency = LSE_VALUE;
 80073f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073fa:	62bb      	str	r3, [r7, #40]	; 0x28
 80073fc:	e01f      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007404:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007408:	d109      	bne.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
 800740a:	4b1a      	ldr	r3, [pc, #104]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800740c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740e:	f003 0302 	and.w	r3, r3, #2
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x11a>
        frequency = LSI_VALUE;
 8007416:	f649 4340 	movw	r3, #40000	; 0x9c40
 800741a:	62bb      	str	r3, [r7, #40]	; 0x28
 800741c:	e00f      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007428:	d11c      	bne.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800742a:	4b12      	ldr	r3, [pc, #72]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007432:	2b00      	cmp	r3, #0
 8007434:	d016      	beq.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
        frequency = HSE_VALUE / 128U;
 8007436:	f24f 4324 	movw	r3, #62500	; 0xf424
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800743c:	e012      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 800743e:	e011      	b.n	8007464 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8007440:	f7ff fe78 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8007444:	4602      	mov	r2, r0
 8007446:	4b0b      	ldr	r3, [pc, #44]	; (8007474 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	0b9b      	lsrs	r3, r3, #14
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	3301      	adds	r3, #1
 8007452:	005b      	lsls	r3, r3, #1
 8007454:	fbb2 f3f3 	udiv	r3, r2, r3
 8007458:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800745a:	e004      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 800745c:	bf00      	nop
 800745e:	e002      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      break;
 8007464:	bf00      	nop
    }
  }
  return (frequency);
 8007466:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8007468:	4618      	mov	r0, r3
 800746a:	3734      	adds	r7, #52	; 0x34
 800746c:	46bd      	mov	sp, r7
 800746e:	bd90      	pop	{r4, r7, pc}
 8007470:	0800cf50 	.word	0x0800cf50
 8007474:	40021000 	.word	0x40021000
 8007478:	007a1200 	.word	0x007a1200
 800747c:	003d0900 	.word	0x003d0900
 8007480:	aaaaaaab 	.word	0xaaaaaaab

08007484 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800748c:	2300      	movs	r3, #0
 800748e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d101      	bne.n	800749a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e084      	b.n	80075a4 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	7c5b      	ldrb	r3, [r3, #17]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d105      	bne.n	80074b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f7fc f820 	bl	80034f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2202      	movs	r2, #2
 80074b4:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 faf4 	bl	8007aa4 <HAL_RTC_WaitForSynchro>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d004      	beq.n	80074cc <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2204      	movs	r2, #4
 80074c6:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e06b      	b.n	80075a4 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 fbad 	bl	8007c2c <RTC_EnterInitMode>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d004      	beq.n	80074e2 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2204      	movs	r2, #4
 80074dc:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e060      	b.n	80075a4 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0207 	bic.w	r2, r2, #7
 80074f0:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80074fa:	4b2c      	ldr	r3, [pc, #176]	; (80075ac <HAL_RTC_Init+0x128>)
 80074fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fe:	4a2b      	ldr	r2, [pc, #172]	; (80075ac <HAL_RTC_Init+0x128>)
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8007506:	4b29      	ldr	r3, [pc, #164]	; (80075ac <HAL_RTC_Init+0x128>)
 8007508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	4926      	ldr	r1, [pc, #152]	; (80075ac <HAL_RTC_Init+0x128>)
 8007514:	4313      	orrs	r3, r2
 8007516:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007520:	d003      	beq.n	800752a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e00e      	b.n	8007548 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 800752a:	2001      	movs	r0, #1
 800752c:	f7ff feea 	bl	8007304 <HAL_RCCEx_GetPeriphCLKFreq>
 8007530:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d104      	bne.n	8007542 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2204      	movs	r2, #4
 800753c:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e030      	b.n	80075a4 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	3b01      	subs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	f023 010f 	bic.w	r1, r3, #15
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	0c1a      	lsrs	r2, r3, #16
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	0c1b      	lsrs	r3, r3, #16
 8007566:	041b      	lsls	r3, r3, #16
 8007568:	68fa      	ldr	r2, [r7, #12]
 800756a:	b291      	uxth	r1, r2
 800756c:	687a      	ldr	r2, [r7, #4]
 800756e:	6812      	ldr	r2, [r2, #0]
 8007570:	430b      	orrs	r3, r1
 8007572:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f000 fb81 	bl	8007c7c <RTC_ExitInitMode>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d004      	beq.n	800758a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2204      	movs	r2, #4
 8007584:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e00c      	b.n	80075a4 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2201      	movs	r2, #1
 800759a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80075a2:	2300      	movs	r3, #0
  }
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40006c00 	.word	0x40006c00

080075b0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80075b0:	b590      	push	{r4, r7, lr}
 80075b2:	b087      	sub	sp, #28
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	617b      	str	r3, [r7, #20]
 80075c0:	2300      	movs	r3, #0
 80075c2:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_RTC_SetTime+0x20>
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d101      	bne.n	80075d4 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e080      	b.n	80076d6 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	7c1b      	ldrb	r3, [r3, #16]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d101      	bne.n	80075e0 <HAL_RTC_SetTime+0x30>
 80075dc:	2302      	movs	r3, #2
 80075de:	e07a      	b.n	80076d6 <HAL_RTC_SetTime+0x126>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	2201      	movs	r2, #1
 80075e4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2202      	movs	r2, #2
 80075ea:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d113      	bne.n	800761a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80075fc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	785b      	ldrb	r3, [r3, #1]
 8007604:	4619      	mov	r1, r3
 8007606:	460b      	mov	r3, r1
 8007608:	011b      	lsls	r3, r3, #4
 800760a:	1a5b      	subs	r3, r3, r1
 800760c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800760e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8007610:	68ba      	ldr	r2, [r7, #8]
 8007612:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8007614:	4413      	add	r3, r2
 8007616:	617b      	str	r3, [r7, #20]
 8007618:	e01e      	b.n	8007658 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f000 fb71 	bl	8007d06 <RTC_Bcd2ToByte>
 8007624:	4603      	mov	r3, r0
 8007626:	461a      	mov	r2, r3
 8007628:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800762c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	4618      	mov	r0, r3
 8007636:	f000 fb66 	bl	8007d06 <RTC_Bcd2ToByte>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	4613      	mov	r3, r2
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	1a9b      	subs	r3, r3, r2
 8007644:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007646:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	789b      	ldrb	r3, [r3, #2]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 fb5a 	bl	8007d06 <RTC_Bcd2ToByte>
 8007652:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8007654:	4423      	add	r3, r4
 8007656:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8007658:	6979      	ldr	r1, [r7, #20]
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f000 fa7f 	bl	8007b5e <RTC_WriteTimeCounter>
 8007660:	4603      	mov	r3, r0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d007      	beq.n	8007676 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2204      	movs	r2, #4
 800766a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2200      	movs	r2, #0
 8007670:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e02f      	b.n	80076d6 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685a      	ldr	r2, [r3, #4]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f022 0205 	bic.w	r2, r2, #5
 8007684:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 fa90 	bl	8007bac <RTC_ReadAlarmCounter>
 800768c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007694:	d018      	beq.n	80076c8 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	429a      	cmp	r2, r3
 800769c:	d214      	bcs.n	80076c8 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80076a4:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80076a8:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80076aa:	6939      	ldr	r1, [r7, #16]
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f000 fa96 	bl	8007bde <RTC_WriteAlarmCounter>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d007      	beq.n	80076c8 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2204      	movs	r2, #4
 80076bc:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2200      	movs	r2, #0
 80076c2:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e006      	b.n	80076d6 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2201      	movs	r2, #1
 80076cc:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80076d4:	2300      	movs	r3, #0
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd90      	pop	{r4, r7, pc}
	...

080076e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b088      	sub	sp, #32
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61bb      	str	r3, [r7, #24]
 80076f0:	2300      	movs	r3, #0
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	2300      	movs	r3, #0
 80076f6:	617b      	str	r3, [r7, #20]
 80076f8:	2300      	movs	r3, #0
 80076fa:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <HAL_RTC_GetTime+0x28>
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e0b5      	b.n	8007878 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f003 0304 	and.w	r3, r3, #4
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e0ac      	b.n	8007878 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 f9ed 	bl	8007afe <RTC_ReadTimeCounter>
 8007724:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007726:	69bb      	ldr	r3, [r7, #24]
 8007728:	4a55      	ldr	r2, [pc, #340]	; (8007880 <HAL_RTC_GetTime+0x1a0>)
 800772a:	fba2 2303 	umull	r2, r3, r2, r3
 800772e:	0adb      	lsrs	r3, r3, #11
 8007730:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	4b52      	ldr	r3, [pc, #328]	; (8007880 <HAL_RTC_GetTime+0x1a0>)
 8007736:	fba3 1302 	umull	r1, r3, r3, r2
 800773a:	0adb      	lsrs	r3, r3, #11
 800773c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	4a4f      	ldr	r2, [pc, #316]	; (8007884 <HAL_RTC_GetTime+0x1a4>)
 8007748:	fba2 2303 	umull	r2, r3, r2, r3
 800774c:	095b      	lsrs	r3, r3, #5
 800774e:	b2da      	uxtb	r2, r3
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	4a4a      	ldr	r2, [pc, #296]	; (8007880 <HAL_RTC_GetTime+0x1a0>)
 8007758:	fba2 1203 	umull	r1, r2, r2, r3
 800775c:	0ad2      	lsrs	r2, r2, #11
 800775e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8007762:	fb01 f202 	mul.w	r2, r1, r2
 8007766:	1a9a      	subs	r2, r3, r2
 8007768:	4b46      	ldr	r3, [pc, #280]	; (8007884 <HAL_RTC_GetTime+0x1a4>)
 800776a:	fba3 1302 	umull	r1, r3, r3, r2
 800776e:	0959      	lsrs	r1, r3, #5
 8007770:	460b      	mov	r3, r1
 8007772:	011b      	lsls	r3, r3, #4
 8007774:	1a5b      	subs	r3, r3, r1
 8007776:	009b      	lsls	r3, r3, #2
 8007778:	1ad1      	subs	r1, r2, r3
 800777a:	b2ca      	uxtb	r2, r1
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	2b17      	cmp	r3, #23
 8007784:	d955      	bls.n	8007832 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4a3f      	ldr	r2, [pc, #252]	; (8007888 <HAL_RTC_GetTime+0x1a8>)
 800778a:	fba2 2303 	umull	r2, r3, r2, r3
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8007792:	6939      	ldr	r1, [r7, #16]
 8007794:	4b3c      	ldr	r3, [pc, #240]	; (8007888 <HAL_RTC_GetTime+0x1a8>)
 8007796:	fba3 2301 	umull	r2, r3, r3, r1
 800779a:	091a      	lsrs	r2, r3, #4
 800779c:	4613      	mov	r3, r2
 800779e:	005b      	lsls	r3, r3, #1
 80077a0:	4413      	add	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	1aca      	subs	r2, r1, r3
 80077a6:	b2d2      	uxtb	r2, r2
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	f000 f9fd 	bl	8007bac <RTC_ReadAlarmCounter>
 80077b2:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d008      	beq.n	80077ce <HAL_RTC_GetTime+0xee>
 80077bc:	69fa      	ldr	r2, [r7, #28]
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d904      	bls.n	80077ce <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	69bb      	ldr	r3, [r7, #24]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	e002      	b.n	80077d4 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80077ce:	f04f 33ff 	mov.w	r3, #4294967295
 80077d2:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	4a2d      	ldr	r2, [pc, #180]	; (800788c <HAL_RTC_GetTime+0x1ac>)
 80077d8:	fb02 f303 	mul.w	r3, r2, r3
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	1ad3      	subs	r3, r2, r3
 80077e0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80077e2:	69b9      	ldr	r1, [r7, #24]
 80077e4:	68f8      	ldr	r0, [r7, #12]
 80077e6:	f000 f9ba 	bl	8007b5e <RTC_WriteTimeCounter>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d001      	beq.n	80077f4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e041      	b.n	8007878 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fa:	d00c      	beq.n	8007816 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	69bb      	ldr	r3, [r7, #24]
 8007800:	4413      	add	r3, r2
 8007802:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007804:	69f9      	ldr	r1, [r7, #28]
 8007806:	68f8      	ldr	r0, [r7, #12]
 8007808:	f000 f9e9 	bl	8007bde <RTC_WriteAlarmCounter>
 800780c:	4603      	mov	r3, r0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d00a      	beq.n	8007828 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e030      	b.n	8007878 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8007816:	69f9      	ldr	r1, [r7, #28]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 f9e0 	bl	8007bde <RTC_WriteAlarmCounter>
 800781e:	4603      	mov	r3, r0
 8007820:	2b00      	cmp	r3, #0
 8007822:	d001      	beq.n	8007828 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e027      	b.n	8007878 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8007828:	6979      	ldr	r1, [r7, #20]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 fa88 	bl	8007d40 <RTC_DateUpdate>
 8007830:	e003      	b.n	800783a <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	b2da      	uxtb	r2, r3
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d01a      	beq.n	8007876 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fa41 	bl	8007ccc <RTC_ByteToBcd2>
 800784a:	4603      	mov	r3, r0
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	785b      	ldrb	r3, [r3, #1]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fa38 	bl	8007ccc <RTC_ByteToBcd2>
 800785c:	4603      	mov	r3, r0
 800785e:	461a      	mov	r2, r3
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	789b      	ldrb	r3, [r3, #2]
 8007868:	4618      	mov	r0, r3
 800786a:	f000 fa2f 	bl	8007ccc <RTC_ByteToBcd2>
 800786e:	4603      	mov	r3, r0
 8007870:	461a      	mov	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3720      	adds	r7, #32
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	91a2b3c5 	.word	0x91a2b3c5
 8007884:	88888889 	.word	0x88888889
 8007888:	aaaaaaab 	.word	0xaaaaaaab
 800788c:	00015180 	.word	0x00015180

08007890 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b088      	sub	sp, #32
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	2300      	movs	r3, #0
 80078a2:	61bb      	str	r3, [r7, #24]
 80078a4:	2300      	movs	r3, #0
 80078a6:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d002      	beq.n	80078b4 <HAL_RTC_SetDate+0x24>
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e097      	b.n	80079e8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7c1b      	ldrb	r3, [r3, #16]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d101      	bne.n	80078c4 <HAL_RTC_SetDate+0x34>
 80078c0:	2302      	movs	r3, #2
 80078c2:	e091      	b.n	80079e8 <HAL_RTC_SetDate+0x158>
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2201      	movs	r2, #1
 80078c8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10c      	bne.n	80078f0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	78da      	ldrb	r2, [r3, #3]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	785a      	ldrb	r2, [r3, #1]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	789a      	ldrb	r2, [r3, #2]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	739a      	strb	r2, [r3, #14]
 80078ee:	e01a      	b.n	8007926 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	78db      	ldrb	r3, [r3, #3]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fa06 	bl	8007d06 <RTC_Bcd2ToByte>
 80078fa:	4603      	mov	r3, r0
 80078fc:	461a      	mov	r2, r3
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	785b      	ldrb	r3, [r3, #1]
 8007906:	4618      	mov	r0, r3
 8007908:	f000 f9fd 	bl	8007d06 <RTC_Bcd2ToByte>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	789b      	ldrb	r3, [r3, #2]
 8007918:	4618      	mov	r0, r3
 800791a:	f000 f9f4 	bl	8007d06 <RTC_Bcd2ToByte>
 800791e:	4603      	mov	r3, r0
 8007920:	461a      	mov	r2, r3
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	7bdb      	ldrb	r3, [r3, #15]
 800792a:	4618      	mov	r0, r3
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	7b59      	ldrb	r1, [r3, #13]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	7b9b      	ldrb	r3, [r3, #14]
 8007934:	461a      	mov	r2, r3
 8007936:	f000 fadf 	bl	8007ef8 <RTC_WeekDayNum>
 800793a:	4603      	mov	r3, r0
 800793c:	461a      	mov	r2, r3
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	7b1a      	ldrb	r2, [r3, #12]
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f8d7 	bl	8007afe <RTC_ReadTimeCounter>
 8007950:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	4a26      	ldr	r2, [pc, #152]	; (80079f0 <HAL_RTC_SetDate+0x160>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	0adb      	lsrs	r3, r3, #11
 800795c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b18      	cmp	r3, #24
 8007962:	d93a      	bls.n	80079da <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4a23      	ldr	r2, [pc, #140]	; (80079f4 <HAL_RTC_SetDate+0x164>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	4a22      	ldr	r2, [pc, #136]	; (80079f8 <HAL_RTC_SetDate+0x168>)
 8007970:	fb02 f303 	mul.w	r3, r2, r3
 8007974:	69fa      	ldr	r2, [r7, #28]
 8007976:	1ad3      	subs	r3, r2, r3
 8007978:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800797a:	69f9      	ldr	r1, [r7, #28]
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 f8ee 	bl	8007b5e <RTC_WriteTimeCounter>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d007      	beq.n	8007998 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2204      	movs	r2, #4
 800798c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e027      	b.n	80079e8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f000 f907 	bl	8007bac <RTC_ReadAlarmCounter>
 800799e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a6:	d018      	beq.n	80079da <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80079a8:	69ba      	ldr	r2, [r7, #24]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d214      	bcs.n	80079da <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80079b6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80079ba:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80079bc:	69b9      	ldr	r1, [r7, #24]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f90d 	bl	8007bde <RTC_WriteAlarmCounter>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d007      	beq.n	80079da <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2204      	movs	r2, #4
 80079ce:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e006      	b.n	80079e8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2201      	movs	r2, #1
 80079de:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3720      	adds	r7, #32
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	91a2b3c5 	.word	0x91a2b3c5
 80079f4:	aaaaaaab 	.word	0xaaaaaaab
 80079f8:	00015180 	.word	0x00015180

080079fc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b086      	sub	sp, #24
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8007a08:	f107 0314 	add.w	r3, r7, #20
 8007a0c:	2100      	movs	r1, #0
 8007a0e:	460a      	mov	r2, r1
 8007a10:	801a      	strh	r2, [r3, #0]
 8007a12:	460a      	mov	r2, r1
 8007a14:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d002      	beq.n	8007a22 <HAL_RTC_GetDate+0x26>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d101      	bne.n	8007a26 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8007a22:	2301      	movs	r3, #1
 8007a24:	e03a      	b.n	8007a9c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8007a26:	f107 0314 	add.w	r3, r7, #20
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff fe56 	bl	80076e0 <HAL_RTC_GetTime>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e02e      	b.n	8007a9c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	7b1a      	ldrb	r2, [r3, #12]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	7bda      	ldrb	r2, [r3, #15]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	7b5a      	ldrb	r2, [r3, #13]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	7b9a      	ldrb	r2, [r3, #14]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01a      	beq.n	8007a9a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f92f 	bl	8007ccc <RTC_ByteToBcd2>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	461a      	mov	r2, r3
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f926 	bl	8007ccc <RTC_ByteToBcd2>
 8007a80:	4603      	mov	r3, r0
 8007a82:	461a      	mov	r2, r3
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	789b      	ldrb	r3, [r3, #2]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f000 f91d 	bl	8007ccc <RTC_ByteToBcd2>
 8007a92:	4603      	mov	r3, r0
 8007a94:	461a      	mov	r2, r3
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e01d      	b.n	8007af6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f022 0208 	bic.w	r2, r2, #8
 8007ac8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007aca:	f7fb fec9 	bl	8003860 <HAL_GetTick>
 8007ace:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007ad0:	e009      	b.n	8007ae6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007ad2:	f7fb fec5 	bl	8003860 <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ae0:	d901      	bls.n	8007ae6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8007ae2:	2303      	movs	r3, #3
 8007ae4:	e007      	b.n	8007af6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0ee      	beq.n	8007ad2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8007afe:	b480      	push	{r7}
 8007b00:	b087      	sub	sp, #28
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	827b      	strh	r3, [r7, #18]
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	823b      	strh	r3, [r7, #16]
 8007b0e:	2300      	movs	r3, #0
 8007b10:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	699b      	ldr	r3, [r3, #24]
 8007b1c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69db      	ldr	r3, [r3, #28]
 8007b24:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8007b2e:	8a7a      	ldrh	r2, [r7, #18]
 8007b30:	8a3b      	ldrh	r3, [r7, #16]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d008      	beq.n	8007b48 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8007b36:	8a3b      	ldrh	r3, [r7, #16]
 8007b38:	041a      	lsls	r2, r3, #16
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	e004      	b.n	8007b52 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8007b48:	8a7b      	ldrh	r3, [r7, #18]
 8007b4a:	041a      	lsls	r2, r3, #16
 8007b4c:	89fb      	ldrh	r3, [r7, #14]
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8007b52:	697b      	ldr	r3, [r7, #20]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bc80      	pop	{r7}
 8007b5c:	4770      	bx	lr

08007b5e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f85d 	bl	8007c2c <RTC_EnterInitMode>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d002      	beq.n	8007b7e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	73fb      	strb	r3, [r7, #15]
 8007b7c:	e011      	b.n	8007ba2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	683a      	ldr	r2, [r7, #0]
 8007b84:	0c12      	lsrs	r2, r2, #16
 8007b86:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	683a      	ldr	r2, [r7, #0]
 8007b8e:	b292      	uxth	r2, r2
 8007b90:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f872 	bl	8007c7c <RTC_ExitInitMode>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d001      	beq.n	8007ba2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b085      	sub	sp, #20
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	81fb      	strh	r3, [r7, #14]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bca:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8007bcc:	89fb      	ldrh	r3, [r7, #14]
 8007bce:	041a      	lsls	r2, r3, #16
 8007bd0:	89bb      	ldrh	r3, [r7, #12]
 8007bd2:	4313      	orrs	r3, r2
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bc80      	pop	{r7}
 8007bdc:	4770      	bx	lr

08007bde <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
 8007be6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f81d 	bl	8007c2c <RTC_EnterInitMode>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d002      	beq.n	8007bfe <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	73fb      	strb	r3, [r7, #15]
 8007bfc:	e011      	b.n	8007c22 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	683a      	ldr	r2, [r7, #0]
 8007c04:	0c12      	lsrs	r2, r2, #16
 8007c06:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	683a      	ldr	r2, [r7, #0]
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f832 	bl	8007c7c <RTC_ExitInitMode>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007c22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8007c38:	f7fb fe12 	bl	8003860 <HAL_GetTick>
 8007c3c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007c3e:	e009      	b.n	8007c54 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007c40:	f7fb fe0e 	bl	8003860 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c4e:	d901      	bls.n	8007c54 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8007c50:	2303      	movs	r3, #3
 8007c52:	e00f      	b.n	8007c74 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d0ee      	beq.n	8007c40 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	685a      	ldr	r2, [r3, #4]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0210 	orr.w	r2, r2, #16
 8007c70:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8007c72:	2300      	movs	r3, #0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c84:	2300      	movs	r3, #0
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f022 0210 	bic.w	r2, r2, #16
 8007c96:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8007c98:	f7fb fde2 	bl	8003860 <HAL_GetTick>
 8007c9c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007c9e:	e009      	b.n	8007cb4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8007ca0:	f7fb fdde 	bl	8003860 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cae:	d901      	bls.n	8007cb4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	e007      	b.n	8007cc4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f003 0320 	and.w	r3, r3, #32
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d0ee      	beq.n	8007ca0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8007cda:	e005      	b.n	8007ce8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3301      	adds	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	3b0a      	subs	r3, #10
 8007ce6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	2b09      	cmp	r3, #9
 8007cec:	d8f6      	bhi.n	8007cdc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	011b      	lsls	r3, r3, #4
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	79fb      	ldrb	r3, [r7, #7]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	b2db      	uxtb	r3, r3
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3714      	adds	r7, #20
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bc80      	pop	{r7}
 8007d04:	4770      	bx	lr

08007d06 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8007d14:	79fb      	ldrb	r3, [r7, #7]
 8007d16:	091b      	lsrs	r3, r3, #4
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	005b      	lsls	r3, r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8007d26:	79fb      	ldrb	r3, [r7, #7]
 8007d28:	f003 030f 	and.w	r3, r3, #15
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	4413      	add	r3, r2
 8007d34:	b2db      	uxtb	r3, r3
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3714      	adds	r7, #20
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bc80      	pop	{r7}
 8007d3e:	4770      	bx	lr

08007d40 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b086      	sub	sp, #24
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	2300      	movs	r3, #0
 8007d50:	613b      	str	r3, [r7, #16]
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	7bdb      	ldrb	r3, [r3, #15]
 8007d5e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	7b5b      	ldrb	r3, [r3, #13]
 8007d64:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7b9b      	ldrb	r3, [r3, #14]
 8007d6a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	60bb      	str	r3, [r7, #8]
 8007d70:	e06f      	b.n	8007e52 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d011      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d00e      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	2b05      	cmp	r3, #5
 8007d82:	d00b      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	2b07      	cmp	r3, #7
 8007d88:	d008      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	2b08      	cmp	r3, #8
 8007d8e:	d005      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	2b0a      	cmp	r3, #10
 8007d94:	d002      	beq.n	8007d9c <RTC_DateUpdate+0x5c>
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	2b0c      	cmp	r3, #12
 8007d9a:	d117      	bne.n	8007dcc <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b1e      	cmp	r3, #30
 8007da0:	d803      	bhi.n	8007daa <RTC_DateUpdate+0x6a>
      {
        day++;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3301      	adds	r3, #1
 8007da6:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007da8:	e050      	b.n	8007e4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	2b0c      	cmp	r3, #12
 8007dae:	d005      	beq.n	8007dbc <RTC_DateUpdate+0x7c>
        {
          month++;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	3301      	adds	r3, #1
 8007db4:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007db6:	2301      	movs	r3, #1
 8007db8:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8007dba:	e047      	b.n	8007e4c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	60fb      	str	r3, [r7, #12]
          year++;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8007dca:	e03f      	b.n	8007e4c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	2b04      	cmp	r3, #4
 8007dd0:	d008      	beq.n	8007de4 <RTC_DateUpdate+0xa4>
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b06      	cmp	r3, #6
 8007dd6:	d005      	beq.n	8007de4 <RTC_DateUpdate+0xa4>
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	2b09      	cmp	r3, #9
 8007ddc:	d002      	beq.n	8007de4 <RTC_DateUpdate+0xa4>
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	2b0b      	cmp	r3, #11
 8007de2:	d10c      	bne.n	8007dfe <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b1d      	cmp	r3, #29
 8007de8:	d803      	bhi.n	8007df2 <RTC_DateUpdate+0xb2>
      {
        day++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007df0:	e02c      	b.n	8007e4c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	3301      	adds	r3, #1
 8007df6:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8007dfc:	e026      	b.n	8007e4c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	2b02      	cmp	r3, #2
 8007e02:	d123      	bne.n	8007e4c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2b1b      	cmp	r3, #27
 8007e08:	d803      	bhi.n	8007e12 <RTC_DateUpdate+0xd2>
      {
        day++;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	60fb      	str	r3, [r7, #12]
 8007e10:	e01c      	b.n	8007e4c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2b1c      	cmp	r3, #28
 8007e16:	d111      	bne.n	8007e3c <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 f839 	bl	8007e94 <RTC_IsLeapYear>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d003      	beq.n	8007e30 <RTC_DateUpdate+0xf0>
        {
          day++;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	60fb      	str	r3, [r7, #12]
 8007e2e:	e00d      	b.n	8007e4c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3301      	adds	r3, #1
 8007e34:	613b      	str	r3, [r7, #16]
          day = 1U;
 8007e36:	2301      	movs	r3, #1
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	e007      	b.n	8007e4c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2b1d      	cmp	r3, #29
 8007e40:	d104      	bne.n	8007e4c <RTC_DateUpdate+0x10c>
      {
        month++;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3301      	adds	r3, #1
 8007e46:	613b      	str	r3, [r7, #16]
        day = 1U;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	60bb      	str	r3, [r7, #8]
 8007e52:	68ba      	ldr	r2, [r7, #8]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d38b      	bcc.n	8007d72 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	6978      	ldr	r0, [r7, #20]
 8007e7e:	f000 f83b 	bl	8007ef8 <RTC_WeekDayNum>
 8007e82:	4603      	mov	r3, r0
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	731a      	strb	r2, [r3, #12]
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8007e9e:	88fb      	ldrh	r3, [r7, #6]
 8007ea0:	f003 0303 	and.w	r3, r3, #3
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d001      	beq.n	8007eae <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	e01d      	b.n	8007eea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8007eae:	88fb      	ldrh	r3, [r7, #6]
 8007eb0:	4a10      	ldr	r2, [pc, #64]	; (8007ef4 <RTC_IsLeapYear+0x60>)
 8007eb2:	fba2 1203 	umull	r1, r2, r2, r3
 8007eb6:	0952      	lsrs	r2, r2, #5
 8007eb8:	2164      	movs	r1, #100	; 0x64
 8007eba:	fb01 f202 	mul.w	r2, r1, r2
 8007ebe:	1a9b      	subs	r3, r3, r2
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e00f      	b.n	8007eea <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <RTC_IsLeapYear+0x60>)
 8007ece:	fba2 1203 	umull	r1, r2, r2, r3
 8007ed2:	09d2      	lsrs	r2, r2, #7
 8007ed4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007ed8:	fb01 f202 	mul.w	r2, r1, r2
 8007edc:	1a9b      	subs	r3, r3, r2
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d101      	bne.n	8007ee8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	e000      	b.n	8007eea <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8007ee8:	2300      	movs	r3, #0
  }
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bc80      	pop	{r7}
 8007ef2:	4770      	bx	lr
 8007ef4:	51eb851f 	.word	0x51eb851f

08007ef8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
 8007f04:	4613      	mov	r3, r2
 8007f06:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	60bb      	str	r3, [r7, #8]
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007f16:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8007f18:	78fb      	ldrb	r3, [r7, #3]
 8007f1a:	2b02      	cmp	r3, #2
 8007f1c:	d82d      	bhi.n	8007f7a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8007f1e:	78fa      	ldrb	r2, [r7, #3]
 8007f20:	4613      	mov	r3, r2
 8007f22:	005b      	lsls	r3, r3, #1
 8007f24:	4413      	add	r3, r2
 8007f26:	00db      	lsls	r3, r3, #3
 8007f28:	1a9b      	subs	r3, r3, r2
 8007f2a:	4a2c      	ldr	r2, [pc, #176]	; (8007fdc <RTC_WeekDayNum+0xe4>)
 8007f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f30:	085a      	lsrs	r2, r3, #1
 8007f32:	78bb      	ldrb	r3, [r7, #2]
 8007f34:	441a      	add	r2, r3
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	441a      	add	r2, r3
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	089b      	lsrs	r3, r3, #2
 8007f40:	441a      	add	r2, r3
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	4926      	ldr	r1, [pc, #152]	; (8007fe0 <RTC_WeekDayNum+0xe8>)
 8007f48:	fba1 1303 	umull	r1, r3, r1, r3
 8007f4c:	095b      	lsrs	r3, r3, #5
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	4922      	ldr	r1, [pc, #136]	; (8007fe0 <RTC_WeekDayNum+0xe8>)
 8007f56:	fba1 1303 	umull	r1, r3, r1, r3
 8007f5a:	09db      	lsrs	r3, r3, #7
 8007f5c:	4413      	add	r3, r2
 8007f5e:	1d1a      	adds	r2, r3, #4
 8007f60:	4b20      	ldr	r3, [pc, #128]	; (8007fe4 <RTC_WeekDayNum+0xec>)
 8007f62:	fba3 1302 	umull	r1, r3, r3, r2
 8007f66:	1ad1      	subs	r1, r2, r3
 8007f68:	0849      	lsrs	r1, r1, #1
 8007f6a:	440b      	add	r3, r1
 8007f6c:	0899      	lsrs	r1, r3, #2
 8007f6e:	460b      	mov	r3, r1
 8007f70:	00db      	lsls	r3, r3, #3
 8007f72:	1a5b      	subs	r3, r3, r1
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	e029      	b.n	8007fce <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8007f7a:	78fa      	ldrb	r2, [r7, #3]
 8007f7c:	4613      	mov	r3, r2
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	4413      	add	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	4a15      	ldr	r2, [pc, #84]	; (8007fdc <RTC_WeekDayNum+0xe4>)
 8007f88:	fba2 2303 	umull	r2, r3, r2, r3
 8007f8c:	085a      	lsrs	r2, r3, #1
 8007f8e:	78bb      	ldrb	r3, [r7, #2]
 8007f90:	441a      	add	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	441a      	add	r2, r3
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	089b      	lsrs	r3, r3, #2
 8007f9a:	441a      	add	r2, r3
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	4910      	ldr	r1, [pc, #64]	; (8007fe0 <RTC_WeekDayNum+0xe8>)
 8007fa0:	fba1 1303 	umull	r1, r3, r1, r3
 8007fa4:	095b      	lsrs	r3, r3, #5
 8007fa6:	1ad2      	subs	r2, r2, r3
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	490d      	ldr	r1, [pc, #52]	; (8007fe0 <RTC_WeekDayNum+0xe8>)
 8007fac:	fba1 1303 	umull	r1, r3, r1, r3
 8007fb0:	09db      	lsrs	r3, r3, #7
 8007fb2:	4413      	add	r3, r2
 8007fb4:	1c9a      	adds	r2, r3, #2
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	; (8007fe4 <RTC_WeekDayNum+0xec>)
 8007fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fbc:	1ad1      	subs	r1, r2, r3
 8007fbe:	0849      	lsrs	r1, r1, #1
 8007fc0:	440b      	add	r3, r1
 8007fc2:	0899      	lsrs	r1, r3, #2
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	1a5b      	subs	r3, r3, r1
 8007fca:	1ad3      	subs	r3, r2, r3
 8007fcc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	b2db      	uxtb	r3, r3
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bc80      	pop	{r7}
 8007fda:	4770      	bx	lr
 8007fdc:	38e38e39 	.word	0x38e38e39
 8007fe0:	51eb851f 	.word	0x51eb851f
 8007fe4:	24924925 	.word	0x24924925

08007fe8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b082      	sub	sp, #8
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d101      	bne.n	8007ffa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e076      	b.n	80080e8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d108      	bne.n	8008014 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800800a:	d009      	beq.n	8008020 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	61da      	str	r2, [r3, #28]
 8008012:	e005      	b.n	8008020 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2200      	movs	r2, #0
 800801e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800802c:	b2db      	uxtb	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d106      	bne.n	8008040 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7fb fa7c 	bl	8003538 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2202      	movs	r2, #2
 8008044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008056:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	689b      	ldr	r3, [r3, #8]
 8008064:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008068:	431a      	orrs	r2, r3
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	68db      	ldr	r3, [r3, #12]
 800806e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008072:	431a      	orrs	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	f003 0301 	and.w	r3, r3, #1
 8008086:	431a      	orrs	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	699b      	ldr	r3, [r3, #24]
 800808c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008090:	431a      	orrs	r2, r3
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800809a:	431a      	orrs	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6a1b      	ldr	r3, [r3, #32]
 80080a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080a4:	ea42 0103 	orr.w	r1, r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	0c1a      	lsrs	r2, r3, #16
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f002 0204 	and.w	r2, r2, #4
 80080c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	69da      	ldr	r2, [r3, #28]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3708      	adds	r7, #8
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b088      	sub	sp, #32
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	603b      	str	r3, [r7, #0]
 80080fc:	4613      	mov	r3, r2
 80080fe:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008100:	2300      	movs	r3, #0
 8008102:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <HAL_SPI_Transmit+0x22>
 800810e:	2302      	movs	r3, #2
 8008110:	e126      	b.n	8008360 <HAL_SPI_Transmit+0x270>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811a:	f7fb fba1 	bl	8003860 <HAL_GetTick>
 800811e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8008120:	88fb      	ldrh	r3, [r7, #6]
 8008122:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800812a:	b2db      	uxtb	r3, r3
 800812c:	2b01      	cmp	r3, #1
 800812e:	d002      	beq.n	8008136 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8008130:	2302      	movs	r3, #2
 8008132:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008134:	e10b      	b.n	800834e <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d002      	beq.n	8008142 <HAL_SPI_Transmit+0x52>
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d102      	bne.n	8008148 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	77fb      	strb	r3, [r7, #31]
    goto error;
 8008146:	e102      	b.n	800834e <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2203      	movs	r2, #3
 800814c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	2200      	movs	r2, #0
 8008154:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	68ba      	ldr	r2, [r7, #8]
 800815a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	88fa      	ldrh	r2, [r7, #6]
 8008160:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	88fa      	ldrh	r2, [r7, #6]
 8008166:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2200      	movs	r2, #0
 800816c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	2200      	movs	r2, #0
 8008172:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2200      	movs	r2, #0
 8008178:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2200      	movs	r2, #0
 800817e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800818e:	d10f      	bne.n	80081b0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800819e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	681a      	ldr	r2, [r3, #0]
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80081ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ba:	2b40      	cmp	r3, #64	; 0x40
 80081bc:	d007      	beq.n	80081ce <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	681a      	ldr	r2, [r3, #0]
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	68db      	ldr	r3, [r3, #12]
 80081d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d6:	d14b      	bne.n	8008270 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d002      	beq.n	80081e6 <HAL_SPI_Transmit+0xf6>
 80081e0:	8afb      	ldrh	r3, [r7, #22]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d13e      	bne.n	8008264 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	881a      	ldrh	r2, [r3, #0]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f6:	1c9a      	adds	r2, r3, #2
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008200:	b29b      	uxth	r3, r3
 8008202:	3b01      	subs	r3, #1
 8008204:	b29a      	uxth	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800820a:	e02b      	b.n	8008264 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b02      	cmp	r3, #2
 8008218:	d112      	bne.n	8008240 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821e:	881a      	ldrh	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	1c9a      	adds	r2, r3, #2
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b01      	subs	r3, #1
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	86da      	strh	r2, [r3, #54]	; 0x36
 800823e:	e011      	b.n	8008264 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008240:	f7fb fb0e 	bl	8003860 <HAL_GetTick>
 8008244:	4602      	mov	r2, r0
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	683a      	ldr	r2, [r7, #0]
 800824c:	429a      	cmp	r2, r3
 800824e:	d803      	bhi.n	8008258 <HAL_SPI_Transmit+0x168>
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d102      	bne.n	800825e <HAL_SPI_Transmit+0x16e>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	77fb      	strb	r3, [r7, #31]
          goto error;
 8008262:	e074      	b.n	800834e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1ce      	bne.n	800820c <HAL_SPI_Transmit+0x11c>
 800826e:	e04c      	b.n	800830a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <HAL_SPI_Transmit+0x18e>
 8008278:	8afb      	ldrh	r3, [r7, #22]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d140      	bne.n	8008300 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800829a:	b29b      	uxth	r3, r3
 800829c:	3b01      	subs	r3, #1
 800829e:	b29a      	uxth	r2, r3
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80082a4:	e02c      	b.n	8008300 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 0302 	and.w	r3, r3, #2
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	d113      	bne.n	80082dc <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	7812      	ldrb	r2, [r2, #0]
 80082c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c6:	1c5a      	adds	r2, r3, #1
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	3b01      	subs	r3, #1
 80082d4:	b29a      	uxth	r2, r3
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80082da:	e011      	b.n	8008300 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082dc:	f7fb fac0 	bl	8003860 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d803      	bhi.n	80082f4 <HAL_SPI_Transmit+0x204>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f2:	d102      	bne.n	80082fa <HAL_SPI_Transmit+0x20a>
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d102      	bne.n	8008300 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80082fa:	2303      	movs	r3, #3
 80082fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80082fe:	e026      	b.n	800834e <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008304:	b29b      	uxth	r3, r3
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1cd      	bne.n	80082a6 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800830a:	69ba      	ldr	r2, [r7, #24]
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 fbb8 	bl	8008a84 <SPI_EndRxTxTransaction>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d002      	beq.n	8008320 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10a      	bne.n	800833e <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008328:	2300      	movs	r3, #0
 800832a:	613b      	str	r3, [r7, #16]
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68db      	ldr	r3, [r3, #12]
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	613b      	str	r3, [r7, #16]
 800833c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008342:	2b00      	cmp	r3, #0
 8008344:	d002      	beq.n	800834c <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8008346:	2301      	movs	r3, #1
 8008348:	77fb      	strb	r3, [r7, #31]
 800834a:	e000      	b.n	800834e <HAL_SPI_Transmit+0x25e>
  }

error:
 800834c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800835e:	7ffb      	ldrb	r3, [r7, #31]
}
 8008360:	4618      	mov	r0, r3
 8008362:	3720      	adds	r7, #32
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8
 800836e:	60f8      	str	r0, [r7, #12]
 8008370:	60b9      	str	r1, [r7, #8]
 8008372:	603b      	str	r3, [r7, #0]
 8008374:	4613      	mov	r3, r2
 8008376:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008384:	d112      	bne.n	80083ac <HAL_SPI_Receive+0x44>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10e      	bne.n	80083ac <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2204      	movs	r2, #4
 8008392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008396:	88fa      	ldrh	r2, [r7, #6]
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	4613      	mov	r3, r2
 800839e:	68ba      	ldr	r2, [r7, #8]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f8f1 	bl	800858a <HAL_SPI_TransmitReceive>
 80083a8:	4603      	mov	r3, r0
 80083aa:	e0ea      	b.n	8008582 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d101      	bne.n	80083ba <HAL_SPI_Receive+0x52>
 80083b6:	2302      	movs	r3, #2
 80083b8:	e0e3      	b.n	8008582 <HAL_SPI_Receive+0x21a>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80083c2:	f7fb fa4d 	bl	8003860 <HAL_GetTick>
 80083c6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80083ce:	b2db      	uxtb	r3, r3
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d002      	beq.n	80083da <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80083d4:	2302      	movs	r3, #2
 80083d6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083d8:	e0ca      	b.n	8008570 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d002      	beq.n	80083e6 <HAL_SPI_Receive+0x7e>
 80083e0:	88fb      	ldrh	r3, [r7, #6]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d102      	bne.n	80083ec <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80083ea:	e0c1      	b.n	8008570 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2204      	movs	r2, #4
 80083f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	88fa      	ldrh	r2, [r7, #6]
 8008404:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	88fa      	ldrh	r2, [r7, #6]
 800840a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2200      	movs	r2, #0
 8008416:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2200      	movs	r2, #0
 800841c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	2200      	movs	r2, #0
 8008422:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	2200      	movs	r2, #0
 8008428:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	689b      	ldr	r3, [r3, #8]
 800842e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008432:	d10f      	bne.n	8008454 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008442:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	681a      	ldr	r2, [r3, #0]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008452:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d007      	beq.n	8008472 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008470:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d162      	bne.n	8008540 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800847a:	e02e      	b.n	80084da <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b01      	cmp	r3, #1
 8008488:	d115      	bne.n	80084b6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f103 020c 	add.w	r2, r3, #12
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	7812      	ldrb	r2, [r2, #0]
 8008498:	b2d2      	uxtb	r2, r2
 800849a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084aa:	b29b      	uxth	r3, r3
 80084ac:	3b01      	subs	r3, #1
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084b4:	e011      	b.n	80084da <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084b6:	f7fb f9d3 	bl	8003860 <HAL_GetTick>
 80084ba:	4602      	mov	r2, r0
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	1ad3      	subs	r3, r2, r3
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d803      	bhi.n	80084ce <HAL_SPI_Receive+0x166>
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084cc:	d102      	bne.n	80084d4 <HAL_SPI_Receive+0x16c>
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80084d4:	2303      	movs	r3, #3
 80084d6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80084d8:	e04a      	b.n	8008570 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084de:	b29b      	uxth	r3, r3
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1cb      	bne.n	800847c <HAL_SPI_Receive+0x114>
 80084e4:	e031      	b.n	800854a <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0301 	and.w	r3, r3, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d113      	bne.n	800851c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fe:	b292      	uxth	r2, r2
 8008500:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008506:	1c9a      	adds	r2, r3, #2
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008510:	b29b      	uxth	r3, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	b29a      	uxth	r2, r3
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	87da      	strh	r2, [r3, #62]	; 0x3e
 800851a:	e011      	b.n	8008540 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800851c:	f7fb f9a0 	bl	8003860 <HAL_GetTick>
 8008520:	4602      	mov	r2, r0
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	1ad3      	subs	r3, r2, r3
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	429a      	cmp	r2, r3
 800852a:	d803      	bhi.n	8008534 <HAL_SPI_Receive+0x1cc>
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008532:	d102      	bne.n	800853a <HAL_SPI_Receive+0x1d2>
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d102      	bne.n	8008540 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800853e:	e017      	b.n	8008570 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008544:	b29b      	uxth	r3, r3
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1cd      	bne.n	80084e6 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800854a:	693a      	ldr	r2, [r7, #16]
 800854c:	6839      	ldr	r1, [r7, #0]
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 fa46 	bl	80089e0 <SPI_EndRxTransaction>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d002      	beq.n	8008560 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2220      	movs	r2, #32
 800855e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008564:	2b00      	cmp	r3, #0
 8008566:	d002      	beq.n	800856e <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	75fb      	strb	r3, [r7, #23]
 800856c:	e000      	b.n	8008570 <HAL_SPI_Receive+0x208>
  }

error :
 800856e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008580:	7dfb      	ldrb	r3, [r7, #23]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b08c      	sub	sp, #48	; 0x30
 800858e:	af00      	add	r7, sp, #0
 8008590:	60f8      	str	r0, [r7, #12]
 8008592:	60b9      	str	r1, [r7, #8]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008598:	2301      	movs	r3, #1
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800859c:	2300      	movs	r3, #0
 800859e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d101      	bne.n	80085b0 <HAL_SPI_TransmitReceive+0x26>
 80085ac:	2302      	movs	r3, #2
 80085ae:	e18a      	b.n	80088c6 <HAL_SPI_TransmitReceive+0x33c>
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2201      	movs	r2, #1
 80085b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80085b8:	f7fb f952 	bl	8003860 <HAL_GetTick>
 80085bc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80085c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80085ce:	887b      	ldrh	r3, [r7, #2]
 80085d0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80085d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d00f      	beq.n	80085fa <HAL_SPI_TransmitReceive+0x70>
 80085da:	69fb      	ldr	r3, [r7, #28]
 80085dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085e0:	d107      	bne.n	80085f2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	689b      	ldr	r3, [r3, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d103      	bne.n	80085f2 <HAL_SPI_TransmitReceive+0x68>
 80085ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ee:	2b04      	cmp	r3, #4
 80085f0:	d003      	beq.n	80085fa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
 80085f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80085f8:	e15b      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d005      	beq.n	800860c <HAL_SPI_TransmitReceive+0x82>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d002      	beq.n	800860c <HAL_SPI_TransmitReceive+0x82>
 8008606:	887b      	ldrh	r3, [r7, #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d103      	bne.n	8008614 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008612:	e14e      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800861a:	b2db      	uxtb	r3, r3
 800861c:	2b04      	cmp	r3, #4
 800861e:	d003      	beq.n	8008628 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2205      	movs	r2, #5
 8008624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	687a      	ldr	r2, [r7, #4]
 8008632:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	887a      	ldrh	r2, [r7, #2]
 8008638:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	887a      	ldrh	r2, [r7, #2]
 800863e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68ba      	ldr	r2, [r7, #8]
 8008644:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	887a      	ldrh	r2, [r7, #2]
 800864a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	887a      	ldrh	r2, [r7, #2]
 8008650:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2200      	movs	r2, #0
 8008656:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008668:	2b40      	cmp	r3, #64	; 0x40
 800866a:	d007      	beq.n	800867c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681a      	ldr	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800867a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68db      	ldr	r3, [r3, #12]
 8008680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008684:	d178      	bne.n	8008778 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d002      	beq.n	8008694 <HAL_SPI_TransmitReceive+0x10a>
 800868e:	8b7b      	ldrh	r3, [r7, #26]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d166      	bne.n	8008762 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008698:	881a      	ldrh	r2, [r3, #0]
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086a4:	1c9a      	adds	r2, r3, #2
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	3b01      	subs	r3, #1
 80086b2:	b29a      	uxth	r2, r3
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80086b8:	e053      	b.n	8008762 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d11b      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x176>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086cc:	b29b      	uxth	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d016      	beq.n	8008700 <HAL_SPI_TransmitReceive+0x176>
 80086d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d113      	bne.n	8008700 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086dc:	881a      	ldrh	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e8:	1c9a      	adds	r2, r3, #2
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	3b01      	subs	r3, #1
 80086f6:	b29a      	uxth	r2, r3
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80086fc:	2300      	movs	r3, #0
 80086fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0301 	and.w	r3, r3, #1
 800870a:	2b01      	cmp	r3, #1
 800870c:	d119      	bne.n	8008742 <HAL_SPI_TransmitReceive+0x1b8>
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008712:	b29b      	uxth	r3, r3
 8008714:	2b00      	cmp	r3, #0
 8008716:	d014      	beq.n	8008742 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	68da      	ldr	r2, [r3, #12]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008722:	b292      	uxth	r2, r2
 8008724:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800872a:	1c9a      	adds	r2, r3, #2
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008734:	b29b      	uxth	r3, r3
 8008736:	3b01      	subs	r3, #1
 8008738:	b29a      	uxth	r2, r3
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800873e:	2301      	movs	r3, #1
 8008740:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008742:	f7fb f88d 	bl	8003860 <HAL_GetTick>
 8008746:	4602      	mov	r2, r0
 8008748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800874a:	1ad3      	subs	r3, r2, r3
 800874c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874e:	429a      	cmp	r2, r3
 8008750:	d807      	bhi.n	8008762 <HAL_SPI_TransmitReceive+0x1d8>
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008758:	d003      	beq.n	8008762 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8008760:	e0a7      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008766:	b29b      	uxth	r3, r3
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1a6      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x130>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008770:	b29b      	uxth	r3, r3
 8008772:	2b00      	cmp	r3, #0
 8008774:	d1a1      	bne.n	80086ba <HAL_SPI_TransmitReceive+0x130>
 8008776:	e07c      	b.n	8008872 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d002      	beq.n	8008786 <HAL_SPI_TransmitReceive+0x1fc>
 8008780:	8b7b      	ldrh	r3, [r7, #26]
 8008782:	2b01      	cmp	r3, #1
 8008784:	d16b      	bne.n	800885e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	330c      	adds	r3, #12
 8008790:	7812      	ldrb	r2, [r2, #0]
 8008792:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008798:	1c5a      	adds	r2, r3, #1
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	3b01      	subs	r3, #1
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087ac:	e057      	b.n	800885e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f003 0302 	and.w	r3, r3, #2
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	d11c      	bne.n	80087f6 <HAL_SPI_TransmitReceive+0x26c>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d017      	beq.n	80087f6 <HAL_SPI_TransmitReceive+0x26c>
 80087c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d114      	bne.n	80087f6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	330c      	adds	r3, #12
 80087d6:	7812      	ldrb	r2, [r2, #0]
 80087d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	3b01      	subs	r3, #1
 80087ec:	b29a      	uxth	r2, r3
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f003 0301 	and.w	r3, r3, #1
 8008800:	2b01      	cmp	r3, #1
 8008802:	d119      	bne.n	8008838 <HAL_SPI_TransmitReceive+0x2ae>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d014      	beq.n	8008838 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008818:	b2d2      	uxtb	r2, r2
 800881a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	1c5a      	adds	r2, r3, #1
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800882a:	b29b      	uxth	r3, r3
 800882c:	3b01      	subs	r3, #1
 800882e:	b29a      	uxth	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008834:	2301      	movs	r3, #1
 8008836:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008838:	f7fb f812 	bl	8003860 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008844:	429a      	cmp	r2, r3
 8008846:	d803      	bhi.n	8008850 <HAL_SPI_TransmitReceive+0x2c6>
 8008848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800884e:	d102      	bne.n	8008856 <HAL_SPI_TransmitReceive+0x2cc>
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	2b00      	cmp	r3, #0
 8008854:	d103      	bne.n	800885e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800885c:	e029      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008862:	b29b      	uxth	r3, r3
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1a2      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x224>
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800886c:	b29b      	uxth	r3, r3
 800886e:	2b00      	cmp	r3, #0
 8008870:	d19d      	bne.n	80087ae <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008874:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f904 	bl	8008a84 <SPI_EndRxTxTransaction>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d006      	beq.n	8008890 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8008882:	2301      	movs	r3, #1
 8008884:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2220      	movs	r2, #32
 800888c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800888e:	e010      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d10b      	bne.n	80088b0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008898:	2300      	movs	r3, #0
 800889a:	617b      	str	r3, [r7, #20]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	617b      	str	r3, [r7, #20]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689b      	ldr	r3, [r3, #8]
 80088aa:	617b      	str	r3, [r7, #20]
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	e000      	b.n	80088b2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80088b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80088c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3730      	adds	r7, #48	; 0x30
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b088      	sub	sp, #32
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	603b      	str	r3, [r7, #0]
 80088dc:	4613      	mov	r3, r2
 80088de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80088e0:	f7fa ffbe 	bl	8003860 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e8:	1a9b      	subs	r3, r3, r2
 80088ea:	683a      	ldr	r2, [r7, #0]
 80088ec:	4413      	add	r3, r2
 80088ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80088f0:	f7fa ffb6 	bl	8003860 <HAL_GetTick>
 80088f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80088f6:	4b39      	ldr	r3, [pc, #228]	; (80089dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	015b      	lsls	r3, r3, #5
 80088fc:	0d1b      	lsrs	r3, r3, #20
 80088fe:	69fa      	ldr	r2, [r7, #28]
 8008900:	fb02 f303 	mul.w	r3, r2, r3
 8008904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008906:	e054      	b.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890e:	d050      	beq.n	80089b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008910:	f7fa ffa6 	bl	8003860 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	69fa      	ldr	r2, [r7, #28]
 800891c:	429a      	cmp	r2, r3
 800891e:	d902      	bls.n	8008926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008920:	69fb      	ldr	r3, [r7, #28]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d13d      	bne.n	80089a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800893e:	d111      	bne.n	8008964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008948:	d004      	beq.n	8008954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008952:	d107      	bne.n	8008964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896c:	d10f      	bne.n	800898e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800897c:	601a      	str	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	681a      	ldr	r2, [r3, #0]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800898c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2201      	movs	r2, #1
 8008992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e017      	b.n	80089d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d101      	bne.n	80089ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	689a      	ldr	r2, [r3, #8]
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	4013      	ands	r3, r2
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	bf0c      	ite	eq
 80089c2:	2301      	moveq	r3, #1
 80089c4:	2300      	movne	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	461a      	mov	r2, r3
 80089ca:	79fb      	ldrb	r3, [r7, #7]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d19b      	bne.n	8008908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80089d0:	2300      	movs	r3, #0
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3720      	adds	r7, #32
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
 80089da:	bf00      	nop
 80089dc:	200000a4 	.word	0x200000a4

080089e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af02      	add	r7, sp, #8
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80089f4:	d111      	bne.n	8008a1a <SPI_EndRxTransaction+0x3a>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089fe:	d004      	beq.n	8008a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a08:	d107      	bne.n	8008a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008a18:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008a22:	d117      	bne.n	8008a54 <SPI_EndRxTransaction+0x74>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a2c:	d112      	bne.n	8008a54 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	2200      	movs	r2, #0
 8008a36:	2101      	movs	r1, #1
 8008a38:	68f8      	ldr	r0, [r7, #12]
 8008a3a:	f7ff ff49 	bl	80088d0 <SPI_WaitFlagStateUntilTimeout>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d01a      	beq.n	8008a7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a48:	f043 0220 	orr.w	r2, r3, #32
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e013      	b.n	8008a7c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2180      	movs	r1, #128	; 0x80
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f7ff ff36 	bl	80088d0 <SPI_WaitFlagStateUntilTimeout>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d007      	beq.n	8008a7a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	f043 0220 	orr.w	r2, r3, #32
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e000      	b.n	8008a7c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	9300      	str	r3, [sp, #0]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	2200      	movs	r2, #0
 8008a98:	2180      	movs	r1, #128	; 0x80
 8008a9a:	68f8      	ldr	r0, [r7, #12]
 8008a9c:	f7ff ff18 	bl	80088d0 <SPI_WaitFlagStateUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d007      	beq.n	8008ab6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aaa:	f043 0220 	orr.w	r2, r3, #32
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e000      	b.n	8008ab8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3710      	adds	r7, #16
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}

08008ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e03f      	b.n	8008b52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fa fd72 	bl	80035d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2224      	movs	r2, #36	; 0x24
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68da      	ldr	r2, [r3, #12]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fc7d 	bl	8009404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	691a      	ldr	r2, [r3, #16]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	695a      	ldr	r2, [r3, #20]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68da      	ldr	r2, [r3, #12]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008b38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2220      	movs	r2, #32
 8008b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2220      	movs	r2, #32
 8008b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3708      	adds	r7, #8
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b5a:	b580      	push	{r7, lr}
 8008b5c:	b08a      	sub	sp, #40	; 0x28
 8008b5e:	af02      	add	r7, sp, #8
 8008b60:	60f8      	str	r0, [r7, #12]
 8008b62:	60b9      	str	r1, [r7, #8]
 8008b64:	603b      	str	r3, [r7, #0]
 8008b66:	4613      	mov	r3, r2
 8008b68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b20      	cmp	r3, #32
 8008b78:	d17c      	bne.n	8008c74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d002      	beq.n	8008b86 <HAL_UART_Transmit+0x2c>
 8008b80:	88fb      	ldrh	r3, [r7, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d101      	bne.n	8008b8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008b86:	2301      	movs	r3, #1
 8008b88:	e075      	b.n	8008c76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d101      	bne.n	8008b98 <HAL_UART_Transmit+0x3e>
 8008b94:	2302      	movs	r3, #2
 8008b96:	e06e      	b.n	8008c76 <HAL_UART_Transmit+0x11c>
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2221      	movs	r2, #33	; 0x21
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bae:	f7fa fe57 	bl	8003860 <HAL_GetTick>
 8008bb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	88fa      	ldrh	r2, [r7, #6]
 8008bb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	88fa      	ldrh	r2, [r7, #6]
 8008bbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bc8:	d108      	bne.n	8008bdc <HAL_UART_Transmit+0x82>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d104      	bne.n	8008bdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	61bb      	str	r3, [r7, #24]
 8008bda:	e003      	b.n	8008be4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008bec:	e02a      	b.n	8008c44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	2180      	movs	r1, #128	; 0x80
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f000 fa2f 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	e036      	b.n	8008c76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008c08:	69fb      	ldr	r3, [r7, #28]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d10b      	bne.n	8008c26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c0e:	69bb      	ldr	r3, [r7, #24]
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	3302      	adds	r3, #2
 8008c22:	61bb      	str	r3, [r7, #24]
 8008c24:	e007      	b.n	8008c36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	781a      	ldrb	r2, [r3, #0]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008c30:	69fb      	ldr	r3, [r7, #28]
 8008c32:	3301      	adds	r3, #1
 8008c34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c3a:	b29b      	uxth	r3, r3
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	b29a      	uxth	r2, r3
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c48:	b29b      	uxth	r3, r3
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1cf      	bne.n	8008bee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	2200      	movs	r2, #0
 8008c56:	2140      	movs	r1, #64	; 0x40
 8008c58:	68f8      	ldr	r0, [r7, #12]
 8008c5a:	f000 f9ff 	bl	800905c <UART_WaitOnFlagUntilTimeout>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d001      	beq.n	8008c68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008c64:	2303      	movs	r3, #3
 8008c66:	e006      	b.n	8008c76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008c70:	2300      	movs	r3, #0
 8008c72:	e000      	b.n	8008c76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008c74:	2302      	movs	r3, #2
  }
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b084      	sub	sp, #16
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	60f8      	str	r0, [r7, #12]
 8008c86:	60b9      	str	r1, [r7, #8]
 8008c88:	4613      	mov	r3, r2
 8008c8a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b20      	cmp	r3, #32
 8008c96:	d11d      	bne.n	8008cd4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <HAL_UART_Receive_IT+0x26>
 8008c9e:	88fb      	ldrh	r3, [r7, #6]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d101      	bne.n	8008ca8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	e016      	b.n	8008cd6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d101      	bne.n	8008cb6 <HAL_UART_Receive_IT+0x38>
 8008cb2:	2302      	movs	r3, #2
 8008cb4:	e00f      	b.n	8008cd6 <HAL_UART_Receive_IT+0x58>
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2201      	movs	r2, #1
 8008cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8008cc4:	88fb      	ldrh	r3, [r7, #6]
 8008cc6:	461a      	mov	r2, r3
 8008cc8:	68b9      	ldr	r1, [r7, #8]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fa10 	bl	80090f0 <UART_Start_Receive_IT>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	e000      	b.n	8008cd6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008cd4:	2302      	movs	r3, #2
  }
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
	...

08008ce0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b08a      	sub	sp, #40	; 0x28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	695b      	ldr	r3, [r3, #20]
 8008cfe:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008d04:	2300      	movs	r3, #0
 8008d06:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d0a:	f003 030f 	and.w	r3, r3, #15
 8008d0e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008d10:	69bb      	ldr	r3, [r7, #24]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	f003 0320 	and.w	r3, r3, #32
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d008      	beq.n	8008d32 <HAL_UART_IRQHandler+0x52>
 8008d20:	6a3b      	ldr	r3, [r7, #32]
 8008d22:	f003 0320 	and.w	r3, r3, #32
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fac0 	bl	80092b0 <UART_Receive_IT>
      return;
 8008d30:	e17b      	b.n	800902a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 80b1 	beq.w	8008e9c <HAL_UART_IRQHandler+0x1bc>
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	f003 0301 	and.w	r3, r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d105      	bne.n	8008d50 <HAL_UART_IRQHandler+0x70>
 8008d44:	6a3b      	ldr	r3, [r7, #32]
 8008d46:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	f000 80a6 	beq.w	8008e9c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00a      	beq.n	8008d70 <HAL_UART_IRQHandler+0x90>
 8008d5a:	6a3b      	ldr	r3, [r7, #32]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d005      	beq.n	8008d70 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d68:	f043 0201 	orr.w	r2, r3, #1
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d72:	f003 0304 	and.w	r3, r3, #4
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00a      	beq.n	8008d90 <HAL_UART_IRQHandler+0xb0>
 8008d7a:	69fb      	ldr	r3, [r7, #28]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	f043 0202 	orr.w	r2, r3, #2
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d00a      	beq.n	8008db0 <HAL_UART_IRQHandler+0xd0>
 8008d9a:	69fb      	ldr	r3, [r7, #28]
 8008d9c:	f003 0301 	and.w	r3, r3, #1
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d005      	beq.n	8008db0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da8:	f043 0204 	orr.w	r2, r3, #4
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	f003 0308 	and.w	r3, r3, #8
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d00f      	beq.n	8008dda <HAL_UART_IRQHandler+0xfa>
 8008dba:	6a3b      	ldr	r3, [r7, #32]
 8008dbc:	f003 0320 	and.w	r3, r3, #32
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d104      	bne.n	8008dce <HAL_UART_IRQHandler+0xee>
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f003 0301 	and.w	r3, r3, #1
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d005      	beq.n	8008dda <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd2:	f043 0208 	orr.w	r2, r3, #8
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f000 811e 	beq.w	8009020 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	f003 0320 	and.w	r3, r3, #32
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d007      	beq.n	8008dfe <HAL_UART_IRQHandler+0x11e>
 8008dee:	6a3b      	ldr	r3, [r7, #32]
 8008df0:	f003 0320 	and.w	r3, r3, #32
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d002      	beq.n	8008dfe <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fa59 	bl	80092b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bf14      	ite	ne
 8008e0c:	2301      	movne	r3, #1
 8008e0e:	2300      	moveq	r3, #0
 8008e10:	b2db      	uxtb	r3, r3
 8008e12:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e18:	f003 0308 	and.w	r3, r3, #8
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d102      	bne.n	8008e26 <HAL_UART_IRQHandler+0x146>
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d031      	beq.n	8008e8a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 f99b 	bl	8009162 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d023      	beq.n	8008e82 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695a      	ldr	r2, [r3, #20]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e48:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d013      	beq.n	8008e7a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e56:	4a76      	ldr	r2, [pc, #472]	; (8009030 <HAL_UART_IRQHandler+0x350>)
 8008e58:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7fa fe74 	bl	8003b4c <HAL_DMA_Abort_IT>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d016      	beq.n	8008e98 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	687a      	ldr	r2, [r7, #4]
 8008e72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	e00e      	b.n	8008e98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 f8da 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e80:	e00a      	b.n	8008e98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f8d6 	bl	8009034 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e88:	e006      	b.n	8008e98 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 f8d2 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008e96:	e0c3      	b.n	8009020 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e98:	bf00      	nop
    return;
 8008e9a:	e0c1      	b.n	8009020 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	f040 80a1 	bne.w	8008fe8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea8:	f003 0310 	and.w	r3, r3, #16
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	f000 809b 	beq.w	8008fe8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8008eb2:	6a3b      	ldr	r3, [r7, #32]
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	f000 8095 	beq.w	8008fe8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	60fb      	str	r3, [r7, #12]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	695b      	ldr	r3, [r3, #20]
 8008eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d04e      	beq.n	8008f80 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	685b      	ldr	r3, [r3, #4]
 8008eea:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008eec:	8a3b      	ldrh	r3, [r7, #16]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	f000 8098 	beq.w	8009024 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ef8:	8a3a      	ldrh	r2, [r7, #16]
 8008efa:	429a      	cmp	r2, r3
 8008efc:	f080 8092 	bcs.w	8009024 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	8a3a      	ldrh	r2, [r7, #16]
 8008f04:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f0a:	699b      	ldr	r3, [r3, #24]
 8008f0c:	2b20      	cmp	r3, #32
 8008f0e:	d02b      	beq.n	8008f68 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68da      	ldr	r2, [r3, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f1e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	695a      	ldr	r2, [r3, #20]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f022 0201 	bic.w	r2, r2, #1
 8008f2e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	695a      	ldr	r2, [r3, #20]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f3e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	68da      	ldr	r2, [r3, #12]
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0210 	bic.w	r2, r2, #16
 8008f5c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7fa fdb7 	bl	8003ad6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	1ad3      	subs	r3, r2, r3
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	4619      	mov	r1, r3
 8008f78:	6878      	ldr	r0, [r7, #4]
 8008f7a:	f000 f864 	bl	8009046 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008f7e:	e051      	b.n	8009024 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f88:	b29b      	uxth	r3, r3
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f92:	b29b      	uxth	r3, r3
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d047      	beq.n	8009028 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8008f98:	8a7b      	ldrh	r3, [r7, #18]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d044      	beq.n	8009028 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	68da      	ldr	r2, [r3, #12]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fac:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	695a      	ldr	r2, [r3, #20]
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f022 0201 	bic.w	r2, r2, #1
 8008fbc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2220      	movs	r2, #32
 8008fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68da      	ldr	r2, [r3, #12]
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f022 0210 	bic.w	r2, r2, #16
 8008fda:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008fdc:	8a7b      	ldrh	r3, [r7, #18]
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f830 	bl	8009046 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008fe6:	e01f      	b.n	8009028 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d008      	beq.n	8009004 <HAL_UART_IRQHandler+0x324>
 8008ff2:	6a3b      	ldr	r3, [r7, #32]
 8008ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f000 f8f0 	bl	80091e2 <UART_Transmit_IT>
    return;
 8009002:	e012      	b.n	800902a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00d      	beq.n	800902a <HAL_UART_IRQHandler+0x34a>
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009014:	2b00      	cmp	r3, #0
 8009016:	d008      	beq.n	800902a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 f931 	bl	8009280 <UART_EndTransmit_IT>
    return;
 800901e:	e004      	b.n	800902a <HAL_UART_IRQHandler+0x34a>
    return;
 8009020:	bf00      	nop
 8009022:	e002      	b.n	800902a <HAL_UART_IRQHandler+0x34a>
      return;
 8009024:	bf00      	nop
 8009026:	e000      	b.n	800902a <HAL_UART_IRQHandler+0x34a>
      return;
 8009028:	bf00      	nop
  }
}
 800902a:	3728      	adds	r7, #40	; 0x28
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	080091bb 	.word	0x080091bb

08009034 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	bc80      	pop	{r7}
 8009044:	4770      	bx	lr

08009046 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
 800904e:	460b      	mov	r3, r1
 8009050:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009052:	bf00      	nop
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	bc80      	pop	{r7}
 800905a:	4770      	bx	lr

0800905c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b084      	sub	sp, #16
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	603b      	str	r3, [r7, #0]
 8009068:	4613      	mov	r3, r2
 800906a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800906c:	e02c      	b.n	80090c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009074:	d028      	beq.n	80090c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009076:	69bb      	ldr	r3, [r7, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <UART_WaitOnFlagUntilTimeout+0x30>
 800907c:	f7fa fbf0 	bl	8003860 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	429a      	cmp	r2, r3
 800908a:	d21d      	bcs.n	80090c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800909a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	695a      	ldr	r2, [r3, #20]
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f022 0201 	bic.w	r2, r2, #1
 80090aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2220      	movs	r2, #32
 80090b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	2220      	movs	r2, #32
 80090b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2200      	movs	r2, #0
 80090c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e00f      	b.n	80090e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	681a      	ldr	r2, [r3, #0]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	4013      	ands	r3, r2
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	bf0c      	ite	eq
 80090d8:	2301      	moveq	r3, #1
 80090da:	2300      	movne	r3, #0
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	461a      	mov	r2, r3
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d0c3      	beq.n	800906e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3710      	adds	r7, #16
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	88fa      	ldrh	r2, [r7, #6]
 8009108:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	88fa      	ldrh	r2, [r7, #6]
 800910e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2222      	movs	r2, #34	; 0x22
 800911a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68da      	ldr	r2, [r3, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009134:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695a      	ldr	r2, [r3, #20]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0201 	orr.w	r2, r2, #1
 8009144:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0220 	orr.w	r2, r2, #32
 8009154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009156:	2300      	movs	r3, #0
}
 8009158:	4618      	mov	r0, r3
 800915a:	3714      	adds	r7, #20
 800915c:	46bd      	mov	sp, r7
 800915e:	bc80      	pop	{r7}
 8009160:	4770      	bx	lr

08009162 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009162:	b480      	push	{r7}
 8009164:	b083      	sub	sp, #12
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68da      	ldr	r2, [r3, #12]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009178:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	f022 0201 	bic.w	r2, r2, #1
 8009188:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800918e:	2b01      	cmp	r3, #1
 8009190:	d107      	bne.n	80091a2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68da      	ldr	r2, [r3, #12]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0210 	bic.w	r2, r2, #16
 80091a0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2220      	movs	r2, #32
 80091a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	631a      	str	r2, [r3, #48]	; 0x30
}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bc80      	pop	{r7}
 80091b8:	4770      	bx	lr

080091ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff ff2d 	bl	8009034 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091da:	bf00      	nop
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b21      	cmp	r3, #33	; 0x21
 80091f4:	d13e      	bne.n	8009274 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091fe:	d114      	bne.n	800922a <UART_Transmit_IT+0x48>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	691b      	ldr	r3, [r3, #16]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d110      	bne.n	800922a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a1b      	ldr	r3, [r3, #32]
 800920c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800921c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
 8009222:	1c9a      	adds	r2, r3, #2
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	621a      	str	r2, [r3, #32]
 8009228:	e008      	b.n	800923c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6a1b      	ldr	r3, [r3, #32]
 800922e:	1c59      	adds	r1, r3, #1
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6211      	str	r1, [r2, #32]
 8009234:	781a      	ldrb	r2, [r3, #0]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009240:	b29b      	uxth	r3, r3
 8009242:	3b01      	subs	r3, #1
 8009244:	b29b      	uxth	r3, r3
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4619      	mov	r1, r3
 800924a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10f      	bne.n	8009270 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	68da      	ldr	r2, [r3, #12]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800925e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68da      	ldr	r2, [r3, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009270:	2300      	movs	r3, #0
 8009272:	e000      	b.n	8009276 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009274:	2302      	movs	r3, #2
  }
}
 8009276:	4618      	mov	r0, r3
 8009278:	3714      	adds	r7, #20
 800927a:	46bd      	mov	sp, r7
 800927c:	bc80      	pop	{r7}
 800927e:	4770      	bx	lr

08009280 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68da      	ldr	r2, [r3, #12]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009296:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7f9 fcdd 	bl	8002c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b086      	sub	sp, #24
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b22      	cmp	r3, #34	; 0x22
 80092c2:	f040 8099 	bne.w	80093f8 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d117      	bne.n	8009300 <UART_Receive_IT+0x50>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d113      	bne.n	8009300 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80092d8:	2300      	movs	r3, #0
 80092da:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e0:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092f8:	1c9a      	adds	r2, r3, #2
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	629a      	str	r2, [r3, #40]	; 0x28
 80092fe:	e026      	b.n	800934e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009312:	d007      	beq.n	8009324 <UART_Receive_IT+0x74>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d10a      	bne.n	8009332 <UART_Receive_IT+0x82>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d106      	bne.n	8009332 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	b2da      	uxtb	r2, r3
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	701a      	strb	r2, [r3, #0]
 8009330:	e008      	b.n	8009344 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	b2db      	uxtb	r3, r3
 800933a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800933e:	b2da      	uxtb	r2, r3
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009348:	1c5a      	adds	r2, r3, #1
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009352:	b29b      	uxth	r3, r3
 8009354:	3b01      	subs	r3, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	4619      	mov	r1, r3
 800935c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800935e:	2b00      	cmp	r3, #0
 8009360:	d148      	bne.n	80093f4 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	68da      	ldr	r2, [r3, #12]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f022 0220 	bic.w	r2, r2, #32
 8009370:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68da      	ldr	r2, [r3, #12]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009380:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	695a      	ldr	r2, [r3, #20]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f022 0201 	bic.w	r2, r2, #1
 8009390:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2220      	movs	r2, #32
 8009396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800939e:	2b01      	cmp	r3, #1
 80093a0:	d123      	bne.n	80093ea <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f022 0210 	bic.w	r2, r2, #16
 80093b6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 0310 	and.w	r3, r3, #16
 80093c2:	2b10      	cmp	r3, #16
 80093c4:	d10a      	bne.n	80093dc <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	60fb      	str	r3, [r7, #12]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	60fb      	str	r3, [r7, #12]
 80093da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f7ff fe2f 	bl	8009046 <HAL_UARTEx_RxEventCallback>
 80093e8:	e002      	b.n	80093f0 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7f9 fc26 	bl	8002c3c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80093f0:	2300      	movs	r3, #0
 80093f2:	e002      	b.n	80093fa <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80093f4:	2300      	movs	r3, #0
 80093f6:	e000      	b.n	80093fa <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80093f8:	2302      	movs	r3, #2
  }
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3718      	adds	r7, #24
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}
	...

08009404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	689a      	ldr	r2, [r3, #8]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	691b      	ldr	r3, [r3, #16]
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800943e:	f023 030c 	bic.w	r3, r3, #12
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	430b      	orrs	r3, r1
 800944a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	699a      	ldr	r2, [r3, #24]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a2c      	ldr	r2, [pc, #176]	; (8009518 <UART_SetConfig+0x114>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d103      	bne.n	8009474 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800946c:	f7fd fe62 	bl	8007134 <HAL_RCC_GetPCLK2Freq>
 8009470:	60f8      	str	r0, [r7, #12]
 8009472:	e002      	b.n	800947a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8009474:	f7fd fe4a 	bl	800710c <HAL_RCC_GetPCLK1Freq>
 8009478:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4613      	mov	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	009a      	lsls	r2, r3, #2
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009490:	4a22      	ldr	r2, [pc, #136]	; (800951c <UART_SetConfig+0x118>)
 8009492:	fba2 2303 	umull	r2, r3, r2, r3
 8009496:	095b      	lsrs	r3, r3, #5
 8009498:	0119      	lsls	r1, r3, #4
 800949a:	68fa      	ldr	r2, [r7, #12]
 800949c:	4613      	mov	r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	009a      	lsls	r2, r3, #2
 80094a4:	441a      	add	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80094b0:	4b1a      	ldr	r3, [pc, #104]	; (800951c <UART_SetConfig+0x118>)
 80094b2:	fba3 0302 	umull	r0, r3, r3, r2
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	2064      	movs	r0, #100	; 0x64
 80094ba:	fb00 f303 	mul.w	r3, r0, r3
 80094be:	1ad3      	subs	r3, r2, r3
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	3332      	adds	r3, #50	; 0x32
 80094c4:	4a15      	ldr	r2, [pc, #84]	; (800951c <UART_SetConfig+0x118>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80094d0:	4419      	add	r1, r3
 80094d2:	68fa      	ldr	r2, [r7, #12]
 80094d4:	4613      	mov	r3, r2
 80094d6:	009b      	lsls	r3, r3, #2
 80094d8:	4413      	add	r3, r2
 80094da:	009a      	lsls	r2, r3, #2
 80094dc:	441a      	add	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094e8:	4b0c      	ldr	r3, [pc, #48]	; (800951c <UART_SetConfig+0x118>)
 80094ea:	fba3 0302 	umull	r0, r3, r3, r2
 80094ee:	095b      	lsrs	r3, r3, #5
 80094f0:	2064      	movs	r0, #100	; 0x64
 80094f2:	fb00 f303 	mul.w	r3, r0, r3
 80094f6:	1ad3      	subs	r3, r2, r3
 80094f8:	011b      	lsls	r3, r3, #4
 80094fa:	3332      	adds	r3, #50	; 0x32
 80094fc:	4a07      	ldr	r2, [pc, #28]	; (800951c <UART_SetConfig+0x118>)
 80094fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009502:	095b      	lsrs	r3, r3, #5
 8009504:	f003 020f 	and.w	r2, r3, #15
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	440a      	add	r2, r1
 800950e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8009510:	bf00      	nop
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	40013800 	.word	0x40013800
 800951c:	51eb851f 	.word	0x51eb851f

08009520 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8009524:	4904      	ldr	r1, [pc, #16]	; (8009538 <MX_FATFS_Init+0x18>)
 8009526:	4805      	ldr	r0, [pc, #20]	; (800953c <MX_FATFS_Init+0x1c>)
 8009528:	f002 fd42 	bl	800bfb0 <FATFS_LinkDriver>
 800952c:	4603      	mov	r3, r0
 800952e:	461a      	mov	r2, r3
 8009530:	4b03      	ldr	r3, [pc, #12]	; (8009540 <MX_FATFS_Init+0x20>)
 8009532:	701a      	strb	r2, [r3, #0]
	  }


  }*/
  /* USER CODE END Init */
}
 8009534:	bf00      	nop
 8009536:	bd80      	pop	{r7, pc}
 8009538:	200017c4 	.word	0x200017c4
 800953c:	200000b0 	.word	0x200000b0
 8009540:	200017c0 	.word	0x200017c0

08009544 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b086      	sub	sp, #24
 8009548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
	DWORD time=0;
 800954a:	2300      	movs	r3, #0
 800954c:	617b      	str	r3, [r7, #20]
	RTC_TimeTypeDef sTime = {0};
 800954e:	f107 0308 	add.w	r3, r7, #8
 8009552:	2100      	movs	r1, #0
 8009554:	460a      	mov	r2, r1
 8009556:	801a      	strh	r2, [r3, #0]
 8009558:	460a      	mov	r2, r1
 800955a:	709a      	strb	r2, [r3, #2]
	RTC_DateTypeDef DateToUpdate = {0};
 800955c:	2300      	movs	r3, #0
 800955e:	607b      	str	r3, [r7, #4]
	HAL_RTC_GetTime(pRTC, &sTime, RTC_FORMAT_BCD);
 8009560:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <get_fattime+0x11c>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f107 0108 	add.w	r1, r7, #8
 8009568:	2201      	movs	r2, #1
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe f8b8 	bl	80076e0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(pRTC, &DateToUpdate, RTC_FORMAT_BCD);
 8009570:	4b3b      	ldr	r3, [pc, #236]	; (8009660 <get_fattime+0x11c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	1d39      	adds	r1, r7, #4
 8009576:	2201      	movs	r2, #1
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe fa3f 	bl	80079fc <HAL_RTC_GetDate>
	uint8_t year = 2000+((DateToUpdate.Year>>4)&0x0F)*10+(DateToUpdate.Year&0x0F);
 800957e:	79fb      	ldrb	r3, [r7, #7]
 8009580:	091b      	lsrs	r3, r3, #4
 8009582:	b2db      	uxtb	r3, r3
 8009584:	461a      	mov	r2, r3
 8009586:	0092      	lsls	r2, r2, #2
 8009588:	4413      	add	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	79fb      	ldrb	r3, [r7, #7]
 8009590:	f003 030f 	and.w	r3, r3, #15
 8009594:	b2db      	uxtb	r3, r3
 8009596:	4413      	add	r3, r2
 8009598:	b2db      	uxtb	r3, r3
 800959a:	3b30      	subs	r3, #48	; 0x30
 800959c:	74fb      	strb	r3, [r7, #19]
	year = year-1980;
 800959e:	7cfb      	ldrb	r3, [r7, #19]
 80095a0:	3344      	adds	r3, #68	; 0x44
 80095a2:	74fb      	strb	r3, [r7, #19]
	uint8_t month = ((DateToUpdate.Month>>4)&0x0F)*10+(DateToUpdate.Month&0x0F);
 80095a4:	797b      	ldrb	r3, [r7, #5]
 80095a6:	091b      	lsrs	r3, r3, #4
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	461a      	mov	r2, r3
 80095ac:	0092      	lsls	r2, r2, #2
 80095ae:	4413      	add	r3, r2
 80095b0:	005b      	lsls	r3, r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	797b      	ldrb	r3, [r7, #5]
 80095b6:	f003 030f 	and.w	r3, r3, #15
 80095ba:	b2db      	uxtb	r3, r3
 80095bc:	4413      	add	r3, r2
 80095be:	74bb      	strb	r3, [r7, #18]
	uint8_t day = ((DateToUpdate.Date>>4)&0x0F)*10+(DateToUpdate.Date&0x0F);
 80095c0:	79bb      	ldrb	r3, [r7, #6]
 80095c2:	091b      	lsrs	r3, r3, #4
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	0092      	lsls	r2, r2, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	005b      	lsls	r3, r3, #1
 80095ce:	b2da      	uxtb	r2, r3
 80095d0:	79bb      	ldrb	r3, [r7, #6]
 80095d2:	f003 030f 	and.w	r3, r3, #15
 80095d6:	b2db      	uxtb	r3, r3
 80095d8:	4413      	add	r3, r2
 80095da:	747b      	strb	r3, [r7, #17]
	uint8_t hour = ((sTime.Hours>>4)&0x0F)*10+(sTime.Hours&0x0F);
 80095dc:	7a3b      	ldrb	r3, [r7, #8]
 80095de:	091b      	lsrs	r3, r3, #4
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	0092      	lsls	r2, r2, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	005b      	lsls	r3, r3, #1
 80095ea:	b2da      	uxtb	r2, r3
 80095ec:	7a3b      	ldrb	r3, [r7, #8]
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4413      	add	r3, r2
 80095f6:	743b      	strb	r3, [r7, #16]
	uint8_t minute = ((sTime.Minutes>>4)&0x0F)*10+(sTime.Minutes&0x0F);
 80095f8:	7a7b      	ldrb	r3, [r7, #9]
 80095fa:	091b      	lsrs	r3, r3, #4
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	461a      	mov	r2, r3
 8009600:	0092      	lsls	r2, r2, #2
 8009602:	4413      	add	r3, r2
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	7a7b      	ldrb	r3, [r7, #9]
 800960a:	f003 030f 	and.w	r3, r3, #15
 800960e:	b2db      	uxtb	r3, r3
 8009610:	4413      	add	r3, r2
 8009612:	73fb      	strb	r3, [r7, #15]
	uint8_t second = ((sTime.Seconds>>4)&0x0F)*10+(sTime.Seconds&0x0F);
 8009614:	7abb      	ldrb	r3, [r7, #10]
 8009616:	091b      	lsrs	r3, r3, #4
 8009618:	b2db      	uxtb	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	0092      	lsls	r2, r2, #2
 800961e:	4413      	add	r3, r2
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	b2da      	uxtb	r2, r3
 8009624:	7abb      	ldrb	r3, [r7, #10]
 8009626:	f003 030f 	and.w	r3, r3, #15
 800962a:	b2db      	uxtb	r3, r3
 800962c:	4413      	add	r3, r2
 800962e:	73bb      	strb	r3, [r7, #14]

	time= year <<25 |
 8009630:	7cfb      	ldrb	r3, [r7, #19]
 8009632:	065a      	lsls	r2, r3, #25
			month<< 21 |
 8009634:	7cbb      	ldrb	r3, [r7, #18]
 8009636:	055b      	lsls	r3, r3, #21
	time= year <<25 |
 8009638:	431a      	orrs	r2, r3
			day << 16 |
 800963a:	7c7b      	ldrb	r3, [r7, #17]
 800963c:	041b      	lsls	r3, r3, #16
			month<< 21 |
 800963e:	431a      	orrs	r2, r3
			hour << 11 |
 8009640:	7c3b      	ldrb	r3, [r7, #16]
 8009642:	02db      	lsls	r3, r3, #11
			day << 16 |
 8009644:	431a      	orrs	r2, r3
			minute << 5 |
 8009646:	7bfb      	ldrb	r3, [r7, #15]
 8009648:	015b      	lsls	r3, r3, #5
			hour << 11 |
 800964a:	4313      	orrs	r3, r2
			second >> 1;
 800964c:	7bba      	ldrb	r2, [r7, #14]
 800964e:	0852      	lsrs	r2, r2, #1
 8009650:	b2d2      	uxtb	r2, r2
			minute << 5 |
 8009652:	4313      	orrs	r3, r2
	time= year <<25 |
 8009654:	617b      	str	r3, [r7, #20]
  return time;
 8009656:	697b      	ldr	r3, [r7, #20]
  /* USER CODE END get_fattime */
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	200013ac 	.word	0x200013ac

08009664 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	4603      	mov	r3, r0
 800966c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (!SPISD_DetectarSD(mainSD)) {
 800966e:	4b0c      	ldr	r3, [pc, #48]	; (80096a0 <USER_initialize+0x3c>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4618      	mov	r0, r3
 8009674:	f7f8 fcbe 	bl	8001ff4 <SPISD_DetectarSD>
 8009678:	4603      	mov	r3, r0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d106      	bne.n	800968c <USER_initialize+0x28>
		Stat = STA_NOINIT;
 800967e:	4b09      	ldr	r3, [pc, #36]	; (80096a4 <USER_initialize+0x40>)
 8009680:	2201      	movs	r2, #1
 8009682:	701a      	strb	r2, [r3, #0]
		return Stat;
 8009684:	4b07      	ldr	r3, [pc, #28]	; (80096a4 <USER_initialize+0x40>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	e005      	b.n	8009698 <USER_initialize+0x34>
	} else {
		Stat = 0;
 800968c:	4b05      	ldr	r3, [pc, #20]	; (80096a4 <USER_initialize+0x40>)
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
		return Stat;
 8009692:	4b04      	ldr	r3, [pc, #16]	; (80096a4 <USER_initialize+0x40>)
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	b2db      	uxtb	r3, r3
	}

  /* USER CODE END INIT */
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000064 	.word	0x20000064
 80096a4:	200000ad 	.word	0x200000ad

080096a8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//Stat = STA_NOINIT;
	//return Stat;
	return 0;
 80096b2:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bc80      	pop	{r7}
 80096bc:	4770      	bx	lr
	...

080096c0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60b9      	str	r1, [r7, #8]
 80096c8:	607a      	str	r2, [r7, #4]
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	for (int i = 0; i < 512; i++) {
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
 80096d4:	e007      	b.n	80096e6 <USER_read+0x26>
		buff[i] = 0xFF;
 80096d6:	697b      	ldr	r3, [r7, #20]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	4413      	add	r3, r2
 80096dc:	22ff      	movs	r2, #255	; 0xff
 80096de:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	3301      	adds	r3, #1
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ec:	dbf3      	blt.n	80096d6 <USER_read+0x16>
	}
	if (SPISD_LeerSector(mainSD, sector, buff)) {
 80096ee:	4b08      	ldr	r3, [pc, #32]	; (8009710 <USER_read+0x50>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68ba      	ldr	r2, [r7, #8]
 80096f4:	6879      	ldr	r1, [r7, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7f8 fb7a 	bl	8001df0 <SPISD_LeerSector>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <USER_read+0x46>

		return RES_OK;
 8009702:	2300      	movs	r3, #0
 8009704:	e000      	b.n	8009708 <USER_read+0x48>
	}
	return RES_ERROR;
 8009706:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 8009708:	4618      	mov	r0, r3
 800970a:	3718      	adds	r7, #24
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}
 8009710:	20000064 	.word	0x20000064

08009714 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	60b9      	str	r1, [r7, #8]
 800971c:	607a      	str	r2, [r7, #4]
 800971e:	603b      	str	r3, [r7, #0]
 8009720:	4603      	mov	r3, r0
 8009722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	if (SPISD_EscribirSector(mainSD, sector, buff)) {
 8009724:	4b09      	ldr	r3, [pc, #36]	; (800974c <USER_write+0x38>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68ba      	ldr	r2, [r7, #8]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4618      	mov	r0, r3
 800972e:	f7f8 fa43 	bl	8001bb8 <SPISD_EscribirSector>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d004      	beq.n	8009742 <USER_write+0x2e>
		HAL_Delay(100);
 8009738:	2064      	movs	r0, #100	; 0x64
 800973a:	f7fa f89b 	bl	8003874 <HAL_Delay>
		return RES_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	e000      	b.n	8009744 <USER_write+0x30>
	}
	return RES_ERROR;
 8009742:	2301      	movs	r3, #1

  /* USER CODE END WRITE */
}
 8009744:	4618      	mov	r0, r3
 8009746:	3710      	adds	r7, #16
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}
 800974c:	20000064 	.word	0x20000064

08009750 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8009750:	b480      	push	{r7}
 8009752:	b085      	sub	sp, #20
 8009754:	af00      	add	r7, sp, #0
 8009756:	4603      	mov	r3, r0
 8009758:	603a      	str	r2, [r7, #0]
 800975a:	71fb      	strb	r3, [r7, #7]
 800975c:	460b      	mov	r3, r1
 800975e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	73fb      	strb	r3, [r7, #15]
	return res;
 8009764:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8009766:	4618      	mov	r0, r3
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	bc80      	pop	{r7}
 800976e:	4770      	bx	lr

08009770 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800977a:	79fb      	ldrb	r3, [r7, #7]
 800977c:	4a08      	ldr	r2, [pc, #32]	; (80097a0 <disk_status+0x30>)
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4413      	add	r3, r2
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	685b      	ldr	r3, [r3, #4]
 8009786:	79fa      	ldrb	r2, [r7, #7]
 8009788:	4905      	ldr	r1, [pc, #20]	; (80097a0 <disk_status+0x30>)
 800978a:	440a      	add	r2, r1
 800978c:	7a12      	ldrb	r2, [r2, #8]
 800978e:	4610      	mov	r0, r2
 8009790:	4798      	blx	r3
 8009792:	4603      	mov	r3, r0
 8009794:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009796:	7bfb      	ldrb	r3, [r7, #15]
}
 8009798:	4618      	mov	r0, r3
 800979a:	3710      	adds	r7, #16
 800979c:	46bd      	mov	sp, r7
 800979e:	bd80      	pop	{r7, pc}
 80097a0:	20001c44 	.word	0x20001c44

080097a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b084      	sub	sp, #16
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	4603      	mov	r3, r0
 80097ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80097b2:	79fb      	ldrb	r3, [r7, #7]
 80097b4:	4a0d      	ldr	r2, [pc, #52]	; (80097ec <disk_initialize+0x48>)
 80097b6:	5cd3      	ldrb	r3, [r2, r3]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d111      	bne.n	80097e0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	4a0b      	ldr	r2, [pc, #44]	; (80097ec <disk_initialize+0x48>)
 80097c0:	2101      	movs	r1, #1
 80097c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80097c4:	79fb      	ldrb	r3, [r7, #7]
 80097c6:	4a09      	ldr	r2, [pc, #36]	; (80097ec <disk_initialize+0x48>)
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	79fa      	ldrb	r2, [r7, #7]
 80097d2:	4906      	ldr	r1, [pc, #24]	; (80097ec <disk_initialize+0x48>)
 80097d4:	440a      	add	r2, r1
 80097d6:	7a12      	ldrb	r2, [r2, #8]
 80097d8:	4610      	mov	r0, r2
 80097da:	4798      	blx	r3
 80097dc:	4603      	mov	r3, r0
 80097de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80097e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}
 80097ea:	bf00      	nop
 80097ec:	20001c44 	.word	0x20001c44

080097f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80097f0:	b590      	push	{r4, r7, lr}
 80097f2:	b087      	sub	sp, #28
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	607a      	str	r2, [r7, #4]
 80097fa:	603b      	str	r3, [r7, #0]
 80097fc:	4603      	mov	r3, r0
 80097fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009800:	7bfb      	ldrb	r3, [r7, #15]
 8009802:	4a0a      	ldr	r2, [pc, #40]	; (800982c <disk_read+0x3c>)
 8009804:	009b      	lsls	r3, r3, #2
 8009806:	4413      	add	r3, r2
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	689c      	ldr	r4, [r3, #8]
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4a07      	ldr	r2, [pc, #28]	; (800982c <disk_read+0x3c>)
 8009810:	4413      	add	r3, r2
 8009812:	7a18      	ldrb	r0, [r3, #8]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	687a      	ldr	r2, [r7, #4]
 8009818:	68b9      	ldr	r1, [r7, #8]
 800981a:	47a0      	blx	r4
 800981c:	4603      	mov	r3, r0
 800981e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009820:	7dfb      	ldrb	r3, [r7, #23]
}
 8009822:	4618      	mov	r0, r3
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	bd90      	pop	{r4, r7, pc}
 800982a:	bf00      	nop
 800982c:	20001c44 	.word	0x20001c44

08009830 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009830:	b590      	push	{r4, r7, lr}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4603      	mov	r3, r0
 800983e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	4a0a      	ldr	r2, [pc, #40]	; (800986c <disk_write+0x3c>)
 8009844:	009b      	lsls	r3, r3, #2
 8009846:	4413      	add	r3, r2
 8009848:	685b      	ldr	r3, [r3, #4]
 800984a:	68dc      	ldr	r4, [r3, #12]
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	4a07      	ldr	r2, [pc, #28]	; (800986c <disk_write+0x3c>)
 8009850:	4413      	add	r3, r2
 8009852:	7a18      	ldrb	r0, [r3, #8]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	68b9      	ldr	r1, [r7, #8]
 800985a:	47a0      	blx	r4
 800985c:	4603      	mov	r3, r0
 800985e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009860:	7dfb      	ldrb	r3, [r7, #23]
}
 8009862:	4618      	mov	r0, r3
 8009864:	371c      	adds	r7, #28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd90      	pop	{r4, r7, pc}
 800986a:	bf00      	nop
 800986c:	20001c44 	.word	0x20001c44

08009870 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
 8009876:	4603      	mov	r3, r0
 8009878:	603a      	str	r2, [r7, #0]
 800987a:	71fb      	strb	r3, [r7, #7]
 800987c:	460b      	mov	r3, r1
 800987e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	4a09      	ldr	r2, [pc, #36]	; (80098a8 <disk_ioctl+0x38>)
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	79fa      	ldrb	r2, [r7, #7]
 800988e:	4906      	ldr	r1, [pc, #24]	; (80098a8 <disk_ioctl+0x38>)
 8009890:	440a      	add	r2, r1
 8009892:	7a10      	ldrb	r0, [r2, #8]
 8009894:	79b9      	ldrb	r1, [r7, #6]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	4798      	blx	r3
 800989a:	4603      	mov	r3, r0
 800989c:	73fb      	strb	r3, [r7, #15]
  return res;
 800989e:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3710      	adds	r7, #16
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	20001c44 	.word	0x20001c44

080098ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098ac:	b480      	push	{r7}
 80098ae:	b087      	sub	sp, #28
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80098c0:	e007      	b.n	80098d2 <mem_cpy+0x26>
		*d++ = *s++;
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	1c53      	adds	r3, r2, #1
 80098c6:	613b      	str	r3, [r7, #16]
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	6179      	str	r1, [r7, #20]
 80098ce:	7812      	ldrb	r2, [r2, #0]
 80098d0:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	1e5a      	subs	r2, r3, #1
 80098d6:	607a      	str	r2, [r7, #4]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f2      	bne.n	80098c2 <mem_cpy+0x16>
}
 80098dc:	bf00      	nop
 80098de:	bf00      	nop
 80098e0:	371c      	adds	r7, #28
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80098f8:	e005      	b.n	8009906 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	1c5a      	adds	r2, r3, #1
 80098fe:	617a      	str	r2, [r7, #20]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	1e5a      	subs	r2, r3, #1
 800990a:	607a      	str	r2, [r7, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d1f4      	bne.n	80098fa <mem_set+0x12>
}
 8009910:	bf00      	nop
 8009912:	bf00      	nop
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	bc80      	pop	{r7}
 800991a:	4770      	bx	lr

0800991c <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 800991c:	b480      	push	{r7}
 800991e:	b089      	sub	sp, #36	; 0x24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	61fb      	str	r3, [r7, #28]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8009934:	bf00      	nop
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	1e5a      	subs	r2, r3, #1
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00d      	beq.n	800995c <mem_cmp+0x40>
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	61fa      	str	r2, [r7, #28]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	4619      	mov	r1, r3
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	61ba      	str	r2, [r7, #24]
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	1acb      	subs	r3, r1, r3
 8009954:	617b      	str	r3, [r7, #20]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0ec      	beq.n	8009936 <mem_cmp+0x1a>
	return r;
 800995c:	697b      	ldr	r3, [r7, #20]
}
 800995e:	4618      	mov	r0, r3
 8009960:	3724      	adds	r7, #36	; 0x24
 8009962:	46bd      	mov	sp, r7
 8009964:	bc80      	pop	{r7}
 8009966:	4770      	bx	lr

08009968 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009972:	e002      	b.n	800997a <chk_chr+0x12>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	3301      	adds	r3, #1
 8009978:	607b      	str	r3, [r7, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d005      	beq.n	800998e <chk_chr+0x26>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	4293      	cmp	r3, r2
 800998c:	d1f2      	bne.n	8009974 <chk_chr+0xc>
	return *str;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	781b      	ldrb	r3, [r3, #0]
}
 8009992:	4618      	mov	r0, r3
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	bc80      	pop	{r7}
 800999a:	4770      	bx	lr

0800999c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800999c:	b480      	push	{r7}
 800999e:	b085      	sub	sp, #20
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099a6:	2300      	movs	r3, #0
 80099a8:	60bb      	str	r3, [r7, #8]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	e038      	b.n	8009a22 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80099b0:	492f      	ldr	r1, [pc, #188]	; (8009a70 <chk_lock+0xd4>)
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	4613      	mov	r3, r2
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	4413      	add	r3, r2
 80099ba:	009b      	lsls	r3, r3, #2
 80099bc:	440b      	add	r3, r1
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d029      	beq.n	8009a18 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099c4:	492a      	ldr	r1, [pc, #168]	; (8009a70 <chk_lock+0xd4>)
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	4613      	mov	r3, r2
 80099ca:	005b      	lsls	r3, r3, #1
 80099cc:	4413      	add	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	681a      	ldr	r2, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099da:	429a      	cmp	r2, r3
 80099dc:	d11e      	bne.n	8009a1c <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80099de:	4924      	ldr	r1, [pc, #144]	; (8009a70 <chk_lock+0xd4>)
 80099e0:	68fa      	ldr	r2, [r7, #12]
 80099e2:	4613      	mov	r3, r2
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	4413      	add	r3, r2
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	440b      	add	r3, r1
 80099ec:	3304      	adds	r3, #4
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d110      	bne.n	8009a1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80099fa:	491d      	ldr	r1, [pc, #116]	; (8009a70 <chk_lock+0xd4>)
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	4613      	mov	r3, r2
 8009a00:	005b      	lsls	r3, r3, #1
 8009a02:	4413      	add	r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	440b      	add	r3, r1
 8009a08:	3308      	adds	r3, #8
 8009a0a:	881a      	ldrh	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 8009a12:	429a      	cmp	r2, r3
 8009a14:	d102      	bne.n	8009a1c <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8009a16:	e007      	b.n	8009a28 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d9c3      	bls.n	80099b0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b02      	cmp	r3, #2
 8009a2c:	d109      	bne.n	8009a42 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d102      	bne.n	8009a3a <chk_lock+0x9e>
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	2b02      	cmp	r3, #2
 8009a38:	d101      	bne.n	8009a3e <chk_lock+0xa2>
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	e013      	b.n	8009a66 <chk_lock+0xca>
 8009a3e:	2312      	movs	r3, #18
 8009a40:	e011      	b.n	8009a66 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10b      	bne.n	8009a60 <chk_lock+0xc4>
 8009a48:	4909      	ldr	r1, [pc, #36]	; (8009a70 <chk_lock+0xd4>)
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	005b      	lsls	r3, r3, #1
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	440b      	add	r3, r1
 8009a56:	330a      	adds	r3, #10
 8009a58:	881b      	ldrh	r3, [r3, #0]
 8009a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a5e:	d101      	bne.n	8009a64 <chk_lock+0xc8>
 8009a60:	2310      	movs	r3, #16
 8009a62:	e000      	b.n	8009a66 <chk_lock+0xca>
 8009a64:	2300      	movs	r3, #0
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3714      	adds	r7, #20
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bc80      	pop	{r7}
 8009a6e:	4770      	bx	lr
 8009a70:	20001c2c 	.word	0x20001c2c

08009a74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]
 8009a7e:	e002      	b.n	8009a86 <enq_lock+0x12>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	3301      	adds	r3, #1
 8009a84:	607b      	str	r3, [r7, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2b01      	cmp	r3, #1
 8009a8a:	d809      	bhi.n	8009aa0 <enq_lock+0x2c>
 8009a8c:	490a      	ldr	r1, [pc, #40]	; (8009ab8 <enq_lock+0x44>)
 8009a8e:	687a      	ldr	r2, [r7, #4]
 8009a90:	4613      	mov	r3, r2
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1ef      	bne.n	8009a80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	bf14      	ite	ne
 8009aa6:	2301      	movne	r3, #1
 8009aa8:	2300      	moveq	r3, #0
 8009aaa:	b2db      	uxtb	r3, r3
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bc80      	pop	{r7}
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	20001c2c 	.word	0x20001c2c

08009abc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b085      	sub	sp, #20
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	60fb      	str	r3, [r7, #12]
 8009aca:	e02b      	b.n	8009b24 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8009acc:	4955      	ldr	r1, [pc, #340]	; (8009c24 <inc_lock+0x168>)
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	681a      	ldr	r2, [r3, #0]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d11b      	bne.n	8009b1e <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8009ae6:	494f      	ldr	r1, [pc, #316]	; (8009c24 <inc_lock+0x168>)
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	4613      	mov	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	440b      	add	r3, r1
 8009af4:	3304      	adds	r3, #4
 8009af6:	681a      	ldr	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d10d      	bne.n	8009b1e <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8009b02:	4948      	ldr	r1, [pc, #288]	; (8009c24 <inc_lock+0x168>)
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	4613      	mov	r3, r2
 8009b08:	005b      	lsls	r3, r3, #1
 8009b0a:	4413      	add	r3, r2
 8009b0c:	009b      	lsls	r3, r3, #2
 8009b0e:	440b      	add	r3, r1
 8009b10:	3308      	adds	r3, #8
 8009b12:	881a      	ldrh	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d006      	beq.n	8009b2c <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d9d0      	bls.n	8009acc <inc_lock+0x10>
 8009b2a:	e000      	b.n	8009b2e <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8009b2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d145      	bne.n	8009bc0 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	e002      	b.n	8009b40 <inc_lock+0x84>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d809      	bhi.n	8009b5a <inc_lock+0x9e>
 8009b46:	4937      	ldr	r1, [pc, #220]	; (8009c24 <inc_lock+0x168>)
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	4613      	mov	r3, r2
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	4413      	add	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	440b      	add	r3, r1
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1ef      	bne.n	8009b3a <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2b02      	cmp	r3, #2
 8009b5e:	d101      	bne.n	8009b64 <inc_lock+0xa8>
 8009b60:	2300      	movs	r3, #0
 8009b62:	e05a      	b.n	8009c1a <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8009b6a:	482e      	ldr	r0, [pc, #184]	; (8009c24 <inc_lock+0x168>)
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	4613      	mov	r3, r2
 8009b70:	005b      	lsls	r3, r3, #1
 8009b72:	4413      	add	r3, r2
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	4403      	add	r3, r0
 8009b78:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 8009b80:	4828      	ldr	r0, [pc, #160]	; (8009c24 <inc_lock+0x168>)
 8009b82:	68fa      	ldr	r2, [r7, #12]
 8009b84:	4613      	mov	r3, r2
 8009b86:	005b      	lsls	r3, r3, #1
 8009b88:	4413      	add	r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	4403      	add	r3, r0
 8009b8e:	3304      	adds	r3, #4
 8009b90:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 8009b98:	4922      	ldr	r1, [pc, #136]	; (8009c24 <inc_lock+0x168>)
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4613      	mov	r3, r2
 8009b9e:	005b      	lsls	r3, r3, #1
 8009ba0:	4413      	add	r3, r2
 8009ba2:	009b      	lsls	r3, r3, #2
 8009ba4:	440b      	add	r3, r1
 8009ba6:	3308      	adds	r3, #8
 8009ba8:	4602      	mov	r2, r0
 8009baa:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8009bac:	491d      	ldr	r1, [pc, #116]	; (8009c24 <inc_lock+0x168>)
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	4413      	add	r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	330a      	adds	r3, #10
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00c      	beq.n	8009be0 <inc_lock+0x124>
 8009bc6:	4917      	ldr	r1, [pc, #92]	; (8009c24 <inc_lock+0x168>)
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	005b      	lsls	r3, r3, #1
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	440b      	add	r3, r1
 8009bd4:	330a      	adds	r3, #10
 8009bd6:	881b      	ldrh	r3, [r3, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <inc_lock+0x124>
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e01c      	b.n	8009c1a <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d10b      	bne.n	8009bfe <inc_lock+0x142>
 8009be6:	490f      	ldr	r1, [pc, #60]	; (8009c24 <inc_lock+0x168>)
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4613      	mov	r3, r2
 8009bec:	005b      	lsls	r3, r3, #1
 8009bee:	4413      	add	r3, r2
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	440b      	add	r3, r1
 8009bf4:	330a      	adds	r3, #10
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	b299      	uxth	r1, r3
 8009bfc:	e001      	b.n	8009c02 <inc_lock+0x146>
 8009bfe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c02:	4808      	ldr	r0, [pc, #32]	; (8009c24 <inc_lock+0x168>)
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4613      	mov	r3, r2
 8009c08:	005b      	lsls	r3, r3, #1
 8009c0a:	4413      	add	r3, r2
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	4403      	add	r3, r0
 8009c10:	330a      	adds	r3, #10
 8009c12:	460a      	mov	r2, r1
 8009c14:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3714      	adds	r7, #20
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bc80      	pop	{r7}
 8009c22:	4770      	bx	lr
 8009c24:	20001c2c 	.word	0x20001c2c

08009c28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	3b01      	subs	r3, #1
 8009c34:	607b      	str	r3, [r7, #4]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d82e      	bhi.n	8009c9a <dec_lock+0x72>
		n = Files[i].ctr;
 8009c3c:	491b      	ldr	r1, [pc, #108]	; (8009cac <dec_lock+0x84>)
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	005b      	lsls	r3, r3, #1
 8009c44:	4413      	add	r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	330a      	adds	r3, #10
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c50:	89fb      	ldrh	r3, [r7, #14]
 8009c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c56:	d101      	bne.n	8009c5c <dec_lock+0x34>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8009c5c:	89fb      	ldrh	r3, [r7, #14]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <dec_lock+0x40>
 8009c62:	89fb      	ldrh	r3, [r7, #14]
 8009c64:	3b01      	subs	r3, #1
 8009c66:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c68:	4910      	ldr	r1, [pc, #64]	; (8009cac <dec_lock+0x84>)
 8009c6a:	687a      	ldr	r2, [r7, #4]
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	005b      	lsls	r3, r3, #1
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	440b      	add	r3, r1
 8009c76:	330a      	adds	r3, #10
 8009c78:	89fa      	ldrh	r2, [r7, #14]
 8009c7a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c7c:	89fb      	ldrh	r3, [r7, #14]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d108      	bne.n	8009c94 <dec_lock+0x6c>
 8009c82:	490a      	ldr	r1, [pc, #40]	; (8009cac <dec_lock+0x84>)
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	4613      	mov	r3, r2
 8009c88:	005b      	lsls	r3, r3, #1
 8009c8a:	4413      	add	r3, r2
 8009c8c:	009b      	lsls	r3, r3, #2
 8009c8e:	440b      	add	r3, r1
 8009c90:	2200      	movs	r2, #0
 8009c92:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	737b      	strb	r3, [r7, #13]
 8009c98:	e001      	b.n	8009c9e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c9e:	7b7b      	ldrb	r3, [r7, #13]
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bc80      	pop	{r7}
 8009ca8:	4770      	bx	lr
 8009caa:	bf00      	nop
 8009cac:	20001c2c 	.word	0x20001c2c

08009cb0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b085      	sub	sp, #20
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009cb8:	2300      	movs	r3, #0
 8009cba:	60fb      	str	r3, [r7, #12]
 8009cbc:	e016      	b.n	8009cec <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009cbe:	4910      	ldr	r1, [pc, #64]	; (8009d00 <clear_lock+0x50>)
 8009cc0:	68fa      	ldr	r2, [r7, #12]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	005b      	lsls	r3, r3, #1
 8009cc6:	4413      	add	r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d108      	bne.n	8009ce6 <clear_lock+0x36>
 8009cd4:	490a      	ldr	r1, [pc, #40]	; (8009d00 <clear_lock+0x50>)
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	005b      	lsls	r3, r3, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	440b      	add	r3, r1
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	60fb      	str	r3, [r7, #12]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b01      	cmp	r3, #1
 8009cf0:	d9e5      	bls.n	8009cbe <clear_lock+0xe>
	}
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bc80      	pop	{r7}
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20001c2c 	.word	0x20001c2c

08009d04 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b086      	sub	sp, #24
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d038      	beq.n	8009d8c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009d20:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d28:	6879      	ldr	r1, [r7, #4]
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	697a      	ldr	r2, [r7, #20]
 8009d2e:	f7ff fd7f 	bl	8009830 <disk_write>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d002      	beq.n	8009d3e <sync_window+0x3a>
			res = FR_DISK_ERR;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	73fb      	strb	r3, [r7, #15]
 8009d3c:	e026      	b.n	8009d8c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2200      	movs	r2, #0
 8009d42:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d218      	bcs.n	8009d8c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009d60:	613b      	str	r3, [r7, #16]
 8009d62:	e010      	b.n	8009d86 <sync_window+0x82>
					wsect += fs->fsize;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009d6a:	697a      	ldr	r2, [r7, #20]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009d76:	6879      	ldr	r1, [r7, #4]
 8009d78:	2301      	movs	r3, #1
 8009d7a:	697a      	ldr	r2, [r7, #20]
 8009d7c:	f7ff fd58 	bl	8009830 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	613b      	str	r3, [r7, #16]
 8009d86:	693b      	ldr	r3, [r7, #16]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d8eb      	bhi.n	8009d64 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d01b      	beq.n	8009de8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7ff ffa7 	bl	8009d04 <sync_window>
 8009db6:	4603      	mov	r3, r0
 8009db8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d113      	bne.n	8009de8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009dc6:	6879      	ldr	r1, [r7, #4]
 8009dc8:	2301      	movs	r3, #1
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	f7ff fd10 	bl	80097f0 <disk_read>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009dda:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	683a      	ldr	r2, [r7, #0]
 8009de4:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}

08009df2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f7ff ff82 	bl	8009d04 <sync_window>
 8009e00:	4603      	mov	r3, r0
 8009e02:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009e04:	7bfb      	ldrb	r3, [r7, #15]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	f040 809b 	bne.w	8009f42 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009e12:	2b03      	cmp	r3, #3
 8009e14:	f040 8088 	bne.w	8009f28 <sync_fs+0x136>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	f040 8082 	bne.w	8009f28 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e2a:	2100      	movs	r1, #0
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	f7ff fd5b 	bl	80098e8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2255      	movs	r2, #85	; 0x55
 8009e36:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	22aa      	movs	r2, #170	; 0xaa
 8009e3e:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2252      	movs	r2, #82	; 0x52
 8009e46:	701a      	strb	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2252      	movs	r2, #82	; 0x52
 8009e4c:	705a      	strb	r2, [r3, #1]
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	2261      	movs	r2, #97	; 0x61
 8009e52:	709a      	strb	r2, [r3, #2]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2241      	movs	r2, #65	; 0x41
 8009e58:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2272      	movs	r2, #114	; 0x72
 8009e5e:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2272      	movs	r2, #114	; 0x72
 8009e66:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2241      	movs	r2, #65	; 0x41
 8009e6e:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2261      	movs	r2, #97	; 0x61
 8009e76:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	0a1b      	lsrs	r3, r3, #8
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	b2da      	uxtb	r2, r3
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009ea2:	0c1b      	lsrs	r3, r3, #16
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009eb2:	0e1b      	lsrs	r3, r3, #24
 8009eb4:	b2da      	uxtb	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ec2:	b2da      	uxtb	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ed0:	b29b      	uxth	r3, r3
 8009ed2:	0a1b      	lsrs	r3, r3, #8
 8009ed4:	b29b      	uxth	r3, r3
 8009ed6:	b2da      	uxtb	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ee4:	0c1b      	lsrs	r3, r3, #16
 8009ee6:	b2da      	uxtb	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009ef4:	0e1b      	lsrs	r3, r3, #24
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	f7ff fc88 	bl	8009830 <disk_write>
			fs->fsi_flag = 0;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f2e:	2200      	movs	r2, #0
 8009f30:	2100      	movs	r1, #0
 8009f32:	4618      	mov	r0, r3
 8009f34:	f7ff fc9c 	bl	8009870 <disk_ioctl>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3710      	adds	r7, #16
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	3b02      	subs	r3, #2
 8009f5a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f62:	3b02      	subs	r3, #2
 8009f64:	683a      	ldr	r2, [r7, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d301      	bcc.n	8009f6e <clust2sect+0x22>
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e00a      	b.n	8009f84 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009f74:	461a      	mov	r2, r3
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	fb03 f202 	mul.w	r2, r3, r2
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8009f82:	4413      	add	r3, r2
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bc80      	pop	{r7}
 8009f8c:	4770      	bx	lr

08009f8e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8009f8e:	b580      	push	{r7, lr}
 8009f90:	b086      	sub	sp, #24
 8009f92:	af00      	add	r7, sp, #0
 8009f94:	6078      	str	r0, [r7, #4]
 8009f96:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d905      	bls.n	8009faa <get_fat+0x1c>
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fa4:	683a      	ldr	r2, [r7, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d302      	bcc.n	8009fb0 <get_fat+0x22>
		val = 1;	/* Internal error */
 8009faa:	2301      	movs	r3, #1
 8009fac:	617b      	str	r3, [r7, #20]
 8009fae:	e0a3      	b.n	800a0f8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8009fb4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009fbc:	2b03      	cmp	r3, #3
 8009fbe:	d068      	beq.n	800a092 <get_fat+0x104>
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	f300 808f 	bgt.w	800a0e4 <get_fat+0x156>
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d002      	beq.n	8009fd0 <get_fat+0x42>
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d040      	beq.n	800a050 <get_fat+0xc2>
 8009fce:	e089      	b.n	800a0e4 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	60fb      	str	r3, [r7, #12]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	085b      	lsrs	r3, r3, #1
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	4413      	add	r3, r2
 8009fdc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	0a5b      	lsrs	r3, r3, #9
 8009fe8:	4413      	add	r3, r2
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fed2 	bl	8009d96 <move_window>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d178      	bne.n	800a0ea <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	1c5a      	adds	r2, r3, #1
 8009ffc:	60fa      	str	r2, [r7, #12]
 8009ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a002:	687a      	ldr	r2, [r7, #4]
 800a004:	5cd3      	ldrb	r3, [r2, r3]
 800a006:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	0a5b      	lsrs	r3, r3, #9
 800a012:	4413      	add	r3, r2
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff febd 	bl	8009d96 <move_window>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d165      	bne.n	800a0ee <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	5cd3      	ldrb	r3, [r2, r3]
 800a02c:	021b      	lsls	r3, r3, #8
 800a02e:	461a      	mov	r2, r3
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	4313      	orrs	r3, r2
 800a034:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <get_fat+0xb8>
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	091b      	lsrs	r3, r3, #4
 800a044:	e002      	b.n	800a04c <get_fat+0xbe>
 800a046:	68bb      	ldr	r3, [r7, #8]
 800a048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a04c:	617b      	str	r3, [r7, #20]
			break;
 800a04e:	e053      	b.n	800a0f8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	0a1b      	lsrs	r3, r3, #8
 800a05a:	4413      	add	r3, r2
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f7ff fe99 	bl	8009d96 <move_window>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d143      	bne.n	800a0f2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	005b      	lsls	r3, r3, #1
 800a06e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a072:	687a      	ldr	r2, [r7, #4]
 800a074:	4413      	add	r3, r2
 800a076:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	3301      	adds	r3, #1
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	b21a      	sxth	r2, r3
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b21b      	sxth	r3, r3
 800a088:	4313      	orrs	r3, r2
 800a08a:	b21b      	sxth	r3, r3
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	617b      	str	r3, [r7, #20]
			break;
 800a090:	e032      	b.n	800a0f8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	09db      	lsrs	r3, r3, #7
 800a09c:	4413      	add	r3, r2
 800a09e:	4619      	mov	r1, r3
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f7ff fe78 	bl	8009d96 <move_window>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d124      	bne.n	800a0f6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	061a      	lsls	r2, r3, #24
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	3302      	adds	r3, #2
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	041b      	lsls	r3, r3, #16
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	693a      	ldr	r2, [r7, #16]
 800a0ce:	3201      	adds	r2, #1
 800a0d0:	7812      	ldrb	r2, [r2, #0]
 800a0d2:	0212      	lsls	r2, r2, #8
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	7812      	ldrb	r2, [r2, #0]
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a0e0:	617b      	str	r3, [r7, #20]
			break;
 800a0e2:	e009      	b.n	800a0f8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	e006      	b.n	800a0f8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ea:	bf00      	nop
 800a0ec:	e004      	b.n	800a0f8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a0ee:	bf00      	nop
 800a0f0:	e002      	b.n	800a0f8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a0f2:	bf00      	nop
 800a0f4:	e000      	b.n	800a0f8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a0f6:	bf00      	nop
		}
	}

	return val;
 800a0f8:	697b      	ldr	r3, [r7, #20]
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3718      	adds	r7, #24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af00      	add	r7, sp, #0
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b01      	cmp	r3, #1
 800a112:	d905      	bls.n	800a120 <put_fat+0x1e>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d302      	bcc.n	800a126 <put_fat+0x24>
		res = FR_INT_ERR;
 800a120:	2302      	movs	r3, #2
 800a122:	77fb      	strb	r3, [r7, #31]
 800a124:	e0f6      	b.n	800a314 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a12c:	2b03      	cmp	r3, #3
 800a12e:	f000 809e 	beq.w	800a26e <put_fat+0x16c>
 800a132:	2b03      	cmp	r3, #3
 800a134:	f300 80e4 	bgt.w	800a300 <put_fat+0x1fe>
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d002      	beq.n	800a142 <put_fat+0x40>
 800a13c:	2b02      	cmp	r3, #2
 800a13e:	d06f      	beq.n	800a220 <put_fat+0x11e>
 800a140:	e0de      	b.n	800a300 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	085b      	lsrs	r3, r3, #1
 800a14a:	697a      	ldr	r2, [r7, #20]
 800a14c:	4413      	add	r3, r2
 800a14e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	0a5b      	lsrs	r3, r3, #9
 800a15a:	4413      	add	r3, r2
 800a15c:	4619      	mov	r1, r3
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f7ff fe19 	bl	8009d96 <move_window>
 800a164:	4603      	mov	r3, r0
 800a166:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a168:	7ffb      	ldrb	r3, [r7, #31]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 80cb 	bne.w	800a306 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 800a170:	697b      	ldr	r3, [r7, #20]
 800a172:	1c5a      	adds	r2, r3, #1
 800a174:	617a      	str	r2, [r7, #20]
 800a176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a17a:	68fa      	ldr	r2, [r7, #12]
 800a17c:	4413      	add	r3, r2
 800a17e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00d      	beq.n	800a1a6 <put_fat+0xa4>
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	781b      	ldrb	r3, [r3, #0]
 800a18e:	b25b      	sxtb	r3, r3
 800a190:	f003 030f 	and.w	r3, r3, #15
 800a194:	b25a      	sxtb	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	b2db      	uxtb	r3, r3
 800a19a:	011b      	lsls	r3, r3, #4
 800a19c:	b25b      	sxtb	r3, r3
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	b25b      	sxtb	r3, r3
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	e001      	b.n	800a1aa <put_fat+0xa8>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	69ba      	ldr	r2, [r7, #24]
 800a1ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	2201      	movs	r2, #1
 800a1b2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	0a5b      	lsrs	r3, r3, #9
 800a1c0:	4413      	add	r3, r2
 800a1c2:	4619      	mov	r1, r3
 800a1c4:	68f8      	ldr	r0, [r7, #12]
 800a1c6:	f7ff fde6 	bl	8009d96 <move_window>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a1ce:	7ffb      	ldrb	r3, [r7, #31]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f040 809a 	bne.w	800a30a <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a1dc:	68fa      	ldr	r2, [r7, #12]
 800a1de:	4413      	add	r3, r2
 800a1e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f003 0301 	and.w	r3, r3, #1
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d003      	beq.n	800a1f4 <put_fat+0xf2>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	091b      	lsrs	r3, r3, #4
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	e00e      	b.n	800a212 <put_fat+0x110>
 800a1f4:	69bb      	ldr	r3, [r7, #24]
 800a1f6:	781b      	ldrb	r3, [r3, #0]
 800a1f8:	b25b      	sxtb	r3, r3
 800a1fa:	f023 030f 	bic.w	r3, r3, #15
 800a1fe:	b25a      	sxtb	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	0a1b      	lsrs	r3, r3, #8
 800a204:	b25b      	sxtb	r3, r3
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	b25b      	sxtb	r3, r3
 800a20c:	4313      	orrs	r3, r2
 800a20e:	b25b      	sxtb	r3, r3
 800a210:	b2db      	uxtb	r3, r3
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a21e:	e079      	b.n	800a314 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	0a1b      	lsrs	r3, r3, #8
 800a22a:	4413      	add	r3, r2
 800a22c:	4619      	mov	r1, r3
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff fdb1 	bl	8009d96 <move_window>
 800a234:	4603      	mov	r3, r0
 800a236:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a238:	7ffb      	ldrb	r3, [r7, #31]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d167      	bne.n	800a30e <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	005b      	lsls	r3, r3, #1
 800a242:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	4413      	add	r3, r2
 800a24a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	b2da      	uxtb	r2, r3
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	701a      	strb	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	b29b      	uxth	r3, r3
 800a258:	0a1b      	lsrs	r3, r3, #8
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	69bb      	ldr	r3, [r7, #24]
 800a25e:	3301      	adds	r3, #1
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a26c:	e052      	b.n	800a314 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	09db      	lsrs	r3, r3, #7
 800a278:	4413      	add	r3, r2
 800a27a:	4619      	mov	r1, r3
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f7ff fd8a 	bl	8009d96 <move_window>
 800a282:	4603      	mov	r3, r0
 800a284:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a286:	7ffb      	ldrb	r3, [r7, #31]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d142      	bne.n	800a312 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	009b      	lsls	r3, r3, #2
 800a290:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4413      	add	r3, r2
 800a298:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800a29a:	69bb      	ldr	r3, [r7, #24]
 800a29c:	3303      	adds	r3, #3
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	061a      	lsls	r2, r3, #24
 800a2a2:	69bb      	ldr	r3, [r7, #24]
 800a2a4:	3302      	adds	r3, #2
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	041b      	lsls	r3, r3, #16
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	69ba      	ldr	r2, [r7, #24]
 800a2ae:	3201      	adds	r2, #1
 800a2b0:	7812      	ldrb	r2, [r2, #0]
 800a2b2:	0212      	lsls	r2, r2, #8
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	7812      	ldrb	r2, [r2, #0]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	701a      	strb	r2, [r3, #0]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	b2d2      	uxtb	r2, r2
 800a2dc:	701a      	strb	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	0c1a      	lsrs	r2, r3, #16
 800a2e2:	69bb      	ldr	r3, [r7, #24]
 800a2e4:	3302      	adds	r3, #2
 800a2e6:	b2d2      	uxtb	r2, r2
 800a2e8:	701a      	strb	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	0e1a      	lsrs	r2, r3, #24
 800a2ee:	69bb      	ldr	r3, [r7, #24]
 800a2f0:	3303      	adds	r3, #3
 800a2f2:	b2d2      	uxtb	r2, r2
 800a2f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 800a2fe:	e009      	b.n	800a314 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 800a300:	2302      	movs	r3, #2
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e006      	b.n	800a314 <put_fat+0x212>
			if (res != FR_OK) break;
 800a306:	bf00      	nop
 800a308:	e004      	b.n	800a314 <put_fat+0x212>
			if (res != FR_OK) break;
 800a30a:	bf00      	nop
 800a30c:	e002      	b.n	800a314 <put_fat+0x212>
			if (res != FR_OK) break;
 800a30e:	bf00      	nop
 800a310:	e000      	b.n	800a314 <put_fat+0x212>
			if (res != FR_OK) break;
 800a312:	bf00      	nop
		}
	}

	return res;
 800a314:	7ffb      	ldrb	r3, [r7, #31]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3720      	adds	r7, #32
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b084      	sub	sp, #16
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d905      	bls.n	800a33a <remove_chain+0x1c>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a334:	683a      	ldr	r2, [r7, #0]
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <remove_chain+0x22>
		res = FR_INT_ERR;
 800a33a:	2302      	movs	r3, #2
 800a33c:	73fb      	strb	r3, [r7, #15]
 800a33e:	e043      	b.n	800a3c8 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a344:	e036      	b.n	800a3b4 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800a346:	6839      	ldr	r1, [r7, #0]
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff fe20 	bl	8009f8e <get_fat>
 800a34e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d035      	beq.n	800a3c2 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	2b01      	cmp	r3, #1
 800a35a:	d102      	bne.n	800a362 <remove_chain+0x44>
 800a35c:	2302      	movs	r3, #2
 800a35e:	73fb      	strb	r3, [r7, #15]
 800a360:	e032      	b.n	800a3c8 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a368:	d102      	bne.n	800a370 <remove_chain+0x52>
 800a36a:	2301      	movs	r3, #1
 800a36c:	73fb      	strb	r3, [r7, #15]
 800a36e:	e02b      	b.n	800a3c8 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800a370:	2200      	movs	r2, #0
 800a372:	6839      	ldr	r1, [r7, #0]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7ff fec4 	bl	800a102 <put_fat>
 800a37a:	4603      	mov	r3, r0
 800a37c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d120      	bne.n	800a3c6 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a38a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a38e:	d00f      	beq.n	800a3b0 <remove_chain+0x92>
				fs->free_clust++;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a396:	1c5a      	adds	r2, r3, #1
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a3a4:	f043 0301 	orr.w	r3, r3, #1
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d3c2      	bcc.n	800a346 <remove_chain+0x28>
 800a3c0:	e002      	b.n	800a3c8 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 800a3c2:	bf00      	nop
 800a3c4:	e000      	b.n	800a3c8 <remove_chain+0xaa>
			if (res != FR_OK) break;
 800a3c6:	bf00      	nop
		}
	}

	return res;
 800a3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3710      	adds	r7, #16
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
 800a3da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d10f      	bne.n	800a402 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a3e8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d005      	beq.n	800a3fc <create_chain+0x2a>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a3f6:	693a      	ldr	r2, [r7, #16]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d31c      	bcc.n	800a436 <create_chain+0x64>
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	613b      	str	r3, [r7, #16]
 800a400:	e019      	b.n	800a436 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800a402:	6839      	ldr	r1, [r7, #0]
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff fdc2 	bl	8009f8e <get_fat>
 800a40a:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d801      	bhi.n	800a416 <create_chain+0x44>
 800a412:	2301      	movs	r3, #1
 800a414:	e076      	b.n	800a504 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a41c:	d101      	bne.n	800a422 <create_chain+0x50>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	e070      	b.n	800a504 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a428:	68ba      	ldr	r2, [r7, #8]
 800a42a:	429a      	cmp	r2, r3
 800a42c:	d201      	bcs.n	800a432 <create_chain+0x60>
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	e068      	b.n	800a504 <create_chain+0x132>
		scl = clst;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	3301      	adds	r3, #1
 800a43e:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d307      	bcc.n	800a45c <create_chain+0x8a>
			ncl = 2;
 800a44c:	2302      	movs	r3, #2
 800a44e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800a450:	697a      	ldr	r2, [r7, #20]
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	429a      	cmp	r2, r3
 800a456:	d901      	bls.n	800a45c <create_chain+0x8a>
 800a458:	2300      	movs	r3, #0
 800a45a:	e053      	b.n	800a504 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800a45c:	6979      	ldr	r1, [r7, #20]
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f7ff fd95 	bl	8009f8e <get_fat>
 800a464:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d00e      	beq.n	800a48a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a472:	d002      	beq.n	800a47a <create_chain+0xa8>
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	2b01      	cmp	r3, #1
 800a478:	d101      	bne.n	800a47e <create_chain+0xac>
			return cs;
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	e042      	b.n	800a504 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	693b      	ldr	r3, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d1d9      	bne.n	800a43a <create_chain+0x68>
 800a486:	2300      	movs	r3, #0
 800a488:	e03c      	b.n	800a504 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800a48a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800a48c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800a490:	6979      	ldr	r1, [r7, #20]
 800a492:	6878      	ldr	r0, [r7, #4]
 800a494:	f7ff fe35 	bl	800a102 <put_fat>
 800a498:	4603      	mov	r3, r0
 800a49a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d109      	bne.n	800a4b6 <create_chain+0xe4>
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d006      	beq.n	800a4b6 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	6839      	ldr	r1, [r7, #0]
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f7ff fe28 	bl	800a102 <put_fat>
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d11a      	bne.n	800a4f2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	697a      	ldr	r2, [r7, #20]
 800a4c0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ce:	d018      	beq.n	800a502 <create_chain+0x130>
			fs->free_clust--;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a4d6:	1e5a      	subs	r2, r3, #1
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 800a4e4:	f043 0301 	orr.w	r3, r3, #1
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 800a4f0:	e007      	b.n	800a502 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d102      	bne.n	800a4fe <create_chain+0x12c>
 800a4f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a4fc:	e000      	b.n	800a500 <create_chain+0x12e>
 800a4fe:	2301      	movs	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800a502:	697b      	ldr	r3, [r7, #20]
}
 800a504:	4618      	mov	r0, r3
 800a506:	3718      	adds	r7, #24
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a51c:	3304      	adds	r3, #4
 800a51e:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	0a5b      	lsrs	r3, r3, #9
 800a524:	687a      	ldr	r2, [r7, #4]
 800a526:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a52a:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a52e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a532:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	1d1a      	adds	r2, r3, #4
 800a538:	613a      	str	r2, [r7, #16]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d101      	bne.n	800a548 <clmt_clust+0x3c>
 800a544:	2300      	movs	r3, #0
 800a546:	e010      	b.n	800a56a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d307      	bcc.n	800a560 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800a550:	697a      	ldr	r2, [r7, #20]
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3304      	adds	r3, #4
 800a55c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a55e:	e7e9      	b.n	800a534 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800a560:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	681a      	ldr	r2, [r3, #0]
 800a566:	697b      	ldr	r3, [r7, #20]
 800a568:	4413      	add	r3, r2
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	bc80      	pop	{r7}
 800a572:	4770      	bx	lr

0800a574 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b086      	sub	sp, #24
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	b29a      	uxth	r2, r3
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a58e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	2b01      	cmp	r3, #1
 800a594:	d007      	beq.n	800a5a6 <dir_sdi+0x32>
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a59c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5a0:	697a      	ldr	r2, [r7, #20]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d301      	bcc.n	800a5aa <dir_sdi+0x36>
		return FR_INT_ERR;
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	e074      	b.n	800a694 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d10c      	bne.n	800a5ca <dir_sdi+0x56>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d105      	bne.n	800a5ca <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5c4:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a5c8:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d111      	bne.n	800a5f4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5d6:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a5da:	461a      	mov	r2, r3
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d301      	bcc.n	800a5e6 <dir_sdi+0x72>
			return FR_INT_ERR;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	e056      	b.n	800a694 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5ec:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	e032      	b.n	800a65a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5fa:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800a602:	e01e      	b.n	800a642 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a60a:	6979      	ldr	r1, [r7, #20]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fcbe 	bl	8009f8e <get_fat>
 800a612:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d101      	bne.n	800a620 <dir_sdi+0xac>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e039      	b.n	800a694 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	2b01      	cmp	r3, #1
 800a624:	d907      	bls.n	800a636 <dir_sdi+0xc2>
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a62c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	429a      	cmp	r2, r3
 800a634:	d301      	bcc.n	800a63a <dir_sdi+0xc6>
				return FR_INT_ERR;
 800a636:	2302      	movs	r3, #2
 800a638:	e02c      	b.n	800a694 <dir_sdi+0x120>
			idx -= ic;
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	1ad3      	subs	r3, r2, r3
 800a640:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800a642:	683a      	ldr	r2, [r7, #0]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	429a      	cmp	r2, r3
 800a648:	d2dc      	bcs.n	800a604 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a650:	6979      	ldr	r1, [r7, #20]
 800a652:	4618      	mov	r0, r3
 800a654:	f7ff fc7a 	bl	8009f4c <clust2sect>
 800a658:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	697a      	ldr	r2, [r7, #20]
 800a65e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d101      	bne.n	800a66c <dir_sdi+0xf8>
 800a668:	2302      	movs	r3, #2
 800a66a:	e013      	b.n	800a694 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	091a      	lsrs	r2, r3, #4
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	441a      	add	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a680:	461a      	mov	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	f003 030f 	and.w	r3, r3, #15
 800a688:	015b      	lsls	r3, r3, #5
 800a68a:	441a      	add	r2, r3
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3718      	adds	r7, #24
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a69c:	b590      	push	{r4, r7, lr}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d004      	beq.n	800a6c2 <dir_next+0x26>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d101      	bne.n	800a6c6 <dir_next+0x2a>
		return FR_NO_FILE;
 800a6c2:	2304      	movs	r3, #4
 800a6c4:	e0dd      	b.n	800a882 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f003 030f 	and.w	r3, r3, #15
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	f040 80c6 	bne.w	800a85e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a6d8:	1c5a      	adds	r2, r3, #1
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6f0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	f0c0 80b0 	bcc.w	800a85e <dir_next+0x1c2>
				return FR_NO_FILE;
 800a6fe:	2304      	movs	r3, #4
 800a700:	e0bf      	b.n	800a882 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	091b      	lsrs	r3, r3, #4
 800a706:	687a      	ldr	r2, [r7, #4]
 800a708:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a70c:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a710:	3a01      	subs	r2, #1
 800a712:	4013      	ands	r3, r2
 800a714:	2b00      	cmp	r3, #0
 800a716:	f040 80a2 	bne.w	800a85e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a726:	4619      	mov	r1, r3
 800a728:	4610      	mov	r0, r2
 800a72a:	f7ff fc30 	bl	8009f8e <get_fat>
 800a72e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800a730:	697b      	ldr	r3, [r7, #20]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d801      	bhi.n	800a73a <dir_next+0x9e>
 800a736:	2302      	movs	r3, #2
 800a738:	e0a3      	b.n	800a882 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a740:	d101      	bne.n	800a746 <dir_next+0xaa>
 800a742:	2301      	movs	r3, #1
 800a744:	e09d      	b.n	800a882 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a74c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a750:	697a      	ldr	r2, [r7, #20]
 800a752:	429a      	cmp	r2, r3
 800a754:	d374      	bcc.n	800a840 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d101      	bne.n	800a760 <dir_next+0xc4>
 800a75c:	2304      	movs	r3, #4
 800a75e:	e090      	b.n	800a882 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a76c:	4619      	mov	r1, r3
 800a76e:	4610      	mov	r0, r2
 800a770:	f7ff fe2f 	bl	800a3d2 <create_chain>
 800a774:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a776:	697b      	ldr	r3, [r7, #20]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d101      	bne.n	800a780 <dir_next+0xe4>
 800a77c:	2307      	movs	r3, #7
 800a77e:	e080      	b.n	800a882 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800a780:	697b      	ldr	r3, [r7, #20]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d101      	bne.n	800a78a <dir_next+0xee>
 800a786:	2302      	movs	r3, #2
 800a788:	e07b      	b.n	800a882 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d101      	bne.n	800a796 <dir_next+0xfa>
 800a792:	2301      	movs	r3, #1
 800a794:	e075      	b.n	800a882 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7ff fab1 	bl	8009d04 <sync_window>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <dir_next+0x110>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e06a      	b.n	800a882 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f7ff f895 	bl	80098e8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 800a7ca:	6979      	ldr	r1, [r7, #20]
 800a7cc:	4610      	mov	r0, r2
 800a7ce:	f7ff fbbd 	bl	8009f4c <clust2sect>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a7d8:	2300      	movs	r3, #0
 800a7da:	613b      	str	r3, [r7, #16]
 800a7dc:	e01b      	b.n	800a816 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	f7ff fa87 	bl	8009d04 <sync_window>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <dir_next+0x164>
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e040      	b.n	800a882 <dir_next+0x1e6>
						dp->fs->winsect++;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a806:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a80a:	3201      	adds	r2, #1
 800a80c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	3301      	adds	r3, #1
 800a814:	613b      	str	r3, [r7, #16]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a81c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a820:	461a      	mov	r2, r3
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	4293      	cmp	r3, r2
 800a826:	d3da      	bcc.n	800a7de <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a82e:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	1a8a      	subs	r2, r1, r2
 800a83c:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	697a      	ldr	r2, [r7, #20]
 800a844:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a84e:	6979      	ldr	r1, [r7, #20]
 800a850:	4618      	mov	r0, r3
 800a852:	f7ff fb7b 	bl	8009f4c <clust2sect>
 800a856:	4602      	mov	r2, r0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a86e:	461a      	mov	r2, r3
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f003 030f 	and.w	r3, r3, #15
 800a876:	015b      	lsls	r3, r3, #5
 800a878:	441a      	add	r2, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800a880:	2300      	movs	r3, #0
}
 800a882:	4618      	mov	r0, r3
 800a884:	371c      	adds	r7, #28
 800a886:	46bd      	mov	sp, r7
 800a888:	bd90      	pop	{r4, r7, pc}

0800a88a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 800a894:	2100      	movs	r1, #0
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f7ff fe6c 	bl	800a574 <dir_sdi>
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a8a0:	7bfb      	ldrb	r3, [r7, #15]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d131      	bne.n	800a90a <dir_alloc+0x80>
		n = 0;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	4610      	mov	r0, r2
 800a8ba:	f7ff fa6c 	bl	8009d96 <move_window>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800a8c2:	7bfb      	ldrb	r3, [r7, #15]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d11f      	bne.n	800a908 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8ce:	781b      	ldrb	r3, [r3, #0]
 800a8d0:	2be5      	cmp	r3, #229	; 0xe5
 800a8d2:	d005      	beq.n	800a8e0 <dir_alloc+0x56>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d107      	bne.n	800a8f0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	60bb      	str	r3, [r7, #8]
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d102      	bne.n	800a8f4 <dir_alloc+0x6a>
 800a8ee:	e00c      	b.n	800a90a <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 800a8f4:	2101      	movs	r1, #1
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f7ff fed0 	bl	800a69c <dir_next>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800a900:	7bfb      	ldrb	r3, [r7, #15]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0d1      	beq.n	800a8aa <dir_alloc+0x20>
 800a906:	e000      	b.n	800a90a <dir_alloc+0x80>
			if (res != FR_OK) break;
 800a908:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
 800a90c:	2b04      	cmp	r3, #4
 800a90e:	d101      	bne.n	800a914 <dir_alloc+0x8a>
 800a910:	2307      	movs	r3, #7
 800a912:	73fb      	strb	r3, [r7, #15]
	return res;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800a91e:	b480      	push	{r7}
 800a920:	b085      	sub	sp, #20
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
 800a926:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	331b      	adds	r3, #27
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	b21a      	sxth	r2, r3
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	331a      	adds	r3, #26
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b21b      	sxth	r3, r3
 800a93a:	4313      	orrs	r3, r2
 800a93c:	b21b      	sxth	r3, r3
 800a93e:	b29b      	uxth	r3, r3
 800a940:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a948:	2b03      	cmp	r3, #3
 800a94a:	d10f      	bne.n	800a96c <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	3315      	adds	r3, #21
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	021b      	lsls	r3, r3, #8
 800a954:	b21a      	sxth	r2, r3
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	3314      	adds	r3, #20
 800a95a:	781b      	ldrb	r3, [r3, #0]
 800a95c:	b21b      	sxth	r3, r3
 800a95e:	4313      	orrs	r3, r2
 800a960:	b21b      	sxth	r3, r3
 800a962:	b29b      	uxth	r3, r3
 800a964:	041b      	lsls	r3, r3, #16
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	4313      	orrs	r3, r2
 800a96a:	60fb      	str	r3, [r7, #12]

	return cl;
 800a96c:	68fb      	ldr	r3, [r7, #12]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	bc80      	pop	{r7}
 800a976:	4770      	bx	lr

0800a978 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800a978:	b480      	push	{r7}
 800a97a:	b083      	sub	sp, #12
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
 800a980:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	331a      	adds	r3, #26
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	b2d2      	uxtb	r2, r2
 800a98a:	701a      	strb	r2, [r3, #0]
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	0a1b      	lsrs	r3, r3, #8
 800a992:	b29a      	uxth	r2, r3
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	331b      	adds	r3, #27
 800a998:	b2d2      	uxtb	r2, r2
 800a99a:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	0c1a      	lsrs	r2, r3, #16
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3314      	adds	r3, #20
 800a9a4:	b2d2      	uxtb	r2, r2
 800a9a6:	701a      	strb	r2, [r3, #0]
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	0c1b      	lsrs	r3, r3, #16
 800a9ac:	b29b      	uxth	r3, r3
 800a9ae:	0a1b      	lsrs	r3, r3, #8
 800a9b0:	b29a      	uxth	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	3315      	adds	r3, #21
 800a9b6:	b2d2      	uxtb	r2, r2
 800a9b8:	701a      	strb	r2, [r3, #0]
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bc80      	pop	{r7}
 800a9c2:	4770      	bx	lr

0800a9c4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b086      	sub	sp, #24
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f7ff fdd0 	bl	800a574 <dir_sdi>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800a9d8:	7dfb      	ldrb	r3, [r7, #23]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d001      	beq.n	800a9e2 <dir_find+0x1e>
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
 800a9e0:	e03b      	b.n	800aa5a <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7ff f9d0 	bl	8009d96 <move_window>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d128      	bne.n	800aa52 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aa06:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800aa0e:	7bfb      	ldrb	r3, [r7, #15]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d102      	bne.n	800aa1a <dir_find+0x56>
 800aa14:	2304      	movs	r3, #4
 800aa16:	75fb      	strb	r3, [r7, #23]
 800aa18:	e01e      	b.n	800aa58 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	330b      	adds	r3, #11
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	f003 0308 	and.w	r3, r3, #8
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d10a      	bne.n	800aa3e <dir_find+0x7a>
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aa2e:	220b      	movs	r2, #11
 800aa30:	4619      	mov	r1, r3
 800aa32:	6938      	ldr	r0, [r7, #16]
 800aa34:	f7fe ff72 	bl	800991c <mem_cmp>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00b      	beq.n	800aa56 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800aa3e:	2100      	movs	r1, #0
 800aa40:	6878      	ldr	r0, [r7, #4]
 800aa42:	f7ff fe2b 	bl	800a69c <dir_next>
 800aa46:	4603      	mov	r3, r0
 800aa48:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800aa4a:	7dfb      	ldrb	r3, [r7, #23]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d0c8      	beq.n	800a9e2 <dir_find+0x1e>
 800aa50:	e002      	b.n	800aa58 <dir_find+0x94>
		if (res != FR_OK) break;
 800aa52:	bf00      	nop
 800aa54:	e000      	b.n	800aa58 <dir_find+0x94>
			break;
 800aa56:	bf00      	nop

	return res;
 800aa58:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3718      	adds	r7, #24
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	bd80      	pop	{r7, pc}

0800aa62 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800aa62:	b580      	push	{r7, lr}
 800aa64:	b084      	sub	sp, #16
 800aa66:	af00      	add	r7, sp, #0
 800aa68:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800aa6a:	2101      	movs	r1, #1
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff ff0c 	bl	800a88a <dir_alloc>
 800aa72:	4603      	mov	r3, r0
 800aa74:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d126      	bne.n	800aaca <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa88:	4619      	mov	r1, r3
 800aa8a:	4610      	mov	r0, r2
 800aa8c:	f7ff f983 	bl	8009d96 <move_window>
 800aa90:	4603      	mov	r3, r0
 800aa92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800aa94:	7bfb      	ldrb	r3, [r7, #15]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d117      	bne.n	800aaca <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	f7fe ff1f 	bl	80098e8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800aab6:	220b      	movs	r2, #11
 800aab8:	4619      	mov	r1, r3
 800aaba:	f7fe fef7 	bl	80098ac <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aac4:	2201      	movs	r2, #1
 800aac6:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 800aaca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b088      	sub	sp, #32
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e002      	b.n	800aaec <create_name+0x18>
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	3301      	adds	r3, #1
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	2b2f      	cmp	r3, #47	; 0x2f
 800aaf2:	d0f8      	beq.n	800aae6 <create_name+0x12>
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b5c      	cmp	r3, #92	; 0x5c
 800aafa:	d0f4      	beq.n	800aae6 <create_name+0x12>
	sfn = dp->fn;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800ab02:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ab04:	220b      	movs	r2, #11
 800ab06:	2120      	movs	r1, #32
 800ab08:	68b8      	ldr	r0, [r7, #8]
 800ab0a:	f7fe feed 	bl	80098e8 <mem_set>
	si = i = b = 0; ni = 8;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	77bb      	strb	r3, [r7, #30]
 800ab12:	2300      	movs	r3, #0
 800ab14:	613b      	str	r3, [r7, #16]
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	2308      	movs	r3, #8
 800ab1c:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	617a      	str	r2, [r7, #20]
 800ab24:	68fa      	ldr	r2, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 800ab2c:	7ffb      	ldrb	r3, [r7, #31]
 800ab2e:	2b20      	cmp	r3, #32
 800ab30:	d950      	bls.n	800abd4 <create_name+0x100>
 800ab32:	7ffb      	ldrb	r3, [r7, #31]
 800ab34:	2b2f      	cmp	r3, #47	; 0x2f
 800ab36:	d04d      	beq.n	800abd4 <create_name+0x100>
 800ab38:	7ffb      	ldrb	r3, [r7, #31]
 800ab3a:	2b5c      	cmp	r3, #92	; 0x5c
 800ab3c:	d04a      	beq.n	800abd4 <create_name+0x100>
		if (c == '.' || i >= ni) {
 800ab3e:	7ffb      	ldrb	r3, [r7, #31]
 800ab40:	2b2e      	cmp	r3, #46	; 0x2e
 800ab42:	d003      	beq.n	800ab4c <create_name+0x78>
 800ab44:	693a      	ldr	r2, [r7, #16]
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d30f      	bcc.n	800ab6c <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	2b08      	cmp	r3, #8
 800ab50:	d102      	bne.n	800ab58 <create_name+0x84>
 800ab52:	7ffb      	ldrb	r3, [r7, #31]
 800ab54:	2b2e      	cmp	r3, #46	; 0x2e
 800ab56:	d001      	beq.n	800ab5c <create_name+0x88>
 800ab58:	2306      	movs	r3, #6
 800ab5a:	e070      	b.n	800ac3e <create_name+0x16a>
			i = 8; ni = 11;
 800ab5c:	2308      	movs	r3, #8
 800ab5e:	613b      	str	r3, [r7, #16]
 800ab60:	230b      	movs	r3, #11
 800ab62:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 800ab64:	7fbb      	ldrb	r3, [r7, #30]
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	77bb      	strb	r3, [r7, #30]
 800ab6a:	e032      	b.n	800abd2 <create_name+0xfe>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ab6c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	da05      	bge.n	800ab80 <create_name+0xac>
			b |= 3;						/* Eliminate NT flag */
 800ab74:	7fbb      	ldrb	r3, [r7, #30]
 800ab76:	f043 0303 	orr.w	r3, r3, #3
 800ab7a:	77bb      	strb	r3, [r7, #30]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
#else
#if !_DF1S
			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
 800ab7c:	2306      	movs	r3, #6
 800ab7e:	e05e      	b.n	800ac3e <create_name+0x16a>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800ab80:	7ffb      	ldrb	r3, [r7, #31]
 800ab82:	4619      	mov	r1, r3
 800ab84:	4830      	ldr	r0, [pc, #192]	; (800ac48 <create_name+0x174>)
 800ab86:	f7fe feef 	bl	8009968 <chk_chr>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <create_name+0xc0>
				return FR_INVALID_NAME;
 800ab90:	2306      	movs	r3, #6
 800ab92:	e054      	b.n	800ac3e <create_name+0x16a>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800ab94:	7ffb      	ldrb	r3, [r7, #31]
 800ab96:	2b40      	cmp	r3, #64	; 0x40
 800ab98:	d907      	bls.n	800abaa <create_name+0xd6>
 800ab9a:	7ffb      	ldrb	r3, [r7, #31]
 800ab9c:	2b5a      	cmp	r3, #90	; 0x5a
 800ab9e:	d804      	bhi.n	800abaa <create_name+0xd6>
				b |= 2;
 800aba0:	7fbb      	ldrb	r3, [r7, #30]
 800aba2:	f043 0302 	orr.w	r3, r3, #2
 800aba6:	77bb      	strb	r3, [r7, #30]
 800aba8:	e00c      	b.n	800abc4 <create_name+0xf0>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	2b60      	cmp	r3, #96	; 0x60
 800abae:	d909      	bls.n	800abc4 <create_name+0xf0>
 800abb0:	7ffb      	ldrb	r3, [r7, #31]
 800abb2:	2b7a      	cmp	r3, #122	; 0x7a
 800abb4:	d806      	bhi.n	800abc4 <create_name+0xf0>
					b |= 1; c -= 0x20;
 800abb6:	7fbb      	ldrb	r3, [r7, #30]
 800abb8:	f043 0301 	orr.w	r3, r3, #1
 800abbc:	77bb      	strb	r3, [r7, #30]
 800abbe:	7ffb      	ldrb	r3, [r7, #31]
 800abc0:	3b20      	subs	r3, #32
 800abc2:	77fb      	strb	r3, [r7, #31]
				}
			}
			sfn[i++] = c;
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	613a      	str	r2, [r7, #16]
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	4413      	add	r3, r2
 800abce:	7ffa      	ldrb	r2, [r7, #31]
 800abd0:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800abd2:	e7a4      	b.n	800ab1e <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	697b      	ldr	r3, [r7, #20]
 800abd8:	441a      	add	r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800abde:	7ffb      	ldrb	r3, [r7, #31]
 800abe0:	2b20      	cmp	r3, #32
 800abe2:	d801      	bhi.n	800abe8 <create_name+0x114>
 800abe4:	2304      	movs	r3, #4
 800abe6:	e000      	b.n	800abea <create_name+0x116>
 800abe8:	2300      	movs	r3, #0
 800abea:	77fb      	strb	r3, [r7, #31]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <create_name+0x122>
 800abf2:	2306      	movs	r3, #6
 800abf4:	e023      	b.n	800ac3e <create_name+0x16a>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2be5      	cmp	r3, #229	; 0xe5
 800abfc:	d102      	bne.n	800ac04 <create_name+0x130>
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2205      	movs	r2, #5
 800ac02:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	2b08      	cmp	r3, #8
 800ac08:	d102      	bne.n	800ac10 <create_name+0x13c>
 800ac0a:	7fbb      	ldrb	r3, [r7, #30]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 800ac10:	7fbb      	ldrb	r3, [r7, #30]
 800ac12:	f003 0303 	and.w	r3, r3, #3
 800ac16:	2b01      	cmp	r3, #1
 800ac18:	d103      	bne.n	800ac22 <create_name+0x14e>
 800ac1a:	7ffb      	ldrb	r3, [r7, #31]
 800ac1c:	f043 0310 	orr.w	r3, r3, #16
 800ac20:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 800ac22:	7fbb      	ldrb	r3, [r7, #30]
 800ac24:	f003 030c 	and.w	r3, r3, #12
 800ac28:	2b04      	cmp	r3, #4
 800ac2a:	d103      	bne.n	800ac34 <create_name+0x160>
 800ac2c:	7ffb      	ldrb	r3, [r7, #31]
 800ac2e:	f043 0308 	orr.w	r3, r3, #8
 800ac32:	77fb      	strb	r3, [r7, #31]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	330b      	adds	r3, #11
 800ac38:	7ffa      	ldrb	r2, [r7, #31]
 800ac3a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ac3c:	2300      	movs	r3, #0
#endif
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	0800cf60 	.word	0x0800cf60

0800ac4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	2b2f      	cmp	r3, #47	; 0x2f
 800ac5c:	d003      	beq.n	800ac66 <follow_path+0x1a>
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	2b5c      	cmp	r3, #92	; 0x5c
 800ac64:	d102      	bne.n	800ac6c <follow_path+0x20>
		path++;
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	2b1f      	cmp	r3, #31
 800ac7a:	d80a      	bhi.n	800ac92 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 800ac7c:	2100      	movs	r1, #0
 800ac7e:	6878      	ldr	r0, [r7, #4]
 800ac80:	f7ff fc78 	bl	800a574 <dir_sdi>
 800ac84:	4603      	mov	r3, r0
 800ac86:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800ac90:	e045      	b.n	800ad1e <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ac92:	463b      	mov	r3, r7
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ff1c 	bl	800aad4 <create_name>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d136      	bne.n	800ad14 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f7ff fe8c 	bl	800a9c4 <dir_find>
 800acac:	4603      	mov	r3, r0
 800acae:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800acb6:	7adb      	ldrb	r3, [r3, #11]
 800acb8:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800acba:	7bfb      	ldrb	r3, [r7, #15]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d00a      	beq.n	800acd6 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800acc0:	7bfb      	ldrb	r3, [r7, #15]
 800acc2:	2b04      	cmp	r3, #4
 800acc4:	d128      	bne.n	800ad18 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800acc6:	7bbb      	ldrb	r3, [r7, #14]
 800acc8:	f003 0304 	and.w	r3, r3, #4
 800accc:	2b00      	cmp	r3, #0
 800acce:	d123      	bne.n	800ad18 <follow_path+0xcc>
 800acd0:	2305      	movs	r3, #5
 800acd2:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 800acd4:	e020      	b.n	800ad18 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800acd6:	7bbb      	ldrb	r3, [r7, #14]
 800acd8:	f003 0304 	and.w	r3, r3, #4
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11d      	bne.n	800ad1c <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ace6:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	330b      	adds	r3, #11
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	f003 0310 	and.w	r3, r3, #16
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800acf6:	2305      	movs	r3, #5
 800acf8:	73fb      	strb	r3, [r7, #15]
 800acfa:	e010      	b.n	800ad1e <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ad02:	68b9      	ldr	r1, [r7, #8]
 800ad04:	4618      	mov	r0, r3
 800ad06:	f7ff fe0a 	bl	800a91e <ld_clust>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ad12:	e7be      	b.n	800ac92 <follow_path+0x46>
			if (res != FR_OK) break;
 800ad14:	bf00      	nop
 800ad16:	e002      	b.n	800ad1e <follow_path+0xd2>
				break;
 800ad18:	bf00      	nop
 800ad1a:	e000      	b.n	800ad1e <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ad1c:	bf00      	nop
		}
	}

	return res;
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b087      	sub	sp, #28
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ad30:	f04f 33ff 	mov.w	r3, #4294967295
 800ad34:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d031      	beq.n	800ada2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	617b      	str	r3, [r7, #20]
 800ad44:	e002      	b.n	800ad4c <get_ldnumber+0x24>
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	617b      	str	r3, [r7, #20]
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b20      	cmp	r3, #32
 800ad52:	d903      	bls.n	800ad5c <get_ldnumber+0x34>
 800ad54:	697b      	ldr	r3, [r7, #20]
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b3a      	cmp	r3, #58	; 0x3a
 800ad5a:	d1f4      	bne.n	800ad46 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	781b      	ldrb	r3, [r3, #0]
 800ad60:	2b3a      	cmp	r3, #58	; 0x3a
 800ad62:	d11c      	bne.n	800ad9e <get_ldnumber+0x76>
			tp = *path;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	1c5a      	adds	r2, r3, #1
 800ad6e:	60fa      	str	r2, [r7, #12]
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	3b30      	subs	r3, #48	; 0x30
 800ad74:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	2b09      	cmp	r3, #9
 800ad7a:	d80e      	bhi.n	800ad9a <get_ldnumber+0x72>
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d10a      	bne.n	800ad9a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d107      	bne.n	800ad9a <get_ldnumber+0x72>
					vol = (int)i;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ad8e:	697b      	ldr	r3, [r7, #20]
 800ad90:	3301      	adds	r3, #1
 800ad92:	617b      	str	r3, [r7, #20]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	697a      	ldr	r2, [r7, #20]
 800ad98:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	e002      	b.n	800ada4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ad9e:	2300      	movs	r3, #0
 800ada0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ada2:	693b      	ldr	r3, [r7, #16]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	371c      	adds	r7, #28
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bc80      	pop	{r7}
 800adac:	4770      	bx	lr
	...

0800adb0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	f04f 32ff 	mov.w	r2, #4294967295
 800adc8:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 800adcc:	6839      	ldr	r1, [r7, #0]
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f7fe ffe1 	bl	8009d96 <move_window>
 800add4:	4603      	mov	r3, r0
 800add6:	2b00      	cmp	r3, #0
 800add8:	d001      	beq.n	800adde <check_fs+0x2e>
		return 3;
 800adda:	2303      	movs	r3, #3
 800addc:	e04a      	b.n	800ae74 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ade4:	3301      	adds	r3, #1
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	021b      	lsls	r3, r3, #8
 800adea:	b21a      	sxth	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800adf2:	b21b      	sxth	r3, r3
 800adf4:	4313      	orrs	r3, r2
 800adf6:	b21b      	sxth	r3, r3
 800adf8:	4a20      	ldr	r2, [pc, #128]	; (800ae7c <check_fs+0xcc>)
 800adfa:	4293      	cmp	r3, r2
 800adfc:	d001      	beq.n	800ae02 <check_fs+0x52>
		return 2;
 800adfe:	2302      	movs	r3, #2
 800ae00:	e038      	b.n	800ae74 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	3336      	adds	r3, #54	; 0x36
 800ae06:	3303      	adds	r3, #3
 800ae08:	781b      	ldrb	r3, [r3, #0]
 800ae0a:	061a      	lsls	r2, r3, #24
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	3336      	adds	r3, #54	; 0x36
 800ae10:	3302      	adds	r3, #2
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	041b      	lsls	r3, r3, #16
 800ae16:	4313      	orrs	r3, r2
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	3236      	adds	r2, #54	; 0x36
 800ae1c:	3201      	adds	r2, #1
 800ae1e:	7812      	ldrb	r2, [r2, #0]
 800ae20:	0212      	lsls	r2, r2, #8
 800ae22:	4313      	orrs	r3, r2
 800ae24:	687a      	ldr	r2, [r7, #4]
 800ae26:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800ae2a:	4313      	orrs	r3, r2
 800ae2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae30:	4a13      	ldr	r2, [pc, #76]	; (800ae80 <check_fs+0xd0>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d101      	bne.n	800ae3a <check_fs+0x8a>
		return 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	e01c      	b.n	800ae74 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	3352      	adds	r3, #82	; 0x52
 800ae3e:	3303      	adds	r3, #3
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	061a      	lsls	r2, r3, #24
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3352      	adds	r3, #82	; 0x52
 800ae48:	3302      	adds	r3, #2
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	4313      	orrs	r3, r2
 800ae50:	687a      	ldr	r2, [r7, #4]
 800ae52:	3252      	adds	r2, #82	; 0x52
 800ae54:	3201      	adds	r2, #1
 800ae56:	7812      	ldrb	r2, [r2, #0]
 800ae58:	0212      	lsls	r2, r2, #8
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	687a      	ldr	r2, [r7, #4]
 800ae5e:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 800ae62:	4313      	orrs	r3, r2
 800ae64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ae68:	4a05      	ldr	r2, [pc, #20]	; (800ae80 <check_fs+0xd0>)
 800ae6a:	4293      	cmp	r3, r2
 800ae6c:	d101      	bne.n	800ae72 <check_fs+0xc2>
		return 0;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	e000      	b.n	800ae74 <check_fs+0xc4>

	return 1;
 800ae72:	2301      	movs	r3, #1
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	ffffaa55 	.word	0xffffaa55
 800ae80:	00544146 	.word	0x00544146

0800ae84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b096      	sub	sp, #88	; 0x58
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	60f8      	str	r0, [r7, #12]
 800ae8c:	60b9      	str	r1, [r7, #8]
 800ae8e:	4613      	mov	r3, r2
 800ae90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ae98:	68b8      	ldr	r0, [r7, #8]
 800ae9a:	f7ff ff45 	bl	800ad28 <get_ldnumber>
 800ae9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800aea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	da01      	bge.n	800aeaa <find_volume+0x26>
 800aea6:	230b      	movs	r3, #11
 800aea8:	e2a8      	b.n	800b3fc <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800aeaa:	4a9d      	ldr	r2, [pc, #628]	; (800b120 <find_volume+0x29c>)
 800aeac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aeae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800aeb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <find_volume+0x3a>
 800aeba:	230c      	movs	r3, #12
 800aebc:	e29e      	b.n	800b3fc <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aec2:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 800aec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aec6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01b      	beq.n	800af06 <find_volume+0x82>
		stat = disk_status(fs->drv);
 800aece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aed0:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800aed4:	4618      	mov	r0, r3
 800aed6:	f7fe fc4b 	bl	8009770 <disk_status>
 800aeda:	4603      	mov	r3, r0
 800aedc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800aee0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aee4:	f003 0301 	and.w	r3, r3, #1
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d10c      	bne.n	800af06 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 800aeec:	79fb      	ldrb	r3, [r7, #7]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d007      	beq.n	800af02 <find_volume+0x7e>
 800aef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aef6:	f003 0304 	and.w	r3, r3, #4
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d001      	beq.n	800af02 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 800aefe:	230a      	movs	r3, #10
 800af00:	e27c      	b.n	800b3fc <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 800af02:	2300      	movs	r3, #0
 800af04:	e27a      	b.n	800b3fc <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800af06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af08:	2200      	movs	r2, #0
 800af0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800af0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af10:	b2da      	uxtb	r2, r3
 800af12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800af18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af1a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800af1e:	4618      	mov	r0, r3
 800af20:	f7fe fc40 	bl	80097a4 <disk_initialize>
 800af24:	4603      	mov	r3, r0
 800af26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 800af2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af2e:	f003 0301 	and.w	r3, r3, #1
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800af36:	2303      	movs	r3, #3
 800af38:	e260      	b.n	800b3fc <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d007      	beq.n	800af50 <find_volume+0xcc>
 800af40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d001      	beq.n	800af50 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800af4c:	230a      	movs	r3, #10
 800af4e:	e255      	b.n	800b3fc <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800af54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800af56:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800af58:	f7ff ff2a 	bl	800adb0 <check_fs>
 800af5c:	4603      	mov	r3, r0
 800af5e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800af62:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800af66:	2b01      	cmp	r3, #1
 800af68:	d153      	bne.n	800b012 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800af6a:	2300      	movs	r3, #0
 800af6c:	643b      	str	r3, [r7, #64]	; 0x40
 800af6e:	e028      	b.n	800afc2 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 800af70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af74:	011b      	lsls	r3, r3, #4
 800af76:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800af7a:	4413      	add	r3, r2
 800af7c:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800af7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af80:	3304      	adds	r3, #4
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d012      	beq.n	800afae <find_volume+0x12a>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	330b      	adds	r3, #11
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	061a      	lsls	r2, r3, #24
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	330a      	adds	r3, #10
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	041b      	lsls	r3, r3, #16
 800af98:	4313      	orrs	r3, r2
 800af9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af9c:	3209      	adds	r2, #9
 800af9e:	7812      	ldrb	r2, [r2, #0]
 800afa0:	0212      	lsls	r2, r2, #8
 800afa2:	4313      	orrs	r3, r2
 800afa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800afa6:	3208      	adds	r2, #8
 800afa8:	7812      	ldrb	r2, [r2, #0]
 800afaa:	431a      	orrs	r2, r3
 800afac:	e000      	b.n	800afb0 <find_volume+0x12c>
 800afae:	2200      	movs	r2, #0
 800afb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	3358      	adds	r3, #88	; 0x58
 800afb6:	443b      	add	r3, r7
 800afb8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 800afbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afbe:	3301      	adds	r3, #1
 800afc0:	643b      	str	r3, [r7, #64]	; 0x40
 800afc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d9d3      	bls.n	800af70 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 800afc8:	2300      	movs	r3, #0
 800afca:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800afcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d002      	beq.n	800afd8 <find_volume+0x154>
 800afd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afd4:	3b01      	subs	r3, #1
 800afd6:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 800afd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	3358      	adds	r3, #88	; 0x58
 800afde:	443b      	add	r3, r7
 800afe0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800afe4:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 800afe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d005      	beq.n	800aff8 <find_volume+0x174>
 800afec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800afee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800aff0:	f7ff fede 	bl	800adb0 <check_fs>
 800aff4:	4603      	mov	r3, r0
 800aff6:	e000      	b.n	800affa <find_volume+0x176>
 800aff8:	2302      	movs	r3, #2
 800affa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 800affe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b002:	2b00      	cmp	r3, #0
 800b004:	d005      	beq.n	800b012 <find_volume+0x18e>
 800b006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b008:	3301      	adds	r3, #1
 800b00a:	643b      	str	r3, [r7, #64]	; 0x40
 800b00c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b00e:	2b03      	cmp	r3, #3
 800b010:	d9e2      	bls.n	800afd8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b012:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b016:	2b03      	cmp	r3, #3
 800b018:	d101      	bne.n	800b01e <find_volume+0x19a>
 800b01a:	2301      	movs	r3, #1
 800b01c:	e1ee      	b.n	800b3fc <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800b01e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b022:	2b00      	cmp	r3, #0
 800b024:	d001      	beq.n	800b02a <find_volume+0x1a6>
 800b026:	230d      	movs	r3, #13
 800b028:	e1e8      	b.n	800b3fc <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02c:	7b1b      	ldrb	r3, [r3, #12]
 800b02e:	021b      	lsls	r3, r3, #8
 800b030:	b21a      	sxth	r2, r3
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	7adb      	ldrb	r3, [r3, #11]
 800b036:	b21b      	sxth	r3, r3
 800b038:	4313      	orrs	r3, r2
 800b03a:	b21b      	sxth	r3, r3
 800b03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b040:	d001      	beq.n	800b046 <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 800b042:	230d      	movs	r3, #13
 800b044:	e1da      	b.n	800b3fc <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 800b046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b048:	7ddb      	ldrb	r3, [r3, #23]
 800b04a:	021b      	lsls	r3, r3, #8
 800b04c:	b21a      	sxth	r2, r3
 800b04e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b050:	7d9b      	ldrb	r3, [r3, #22]
 800b052:	b21b      	sxth	r3, r3
 800b054:	4313      	orrs	r3, r2
 800b056:	b21b      	sxth	r3, r3
 800b058:	b29b      	uxth	r3, r3
 800b05a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 800b05c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d112      	bne.n	800b088 <find_volume+0x204>
 800b062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b064:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800b068:	061a      	lsls	r2, r3, #24
 800b06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b06c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800b070:	041b      	lsls	r3, r3, #16
 800b072:	4313      	orrs	r3, r2
 800b074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b076:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 800b07a:	0212      	lsls	r2, r2, #8
 800b07c:	4313      	orrs	r3, r2
 800b07e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b080:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800b084:	4313      	orrs	r3, r2
 800b086:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b08c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	7c1a      	ldrb	r2, [r3, #16]
 800b094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b096:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800b09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b09c:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d006      	beq.n	800b0b2 <find_volume+0x22e>
 800b0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a6:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b0aa:	2b02      	cmp	r3, #2
 800b0ac:	d001      	beq.n	800b0b2 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 800b0ae:	230d      	movs	r3, #13
 800b0b0:	e1a4      	b.n	800b3fc <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 800b0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b4:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0bc:	fb02 f303 	mul.w	r3, r2, r3
 800b0c0:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 800b0c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c4:	7b5a      	ldrb	r2, [r3, #13]
 800b0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c8:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 800b0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ce:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d00a      	beq.n	800b0ec <find_volume+0x268>
 800b0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d8:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d001      	beq.n	800b0f0 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 800b0ec:	230d      	movs	r3, #13
 800b0ee:	e185      	b.n	800b3fc <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 800b0f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f2:	7c9b      	ldrb	r3, [r3, #18]
 800b0f4:	021b      	lsls	r3, r3, #8
 800b0f6:	b21a      	sxth	r2, r3
 800b0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0fa:	7c5b      	ldrb	r3, [r3, #17]
 800b0fc:	b21b      	sxth	r3, r3
 800b0fe:	4313      	orrs	r3, r2
 800b100:	b21b      	sxth	r3, r3
 800b102:	b29a      	uxth	r2, r3
 800b104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b106:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 800b10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10c:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b110:	f003 030f 	and.w	r3, r3, #15
 800b114:	b29b      	uxth	r3, r3
 800b116:	2b00      	cmp	r3, #0
 800b118:	d004      	beq.n	800b124 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 800b11a:	230d      	movs	r3, #13
 800b11c:	e16e      	b.n	800b3fc <find_volume+0x578>
 800b11e:	bf00      	nop
 800b120:	20001c24 	.word	0x20001c24

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 800b124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b126:	7d1b      	ldrb	r3, [r3, #20]
 800b128:	021b      	lsls	r3, r3, #8
 800b12a:	b21a      	sxth	r2, r3
 800b12c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b12e:	7cdb      	ldrb	r3, [r3, #19]
 800b130:	b21b      	sxth	r3, r3
 800b132:	4313      	orrs	r3, r2
 800b134:	b21b      	sxth	r3, r3
 800b136:	b29b      	uxth	r3, r3
 800b138:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 800b13a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d112      	bne.n	800b166 <find_volume+0x2e2>
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800b146:	061a      	lsls	r2, r3, #24
 800b148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b14a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800b14e:	041b      	lsls	r3, r3, #16
 800b150:	4313      	orrs	r3, r2
 800b152:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b154:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 800b158:	0212      	lsls	r2, r2, #8
 800b15a:	4313      	orrs	r3, r2
 800b15c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b15e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800b162:	4313      	orrs	r3, r2
 800b164:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 800b166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b168:	7bdb      	ldrb	r3, [r3, #15]
 800b16a:	021b      	lsls	r3, r3, #8
 800b16c:	b21a      	sxth	r2, r3
 800b16e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b170:	7b9b      	ldrb	r3, [r3, #14]
 800b172:	b21b      	sxth	r3, r3
 800b174:	4313      	orrs	r3, r2
 800b176:	b21b      	sxth	r3, r3
 800b178:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800b17a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <find_volume+0x300>
 800b180:	230d      	movs	r3, #13
 800b182:	e13b      	b.n	800b3fc <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 800b184:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b188:	4413      	add	r3, r2
 800b18a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b18c:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 800b190:	0912      	lsrs	r2, r2, #4
 800b192:	b292      	uxth	r2, r2
 800b194:	4413      	add	r3, r2
 800b196:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b198:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d201      	bcs.n	800b1a4 <find_volume+0x320>
 800b1a0:	230d      	movs	r3, #13
 800b1a2:	e12b      	b.n	800b3fc <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 800b1a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1a8:	1ad3      	subs	r3, r2, r3
 800b1aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1ac:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800b1b0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1b4:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d101      	bne.n	800b1c0 <find_volume+0x33c>
 800b1bc:	230d      	movs	r3, #13
 800b1be:	e11d      	b.n	800b3fc <find_volume+0x578>
	fmt = FS_FAT12;
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 800b1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d902      	bls.n	800b1d6 <find_volume+0x352>
 800b1d0:	2302      	movs	r3, #2
 800b1d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 800b1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b1dc:	4293      	cmp	r3, r2
 800b1de:	d902      	bls.n	800b1e6 <find_volume+0x362>
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e8:	1c9a      	adds	r2, r3, #2
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 800b1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1f4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 800b1f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1fc:	441a      	add	r2, r3
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 800b204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	441a      	add	r2, r3
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 800b210:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b214:	2b03      	cmp	r3, #3
 800b216:	d121      	bne.n	800b25c <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 800b218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b21a:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <find_volume+0x3a2>
 800b222:	230d      	movs	r3, #13
 800b224:	e0ea      	b.n	800b3fc <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 800b226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b228:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b22c:	061a      	lsls	r2, r3, #24
 800b22e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b230:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800b234:	041b      	lsls	r3, r3, #16
 800b236:	4313      	orrs	r3, r2
 800b238:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b23a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 800b23e:	0212      	lsls	r2, r2, #8
 800b240:	4313      	orrs	r3, r2
 800b242:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b244:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 800b248:	431a      	orrs	r2, r3
 800b24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b24c:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 800b250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b252:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	647b      	str	r3, [r7, #68]	; 0x44
 800b25a:	e025      	b.n	800b2a8 <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 800b262:	2b00      	cmp	r3, #0
 800b264:	d101      	bne.n	800b26a <find_volume+0x3e6>
 800b266:	230d      	movs	r3, #13
 800b268:	e0c8      	b.n	800b3fc <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800b270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b272:	441a      	add	r2, r3
 800b274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b276:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b27a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d104      	bne.n	800b28c <find_volume+0x408>
 800b282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b284:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	e00c      	b.n	800b2a6 <find_volume+0x422>
 800b28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b292:	4613      	mov	r3, r2
 800b294:	005b      	lsls	r3, r3, #1
 800b296:	4413      	add	r3, r2
 800b298:	085a      	lsrs	r2, r3, #1
 800b29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b29c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b2a0:	f003 0301 	and.w	r3, r3, #1
 800b2a4:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800b2a6:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800b2a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2aa:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800b2ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b2b4:	0a5b      	lsrs	r3, r3, #9
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d201      	bcs.n	800b2be <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 800b2ba:	230d      	movs	r3, #13
 800b2bc:	e09e      	b.n	800b3fc <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800b2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2c4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 800b2c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ca:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800b2ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	2280      	movs	r2, #128	; 0x80
 800b2d8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 800b2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e0:	2b03      	cmp	r3, #3
 800b2e2:	d177      	bne.n	800b3d4 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 800b2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2ea:	021b      	lsls	r3, r3, #8
 800b2ec:	b21a      	sxth	r2, r3
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2f4:	b21b      	sxth	r3, r3
 800b2f6:	4313      	orrs	r3, r2
 800b2f8:	b21b      	sxth	r3, r3
 800b2fa:	2b01      	cmp	r3, #1
 800b2fc:	d16a      	bne.n	800b3d4 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 800b2fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b300:	3301      	adds	r3, #1
 800b302:	4619      	mov	r1, r3
 800b304:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b306:	f7fe fd46 	bl	8009d96 <move_window>
 800b30a:	4603      	mov	r3, r0
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d161      	bne.n	800b3d4 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	2200      	movs	r2, #0
 800b314:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	b21a      	sxth	r2, r3
 800b322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b324:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 800b328:	b21b      	sxth	r3, r3
 800b32a:	4313      	orrs	r3, r2
 800b32c:	b21b      	sxth	r3, r3
 800b32e:	4a35      	ldr	r2, [pc, #212]	; (800b404 <find_volume+0x580>)
 800b330:	4293      	cmp	r3, r2
 800b332:	d14f      	bne.n	800b3d4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	78db      	ldrb	r3, [r3, #3]
 800b338:	061a      	lsls	r2, r3, #24
 800b33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b33c:	789b      	ldrb	r3, [r3, #2]
 800b33e:	041b      	lsls	r3, r3, #16
 800b340:	4313      	orrs	r3, r2
 800b342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b344:	7852      	ldrb	r2, [r2, #1]
 800b346:	0212      	lsls	r2, r2, #8
 800b348:	4313      	orrs	r3, r2
 800b34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b34c:	7812      	ldrb	r2, [r2, #0]
 800b34e:	4313      	orrs	r3, r2
 800b350:	4a2d      	ldr	r2, [pc, #180]	; (800b408 <find_volume+0x584>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d13e      	bne.n	800b3d4 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 800b356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b358:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 800b35c:	061a      	lsls	r2, r3, #24
 800b35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b360:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 800b364:	041b      	lsls	r3, r3, #16
 800b366:	4313      	orrs	r3, r2
 800b368:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b36a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 800b36e:	0212      	lsls	r2, r2, #8
 800b370:	4313      	orrs	r3, r2
 800b372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b374:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 800b378:	4313      	orrs	r3, r2
 800b37a:	4a24      	ldr	r2, [pc, #144]	; (800b40c <find_volume+0x588>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d129      	bne.n	800b3d4 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800b380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b382:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 800b386:	061a      	lsls	r2, r3, #24
 800b388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b38a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 800b38e:	041b      	lsls	r3, r3, #16
 800b390:	4313      	orrs	r3, r2
 800b392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b394:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 800b398:	0212      	lsls	r2, r2, #8
 800b39a:	4313      	orrs	r3, r2
 800b39c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b39e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 800b3a2:	431a      	orrs	r2, r3
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 800b3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ac:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 800b3b0:	061a      	lsls	r2, r3, #24
 800b3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b4:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 800b3b8:	041b      	lsls	r3, r3, #16
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3be:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 800b3c2:	0212      	lsls	r2, r2, #8
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3c8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 800b3cc:	431a      	orrs	r2, r3
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800b3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b3da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 800b3de:	4b0c      	ldr	r3, [pc, #48]	; (800b410 <find_volume+0x58c>)
 800b3e0:	881b      	ldrh	r3, [r3, #0]
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	b29a      	uxth	r2, r3
 800b3e6:	4b0a      	ldr	r3, [pc, #40]	; (800b410 <find_volume+0x58c>)
 800b3e8:	801a      	strh	r2, [r3, #0]
 800b3ea:	4b09      	ldr	r3, [pc, #36]	; (800b410 <find_volume+0x58c>)
 800b3ec:	881a      	ldrh	r2, [r3, #0]
 800b3ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3f0:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800b3f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3f6:	f7fe fc5b 	bl	8009cb0 <clear_lock>
#endif

	return FR_OK;
 800b3fa:	2300      	movs	r3, #0
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3758      	adds	r7, #88	; 0x58
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	ffffaa55 	.word	0xffffaa55
 800b408:	41615252 	.word	0x41615252
 800b40c:	61417272 	.word	0x61417272
 800b410:	20001c28 	.word	0x20001c28

0800b414 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b084      	sub	sp, #16
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d022      	beq.n	800b46c <validate+0x58>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d01d      	beq.n	800b46c <validate+0x58>
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b436:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d016      	beq.n	800b46c <validate+0x58>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b444:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800b44e:	429a      	cmp	r2, r3
 800b450:	d10c      	bne.n	800b46c <validate+0x58>
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b458:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe f987 	bl	8009770 <disk_status>
 800b462:	4603      	mov	r3, r0
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d001      	beq.n	800b470 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800b46c:	2309      	movs	r3, #9
 800b46e:	e000      	b.n	800b472 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800b470:	2300      	movs	r3, #0
}
 800b472:	4618      	mov	r0, r3
 800b474:	3710      	adds	r7, #16
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}
	...

0800b47c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	60f8      	str	r0, [r7, #12]
 800b484:	60b9      	str	r1, [r7, #8]
 800b486:	4613      	mov	r3, r2
 800b488:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800b48e:	f107 0310 	add.w	r3, r7, #16
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fc48 	bl	800ad28 <get_ldnumber>
 800b498:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	da01      	bge.n	800b4a4 <f_mount+0x28>
 800b4a0:	230b      	movs	r3, #11
 800b4a2:	e02d      	b.n	800b500 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b4a4:	4a18      	ldr	r2, [pc, #96]	; (800b508 <f_mount+0x8c>)
 800b4a6:	69fb      	ldr	r3, [r7, #28]
 800b4a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d006      	beq.n	800b4c2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800b4b4:	69b8      	ldr	r0, [r7, #24]
 800b4b6:	f7fe fbfb 	bl	8009cb0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d003      	beq.n	800b4d0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	490d      	ldr	r1, [pc, #52]	; (800b508 <f_mount+0x8c>)
 800b4d4:	69fb      	ldr	r3, [r7, #28]
 800b4d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <f_mount+0x6a>
 800b4e0:	79fb      	ldrb	r3, [r7, #7]
 800b4e2:	2b01      	cmp	r3, #1
 800b4e4:	d001      	beq.n	800b4ea <f_mount+0x6e>
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e00a      	b.n	800b500 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800b4ea:	f107 0108 	add.w	r1, r7, #8
 800b4ee:	f107 030c 	add.w	r3, r7, #12
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f7ff fcc5 	bl	800ae84 <find_volume>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b4fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800b500:	4618      	mov	r0, r3
 800b502:	3720      	adds	r7, #32
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	20001c24 	.word	0x20001c24

0800b50c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800b512:	af00      	add	r7, sp, #0
 800b514:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b518:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b51c:	6018      	str	r0, [r3, #0]
 800b51e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b522:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b526:	6019      	str	r1, [r3, #0]
 800b528:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b52c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b530:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800b532:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b536:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d101      	bne.n	800b544 <f_open+0x38>
 800b540:	2309      	movs	r3, #9
 800b542:	e257      	b.n	800b9f4 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800b544:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b548:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2200      	movs	r2, #0
 800b550:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800b554:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b558:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b55c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b560:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b564:	7812      	ldrb	r2, [r2, #0]
 800b566:	f002 021f 	and.w	r2, r2, #31
 800b56a:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800b56c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b570:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	f023 0301 	bic.w	r3, r3, #1
 800b57a:	b2da      	uxtb	r2, r3
 800b57c:	f107 0108 	add.w	r1, r7, #8
 800b580:	f107 0320 	add.w	r3, r7, #32
 800b584:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff fc7b 	bl	800ae84 <find_volume>
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800b594:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b598:	2b00      	cmp	r3, #0
 800b59a:	f040 8229 	bne.w	800b9f0 <f_open+0x4e4>
		INIT_BUF(dj);
 800b59e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5a2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b5a6:	f107 0214 	add.w	r2, r7, #20
 800b5aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5ae:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5b2:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800b5b6:	681a      	ldr	r2, [r3, #0]
 800b5b8:	f107 0320 	add.w	r3, r7, #32
 800b5bc:	4611      	mov	r1, r2
 800b5be:	4618      	mov	r0, r3
 800b5c0:	f7ff fb44 	bl	800ac4c <follow_path>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800b5ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b5d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5d6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5da:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d11d      	bne.n	800b61e <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800b5e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d103      	bne.n	800b5f2 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800b5ea:	2306      	movs	r3, #6
 800b5ec:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b5f0:	e015      	b.n	800b61e <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b5f6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	bf14      	ite	ne
 800b604:	2301      	movne	r3, #1
 800b606:	2300      	moveq	r3, #0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	461a      	mov	r2, r3
 800b60c:	f107 0320 	add.w	r3, r7, #32
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe f9c2 	bl	800999c <chk_lock>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b61e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b622:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	f003 031c 	and.w	r3, r3, #28
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 80e6 	beq.w	800b7fe <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800b632:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b636:	2b00      	cmp	r3, #0
 800b638:	d027      	beq.n	800b68a <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800b63a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b63e:	2b04      	cmp	r3, #4
 800b640:	d10e      	bne.n	800b660 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b642:	f7fe fa17 	bl	8009a74 <enq_lock>
 800b646:	4603      	mov	r3, r0
 800b648:	2b00      	cmp	r3, #0
 800b64a:	d006      	beq.n	800b65a <f_open+0x14e>
 800b64c:	f107 0320 	add.w	r3, r7, #32
 800b650:	4618      	mov	r0, r3
 800b652:	f7ff fa06 	bl	800aa62 <dir_register>
 800b656:	4603      	mov	r3, r0
 800b658:	e000      	b.n	800b65c <f_open+0x150>
 800b65a:	2312      	movs	r3, #18
 800b65c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b660:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b664:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b668:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b66c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b670:	7812      	ldrb	r2, [r2, #0]
 800b672:	f042 0208 	orr.w	r2, r2, #8
 800b676:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800b678:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b67c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b680:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b684:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800b688:	e017      	b.n	800b6ba <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b68a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b68e:	330b      	adds	r3, #11
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	f003 0311 	and.w	r3, r3, #17
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <f_open+0x196>
					res = FR_DENIED;
 800b69a:	2307      	movs	r3, #7
 800b69c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b6a0:	e00b      	b.n	800b6ba <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800b6a2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b6a6:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	f003 0304 	and.w	r3, r3, #4
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d002      	beq.n	800b6ba <f_open+0x1ae>
						res = FR_EXIST;
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b6ba:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	f040 80c1 	bne.w	800b846 <f_open+0x33a>
 800b6c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b6c8:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b6cc:	781b      	ldrb	r3, [r3, #0]
 800b6ce:	f003 0308 	and.w	r3, r3, #8
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 80b7 	beq.w	800b846 <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800b6d8:	f7fd ff34 	bl	8009544 <get_fattime>
 800b6dc:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800b6e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6e4:	330e      	adds	r3, #14
 800b6e6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800b6ea:	b2d2      	uxtb	r2, r2
 800b6ec:	701a      	strb	r2, [r3, #0]
 800b6ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b6f2:	b29b      	uxth	r3, r3
 800b6f4:	0a1b      	lsrs	r3, r3, #8
 800b6f6:	b29a      	uxth	r2, r3
 800b6f8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b6fc:	330f      	adds	r3, #15
 800b6fe:	b2d2      	uxtb	r2, r2
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b706:	0c1a      	lsrs	r2, r3, #16
 800b708:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b70c:	3310      	adds	r3, #16
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
 800b712:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800b716:	0e1a      	lsrs	r2, r3, #24
 800b718:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b71c:	3311      	adds	r3, #17
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800b722:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b726:	330b      	adds	r3, #11
 800b728:	2200      	movs	r2, #0
 800b72a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800b72c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b730:	331c      	adds	r3, #28
 800b732:	2200      	movs	r2, #0
 800b734:	701a      	strb	r2, [r3, #0]
 800b736:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b73a:	331d      	adds	r3, #29
 800b73c:	2200      	movs	r2, #0
 800b73e:	701a      	strb	r2, [r3, #0]
 800b740:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b744:	331e      	adds	r3, #30
 800b746:	2200      	movs	r2, #0
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b74e:	331f      	adds	r3, #31
 800b750:	2200      	movs	r2, #0
 800b752:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800b754:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b758:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b75c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b760:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff f8da 	bl	800a91e <ld_clust>
 800b76a:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800b76e:	2100      	movs	r1, #0
 800b770:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800b774:	f7ff f900 	bl	800a978 <st_clust>
				dj.fs->wflag = 1;
 800b778:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b77c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b780:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b784:	2201      	movs	r2, #1
 800b786:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800b78a:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d059      	beq.n	800b846 <f_open+0x33a>
					dw = dj.fs->winsect;
 800b792:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b796:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b79a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b79e:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800b7a2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800b7a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b7aa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b7ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7b2:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	f7fe fdb1 	bl	800a31e <remove_chain>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800b7c2:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d13d      	bne.n	800b846 <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800b7ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b7ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b7d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7d6:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800b7da:	3a01      	subs	r2, #1
 800b7dc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800b7e0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b7e4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b7e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b7ec:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fad0 	bl	8009d96 <move_window>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b7fc:	e023      	b.n	800b846 <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800b7fe:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b802:	2b00      	cmp	r3, #0
 800b804:	d11f      	bne.n	800b846 <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800b806:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b80a:	330b      	adds	r3, #11
 800b80c:	781b      	ldrb	r3, [r3, #0]
 800b80e:	f003 0310 	and.w	r3, r3, #16
 800b812:	2b00      	cmp	r3, #0
 800b814:	d003      	beq.n	800b81e <f_open+0x312>
					res = FR_NO_FILE;
 800b816:	2304      	movs	r3, #4
 800b818:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800b81c:	e013      	b.n	800b846 <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800b81e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b822:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	f003 0302 	and.w	r3, r3, #2
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d00a      	beq.n	800b846 <f_open+0x33a>
 800b830:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b834:	330b      	adds	r3, #11
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f003 0301 	and.w	r3, r3, #1
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d002      	beq.n	800b846 <f_open+0x33a>
						res = FR_DENIED;
 800b840:	2307      	movs	r3, #7
 800b842:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800b846:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d153      	bne.n	800b8f6 <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b84e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b852:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b856:	781b      	ldrb	r3, [r3, #0]
 800b858:	f003 0308 	and.w	r3, r3, #8
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d00b      	beq.n	800b878 <f_open+0x36c>
				mode |= FA__WRITTEN;
 800b860:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b864:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b868:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b86c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b870:	7812      	ldrb	r2, [r2, #0]
 800b872:	f042 0220 	orr.w	r2, r2, #32
 800b876:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800b878:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b87c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b884:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800b888:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b88c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800b896:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b89a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b8a4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b8a8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8ac:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	f023 0301 	bic.w	r3, r3, #1
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	bf14      	ite	ne
 800b8ba:	2301      	movne	r3, #1
 800b8bc:	2300      	moveq	r3, #0
 800b8be:	b2db      	uxtb	r3, r3
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	f107 0320 	add.w	r3, r7, #32
 800b8c6:	4611      	mov	r1, r2
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f7fe f8f7 	bl	8009abc <inc_lock>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8d4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800b8de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b8e2:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d102      	bne.n	800b8f6 <f_open+0x3ea>
 800b8f0:	2302      	movs	r3, #2
 800b8f2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800b8f6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d178      	bne.n	800b9f0 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800b8fe:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b902:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800b90c:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800b910:	7812      	ldrb	r2, [r2, #0]
 800b912:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800b916:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b91a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800b926:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b92a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b92e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b932:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800b936:	4618      	mov	r0, r3
 800b938:	f7fe fff1 	bl	800a91e <ld_clust>
 800b93c:	4602      	mov	r2, r0
 800b93e:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b942:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800b94c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b950:	331f      	adds	r3, #31
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	061a      	lsls	r2, r3, #24
 800b956:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800b95a:	331e      	adds	r3, #30
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	041b      	lsls	r3, r3, #16
 800b960:	4313      	orrs	r3, r2
 800b962:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b966:	321d      	adds	r2, #29
 800b968:	7812      	ldrb	r2, [r2, #0]
 800b96a:	0212      	lsls	r2, r2, #8
 800b96c:	4313      	orrs	r3, r2
 800b96e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800b972:	321c      	adds	r2, #28
 800b974:	7812      	ldrb	r2, [r2, #0]
 800b976:	431a      	orrs	r2, r3
 800b978:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b97c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800b986:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b98a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800b996:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b99a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800b9a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b9aa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800b9b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b9ba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800b9be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b9c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b9c6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800b9d0:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b9d4:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b9de:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800b9e2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b9e6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800b9f0:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}

0800b9fe <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b9fe:	b580      	push	{r7, lr}
 800ba00:	b08a      	sub	sp, #40	; 0x28
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	60f8      	str	r0, [r7, #12]
 800ba06:	60b9      	str	r1, [r7, #8]
 800ba08:	607a      	str	r2, [r7, #4]
 800ba0a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f7ff fcfc 	bl	800b414 <validate>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <f_write+0x2c>
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	e192      	b.n	800bd50 <f_write+0x352>
	if (fp->err)							/* Check error */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d003      	beq.n	800ba3c <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800ba3a:	e189      	b.n	800bd50 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800ba4a:	2307      	movs	r3, #7
 800ba4c:	e180      	b.n	800bd50 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	441a      	add	r2, r3
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	f080 8158 	bcs.w	800bd14 <f_write+0x316>
 800ba64:	2300      	movs	r3, #0
 800ba66:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800ba68:	e154      	b.n	800bd14 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	f040 8114 	bne.w	800bca2 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800ba80:	0a5b      	lsrs	r3, r3, #9
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800ba8a:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	4013      	ands	r3, r2
 800ba94:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800ba96:	7dbb      	ldrb	r3, [r7, #22]
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	d151      	bne.n	800bb40 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d10f      	bne.n	800bac6 <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800baac:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d121      	bne.n	800baf8 <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800baba:	2100      	movs	r1, #0
 800babc:	4618      	mov	r0, r3
 800babe:	f7fe fc88 	bl	800a3d2 <create_chain>
 800bac2:	6278      	str	r0, [r7, #36]	; 0x24
 800bac4:	e018      	b.n	800baf8 <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d008      	beq.n	800bae2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bad6:	4619      	mov	r1, r3
 800bad8:	68f8      	ldr	r0, [r7, #12]
 800bada:	f7fe fd17 	bl	800a50c <clmt_clust>
 800bade:	6278      	str	r0, [r7, #36]	; 0x24
 800bae0:	e00a      	b.n	800baf8 <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baee:	4619      	mov	r1, r3
 800baf0:	4610      	mov	r0, r2
 800baf2:	f7fe fc6e 	bl	800a3d2 <create_chain>
 800baf6:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800baf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	f000 810f 	beq.w	800bd1e <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800bb00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d105      	bne.n	800bb12 <f_write+0x114>
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb0e:	2302      	movs	r3, #2
 800bb10:	e11e      	b.n	800bd50 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800bb12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb18:	d105      	bne.n	800bb26 <f_write+0x128>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2201      	movs	r2, #1
 800bb1e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb22:	2301      	movs	r3, #1
 800bb24:	e114      	b.n	800bd50 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d103      	bne.n	800bb40 <f_write+0x142>
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bb46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d01d      	beq.n	800bb8a <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bb54:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bb58:	68f9      	ldr	r1, [r7, #12]
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bb60:	2301      	movs	r3, #1
 800bb62:	f7fd fe65 	bl	8009830 <disk_write>
 800bb66:	4603      	mov	r3, r0
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d005      	beq.n	800bb78 <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bb74:	2301      	movs	r3, #1
 800bb76:	e0eb      	b.n	800bd50 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bb7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800bb8a:	68fb      	ldr	r3, [r7, #12]
 800bb8c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bb96:	4619      	mov	r1, r3
 800bb98:	4610      	mov	r0, r2
 800bb9a:	f7fe f9d7 	bl	8009f4c <clust2sect>
 800bb9e:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d105      	bne.n	800bbb2 <f_write+0x1b4>
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2202      	movs	r2, #2
 800bbaa:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bbae:	2302      	movs	r3, #2
 800bbb0:	e0ce      	b.n	800bd50 <f_write+0x352>
			sect += csect;
 800bbb2:	7dbb      	ldrb	r3, [r7, #22]
 800bbb4:	693a      	ldr	r2, [r7, #16]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	0a5b      	lsrs	r3, r3, #9
 800bbbe:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d048      	beq.n	800bc58 <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800bbc6:	7dba      	ldrb	r2, [r7, #22]
 800bbc8:	69fb      	ldr	r3, [r7, #28]
 800bbca:	4413      	add	r3, r2
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800bbd2:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d908      	bls.n	800bbec <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbe0:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	7dbb      	ldrb	r3, [r7, #22]
 800bbe8:	1ad3      	subs	r3, r2, r3
 800bbea:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bbf2:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	69b9      	ldr	r1, [r7, #24]
 800bbfc:	f7fd fe18 	bl	8009830 <disk_write>
 800bc00:	4603      	mov	r3, r0
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d005      	beq.n	800bc12 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2201      	movs	r2, #1
 800bc0a:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bc0e:	2301      	movs	r3, #1
 800bc10:	e09e      	b.n	800bd50 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	69fa      	ldr	r2, [r7, #28]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d916      	bls.n	800bc50 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800bc22:	68f8      	ldr	r0, [r7, #12]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	1ad3      	subs	r3, r2, r3
 800bc2e:	025b      	lsls	r3, r3, #9
 800bc30:	69ba      	ldr	r2, [r7, #24]
 800bc32:	4413      	add	r3, r2
 800bc34:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc38:	4619      	mov	r1, r3
 800bc3a:	f7fd fe37 	bl	80098ac <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bc44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc48:	b2da      	uxtb	r2, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	025b      	lsls	r3, r3, #9
 800bc54:	623b      	str	r3, [r7, #32]
				continue;
 800bc56:	e047      	b.n	800bce8 <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800bc5e:	693a      	ldr	r2, [r7, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d01a      	beq.n	800bc9a <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bc70:	429a      	cmp	r2, r3
 800bc72:	d212      	bcs.n	800bc9a <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bc7a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bc7e:	68f9      	ldr	r1, [r7, #12]
 800bc80:	2301      	movs	r3, #1
 800bc82:	693a      	ldr	r2, [r7, #16]
 800bc84:	f7fd fdb4 	bl	80097f0 <disk_read>
 800bc88:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d005      	beq.n	800bc9a <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800bc96:	2301      	movs	r3, #1
 800bc98:	e05a      	b.n	800bd50 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	693a      	ldr	r2, [r7, #16]
 800bc9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bcb0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800bcb2:	6a3a      	ldr	r2, [r7, #32]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	429a      	cmp	r2, r3
 800bcb8:	d901      	bls.n	800bcbe <f_write+0x2c0>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800bcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcc8:	68fa      	ldr	r2, [r7, #12]
 800bcca:	4413      	add	r3, r2
 800bccc:	6a3a      	ldr	r2, [r7, #32]
 800bcce:	69b9      	ldr	r1, [r7, #24]
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	f7fd fdeb 	bl	80098ac <mem_cpy>
		fp->flag |= FA__DIRTY;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bcdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800bce8:	69ba      	ldr	r2, [r7, #24]
 800bcea:	6a3b      	ldr	r3, [r7, #32]
 800bcec:	4413      	add	r3, r2
 800bcee:	61bb      	str	r3, [r7, #24]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	441a      	add	r2, r3
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	6a3b      	ldr	r3, [r7, #32]
 800bd06:	441a      	add	r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
 800bd0c:	687a      	ldr	r2, [r7, #4]
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	1ad3      	subs	r3, r2, r3
 800bd12:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f47f aea7 	bne.w	800ba6a <f_write+0x6c>
 800bd1c:	e000      	b.n	800bd20 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bd1e:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d905      	bls.n	800bd3c <f_write+0x33e>
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd42:	f043 0320 	orr.w	r3, r3, #32
 800bd46:	b2da      	uxtb	r2, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3728      	adds	r7, #40	; 0x28
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f7ff fb57 	bl	800b414 <validate>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bd6a:	7dfb      	ldrb	r3, [r7, #23]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	f040 80a8 	bne.w	800bec2 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd78:	f003 0320 	and.w	r3, r3, #32
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	f000 80a0 	beq.w	800bec2 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d019      	beq.n	800bdc4 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800bd96:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800bd9a:	6879      	ldr	r1, [r7, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800bda2:	2301      	movs	r3, #1
 800bda4:	f7fd fd44 	bl	8009830 <disk_write>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d001      	beq.n	800bdb2 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e088      	b.n	800bec4 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800bdb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4610      	mov	r0, r2
 800bdd4:	f7fd ffdf 	bl	8009d96 <move_window>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d16f      	bne.n	800bec2 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800bde8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	330b      	adds	r3, #11
 800bdee:	781a      	ldrb	r2, [r3, #0]
 800bdf0:	693b      	ldr	r3, [r7, #16]
 800bdf2:	330b      	adds	r3, #11
 800bdf4:	f042 0220 	orr.w	r2, r2, #32
 800bdf8:	b2d2      	uxtb	r2, r2
 800bdfa:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	331c      	adds	r3, #28
 800be06:	b2d2      	uxtb	r2, r2
 800be08:	701a      	strb	r2, [r3, #0]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800be10:	b29b      	uxth	r3, r3
 800be12:	0a1b      	lsrs	r3, r3, #8
 800be14:	b29a      	uxth	r2, r3
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	331d      	adds	r3, #29
 800be1a:	b2d2      	uxtb	r2, r2
 800be1c:	701a      	strb	r2, [r3, #0]
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800be24:	0c1a      	lsrs	r2, r3, #16
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	331e      	adds	r3, #30
 800be2a:	b2d2      	uxtb	r2, r2
 800be2c:	701a      	strb	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800be34:	0e1a      	lsrs	r2, r3, #24
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	331f      	adds	r3, #31
 800be3a:	b2d2      	uxtb	r2, r2
 800be3c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800be44:	4619      	mov	r1, r3
 800be46:	6938      	ldr	r0, [r7, #16]
 800be48:	f7fe fd96 	bl	800a978 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800be4c:	f7fd fb7a 	bl	8009544 <get_fattime>
 800be50:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	3316      	adds	r3, #22
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	b2d2      	uxtb	r2, r2
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	b29b      	uxth	r3, r3
 800be60:	0a1b      	lsrs	r3, r3, #8
 800be62:	b29a      	uxth	r2, r3
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	3317      	adds	r3, #23
 800be68:	b2d2      	uxtb	r2, r2
 800be6a:	701a      	strb	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	0c1a      	lsrs	r2, r3, #16
 800be70:	693b      	ldr	r3, [r7, #16]
 800be72:	3318      	adds	r3, #24
 800be74:	b2d2      	uxtb	r2, r2
 800be76:	701a      	strb	r2, [r3, #0]
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	0e1a      	lsrs	r2, r3, #24
 800be7c:	693b      	ldr	r3, [r7, #16]
 800be7e:	3319      	adds	r3, #25
 800be80:	b2d2      	uxtb	r2, r2
 800be82:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800be84:	693b      	ldr	r3, [r7, #16]
 800be86:	3312      	adds	r3, #18
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
 800be8c:	693b      	ldr	r3, [r7, #16]
 800be8e:	3313      	adds	r3, #19
 800be90:	2200      	movs	r2, #0
 800be92:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800be9a:	f023 0320 	bic.w	r3, r3, #32
 800be9e:	b2da      	uxtb	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800beac:	2201      	movs	r2, #1
 800beae:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800beb8:	4618      	mov	r0, r3
 800beba:	f7fd ff9a 	bl	8009df2 <sync_fs>
 800bebe:	4603      	mov	r3, r0
 800bec0:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800bec2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3718      	adds	r7, #24
 800bec8:	46bd      	mov	sp, r7
 800beca:	bd80      	pop	{r7, pc}

0800becc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ff3f 	bl	800bd58 <f_sync>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d116      	bne.n	800bf12 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f7ff fa95 	bl	800b414 <validate>
 800beea:	4603      	mov	r3, r0
 800beec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10e      	bne.n	800bf12 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800befa:	4618      	mov	r0, r3
 800befc:	f7fd fe94 	bl	8009c28 <dec_lock>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d103      	bne.n	800bf12 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bf12:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3710      	adds	r7, #16
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b087      	sub	sp, #28
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4613      	mov	r3, r2
 800bf28:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800bf32:	4b1e      	ldr	r3, [pc, #120]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf34:	7a5b      	ldrb	r3, [r3, #9]
 800bf36:	b2db      	uxtb	r3, r3
 800bf38:	2b01      	cmp	r3, #1
 800bf3a:	d831      	bhi.n	800bfa0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bf3c:	4b1b      	ldr	r3, [pc, #108]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf3e:	7a5b      	ldrb	r3, [r3, #9]
 800bf40:	b2db      	uxtb	r3, r3
 800bf42:	461a      	mov	r2, r3
 800bf44:	4b19      	ldr	r3, [pc, #100]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf46:	2100      	movs	r1, #0
 800bf48:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800bf4a:	4b18      	ldr	r3, [pc, #96]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf4c:	7a5b      	ldrb	r3, [r3, #9]
 800bf4e:	b2db      	uxtb	r3, r3
 800bf50:	4a16      	ldr	r2, [pc, #88]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	68fa      	ldr	r2, [r7, #12]
 800bf58:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800bf5a:	4b14      	ldr	r3, [pc, #80]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf5c:	7a5b      	ldrb	r3, [r3, #9]
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	461a      	mov	r2, r3
 800bf62:	4b12      	ldr	r3, [pc, #72]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf64:	4413      	add	r3, r2
 800bf66:	79fa      	ldrb	r2, [r7, #7]
 800bf68:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bf6a:	4b10      	ldr	r3, [pc, #64]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf6c:	7a5b      	ldrb	r3, [r3, #9]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	1c5a      	adds	r2, r3, #1
 800bf72:	b2d1      	uxtb	r1, r2
 800bf74:	4a0d      	ldr	r2, [pc, #52]	; (800bfac <FATFS_LinkDriverEx+0x90>)
 800bf76:	7251      	strb	r1, [r2, #9]
 800bf78:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bf7a:	7dbb      	ldrb	r3, [r7, #22]
 800bf7c:	3330      	adds	r3, #48	; 0x30
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	3301      	adds	r3, #1
 800bf88:	223a      	movs	r2, #58	; 0x3a
 800bf8a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3302      	adds	r3, #2
 800bf90:	222f      	movs	r2, #47	; 0x2f
 800bf92:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	3303      	adds	r3, #3
 800bf98:	2200      	movs	r2, #0
 800bf9a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800bfa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	371c      	adds	r7, #28
 800bfa6:	46bd      	mov	sp, r7
 800bfa8:	bc80      	pop	{r7}
 800bfaa:	4770      	bx	lr
 800bfac:	20001c44 	.word	0x20001c44

0800bfb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b082      	sub	sp, #8
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bfba:	2200      	movs	r2, #0
 800bfbc:	6839      	ldr	r1, [r7, #0]
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f7ff ffac 	bl	800bf1c <FATFS_LinkDriverEx>
 800bfc4:	4603      	mov	r3, r0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
	...

0800bfd0 <__errno>:
 800bfd0:	4b01      	ldr	r3, [pc, #4]	; (800bfd8 <__errno+0x8>)
 800bfd2:	6818      	ldr	r0, [r3, #0]
 800bfd4:	4770      	bx	lr
 800bfd6:	bf00      	nop
 800bfd8:	200000c4 	.word	0x200000c4

0800bfdc <__libc_init_array>:
 800bfdc:	b570      	push	{r4, r5, r6, lr}
 800bfde:	2600      	movs	r6, #0
 800bfe0:	4d0c      	ldr	r5, [pc, #48]	; (800c014 <__libc_init_array+0x38>)
 800bfe2:	4c0d      	ldr	r4, [pc, #52]	; (800c018 <__libc_init_array+0x3c>)
 800bfe4:	1b64      	subs	r4, r4, r5
 800bfe6:	10a4      	asrs	r4, r4, #2
 800bfe8:	42a6      	cmp	r6, r4
 800bfea:	d109      	bne.n	800c000 <__libc_init_array+0x24>
 800bfec:	f000 ff64 	bl	800ceb8 <_init>
 800bff0:	2600      	movs	r6, #0
 800bff2:	4d0a      	ldr	r5, [pc, #40]	; (800c01c <__libc_init_array+0x40>)
 800bff4:	4c0a      	ldr	r4, [pc, #40]	; (800c020 <__libc_init_array+0x44>)
 800bff6:	1b64      	subs	r4, r4, r5
 800bff8:	10a4      	asrs	r4, r4, #2
 800bffa:	42a6      	cmp	r6, r4
 800bffc:	d105      	bne.n	800c00a <__libc_init_array+0x2e>
 800bffe:	bd70      	pop	{r4, r5, r6, pc}
 800c000:	f855 3b04 	ldr.w	r3, [r5], #4
 800c004:	4798      	blx	r3
 800c006:	3601      	adds	r6, #1
 800c008:	e7ee      	b.n	800bfe8 <__libc_init_array+0xc>
 800c00a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c00e:	4798      	blx	r3
 800c010:	3601      	adds	r6, #1
 800c012:	e7f2      	b.n	800bffa <__libc_init_array+0x1e>
 800c014:	0800fc04 	.word	0x0800fc04
 800c018:	0800fc04 	.word	0x0800fc04
 800c01c:	0800fc04 	.word	0x0800fc04
 800c020:	0800fc08 	.word	0x0800fc08

0800c024 <memset>:
 800c024:	4603      	mov	r3, r0
 800c026:	4402      	add	r2, r0
 800c028:	4293      	cmp	r3, r2
 800c02a:	d100      	bne.n	800c02e <memset+0xa>
 800c02c:	4770      	bx	lr
 800c02e:	f803 1b01 	strb.w	r1, [r3], #1
 800c032:	e7f9      	b.n	800c028 <memset+0x4>

0800c034 <siprintf>:
 800c034:	b40e      	push	{r1, r2, r3}
 800c036:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c03a:	b500      	push	{lr}
 800c03c:	b09c      	sub	sp, #112	; 0x70
 800c03e:	ab1d      	add	r3, sp, #116	; 0x74
 800c040:	9002      	str	r0, [sp, #8]
 800c042:	9006      	str	r0, [sp, #24]
 800c044:	9107      	str	r1, [sp, #28]
 800c046:	9104      	str	r1, [sp, #16]
 800c048:	4808      	ldr	r0, [pc, #32]	; (800c06c <siprintf+0x38>)
 800c04a:	4909      	ldr	r1, [pc, #36]	; (800c070 <siprintf+0x3c>)
 800c04c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c050:	9105      	str	r1, [sp, #20]
 800c052:	6800      	ldr	r0, [r0, #0]
 800c054:	a902      	add	r1, sp, #8
 800c056:	9301      	str	r3, [sp, #4]
 800c058:	f000 f870 	bl	800c13c <_svfiprintf_r>
 800c05c:	2200      	movs	r2, #0
 800c05e:	9b02      	ldr	r3, [sp, #8]
 800c060:	701a      	strb	r2, [r3, #0]
 800c062:	b01c      	add	sp, #112	; 0x70
 800c064:	f85d eb04 	ldr.w	lr, [sp], #4
 800c068:	b003      	add	sp, #12
 800c06a:	4770      	bx	lr
 800c06c:	200000c4 	.word	0x200000c4
 800c070:	ffff0208 	.word	0xffff0208

0800c074 <strcpy>:
 800c074:	4603      	mov	r3, r0
 800c076:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c07a:	f803 2b01 	strb.w	r2, [r3], #1
 800c07e:	2a00      	cmp	r2, #0
 800c080:	d1f9      	bne.n	800c076 <strcpy+0x2>
 800c082:	4770      	bx	lr

0800c084 <__ssputs_r>:
 800c084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c088:	688e      	ldr	r6, [r1, #8]
 800c08a:	4682      	mov	sl, r0
 800c08c:	429e      	cmp	r6, r3
 800c08e:	460c      	mov	r4, r1
 800c090:	4690      	mov	r8, r2
 800c092:	461f      	mov	r7, r3
 800c094:	d838      	bhi.n	800c108 <__ssputs_r+0x84>
 800c096:	898a      	ldrh	r2, [r1, #12]
 800c098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c09c:	d032      	beq.n	800c104 <__ssputs_r+0x80>
 800c09e:	6825      	ldr	r5, [r4, #0]
 800c0a0:	6909      	ldr	r1, [r1, #16]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	eba5 0901 	sub.w	r9, r5, r1
 800c0a8:	6965      	ldr	r5, [r4, #20]
 800c0aa:	444b      	add	r3, r9
 800c0ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0b4:	106d      	asrs	r5, r5, #1
 800c0b6:	429d      	cmp	r5, r3
 800c0b8:	bf38      	it	cc
 800c0ba:	461d      	movcc	r5, r3
 800c0bc:	0553      	lsls	r3, r2, #21
 800c0be:	d531      	bpl.n	800c124 <__ssputs_r+0xa0>
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f000 fb6f 	bl	800c7a4 <_malloc_r>
 800c0c6:	4606      	mov	r6, r0
 800c0c8:	b950      	cbnz	r0, 800c0e0 <__ssputs_r+0x5c>
 800c0ca:	230c      	movs	r3, #12
 800c0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c0d0:	f8ca 3000 	str.w	r3, [sl]
 800c0d4:	89a3      	ldrh	r3, [r4, #12]
 800c0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c0da:	81a3      	strh	r3, [r4, #12]
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	464a      	mov	r2, r9
 800c0e2:	6921      	ldr	r1, [r4, #16]
 800c0e4:	f000 face 	bl	800c684 <memcpy>
 800c0e8:	89a3      	ldrh	r3, [r4, #12]
 800c0ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c0ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c0f2:	81a3      	strh	r3, [r4, #12]
 800c0f4:	6126      	str	r6, [r4, #16]
 800c0f6:	444e      	add	r6, r9
 800c0f8:	6026      	str	r6, [r4, #0]
 800c0fa:	463e      	mov	r6, r7
 800c0fc:	6165      	str	r5, [r4, #20]
 800c0fe:	eba5 0509 	sub.w	r5, r5, r9
 800c102:	60a5      	str	r5, [r4, #8]
 800c104:	42be      	cmp	r6, r7
 800c106:	d900      	bls.n	800c10a <__ssputs_r+0x86>
 800c108:	463e      	mov	r6, r7
 800c10a:	4632      	mov	r2, r6
 800c10c:	4641      	mov	r1, r8
 800c10e:	6820      	ldr	r0, [r4, #0]
 800c110:	f000 fac6 	bl	800c6a0 <memmove>
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	2000      	movs	r0, #0
 800c118:	1b9b      	subs	r3, r3, r6
 800c11a:	60a3      	str	r3, [r4, #8]
 800c11c:	6823      	ldr	r3, [r4, #0]
 800c11e:	4433      	add	r3, r6
 800c120:	6023      	str	r3, [r4, #0]
 800c122:	e7db      	b.n	800c0dc <__ssputs_r+0x58>
 800c124:	462a      	mov	r2, r5
 800c126:	f000 fbb1 	bl	800c88c <_realloc_r>
 800c12a:	4606      	mov	r6, r0
 800c12c:	2800      	cmp	r0, #0
 800c12e:	d1e1      	bne.n	800c0f4 <__ssputs_r+0x70>
 800c130:	4650      	mov	r0, sl
 800c132:	6921      	ldr	r1, [r4, #16]
 800c134:	f000 face 	bl	800c6d4 <_free_r>
 800c138:	e7c7      	b.n	800c0ca <__ssputs_r+0x46>
	...

0800c13c <_svfiprintf_r>:
 800c13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c140:	4698      	mov	r8, r3
 800c142:	898b      	ldrh	r3, [r1, #12]
 800c144:	4607      	mov	r7, r0
 800c146:	061b      	lsls	r3, r3, #24
 800c148:	460d      	mov	r5, r1
 800c14a:	4614      	mov	r4, r2
 800c14c:	b09d      	sub	sp, #116	; 0x74
 800c14e:	d50e      	bpl.n	800c16e <_svfiprintf_r+0x32>
 800c150:	690b      	ldr	r3, [r1, #16]
 800c152:	b963      	cbnz	r3, 800c16e <_svfiprintf_r+0x32>
 800c154:	2140      	movs	r1, #64	; 0x40
 800c156:	f000 fb25 	bl	800c7a4 <_malloc_r>
 800c15a:	6028      	str	r0, [r5, #0]
 800c15c:	6128      	str	r0, [r5, #16]
 800c15e:	b920      	cbnz	r0, 800c16a <_svfiprintf_r+0x2e>
 800c160:	230c      	movs	r3, #12
 800c162:	603b      	str	r3, [r7, #0]
 800c164:	f04f 30ff 	mov.w	r0, #4294967295
 800c168:	e0d1      	b.n	800c30e <_svfiprintf_r+0x1d2>
 800c16a:	2340      	movs	r3, #64	; 0x40
 800c16c:	616b      	str	r3, [r5, #20]
 800c16e:	2300      	movs	r3, #0
 800c170:	9309      	str	r3, [sp, #36]	; 0x24
 800c172:	2320      	movs	r3, #32
 800c174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c178:	2330      	movs	r3, #48	; 0x30
 800c17a:	f04f 0901 	mov.w	r9, #1
 800c17e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c328 <_svfiprintf_r+0x1ec>
 800c186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c18a:	4623      	mov	r3, r4
 800c18c:	469a      	mov	sl, r3
 800c18e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c192:	b10a      	cbz	r2, 800c198 <_svfiprintf_r+0x5c>
 800c194:	2a25      	cmp	r2, #37	; 0x25
 800c196:	d1f9      	bne.n	800c18c <_svfiprintf_r+0x50>
 800c198:	ebba 0b04 	subs.w	fp, sl, r4
 800c19c:	d00b      	beq.n	800c1b6 <_svfiprintf_r+0x7a>
 800c19e:	465b      	mov	r3, fp
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	4638      	mov	r0, r7
 800c1a6:	f7ff ff6d 	bl	800c084 <__ssputs_r>
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f000 80aa 	beq.w	800c304 <_svfiprintf_r+0x1c8>
 800c1b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1b2:	445a      	add	r2, fp
 800c1b4:	9209      	str	r2, [sp, #36]	; 0x24
 800c1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f000 80a2 	beq.w	800c304 <_svfiprintf_r+0x1c8>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ca:	f10a 0a01 	add.w	sl, sl, #1
 800c1ce:	9304      	str	r3, [sp, #16]
 800c1d0:	9307      	str	r3, [sp, #28]
 800c1d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1d6:	931a      	str	r3, [sp, #104]	; 0x68
 800c1d8:	4654      	mov	r4, sl
 800c1da:	2205      	movs	r2, #5
 800c1dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1e0:	4851      	ldr	r0, [pc, #324]	; (800c328 <_svfiprintf_r+0x1ec>)
 800c1e2:	f000 fa41 	bl	800c668 <memchr>
 800c1e6:	9a04      	ldr	r2, [sp, #16]
 800c1e8:	b9d8      	cbnz	r0, 800c222 <_svfiprintf_r+0xe6>
 800c1ea:	06d0      	lsls	r0, r2, #27
 800c1ec:	bf44      	itt	mi
 800c1ee:	2320      	movmi	r3, #32
 800c1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1f4:	0711      	lsls	r1, r2, #28
 800c1f6:	bf44      	itt	mi
 800c1f8:	232b      	movmi	r3, #43	; 0x2b
 800c1fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c202:	2b2a      	cmp	r3, #42	; 0x2a
 800c204:	d015      	beq.n	800c232 <_svfiprintf_r+0xf6>
 800c206:	4654      	mov	r4, sl
 800c208:	2000      	movs	r0, #0
 800c20a:	f04f 0c0a 	mov.w	ip, #10
 800c20e:	9a07      	ldr	r2, [sp, #28]
 800c210:	4621      	mov	r1, r4
 800c212:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c216:	3b30      	subs	r3, #48	; 0x30
 800c218:	2b09      	cmp	r3, #9
 800c21a:	d94e      	bls.n	800c2ba <_svfiprintf_r+0x17e>
 800c21c:	b1b0      	cbz	r0, 800c24c <_svfiprintf_r+0x110>
 800c21e:	9207      	str	r2, [sp, #28]
 800c220:	e014      	b.n	800c24c <_svfiprintf_r+0x110>
 800c222:	eba0 0308 	sub.w	r3, r0, r8
 800c226:	fa09 f303 	lsl.w	r3, r9, r3
 800c22a:	4313      	orrs	r3, r2
 800c22c:	46a2      	mov	sl, r4
 800c22e:	9304      	str	r3, [sp, #16]
 800c230:	e7d2      	b.n	800c1d8 <_svfiprintf_r+0x9c>
 800c232:	9b03      	ldr	r3, [sp, #12]
 800c234:	1d19      	adds	r1, r3, #4
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	9103      	str	r1, [sp, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	bfbb      	ittet	lt
 800c23e:	425b      	neglt	r3, r3
 800c240:	f042 0202 	orrlt.w	r2, r2, #2
 800c244:	9307      	strge	r3, [sp, #28]
 800c246:	9307      	strlt	r3, [sp, #28]
 800c248:	bfb8      	it	lt
 800c24a:	9204      	strlt	r2, [sp, #16]
 800c24c:	7823      	ldrb	r3, [r4, #0]
 800c24e:	2b2e      	cmp	r3, #46	; 0x2e
 800c250:	d10c      	bne.n	800c26c <_svfiprintf_r+0x130>
 800c252:	7863      	ldrb	r3, [r4, #1]
 800c254:	2b2a      	cmp	r3, #42	; 0x2a
 800c256:	d135      	bne.n	800c2c4 <_svfiprintf_r+0x188>
 800c258:	9b03      	ldr	r3, [sp, #12]
 800c25a:	3402      	adds	r4, #2
 800c25c:	1d1a      	adds	r2, r3, #4
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	9203      	str	r2, [sp, #12]
 800c262:	2b00      	cmp	r3, #0
 800c264:	bfb8      	it	lt
 800c266:	f04f 33ff 	movlt.w	r3, #4294967295
 800c26a:	9305      	str	r3, [sp, #20]
 800c26c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c32c <_svfiprintf_r+0x1f0>
 800c270:	2203      	movs	r2, #3
 800c272:	4650      	mov	r0, sl
 800c274:	7821      	ldrb	r1, [r4, #0]
 800c276:	f000 f9f7 	bl	800c668 <memchr>
 800c27a:	b140      	cbz	r0, 800c28e <_svfiprintf_r+0x152>
 800c27c:	2340      	movs	r3, #64	; 0x40
 800c27e:	eba0 000a 	sub.w	r0, r0, sl
 800c282:	fa03 f000 	lsl.w	r0, r3, r0
 800c286:	9b04      	ldr	r3, [sp, #16]
 800c288:	3401      	adds	r4, #1
 800c28a:	4303      	orrs	r3, r0
 800c28c:	9304      	str	r3, [sp, #16]
 800c28e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c292:	2206      	movs	r2, #6
 800c294:	4826      	ldr	r0, [pc, #152]	; (800c330 <_svfiprintf_r+0x1f4>)
 800c296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c29a:	f000 f9e5 	bl	800c668 <memchr>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	d038      	beq.n	800c314 <_svfiprintf_r+0x1d8>
 800c2a2:	4b24      	ldr	r3, [pc, #144]	; (800c334 <_svfiprintf_r+0x1f8>)
 800c2a4:	bb1b      	cbnz	r3, 800c2ee <_svfiprintf_r+0x1b2>
 800c2a6:	9b03      	ldr	r3, [sp, #12]
 800c2a8:	3307      	adds	r3, #7
 800c2aa:	f023 0307 	bic.w	r3, r3, #7
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	9303      	str	r3, [sp, #12]
 800c2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b4:	4433      	add	r3, r6
 800c2b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2b8:	e767      	b.n	800c18a <_svfiprintf_r+0x4e>
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	2001      	movs	r0, #1
 800c2be:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2c2:	e7a5      	b.n	800c210 <_svfiprintf_r+0xd4>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f04f 0c0a 	mov.w	ip, #10
 800c2ca:	4619      	mov	r1, r3
 800c2cc:	3401      	adds	r4, #1
 800c2ce:	9305      	str	r3, [sp, #20]
 800c2d0:	4620      	mov	r0, r4
 800c2d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2d6:	3a30      	subs	r2, #48	; 0x30
 800c2d8:	2a09      	cmp	r2, #9
 800c2da:	d903      	bls.n	800c2e4 <_svfiprintf_r+0x1a8>
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d0c5      	beq.n	800c26c <_svfiprintf_r+0x130>
 800c2e0:	9105      	str	r1, [sp, #20]
 800c2e2:	e7c3      	b.n	800c26c <_svfiprintf_r+0x130>
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	2301      	movs	r3, #1
 800c2e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c2ec:	e7f0      	b.n	800c2d0 <_svfiprintf_r+0x194>
 800c2ee:	ab03      	add	r3, sp, #12
 800c2f0:	9300      	str	r3, [sp, #0]
 800c2f2:	462a      	mov	r2, r5
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	4b10      	ldr	r3, [pc, #64]	; (800c338 <_svfiprintf_r+0x1fc>)
 800c2f8:	a904      	add	r1, sp, #16
 800c2fa:	f3af 8000 	nop.w
 800c2fe:	1c42      	adds	r2, r0, #1
 800c300:	4606      	mov	r6, r0
 800c302:	d1d6      	bne.n	800c2b2 <_svfiprintf_r+0x176>
 800c304:	89ab      	ldrh	r3, [r5, #12]
 800c306:	065b      	lsls	r3, r3, #25
 800c308:	f53f af2c 	bmi.w	800c164 <_svfiprintf_r+0x28>
 800c30c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c30e:	b01d      	add	sp, #116	; 0x74
 800c310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c314:	ab03      	add	r3, sp, #12
 800c316:	9300      	str	r3, [sp, #0]
 800c318:	462a      	mov	r2, r5
 800c31a:	4638      	mov	r0, r7
 800c31c:	4b06      	ldr	r3, [pc, #24]	; (800c338 <_svfiprintf_r+0x1fc>)
 800c31e:	a904      	add	r1, sp, #16
 800c320:	f000 f87c 	bl	800c41c <_printf_i>
 800c324:	e7eb      	b.n	800c2fe <_svfiprintf_r+0x1c2>
 800c326:	bf00      	nop
 800c328:	0800fbd0 	.word	0x0800fbd0
 800c32c:	0800fbd6 	.word	0x0800fbd6
 800c330:	0800fbda 	.word	0x0800fbda
 800c334:	00000000 	.word	0x00000000
 800c338:	0800c085 	.word	0x0800c085

0800c33c <_printf_common>:
 800c33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c340:	4616      	mov	r6, r2
 800c342:	4699      	mov	r9, r3
 800c344:	688a      	ldr	r2, [r1, #8]
 800c346:	690b      	ldr	r3, [r1, #16]
 800c348:	4607      	mov	r7, r0
 800c34a:	4293      	cmp	r3, r2
 800c34c:	bfb8      	it	lt
 800c34e:	4613      	movlt	r3, r2
 800c350:	6033      	str	r3, [r6, #0]
 800c352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c356:	460c      	mov	r4, r1
 800c358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c35c:	b10a      	cbz	r2, 800c362 <_printf_common+0x26>
 800c35e:	3301      	adds	r3, #1
 800c360:	6033      	str	r3, [r6, #0]
 800c362:	6823      	ldr	r3, [r4, #0]
 800c364:	0699      	lsls	r1, r3, #26
 800c366:	bf42      	ittt	mi
 800c368:	6833      	ldrmi	r3, [r6, #0]
 800c36a:	3302      	addmi	r3, #2
 800c36c:	6033      	strmi	r3, [r6, #0]
 800c36e:	6825      	ldr	r5, [r4, #0]
 800c370:	f015 0506 	ands.w	r5, r5, #6
 800c374:	d106      	bne.n	800c384 <_printf_common+0x48>
 800c376:	f104 0a19 	add.w	sl, r4, #25
 800c37a:	68e3      	ldr	r3, [r4, #12]
 800c37c:	6832      	ldr	r2, [r6, #0]
 800c37e:	1a9b      	subs	r3, r3, r2
 800c380:	42ab      	cmp	r3, r5
 800c382:	dc28      	bgt.n	800c3d6 <_printf_common+0x9a>
 800c384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c388:	1e13      	subs	r3, r2, #0
 800c38a:	6822      	ldr	r2, [r4, #0]
 800c38c:	bf18      	it	ne
 800c38e:	2301      	movne	r3, #1
 800c390:	0692      	lsls	r2, r2, #26
 800c392:	d42d      	bmi.n	800c3f0 <_printf_common+0xb4>
 800c394:	4649      	mov	r1, r9
 800c396:	4638      	mov	r0, r7
 800c398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c39c:	47c0      	blx	r8
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d020      	beq.n	800c3e4 <_printf_common+0xa8>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	68e5      	ldr	r5, [r4, #12]
 800c3a6:	f003 0306 	and.w	r3, r3, #6
 800c3aa:	2b04      	cmp	r3, #4
 800c3ac:	bf18      	it	ne
 800c3ae:	2500      	movne	r5, #0
 800c3b0:	6832      	ldr	r2, [r6, #0]
 800c3b2:	f04f 0600 	mov.w	r6, #0
 800c3b6:	68a3      	ldr	r3, [r4, #8]
 800c3b8:	bf08      	it	eq
 800c3ba:	1aad      	subeq	r5, r5, r2
 800c3bc:	6922      	ldr	r2, [r4, #16]
 800c3be:	bf08      	it	eq
 800c3c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c4:	4293      	cmp	r3, r2
 800c3c6:	bfc4      	itt	gt
 800c3c8:	1a9b      	subgt	r3, r3, r2
 800c3ca:	18ed      	addgt	r5, r5, r3
 800c3cc:	341a      	adds	r4, #26
 800c3ce:	42b5      	cmp	r5, r6
 800c3d0:	d11a      	bne.n	800c408 <_printf_common+0xcc>
 800c3d2:	2000      	movs	r0, #0
 800c3d4:	e008      	b.n	800c3e8 <_printf_common+0xac>
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	4652      	mov	r2, sl
 800c3da:	4649      	mov	r1, r9
 800c3dc:	4638      	mov	r0, r7
 800c3de:	47c0      	blx	r8
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	d103      	bne.n	800c3ec <_printf_common+0xb0>
 800c3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ec:	3501      	adds	r5, #1
 800c3ee:	e7c4      	b.n	800c37a <_printf_common+0x3e>
 800c3f0:	2030      	movs	r0, #48	; 0x30
 800c3f2:	18e1      	adds	r1, r4, r3
 800c3f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c3f8:	1c5a      	adds	r2, r3, #1
 800c3fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c3fe:	4422      	add	r2, r4
 800c400:	3302      	adds	r3, #2
 800c402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c406:	e7c5      	b.n	800c394 <_printf_common+0x58>
 800c408:	2301      	movs	r3, #1
 800c40a:	4622      	mov	r2, r4
 800c40c:	4649      	mov	r1, r9
 800c40e:	4638      	mov	r0, r7
 800c410:	47c0      	blx	r8
 800c412:	3001      	adds	r0, #1
 800c414:	d0e6      	beq.n	800c3e4 <_printf_common+0xa8>
 800c416:	3601      	adds	r6, #1
 800c418:	e7d9      	b.n	800c3ce <_printf_common+0x92>
	...

0800c41c <_printf_i>:
 800c41c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c420:	7e0f      	ldrb	r7, [r1, #24]
 800c422:	4691      	mov	r9, r2
 800c424:	2f78      	cmp	r7, #120	; 0x78
 800c426:	4680      	mov	r8, r0
 800c428:	460c      	mov	r4, r1
 800c42a:	469a      	mov	sl, r3
 800c42c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c42e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c432:	d807      	bhi.n	800c444 <_printf_i+0x28>
 800c434:	2f62      	cmp	r7, #98	; 0x62
 800c436:	d80a      	bhi.n	800c44e <_printf_i+0x32>
 800c438:	2f00      	cmp	r7, #0
 800c43a:	f000 80d9 	beq.w	800c5f0 <_printf_i+0x1d4>
 800c43e:	2f58      	cmp	r7, #88	; 0x58
 800c440:	f000 80a4 	beq.w	800c58c <_printf_i+0x170>
 800c444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c44c:	e03a      	b.n	800c4c4 <_printf_i+0xa8>
 800c44e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c452:	2b15      	cmp	r3, #21
 800c454:	d8f6      	bhi.n	800c444 <_printf_i+0x28>
 800c456:	a101      	add	r1, pc, #4	; (adr r1, 800c45c <_printf_i+0x40>)
 800c458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c45c:	0800c4b5 	.word	0x0800c4b5
 800c460:	0800c4c9 	.word	0x0800c4c9
 800c464:	0800c445 	.word	0x0800c445
 800c468:	0800c445 	.word	0x0800c445
 800c46c:	0800c445 	.word	0x0800c445
 800c470:	0800c445 	.word	0x0800c445
 800c474:	0800c4c9 	.word	0x0800c4c9
 800c478:	0800c445 	.word	0x0800c445
 800c47c:	0800c445 	.word	0x0800c445
 800c480:	0800c445 	.word	0x0800c445
 800c484:	0800c445 	.word	0x0800c445
 800c488:	0800c5d7 	.word	0x0800c5d7
 800c48c:	0800c4f9 	.word	0x0800c4f9
 800c490:	0800c5b9 	.word	0x0800c5b9
 800c494:	0800c445 	.word	0x0800c445
 800c498:	0800c445 	.word	0x0800c445
 800c49c:	0800c5f9 	.word	0x0800c5f9
 800c4a0:	0800c445 	.word	0x0800c445
 800c4a4:	0800c4f9 	.word	0x0800c4f9
 800c4a8:	0800c445 	.word	0x0800c445
 800c4ac:	0800c445 	.word	0x0800c445
 800c4b0:	0800c5c1 	.word	0x0800c5c1
 800c4b4:	682b      	ldr	r3, [r5, #0]
 800c4b6:	1d1a      	adds	r2, r3, #4
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	602a      	str	r2, [r5, #0]
 800c4bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	e0a4      	b.n	800c612 <_printf_i+0x1f6>
 800c4c8:	6820      	ldr	r0, [r4, #0]
 800c4ca:	6829      	ldr	r1, [r5, #0]
 800c4cc:	0606      	lsls	r6, r0, #24
 800c4ce:	f101 0304 	add.w	r3, r1, #4
 800c4d2:	d50a      	bpl.n	800c4ea <_printf_i+0xce>
 800c4d4:	680e      	ldr	r6, [r1, #0]
 800c4d6:	602b      	str	r3, [r5, #0]
 800c4d8:	2e00      	cmp	r6, #0
 800c4da:	da03      	bge.n	800c4e4 <_printf_i+0xc8>
 800c4dc:	232d      	movs	r3, #45	; 0x2d
 800c4de:	4276      	negs	r6, r6
 800c4e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4e4:	230a      	movs	r3, #10
 800c4e6:	485e      	ldr	r0, [pc, #376]	; (800c660 <_printf_i+0x244>)
 800c4e8:	e019      	b.n	800c51e <_printf_i+0x102>
 800c4ea:	680e      	ldr	r6, [r1, #0]
 800c4ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4f0:	602b      	str	r3, [r5, #0]
 800c4f2:	bf18      	it	ne
 800c4f4:	b236      	sxthne	r6, r6
 800c4f6:	e7ef      	b.n	800c4d8 <_printf_i+0xbc>
 800c4f8:	682b      	ldr	r3, [r5, #0]
 800c4fa:	6820      	ldr	r0, [r4, #0]
 800c4fc:	1d19      	adds	r1, r3, #4
 800c4fe:	6029      	str	r1, [r5, #0]
 800c500:	0601      	lsls	r1, r0, #24
 800c502:	d501      	bpl.n	800c508 <_printf_i+0xec>
 800c504:	681e      	ldr	r6, [r3, #0]
 800c506:	e002      	b.n	800c50e <_printf_i+0xf2>
 800c508:	0646      	lsls	r6, r0, #25
 800c50a:	d5fb      	bpl.n	800c504 <_printf_i+0xe8>
 800c50c:	881e      	ldrh	r6, [r3, #0]
 800c50e:	2f6f      	cmp	r7, #111	; 0x6f
 800c510:	bf0c      	ite	eq
 800c512:	2308      	moveq	r3, #8
 800c514:	230a      	movne	r3, #10
 800c516:	4852      	ldr	r0, [pc, #328]	; (800c660 <_printf_i+0x244>)
 800c518:	2100      	movs	r1, #0
 800c51a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c51e:	6865      	ldr	r5, [r4, #4]
 800c520:	2d00      	cmp	r5, #0
 800c522:	bfa8      	it	ge
 800c524:	6821      	ldrge	r1, [r4, #0]
 800c526:	60a5      	str	r5, [r4, #8]
 800c528:	bfa4      	itt	ge
 800c52a:	f021 0104 	bicge.w	r1, r1, #4
 800c52e:	6021      	strge	r1, [r4, #0]
 800c530:	b90e      	cbnz	r6, 800c536 <_printf_i+0x11a>
 800c532:	2d00      	cmp	r5, #0
 800c534:	d04d      	beq.n	800c5d2 <_printf_i+0x1b6>
 800c536:	4615      	mov	r5, r2
 800c538:	fbb6 f1f3 	udiv	r1, r6, r3
 800c53c:	fb03 6711 	mls	r7, r3, r1, r6
 800c540:	5dc7      	ldrb	r7, [r0, r7]
 800c542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c546:	4637      	mov	r7, r6
 800c548:	42bb      	cmp	r3, r7
 800c54a:	460e      	mov	r6, r1
 800c54c:	d9f4      	bls.n	800c538 <_printf_i+0x11c>
 800c54e:	2b08      	cmp	r3, #8
 800c550:	d10b      	bne.n	800c56a <_printf_i+0x14e>
 800c552:	6823      	ldr	r3, [r4, #0]
 800c554:	07de      	lsls	r6, r3, #31
 800c556:	d508      	bpl.n	800c56a <_printf_i+0x14e>
 800c558:	6923      	ldr	r3, [r4, #16]
 800c55a:	6861      	ldr	r1, [r4, #4]
 800c55c:	4299      	cmp	r1, r3
 800c55e:	bfde      	ittt	le
 800c560:	2330      	movle	r3, #48	; 0x30
 800c562:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c56a:	1b52      	subs	r2, r2, r5
 800c56c:	6122      	str	r2, [r4, #16]
 800c56e:	464b      	mov	r3, r9
 800c570:	4621      	mov	r1, r4
 800c572:	4640      	mov	r0, r8
 800c574:	f8cd a000 	str.w	sl, [sp]
 800c578:	aa03      	add	r2, sp, #12
 800c57a:	f7ff fedf 	bl	800c33c <_printf_common>
 800c57e:	3001      	adds	r0, #1
 800c580:	d14c      	bne.n	800c61c <_printf_i+0x200>
 800c582:	f04f 30ff 	mov.w	r0, #4294967295
 800c586:	b004      	add	sp, #16
 800c588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c58c:	4834      	ldr	r0, [pc, #208]	; (800c660 <_printf_i+0x244>)
 800c58e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c592:	6829      	ldr	r1, [r5, #0]
 800c594:	6823      	ldr	r3, [r4, #0]
 800c596:	f851 6b04 	ldr.w	r6, [r1], #4
 800c59a:	6029      	str	r1, [r5, #0]
 800c59c:	061d      	lsls	r5, r3, #24
 800c59e:	d514      	bpl.n	800c5ca <_printf_i+0x1ae>
 800c5a0:	07df      	lsls	r7, r3, #31
 800c5a2:	bf44      	itt	mi
 800c5a4:	f043 0320 	orrmi.w	r3, r3, #32
 800c5a8:	6023      	strmi	r3, [r4, #0]
 800c5aa:	b91e      	cbnz	r6, 800c5b4 <_printf_i+0x198>
 800c5ac:	6823      	ldr	r3, [r4, #0]
 800c5ae:	f023 0320 	bic.w	r3, r3, #32
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	2310      	movs	r3, #16
 800c5b6:	e7af      	b.n	800c518 <_printf_i+0xfc>
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	f043 0320 	orr.w	r3, r3, #32
 800c5be:	6023      	str	r3, [r4, #0]
 800c5c0:	2378      	movs	r3, #120	; 0x78
 800c5c2:	4828      	ldr	r0, [pc, #160]	; (800c664 <_printf_i+0x248>)
 800c5c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5c8:	e7e3      	b.n	800c592 <_printf_i+0x176>
 800c5ca:	0659      	lsls	r1, r3, #25
 800c5cc:	bf48      	it	mi
 800c5ce:	b2b6      	uxthmi	r6, r6
 800c5d0:	e7e6      	b.n	800c5a0 <_printf_i+0x184>
 800c5d2:	4615      	mov	r5, r2
 800c5d4:	e7bb      	b.n	800c54e <_printf_i+0x132>
 800c5d6:	682b      	ldr	r3, [r5, #0]
 800c5d8:	6826      	ldr	r6, [r4, #0]
 800c5da:	1d18      	adds	r0, r3, #4
 800c5dc:	6961      	ldr	r1, [r4, #20]
 800c5de:	6028      	str	r0, [r5, #0]
 800c5e0:	0635      	lsls	r5, r6, #24
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	d501      	bpl.n	800c5ea <_printf_i+0x1ce>
 800c5e6:	6019      	str	r1, [r3, #0]
 800c5e8:	e002      	b.n	800c5f0 <_printf_i+0x1d4>
 800c5ea:	0670      	lsls	r0, r6, #25
 800c5ec:	d5fb      	bpl.n	800c5e6 <_printf_i+0x1ca>
 800c5ee:	8019      	strh	r1, [r3, #0]
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4615      	mov	r5, r2
 800c5f4:	6123      	str	r3, [r4, #16]
 800c5f6:	e7ba      	b.n	800c56e <_printf_i+0x152>
 800c5f8:	682b      	ldr	r3, [r5, #0]
 800c5fa:	2100      	movs	r1, #0
 800c5fc:	1d1a      	adds	r2, r3, #4
 800c5fe:	602a      	str	r2, [r5, #0]
 800c600:	681d      	ldr	r5, [r3, #0]
 800c602:	6862      	ldr	r2, [r4, #4]
 800c604:	4628      	mov	r0, r5
 800c606:	f000 f82f 	bl	800c668 <memchr>
 800c60a:	b108      	cbz	r0, 800c610 <_printf_i+0x1f4>
 800c60c:	1b40      	subs	r0, r0, r5
 800c60e:	6060      	str	r0, [r4, #4]
 800c610:	6863      	ldr	r3, [r4, #4]
 800c612:	6123      	str	r3, [r4, #16]
 800c614:	2300      	movs	r3, #0
 800c616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c61a:	e7a8      	b.n	800c56e <_printf_i+0x152>
 800c61c:	462a      	mov	r2, r5
 800c61e:	4649      	mov	r1, r9
 800c620:	4640      	mov	r0, r8
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	47d0      	blx	sl
 800c626:	3001      	adds	r0, #1
 800c628:	d0ab      	beq.n	800c582 <_printf_i+0x166>
 800c62a:	6823      	ldr	r3, [r4, #0]
 800c62c:	079b      	lsls	r3, r3, #30
 800c62e:	d413      	bmi.n	800c658 <_printf_i+0x23c>
 800c630:	68e0      	ldr	r0, [r4, #12]
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	4298      	cmp	r0, r3
 800c636:	bfb8      	it	lt
 800c638:	4618      	movlt	r0, r3
 800c63a:	e7a4      	b.n	800c586 <_printf_i+0x16a>
 800c63c:	2301      	movs	r3, #1
 800c63e:	4632      	mov	r2, r6
 800c640:	4649      	mov	r1, r9
 800c642:	4640      	mov	r0, r8
 800c644:	47d0      	blx	sl
 800c646:	3001      	adds	r0, #1
 800c648:	d09b      	beq.n	800c582 <_printf_i+0x166>
 800c64a:	3501      	adds	r5, #1
 800c64c:	68e3      	ldr	r3, [r4, #12]
 800c64e:	9903      	ldr	r1, [sp, #12]
 800c650:	1a5b      	subs	r3, r3, r1
 800c652:	42ab      	cmp	r3, r5
 800c654:	dcf2      	bgt.n	800c63c <_printf_i+0x220>
 800c656:	e7eb      	b.n	800c630 <_printf_i+0x214>
 800c658:	2500      	movs	r5, #0
 800c65a:	f104 0619 	add.w	r6, r4, #25
 800c65e:	e7f5      	b.n	800c64c <_printf_i+0x230>
 800c660:	0800fbe1 	.word	0x0800fbe1
 800c664:	0800fbf2 	.word	0x0800fbf2

0800c668 <memchr>:
 800c668:	4603      	mov	r3, r0
 800c66a:	b510      	push	{r4, lr}
 800c66c:	b2c9      	uxtb	r1, r1
 800c66e:	4402      	add	r2, r0
 800c670:	4293      	cmp	r3, r2
 800c672:	4618      	mov	r0, r3
 800c674:	d101      	bne.n	800c67a <memchr+0x12>
 800c676:	2000      	movs	r0, #0
 800c678:	e003      	b.n	800c682 <memchr+0x1a>
 800c67a:	7804      	ldrb	r4, [r0, #0]
 800c67c:	3301      	adds	r3, #1
 800c67e:	428c      	cmp	r4, r1
 800c680:	d1f6      	bne.n	800c670 <memchr+0x8>
 800c682:	bd10      	pop	{r4, pc}

0800c684 <memcpy>:
 800c684:	440a      	add	r2, r1
 800c686:	4291      	cmp	r1, r2
 800c688:	f100 33ff 	add.w	r3, r0, #4294967295
 800c68c:	d100      	bne.n	800c690 <memcpy+0xc>
 800c68e:	4770      	bx	lr
 800c690:	b510      	push	{r4, lr}
 800c692:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c696:	4291      	cmp	r1, r2
 800c698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c69c:	d1f9      	bne.n	800c692 <memcpy+0xe>
 800c69e:	bd10      	pop	{r4, pc}

0800c6a0 <memmove>:
 800c6a0:	4288      	cmp	r0, r1
 800c6a2:	b510      	push	{r4, lr}
 800c6a4:	eb01 0402 	add.w	r4, r1, r2
 800c6a8:	d902      	bls.n	800c6b0 <memmove+0x10>
 800c6aa:	4284      	cmp	r4, r0
 800c6ac:	4623      	mov	r3, r4
 800c6ae:	d807      	bhi.n	800c6c0 <memmove+0x20>
 800c6b0:	1e43      	subs	r3, r0, #1
 800c6b2:	42a1      	cmp	r1, r4
 800c6b4:	d008      	beq.n	800c6c8 <memmove+0x28>
 800c6b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c6ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c6be:	e7f8      	b.n	800c6b2 <memmove+0x12>
 800c6c0:	4601      	mov	r1, r0
 800c6c2:	4402      	add	r2, r0
 800c6c4:	428a      	cmp	r2, r1
 800c6c6:	d100      	bne.n	800c6ca <memmove+0x2a>
 800c6c8:	bd10      	pop	{r4, pc}
 800c6ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6d2:	e7f7      	b.n	800c6c4 <memmove+0x24>

0800c6d4 <_free_r>:
 800c6d4:	b538      	push	{r3, r4, r5, lr}
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	2900      	cmp	r1, #0
 800c6da:	d040      	beq.n	800c75e <_free_r+0x8a>
 800c6dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6e0:	1f0c      	subs	r4, r1, #4
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	bfb8      	it	lt
 800c6e6:	18e4      	addlt	r4, r4, r3
 800c6e8:	f000 f910 	bl	800c90c <__malloc_lock>
 800c6ec:	4a1c      	ldr	r2, [pc, #112]	; (800c760 <_free_r+0x8c>)
 800c6ee:	6813      	ldr	r3, [r2, #0]
 800c6f0:	b933      	cbnz	r3, 800c700 <_free_r+0x2c>
 800c6f2:	6063      	str	r3, [r4, #4]
 800c6f4:	6014      	str	r4, [r2, #0]
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6fc:	f000 b90c 	b.w	800c918 <__malloc_unlock>
 800c700:	42a3      	cmp	r3, r4
 800c702:	d908      	bls.n	800c716 <_free_r+0x42>
 800c704:	6820      	ldr	r0, [r4, #0]
 800c706:	1821      	adds	r1, r4, r0
 800c708:	428b      	cmp	r3, r1
 800c70a:	bf01      	itttt	eq
 800c70c:	6819      	ldreq	r1, [r3, #0]
 800c70e:	685b      	ldreq	r3, [r3, #4]
 800c710:	1809      	addeq	r1, r1, r0
 800c712:	6021      	streq	r1, [r4, #0]
 800c714:	e7ed      	b.n	800c6f2 <_free_r+0x1e>
 800c716:	461a      	mov	r2, r3
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	b10b      	cbz	r3, 800c720 <_free_r+0x4c>
 800c71c:	42a3      	cmp	r3, r4
 800c71e:	d9fa      	bls.n	800c716 <_free_r+0x42>
 800c720:	6811      	ldr	r1, [r2, #0]
 800c722:	1850      	adds	r0, r2, r1
 800c724:	42a0      	cmp	r0, r4
 800c726:	d10b      	bne.n	800c740 <_free_r+0x6c>
 800c728:	6820      	ldr	r0, [r4, #0]
 800c72a:	4401      	add	r1, r0
 800c72c:	1850      	adds	r0, r2, r1
 800c72e:	4283      	cmp	r3, r0
 800c730:	6011      	str	r1, [r2, #0]
 800c732:	d1e0      	bne.n	800c6f6 <_free_r+0x22>
 800c734:	6818      	ldr	r0, [r3, #0]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	4401      	add	r1, r0
 800c73a:	6011      	str	r1, [r2, #0]
 800c73c:	6053      	str	r3, [r2, #4]
 800c73e:	e7da      	b.n	800c6f6 <_free_r+0x22>
 800c740:	d902      	bls.n	800c748 <_free_r+0x74>
 800c742:	230c      	movs	r3, #12
 800c744:	602b      	str	r3, [r5, #0]
 800c746:	e7d6      	b.n	800c6f6 <_free_r+0x22>
 800c748:	6820      	ldr	r0, [r4, #0]
 800c74a:	1821      	adds	r1, r4, r0
 800c74c:	428b      	cmp	r3, r1
 800c74e:	bf01      	itttt	eq
 800c750:	6819      	ldreq	r1, [r3, #0]
 800c752:	685b      	ldreq	r3, [r3, #4]
 800c754:	1809      	addeq	r1, r1, r0
 800c756:	6021      	streq	r1, [r4, #0]
 800c758:	6063      	str	r3, [r4, #4]
 800c75a:	6054      	str	r4, [r2, #4]
 800c75c:	e7cb      	b.n	800c6f6 <_free_r+0x22>
 800c75e:	bd38      	pop	{r3, r4, r5, pc}
 800c760:	20001c50 	.word	0x20001c50

0800c764 <sbrk_aligned>:
 800c764:	b570      	push	{r4, r5, r6, lr}
 800c766:	4e0e      	ldr	r6, [pc, #56]	; (800c7a0 <sbrk_aligned+0x3c>)
 800c768:	460c      	mov	r4, r1
 800c76a:	6831      	ldr	r1, [r6, #0]
 800c76c:	4605      	mov	r5, r0
 800c76e:	b911      	cbnz	r1, 800c776 <sbrk_aligned+0x12>
 800c770:	f000 f8bc 	bl	800c8ec <_sbrk_r>
 800c774:	6030      	str	r0, [r6, #0]
 800c776:	4621      	mov	r1, r4
 800c778:	4628      	mov	r0, r5
 800c77a:	f000 f8b7 	bl	800c8ec <_sbrk_r>
 800c77e:	1c43      	adds	r3, r0, #1
 800c780:	d00a      	beq.n	800c798 <sbrk_aligned+0x34>
 800c782:	1cc4      	adds	r4, r0, #3
 800c784:	f024 0403 	bic.w	r4, r4, #3
 800c788:	42a0      	cmp	r0, r4
 800c78a:	d007      	beq.n	800c79c <sbrk_aligned+0x38>
 800c78c:	1a21      	subs	r1, r4, r0
 800c78e:	4628      	mov	r0, r5
 800c790:	f000 f8ac 	bl	800c8ec <_sbrk_r>
 800c794:	3001      	adds	r0, #1
 800c796:	d101      	bne.n	800c79c <sbrk_aligned+0x38>
 800c798:	f04f 34ff 	mov.w	r4, #4294967295
 800c79c:	4620      	mov	r0, r4
 800c79e:	bd70      	pop	{r4, r5, r6, pc}
 800c7a0:	20001c54 	.word	0x20001c54

0800c7a4 <_malloc_r>:
 800c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	1ccd      	adds	r5, r1, #3
 800c7aa:	f025 0503 	bic.w	r5, r5, #3
 800c7ae:	3508      	adds	r5, #8
 800c7b0:	2d0c      	cmp	r5, #12
 800c7b2:	bf38      	it	cc
 800c7b4:	250c      	movcc	r5, #12
 800c7b6:	2d00      	cmp	r5, #0
 800c7b8:	4607      	mov	r7, r0
 800c7ba:	db01      	blt.n	800c7c0 <_malloc_r+0x1c>
 800c7bc:	42a9      	cmp	r1, r5
 800c7be:	d905      	bls.n	800c7cc <_malloc_r+0x28>
 800c7c0:	230c      	movs	r3, #12
 800c7c2:	2600      	movs	r6, #0
 800c7c4:	603b      	str	r3, [r7, #0]
 800c7c6:	4630      	mov	r0, r6
 800c7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7cc:	4e2e      	ldr	r6, [pc, #184]	; (800c888 <_malloc_r+0xe4>)
 800c7ce:	f000 f89d 	bl	800c90c <__malloc_lock>
 800c7d2:	6833      	ldr	r3, [r6, #0]
 800c7d4:	461c      	mov	r4, r3
 800c7d6:	bb34      	cbnz	r4, 800c826 <_malloc_r+0x82>
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4638      	mov	r0, r7
 800c7dc:	f7ff ffc2 	bl	800c764 <sbrk_aligned>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	d14d      	bne.n	800c882 <_malloc_r+0xde>
 800c7e6:	6834      	ldr	r4, [r6, #0]
 800c7e8:	4626      	mov	r6, r4
 800c7ea:	2e00      	cmp	r6, #0
 800c7ec:	d140      	bne.n	800c870 <_malloc_r+0xcc>
 800c7ee:	6823      	ldr	r3, [r4, #0]
 800c7f0:	4631      	mov	r1, r6
 800c7f2:	4638      	mov	r0, r7
 800c7f4:	eb04 0803 	add.w	r8, r4, r3
 800c7f8:	f000 f878 	bl	800c8ec <_sbrk_r>
 800c7fc:	4580      	cmp	r8, r0
 800c7fe:	d13a      	bne.n	800c876 <_malloc_r+0xd2>
 800c800:	6821      	ldr	r1, [r4, #0]
 800c802:	3503      	adds	r5, #3
 800c804:	1a6d      	subs	r5, r5, r1
 800c806:	f025 0503 	bic.w	r5, r5, #3
 800c80a:	3508      	adds	r5, #8
 800c80c:	2d0c      	cmp	r5, #12
 800c80e:	bf38      	it	cc
 800c810:	250c      	movcc	r5, #12
 800c812:	4638      	mov	r0, r7
 800c814:	4629      	mov	r1, r5
 800c816:	f7ff ffa5 	bl	800c764 <sbrk_aligned>
 800c81a:	3001      	adds	r0, #1
 800c81c:	d02b      	beq.n	800c876 <_malloc_r+0xd2>
 800c81e:	6823      	ldr	r3, [r4, #0]
 800c820:	442b      	add	r3, r5
 800c822:	6023      	str	r3, [r4, #0]
 800c824:	e00e      	b.n	800c844 <_malloc_r+0xa0>
 800c826:	6822      	ldr	r2, [r4, #0]
 800c828:	1b52      	subs	r2, r2, r5
 800c82a:	d41e      	bmi.n	800c86a <_malloc_r+0xc6>
 800c82c:	2a0b      	cmp	r2, #11
 800c82e:	d916      	bls.n	800c85e <_malloc_r+0xba>
 800c830:	1961      	adds	r1, r4, r5
 800c832:	42a3      	cmp	r3, r4
 800c834:	6025      	str	r5, [r4, #0]
 800c836:	bf18      	it	ne
 800c838:	6059      	strne	r1, [r3, #4]
 800c83a:	6863      	ldr	r3, [r4, #4]
 800c83c:	bf08      	it	eq
 800c83e:	6031      	streq	r1, [r6, #0]
 800c840:	5162      	str	r2, [r4, r5]
 800c842:	604b      	str	r3, [r1, #4]
 800c844:	4638      	mov	r0, r7
 800c846:	f104 060b 	add.w	r6, r4, #11
 800c84a:	f000 f865 	bl	800c918 <__malloc_unlock>
 800c84e:	f026 0607 	bic.w	r6, r6, #7
 800c852:	1d23      	adds	r3, r4, #4
 800c854:	1af2      	subs	r2, r6, r3
 800c856:	d0b6      	beq.n	800c7c6 <_malloc_r+0x22>
 800c858:	1b9b      	subs	r3, r3, r6
 800c85a:	50a3      	str	r3, [r4, r2]
 800c85c:	e7b3      	b.n	800c7c6 <_malloc_r+0x22>
 800c85e:	6862      	ldr	r2, [r4, #4]
 800c860:	42a3      	cmp	r3, r4
 800c862:	bf0c      	ite	eq
 800c864:	6032      	streq	r2, [r6, #0]
 800c866:	605a      	strne	r2, [r3, #4]
 800c868:	e7ec      	b.n	800c844 <_malloc_r+0xa0>
 800c86a:	4623      	mov	r3, r4
 800c86c:	6864      	ldr	r4, [r4, #4]
 800c86e:	e7b2      	b.n	800c7d6 <_malloc_r+0x32>
 800c870:	4634      	mov	r4, r6
 800c872:	6876      	ldr	r6, [r6, #4]
 800c874:	e7b9      	b.n	800c7ea <_malloc_r+0x46>
 800c876:	230c      	movs	r3, #12
 800c878:	4638      	mov	r0, r7
 800c87a:	603b      	str	r3, [r7, #0]
 800c87c:	f000 f84c 	bl	800c918 <__malloc_unlock>
 800c880:	e7a1      	b.n	800c7c6 <_malloc_r+0x22>
 800c882:	6025      	str	r5, [r4, #0]
 800c884:	e7de      	b.n	800c844 <_malloc_r+0xa0>
 800c886:	bf00      	nop
 800c888:	20001c50 	.word	0x20001c50

0800c88c <_realloc_r>:
 800c88c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c890:	4680      	mov	r8, r0
 800c892:	4614      	mov	r4, r2
 800c894:	460e      	mov	r6, r1
 800c896:	b921      	cbnz	r1, 800c8a2 <_realloc_r+0x16>
 800c898:	4611      	mov	r1, r2
 800c89a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c89e:	f7ff bf81 	b.w	800c7a4 <_malloc_r>
 800c8a2:	b92a      	cbnz	r2, 800c8b0 <_realloc_r+0x24>
 800c8a4:	f7ff ff16 	bl	800c6d4 <_free_r>
 800c8a8:	4625      	mov	r5, r4
 800c8aa:	4628      	mov	r0, r5
 800c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b0:	f000 f838 	bl	800c924 <_malloc_usable_size_r>
 800c8b4:	4284      	cmp	r4, r0
 800c8b6:	4607      	mov	r7, r0
 800c8b8:	d802      	bhi.n	800c8c0 <_realloc_r+0x34>
 800c8ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8be:	d812      	bhi.n	800c8e6 <_realloc_r+0x5a>
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4640      	mov	r0, r8
 800c8c4:	f7ff ff6e 	bl	800c7a4 <_malloc_r>
 800c8c8:	4605      	mov	r5, r0
 800c8ca:	2800      	cmp	r0, #0
 800c8cc:	d0ed      	beq.n	800c8aa <_realloc_r+0x1e>
 800c8ce:	42bc      	cmp	r4, r7
 800c8d0:	4622      	mov	r2, r4
 800c8d2:	4631      	mov	r1, r6
 800c8d4:	bf28      	it	cs
 800c8d6:	463a      	movcs	r2, r7
 800c8d8:	f7ff fed4 	bl	800c684 <memcpy>
 800c8dc:	4631      	mov	r1, r6
 800c8de:	4640      	mov	r0, r8
 800c8e0:	f7ff fef8 	bl	800c6d4 <_free_r>
 800c8e4:	e7e1      	b.n	800c8aa <_realloc_r+0x1e>
 800c8e6:	4635      	mov	r5, r6
 800c8e8:	e7df      	b.n	800c8aa <_realloc_r+0x1e>
	...

0800c8ec <_sbrk_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	4d05      	ldr	r5, [pc, #20]	; (800c908 <_sbrk_r+0x1c>)
 800c8f2:	4604      	mov	r4, r0
 800c8f4:	4608      	mov	r0, r1
 800c8f6:	602b      	str	r3, [r5, #0]
 800c8f8:	f7f6 ff0a 	bl	8003710 <_sbrk>
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	d102      	bne.n	800c906 <_sbrk_r+0x1a>
 800c900:	682b      	ldr	r3, [r5, #0]
 800c902:	b103      	cbz	r3, 800c906 <_sbrk_r+0x1a>
 800c904:	6023      	str	r3, [r4, #0]
 800c906:	bd38      	pop	{r3, r4, r5, pc}
 800c908:	20001c58 	.word	0x20001c58

0800c90c <__malloc_lock>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__malloc_lock+0x8>)
 800c90e:	f000 b811 	b.w	800c934 <__retarget_lock_acquire_recursive>
 800c912:	bf00      	nop
 800c914:	20001c5c 	.word	0x20001c5c

0800c918 <__malloc_unlock>:
 800c918:	4801      	ldr	r0, [pc, #4]	; (800c920 <__malloc_unlock+0x8>)
 800c91a:	f000 b80c 	b.w	800c936 <__retarget_lock_release_recursive>
 800c91e:	bf00      	nop
 800c920:	20001c5c 	.word	0x20001c5c

0800c924 <_malloc_usable_size_r>:
 800c924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c928:	1f18      	subs	r0, r3, #4
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	bfbc      	itt	lt
 800c92e:	580b      	ldrlt	r3, [r1, r0]
 800c930:	18c0      	addlt	r0, r0, r3
 800c932:	4770      	bx	lr

0800c934 <__retarget_lock_acquire_recursive>:
 800c934:	4770      	bx	lr

0800c936 <__retarget_lock_release_recursive>:
 800c936:	4770      	bx	lr

0800c938 <log>:
 800c938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c93a:	4604      	mov	r4, r0
 800c93c:	460d      	mov	r5, r1
 800c93e:	f000 f853 	bl	800c9e8 <__ieee754_log>
 800c942:	4622      	mov	r2, r4
 800c944:	4606      	mov	r6, r0
 800c946:	460f      	mov	r7, r1
 800c948:	462b      	mov	r3, r5
 800c94a:	4620      	mov	r0, r4
 800c94c:	4629      	mov	r1, r5
 800c94e:	f7f4 f85d 	bl	8000a0c <__aeabi_dcmpun>
 800c952:	b998      	cbnz	r0, 800c97c <log+0x44>
 800c954:	2200      	movs	r2, #0
 800c956:	2300      	movs	r3, #0
 800c958:	4620      	mov	r0, r4
 800c95a:	4629      	mov	r1, r5
 800c95c:	f7f4 f84c 	bl	80009f8 <__aeabi_dcmpgt>
 800c960:	b960      	cbnz	r0, 800c97c <log+0x44>
 800c962:	2200      	movs	r2, #0
 800c964:	2300      	movs	r3, #0
 800c966:	4620      	mov	r0, r4
 800c968:	4629      	mov	r1, r5
 800c96a:	f7f4 f81d 	bl	80009a8 <__aeabi_dcmpeq>
 800c96e:	b140      	cbz	r0, 800c982 <log+0x4a>
 800c970:	f7ff fb2e 	bl	800bfd0 <__errno>
 800c974:	2322      	movs	r3, #34	; 0x22
 800c976:	2600      	movs	r6, #0
 800c978:	4f06      	ldr	r7, [pc, #24]	; (800c994 <log+0x5c>)
 800c97a:	6003      	str	r3, [r0, #0]
 800c97c:	4630      	mov	r0, r6
 800c97e:	4639      	mov	r1, r7
 800c980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c982:	f7ff fb25 	bl	800bfd0 <__errno>
 800c986:	2321      	movs	r3, #33	; 0x21
 800c988:	6003      	str	r3, [r0, #0]
 800c98a:	4803      	ldr	r0, [pc, #12]	; (800c998 <log+0x60>)
 800c98c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c990:	f000 ba8c 	b.w	800ceac <nan>
 800c994:	fff00000 	.word	0xfff00000
 800c998:	0800fbd5 	.word	0x0800fbd5

0800c99c <sqrt>:
 800c99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99e:	4606      	mov	r6, r0
 800c9a0:	460f      	mov	r7, r1
 800c9a2:	f000 f9d3 	bl	800cd4c <__ieee754_sqrt>
 800c9a6:	4632      	mov	r2, r6
 800c9a8:	4604      	mov	r4, r0
 800c9aa:	460d      	mov	r5, r1
 800c9ac:	463b      	mov	r3, r7
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	4639      	mov	r1, r7
 800c9b2:	f7f4 f82b 	bl	8000a0c <__aeabi_dcmpun>
 800c9b6:	b990      	cbnz	r0, 800c9de <sqrt+0x42>
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	4630      	mov	r0, r6
 800c9be:	4639      	mov	r1, r7
 800c9c0:	f7f3 fffc 	bl	80009bc <__aeabi_dcmplt>
 800c9c4:	b158      	cbz	r0, 800c9de <sqrt+0x42>
 800c9c6:	f7ff fb03 	bl	800bfd0 <__errno>
 800c9ca:	2321      	movs	r3, #33	; 0x21
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	6003      	str	r3, [r0, #0]
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	4610      	mov	r0, r2
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	f7f3 fea9 	bl	800072c <__aeabi_ddiv>
 800c9da:	4604      	mov	r4, r0
 800c9dc:	460d      	mov	r5, r1
 800c9de:	4620      	mov	r0, r4
 800c9e0:	4629      	mov	r1, r5
 800c9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9e4:	0000      	movs	r0, r0
	...

0800c9e8 <__ieee754_log>:
 800c9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	460d      	mov	r5, r1
 800c9f6:	b087      	sub	sp, #28
 800c9f8:	da24      	bge.n	800ca44 <__ieee754_log+0x5c>
 800c9fa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800c9fe:	4304      	orrs	r4, r0
 800ca00:	d108      	bne.n	800ca14 <__ieee754_log+0x2c>
 800ca02:	2200      	movs	r2, #0
 800ca04:	2300      	movs	r3, #0
 800ca06:	2000      	movs	r0, #0
 800ca08:	49cb      	ldr	r1, [pc, #812]	; (800cd38 <__ieee754_log+0x350>)
 800ca0a:	f7f3 fe8f 	bl	800072c <__aeabi_ddiv>
 800ca0e:	b007      	add	sp, #28
 800ca10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca14:	2900      	cmp	r1, #0
 800ca16:	da04      	bge.n	800ca22 <__ieee754_log+0x3a>
 800ca18:	f7f3 fba6 	bl	8000168 <__aeabi_dsub>
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	2300      	movs	r3, #0
 800ca20:	e7f3      	b.n	800ca0a <__ieee754_log+0x22>
 800ca22:	2200      	movs	r2, #0
 800ca24:	4bc5      	ldr	r3, [pc, #788]	; (800cd3c <__ieee754_log+0x354>)
 800ca26:	f7f3 fd57 	bl	80004d8 <__aeabi_dmul>
 800ca2a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800ca2e:	4602      	mov	r2, r0
 800ca30:	460b      	mov	r3, r1
 800ca32:	460d      	mov	r5, r1
 800ca34:	49c2      	ldr	r1, [pc, #776]	; (800cd40 <__ieee754_log+0x358>)
 800ca36:	428d      	cmp	r5, r1
 800ca38:	dd06      	ble.n	800ca48 <__ieee754_log+0x60>
 800ca3a:	4610      	mov	r0, r2
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f7f3 fb95 	bl	800016c <__adddf3>
 800ca42:	e7e4      	b.n	800ca0e <__ieee754_log+0x26>
 800ca44:	2600      	movs	r6, #0
 800ca46:	e7f5      	b.n	800ca34 <__ieee754_log+0x4c>
 800ca48:	152c      	asrs	r4, r5, #20
 800ca4a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800ca4e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800ca52:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800ca56:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800ca5a:	4426      	add	r6, r4
 800ca5c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800ca60:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800ca64:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800ca68:	ea41 0305 	orr.w	r3, r1, r5
 800ca6c:	4610      	mov	r0, r2
 800ca6e:	4619      	mov	r1, r3
 800ca70:	2200      	movs	r2, #0
 800ca72:	4bb4      	ldr	r3, [pc, #720]	; (800cd44 <__ieee754_log+0x35c>)
 800ca74:	f7f3 fb78 	bl	8000168 <__aeabi_dsub>
 800ca78:	1cab      	adds	r3, r5, #2
 800ca7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	4682      	mov	sl, r0
 800ca82:	468b      	mov	fp, r1
 800ca84:	f04f 0200 	mov.w	r2, #0
 800ca88:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800ca8c:	dc53      	bgt.n	800cb36 <__ieee754_log+0x14e>
 800ca8e:	2300      	movs	r3, #0
 800ca90:	f7f3 ff8a 	bl	80009a8 <__aeabi_dcmpeq>
 800ca94:	b1d0      	cbz	r0, 800cacc <__ieee754_log+0xe4>
 800ca96:	2c00      	cmp	r4, #0
 800ca98:	f000 8122 	beq.w	800cce0 <__ieee754_log+0x2f8>
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	f7f3 fcb1 	bl	8000404 <__aeabi_i2d>
 800caa2:	a391      	add	r3, pc, #580	; (adr r3, 800cce8 <__ieee754_log+0x300>)
 800caa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa8:	4606      	mov	r6, r0
 800caaa:	460f      	mov	r7, r1
 800caac:	f7f3 fd14 	bl	80004d8 <__aeabi_dmul>
 800cab0:	a38f      	add	r3, pc, #572	; (adr r3, 800ccf0 <__ieee754_log+0x308>)
 800cab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	4630      	mov	r0, r6
 800cabc:	4639      	mov	r1, r7
 800cabe:	f7f3 fd0b 	bl	80004d8 <__aeabi_dmul>
 800cac2:	4602      	mov	r2, r0
 800cac4:	460b      	mov	r3, r1
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	e7b8      	b.n	800ca3e <__ieee754_log+0x56>
 800cacc:	a38a      	add	r3, pc, #552	; (adr r3, 800ccf8 <__ieee754_log+0x310>)
 800cace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad2:	4650      	mov	r0, sl
 800cad4:	4659      	mov	r1, fp
 800cad6:	f7f3 fcff 	bl	80004d8 <__aeabi_dmul>
 800cada:	4602      	mov	r2, r0
 800cadc:	460b      	mov	r3, r1
 800cade:	2000      	movs	r0, #0
 800cae0:	4999      	ldr	r1, [pc, #612]	; (800cd48 <__ieee754_log+0x360>)
 800cae2:	f7f3 fb41 	bl	8000168 <__aeabi_dsub>
 800cae6:	4652      	mov	r2, sl
 800cae8:	4606      	mov	r6, r0
 800caea:	460f      	mov	r7, r1
 800caec:	465b      	mov	r3, fp
 800caee:	4650      	mov	r0, sl
 800caf0:	4659      	mov	r1, fp
 800caf2:	f7f3 fcf1 	bl	80004d8 <__aeabi_dmul>
 800caf6:	4602      	mov	r2, r0
 800caf8:	460b      	mov	r3, r1
 800cafa:	4630      	mov	r0, r6
 800cafc:	4639      	mov	r1, r7
 800cafe:	f7f3 fceb 	bl	80004d8 <__aeabi_dmul>
 800cb02:	4606      	mov	r6, r0
 800cb04:	460f      	mov	r7, r1
 800cb06:	b914      	cbnz	r4, 800cb0e <__ieee754_log+0x126>
 800cb08:	4632      	mov	r2, r6
 800cb0a:	463b      	mov	r3, r7
 800cb0c:	e0a2      	b.n	800cc54 <__ieee754_log+0x26c>
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f7f3 fc78 	bl	8000404 <__aeabi_i2d>
 800cb14:	a374      	add	r3, pc, #464	; (adr r3, 800cce8 <__ieee754_log+0x300>)
 800cb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	4689      	mov	r9, r1
 800cb1e:	f7f3 fcdb 	bl	80004d8 <__aeabi_dmul>
 800cb22:	a373      	add	r3, pc, #460	; (adr r3, 800ccf0 <__ieee754_log+0x308>)
 800cb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb28:	4604      	mov	r4, r0
 800cb2a:	460d      	mov	r5, r1
 800cb2c:	4640      	mov	r0, r8
 800cb2e:	4649      	mov	r1, r9
 800cb30:	f7f3 fcd2 	bl	80004d8 <__aeabi_dmul>
 800cb34:	e0a7      	b.n	800cc86 <__ieee754_log+0x29e>
 800cb36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb3a:	f7f3 fb17 	bl	800016c <__adddf3>
 800cb3e:	4602      	mov	r2, r0
 800cb40:	460b      	mov	r3, r1
 800cb42:	4650      	mov	r0, sl
 800cb44:	4659      	mov	r1, fp
 800cb46:	f7f3 fdf1 	bl	800072c <__aeabi_ddiv>
 800cb4a:	e9cd 0100 	strd	r0, r1, [sp]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f7f3 fc58 	bl	8000404 <__aeabi_i2d>
 800cb54:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb5c:	4610      	mov	r0, r2
 800cb5e:	4619      	mov	r1, r3
 800cb60:	f7f3 fcba 	bl	80004d8 <__aeabi_dmul>
 800cb64:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800cb68:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800cb6c:	4602      	mov	r2, r0
 800cb6e:	9305      	str	r3, [sp, #20]
 800cb70:	460b      	mov	r3, r1
 800cb72:	4606      	mov	r6, r0
 800cb74:	460f      	mov	r7, r1
 800cb76:	f7f3 fcaf 	bl	80004d8 <__aeabi_dmul>
 800cb7a:	a361      	add	r3, pc, #388	; (adr r3, 800cd00 <__ieee754_log+0x318>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	4680      	mov	r8, r0
 800cb82:	4689      	mov	r9, r1
 800cb84:	f7f3 fca8 	bl	80004d8 <__aeabi_dmul>
 800cb88:	a35f      	add	r3, pc, #380	; (adr r3, 800cd08 <__ieee754_log+0x320>)
 800cb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb8e:	f7f3 faed 	bl	800016c <__adddf3>
 800cb92:	4642      	mov	r2, r8
 800cb94:	464b      	mov	r3, r9
 800cb96:	f7f3 fc9f 	bl	80004d8 <__aeabi_dmul>
 800cb9a:	a35d      	add	r3, pc, #372	; (adr r3, 800cd10 <__ieee754_log+0x328>)
 800cb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cba0:	f7f3 fae4 	bl	800016c <__adddf3>
 800cba4:	4642      	mov	r2, r8
 800cba6:	464b      	mov	r3, r9
 800cba8:	f7f3 fc96 	bl	80004d8 <__aeabi_dmul>
 800cbac:	a35a      	add	r3, pc, #360	; (adr r3, 800cd18 <__ieee754_log+0x330>)
 800cbae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb2:	f7f3 fadb 	bl	800016c <__adddf3>
 800cbb6:	4632      	mov	r2, r6
 800cbb8:	463b      	mov	r3, r7
 800cbba:	f7f3 fc8d 	bl	80004d8 <__aeabi_dmul>
 800cbbe:	a358      	add	r3, pc, #352	; (adr r3, 800cd20 <__ieee754_log+0x338>)
 800cbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbc4:	4606      	mov	r6, r0
 800cbc6:	460f      	mov	r7, r1
 800cbc8:	4640      	mov	r0, r8
 800cbca:	4649      	mov	r1, r9
 800cbcc:	f7f3 fc84 	bl	80004d8 <__aeabi_dmul>
 800cbd0:	a355      	add	r3, pc, #340	; (adr r3, 800cd28 <__ieee754_log+0x340>)
 800cbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd6:	f7f3 fac9 	bl	800016c <__adddf3>
 800cbda:	4642      	mov	r2, r8
 800cbdc:	464b      	mov	r3, r9
 800cbde:	f7f3 fc7b 	bl	80004d8 <__aeabi_dmul>
 800cbe2:	a353      	add	r3, pc, #332	; (adr r3, 800cd30 <__ieee754_log+0x348>)
 800cbe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbe8:	f7f3 fac0 	bl	800016c <__adddf3>
 800cbec:	4642      	mov	r2, r8
 800cbee:	464b      	mov	r3, r9
 800cbf0:	f7f3 fc72 	bl	80004d8 <__aeabi_dmul>
 800cbf4:	460b      	mov	r3, r1
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	4639      	mov	r1, r7
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	f7f3 fab6 	bl	800016c <__adddf3>
 800cc00:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800cc04:	9b05      	ldr	r3, [sp, #20]
 800cc06:	3551      	adds	r5, #81	; 0x51
 800cc08:	431d      	orrs	r5, r3
 800cc0a:	2d00      	cmp	r5, #0
 800cc0c:	4680      	mov	r8, r0
 800cc0e:	4689      	mov	r9, r1
 800cc10:	dd48      	ble.n	800cca4 <__ieee754_log+0x2bc>
 800cc12:	2200      	movs	r2, #0
 800cc14:	4b4c      	ldr	r3, [pc, #304]	; (800cd48 <__ieee754_log+0x360>)
 800cc16:	4650      	mov	r0, sl
 800cc18:	4659      	mov	r1, fp
 800cc1a:	f7f3 fc5d 	bl	80004d8 <__aeabi_dmul>
 800cc1e:	4652      	mov	r2, sl
 800cc20:	465b      	mov	r3, fp
 800cc22:	f7f3 fc59 	bl	80004d8 <__aeabi_dmul>
 800cc26:	4602      	mov	r2, r0
 800cc28:	460b      	mov	r3, r1
 800cc2a:	4606      	mov	r6, r0
 800cc2c:	460f      	mov	r7, r1
 800cc2e:	4640      	mov	r0, r8
 800cc30:	4649      	mov	r1, r9
 800cc32:	f7f3 fa9b 	bl	800016c <__adddf3>
 800cc36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cc3a:	f7f3 fc4d 	bl	80004d8 <__aeabi_dmul>
 800cc3e:	4680      	mov	r8, r0
 800cc40:	4689      	mov	r9, r1
 800cc42:	b964      	cbnz	r4, 800cc5e <__ieee754_log+0x276>
 800cc44:	4602      	mov	r2, r0
 800cc46:	460b      	mov	r3, r1
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	f7f3 fa8c 	bl	8000168 <__aeabi_dsub>
 800cc50:	4602      	mov	r2, r0
 800cc52:	460b      	mov	r3, r1
 800cc54:	4650      	mov	r0, sl
 800cc56:	4659      	mov	r1, fp
 800cc58:	f7f3 fa86 	bl	8000168 <__aeabi_dsub>
 800cc5c:	e6d7      	b.n	800ca0e <__ieee754_log+0x26>
 800cc5e:	a322      	add	r3, pc, #136	; (adr r3, 800cce8 <__ieee754_log+0x300>)
 800cc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc68:	f7f3 fc36 	bl	80004d8 <__aeabi_dmul>
 800cc6c:	a320      	add	r3, pc, #128	; (adr r3, 800ccf0 <__ieee754_log+0x308>)
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	4604      	mov	r4, r0
 800cc74:	460d      	mov	r5, r1
 800cc76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc7a:	f7f3 fc2d 	bl	80004d8 <__aeabi_dmul>
 800cc7e:	4642      	mov	r2, r8
 800cc80:	464b      	mov	r3, r9
 800cc82:	f7f3 fa73 	bl	800016c <__adddf3>
 800cc86:	4602      	mov	r2, r0
 800cc88:	460b      	mov	r3, r1
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	f7f3 fa6b 	bl	8000168 <__aeabi_dsub>
 800cc92:	4652      	mov	r2, sl
 800cc94:	465b      	mov	r3, fp
 800cc96:	f7f3 fa67 	bl	8000168 <__aeabi_dsub>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	460b      	mov	r3, r1
 800cc9e:	4620      	mov	r0, r4
 800cca0:	4629      	mov	r1, r5
 800cca2:	e7d9      	b.n	800cc58 <__ieee754_log+0x270>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4650      	mov	r0, sl
 800ccaa:	4659      	mov	r1, fp
 800ccac:	f7f3 fa5c 	bl	8000168 <__aeabi_dsub>
 800ccb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb4:	f7f3 fc10 	bl	80004d8 <__aeabi_dmul>
 800ccb8:	4606      	mov	r6, r0
 800ccba:	460f      	mov	r7, r1
 800ccbc:	2c00      	cmp	r4, #0
 800ccbe:	f43f af23 	beq.w	800cb08 <__ieee754_log+0x120>
 800ccc2:	a309      	add	r3, pc, #36	; (adr r3, 800cce8 <__ieee754_log+0x300>)
 800ccc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cccc:	f7f3 fc04 	bl	80004d8 <__aeabi_dmul>
 800ccd0:	a307      	add	r3, pc, #28	; (adr r3, 800ccf0 <__ieee754_log+0x308>)
 800ccd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd6:	4604      	mov	r4, r0
 800ccd8:	460d      	mov	r5, r1
 800ccda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccde:	e727      	b.n	800cb30 <__ieee754_log+0x148>
 800cce0:	2000      	movs	r0, #0
 800cce2:	2100      	movs	r1, #0
 800cce4:	e693      	b.n	800ca0e <__ieee754_log+0x26>
 800cce6:	bf00      	nop
 800cce8:	fee00000 	.word	0xfee00000
 800ccec:	3fe62e42 	.word	0x3fe62e42
 800ccf0:	35793c76 	.word	0x35793c76
 800ccf4:	3dea39ef 	.word	0x3dea39ef
 800ccf8:	55555555 	.word	0x55555555
 800ccfc:	3fd55555 	.word	0x3fd55555
 800cd00:	df3e5244 	.word	0xdf3e5244
 800cd04:	3fc2f112 	.word	0x3fc2f112
 800cd08:	96cb03de 	.word	0x96cb03de
 800cd0c:	3fc74664 	.word	0x3fc74664
 800cd10:	94229359 	.word	0x94229359
 800cd14:	3fd24924 	.word	0x3fd24924
 800cd18:	55555593 	.word	0x55555593
 800cd1c:	3fe55555 	.word	0x3fe55555
 800cd20:	d078c69f 	.word	0xd078c69f
 800cd24:	3fc39a09 	.word	0x3fc39a09
 800cd28:	1d8e78af 	.word	0x1d8e78af
 800cd2c:	3fcc71c5 	.word	0x3fcc71c5
 800cd30:	9997fa04 	.word	0x9997fa04
 800cd34:	3fd99999 	.word	0x3fd99999
 800cd38:	c3500000 	.word	0xc3500000
 800cd3c:	43500000 	.word	0x43500000
 800cd40:	7fefffff 	.word	0x7fefffff
 800cd44:	3ff00000 	.word	0x3ff00000
 800cd48:	3fe00000 	.word	0x3fe00000

0800cd4c <__ieee754_sqrt>:
 800cd4c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800cea8 <__ieee754_sqrt+0x15c>
 800cd50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd54:	ea3c 0c01 	bics.w	ip, ip, r1
 800cd58:	4606      	mov	r6, r0
 800cd5a:	460d      	mov	r5, r1
 800cd5c:	460c      	mov	r4, r1
 800cd5e:	460a      	mov	r2, r1
 800cd60:	4607      	mov	r7, r0
 800cd62:	4603      	mov	r3, r0
 800cd64:	d10f      	bne.n	800cd86 <__ieee754_sqrt+0x3a>
 800cd66:	4602      	mov	r2, r0
 800cd68:	460b      	mov	r3, r1
 800cd6a:	f7f3 fbb5 	bl	80004d8 <__aeabi_dmul>
 800cd6e:	4602      	mov	r2, r0
 800cd70:	460b      	mov	r3, r1
 800cd72:	4630      	mov	r0, r6
 800cd74:	4629      	mov	r1, r5
 800cd76:	f7f3 f9f9 	bl	800016c <__adddf3>
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460d      	mov	r5, r1
 800cd7e:	4630      	mov	r0, r6
 800cd80:	4629      	mov	r1, r5
 800cd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd86:	2900      	cmp	r1, #0
 800cd88:	dc0e      	bgt.n	800cda8 <__ieee754_sqrt+0x5c>
 800cd8a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800cd8e:	ea5c 0707 	orrs.w	r7, ip, r7
 800cd92:	d0f4      	beq.n	800cd7e <__ieee754_sqrt+0x32>
 800cd94:	b141      	cbz	r1, 800cda8 <__ieee754_sqrt+0x5c>
 800cd96:	4602      	mov	r2, r0
 800cd98:	460b      	mov	r3, r1
 800cd9a:	f7f3 f9e5 	bl	8000168 <__aeabi_dsub>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	460b      	mov	r3, r1
 800cda2:	f7f3 fcc3 	bl	800072c <__aeabi_ddiv>
 800cda6:	e7e8      	b.n	800cd7a <__ieee754_sqrt+0x2e>
 800cda8:	1521      	asrs	r1, r4, #20
 800cdaa:	d075      	beq.n	800ce98 <__ieee754_sqrt+0x14c>
 800cdac:	07cc      	lsls	r4, r1, #31
 800cdae:	f04f 0400 	mov.w	r4, #0
 800cdb2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800cdb6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800cdba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800cdbe:	bf5e      	ittt	pl
 800cdc0:	0fd9      	lsrpl	r1, r3, #31
 800cdc2:	005b      	lslpl	r3, r3, #1
 800cdc4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800cdc8:	0fd9      	lsrs	r1, r3, #31
 800cdca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cdce:	2516      	movs	r5, #22
 800cdd0:	4620      	mov	r0, r4
 800cdd2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdd6:	107f      	asrs	r7, r7, #1
 800cdd8:	005b      	lsls	r3, r3, #1
 800cdda:	1846      	adds	r6, r0, r1
 800cddc:	4296      	cmp	r6, r2
 800cdde:	bfde      	ittt	le
 800cde0:	1b92      	suble	r2, r2, r6
 800cde2:	1870      	addle	r0, r6, r1
 800cde4:	1864      	addle	r4, r4, r1
 800cde6:	0052      	lsls	r2, r2, #1
 800cde8:	3d01      	subs	r5, #1
 800cdea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800cdee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800cdf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cdf6:	d1f0      	bne.n	800cdda <__ieee754_sqrt+0x8e>
 800cdf8:	4629      	mov	r1, r5
 800cdfa:	f04f 0e20 	mov.w	lr, #32
 800cdfe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ce02:	4282      	cmp	r2, r0
 800ce04:	eb06 0c05 	add.w	ip, r6, r5
 800ce08:	dc02      	bgt.n	800ce10 <__ieee754_sqrt+0xc4>
 800ce0a:	d113      	bne.n	800ce34 <__ieee754_sqrt+0xe8>
 800ce0c:	459c      	cmp	ip, r3
 800ce0e:	d811      	bhi.n	800ce34 <__ieee754_sqrt+0xe8>
 800ce10:	f1bc 0f00 	cmp.w	ip, #0
 800ce14:	eb0c 0506 	add.w	r5, ip, r6
 800ce18:	da43      	bge.n	800cea2 <__ieee754_sqrt+0x156>
 800ce1a:	2d00      	cmp	r5, #0
 800ce1c:	db41      	blt.n	800cea2 <__ieee754_sqrt+0x156>
 800ce1e:	f100 0801 	add.w	r8, r0, #1
 800ce22:	1a12      	subs	r2, r2, r0
 800ce24:	4640      	mov	r0, r8
 800ce26:	459c      	cmp	ip, r3
 800ce28:	bf88      	it	hi
 800ce2a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ce2e:	eba3 030c 	sub.w	r3, r3, ip
 800ce32:	4431      	add	r1, r6
 800ce34:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ce38:	f1be 0e01 	subs.w	lr, lr, #1
 800ce3c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ce40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ce44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ce48:	d1db      	bne.n	800ce02 <__ieee754_sqrt+0xb6>
 800ce4a:	4313      	orrs	r3, r2
 800ce4c:	d006      	beq.n	800ce5c <__ieee754_sqrt+0x110>
 800ce4e:	1c48      	adds	r0, r1, #1
 800ce50:	bf0b      	itete	eq
 800ce52:	4671      	moveq	r1, lr
 800ce54:	3101      	addne	r1, #1
 800ce56:	3401      	addeq	r4, #1
 800ce58:	f021 0101 	bicne.w	r1, r1, #1
 800ce5c:	1063      	asrs	r3, r4, #1
 800ce5e:	0849      	lsrs	r1, r1, #1
 800ce60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ce64:	07e2      	lsls	r2, r4, #31
 800ce66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ce6a:	bf48      	it	mi
 800ce6c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ce70:	460e      	mov	r6, r1
 800ce72:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ce76:	e782      	b.n	800cd7e <__ieee754_sqrt+0x32>
 800ce78:	0ada      	lsrs	r2, r3, #11
 800ce7a:	3815      	subs	r0, #21
 800ce7c:	055b      	lsls	r3, r3, #21
 800ce7e:	2a00      	cmp	r2, #0
 800ce80:	d0fa      	beq.n	800ce78 <__ieee754_sqrt+0x12c>
 800ce82:	02d5      	lsls	r5, r2, #11
 800ce84:	d50a      	bpl.n	800ce9c <__ieee754_sqrt+0x150>
 800ce86:	f1c1 0420 	rsb	r4, r1, #32
 800ce8a:	fa23 f404 	lsr.w	r4, r3, r4
 800ce8e:	1e4d      	subs	r5, r1, #1
 800ce90:	408b      	lsls	r3, r1
 800ce92:	4322      	orrs	r2, r4
 800ce94:	1b41      	subs	r1, r0, r5
 800ce96:	e789      	b.n	800cdac <__ieee754_sqrt+0x60>
 800ce98:	4608      	mov	r0, r1
 800ce9a:	e7f0      	b.n	800ce7e <__ieee754_sqrt+0x132>
 800ce9c:	0052      	lsls	r2, r2, #1
 800ce9e:	3101      	adds	r1, #1
 800cea0:	e7ef      	b.n	800ce82 <__ieee754_sqrt+0x136>
 800cea2:	4680      	mov	r8, r0
 800cea4:	e7bd      	b.n	800ce22 <__ieee754_sqrt+0xd6>
 800cea6:	bf00      	nop
 800cea8:	7ff00000 	.word	0x7ff00000

0800ceac <nan>:
 800ceac:	2000      	movs	r0, #0
 800ceae:	4901      	ldr	r1, [pc, #4]	; (800ceb4 <nan+0x8>)
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	7ff80000 	.word	0x7ff80000

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
