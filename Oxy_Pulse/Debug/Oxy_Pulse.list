
Oxy_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e70  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  08007bec  08007bec  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007bec  08007bec  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf0  08007bf0  00017bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  08007bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  2000003c  08007c30  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08007c30  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf38  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7b  00000000  00000000  0002bf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  0002ea70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017617  00000000  00000000  0002f638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e02c  00000000  00000000  00046c4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008587a  00000000  00000000  00054c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000da4f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000332c  00000000  00000000  000da548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004f64 	.word	0x08004f64

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08004f64 	.word	0x08004f64

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000162:	f000 ffd5 	bl	8001110 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000166:	f000 f8b5 	bl	80002d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016a:	f000 f9cd 	bl	8000508 <MX_GPIO_Init>
  MX_I2C1_Init();
 800016e:	f000 f8f7 	bl	8000360 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000172:	f000 f923 	bl	80003bc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000176:	f000 f94f 	bl	8000418 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800017a:	f000 f983 	bl	8000484 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800017e:	f000 fb45 	bl	800080c <SSD1306_Init>
  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8000182:	2201      	movs	r2, #1
 8000184:	4944      	ldr	r1, [pc, #272]	; (8000298 <main+0x13c>)
 8000186:	4845      	ldr	r0, [pc, #276]	; (800029c <main+0x140>)
 8000188:	f004 fa67 	bl	800465a <HAL_UART_Receive_IT>

  SSD1306_GotoXY(40, 0);
 800018c:	2100      	movs	r1, #0
 800018e:	2028      	movs	r0, #40	; 0x28
 8000190:	f000 fca4 	bl	8000adc <SSD1306_GotoXY>
  SSD1306_Puts("OXY",&Font_16x26,1);
 8000194:	2201      	movs	r2, #1
 8000196:	4942      	ldr	r1, [pc, #264]	; (80002a0 <main+0x144>)
 8000198:	4842      	ldr	r0, [pc, #264]	; (80002a4 <main+0x148>)
 800019a:	f000 fd35 	bl	8000c08 <SSD1306_Puts>
  SSD1306_GotoXY(25, 24);
 800019e:	2118      	movs	r1, #24
 80001a0:	2019      	movs	r0, #25
 80001a2:	f000 fc9b 	bl	8000adc <SSD1306_GotoXY>
  SSD1306_Puts("PULSE",&Font_16x26,1);
 80001a6:	2201      	movs	r2, #1
 80001a8:	493d      	ldr	r1, [pc, #244]	; (80002a0 <main+0x144>)
 80001aa:	483f      	ldr	r0, [pc, #252]	; (80002a8 <main+0x14c>)
 80001ac:	f000 fd2c 	bl	8000c08 <SSD1306_Puts>
  SSD1306_GotoXY(10, 50);
 80001b0:	2132      	movs	r1, #50	; 0x32
 80001b2:	200a      	movs	r0, #10
 80001b4:	f000 fc92 	bl	8000adc <SSD1306_GotoXY>
  SSD1306_Puts("...Iniciando...",&Font_7x10,1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	493c      	ldr	r1, [pc, #240]	; (80002ac <main+0x150>)
 80001bc:	483c      	ldr	r0, [pc, #240]	; (80002b0 <main+0x154>)
 80001be:	f000 fd23 	bl	8000c08 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80001c2:	f000 fbe7 	bl	8000994 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado){
 80001c6:	4b3b      	ldr	r3, [pc, #236]	; (80002b4 <main+0x158>)
 80001c8:	781b      	ldrb	r3, [r3, #0]
 80001ca:	2b02      	cmp	r3, #2
 80001cc:	d04d      	beq.n	800026a <main+0x10e>
 80001ce:	2b02      	cmp	r3, #2
 80001d0:	dcf9      	bgt.n	80001c6 <main+0x6a>
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d002      	beq.n	80001dc <main+0x80>
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d014      	beq.n	8000204 <main+0xa8>
 80001da:	e7f4      	b.n	80001c6 <main+0x6a>
	  case INICIANDO:
		  SSD1306_ScrollRight(0x06, 0x07);
 80001dc:	2107      	movs	r1, #7
 80001de:	2006      	movs	r0, #6
 80001e0:	f000 fa6d 	bl	80006be <SSD1306_ScrollRight>
		  if(!contador)
 80001e4:	4b34      	ldr	r3, [pc, #208]	; (80002b8 <main+0x15c>)
 80001e6:	881b      	ldrh	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d151      	bne.n	8000290 <main+0x134>
		  {
			  estado=PREPARADO;
 80001ec:	4b31      	ldr	r3, [pc, #196]	; (80002b4 <main+0x158>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	701a      	strb	r2, [r3, #0]
			  contador=DEMORA;
 80001f2:	4b31      	ldr	r3, [pc, #196]	; (80002b8 <main+0x15c>)
 80001f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80001f8:	801a      	strh	r2, [r3, #0]
			  SSD1306_Stopscroll();
 80001fa:	f000 fa96 	bl	800072a <SSD1306_Stopscroll>
			  SSD1306_Clear();		  }
 80001fe:	f000 fd28 	bl	8000c52 <SSD1306_Clear>
		  break;
 8000202:	e045      	b.n	8000290 <main+0x134>
	  case PREPARADO:
		  SSD1306_DrawBitmap(0, 0, LOGO, 128, 64, 1);
 8000204:	2301      	movs	r3, #1
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	2340      	movs	r3, #64	; 0x40
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2380      	movs	r3, #128	; 0x80
 800020e:	4a2b      	ldr	r2, [pc, #172]	; (80002bc <main+0x160>)
 8000210:	2100      	movs	r1, #0
 8000212:	2000      	movs	r0, #0
 8000214:	f000 fa92 	bl	800073c <SSD1306_DrawBitmap>
		  SSD1306_GotoXY(70, 0);
 8000218:	2100      	movs	r1, #0
 800021a:	2046      	movs	r0, #70	; 0x46
 800021c:	f000 fc5e 	bl	8000adc <SSD1306_GotoXY>
		  SSD1306_Puts("'OK'",&Font_11x18,1);
 8000220:	2201      	movs	r2, #1
 8000222:	4927      	ldr	r1, [pc, #156]	; (80002c0 <main+0x164>)
 8000224:	4827      	ldr	r0, [pc, #156]	; (80002c4 <main+0x168>)
 8000226:	f000 fcef 	bl	8000c08 <SSD1306_Puts>
		  SSD1306_GotoXY(80, 27);
 800022a:	211b      	movs	r1, #27
 800022c:	2050      	movs	r0, #80	; 0x50
 800022e:	f000 fc55 	bl	8000adc <SSD1306_GotoXY>
		  SSD1306_Puts("para",&Font_7x10,1);
 8000232:	2201      	movs	r2, #1
 8000234:	491d      	ldr	r1, [pc, #116]	; (80002ac <main+0x150>)
 8000236:	4824      	ldr	r0, [pc, #144]	; (80002c8 <main+0x16c>)
 8000238:	f000 fce6 	bl	8000c08 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 50);
 800023c:	2132      	movs	r1, #50	; 0x32
 800023e:	2046      	movs	r0, #70	; 0x46
 8000240:	f000 fc4c 	bl	8000adc <SSD1306_GotoXY>
		  SSD1306_Puts("iniciar",&Font_7x10,1);
 8000244:	2201      	movs	r2, #1
 8000246:	4919      	ldr	r1, [pc, #100]	; (80002ac <main+0x150>)
 8000248:	4820      	ldr	r0, [pc, #128]	; (80002cc <main+0x170>)
 800024a:	f000 fcdd 	bl	8000c08 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800024e:	f000 fba1 	bl	8000994 <SSD1306_UpdateScreen>
		  if(!contador)
 8000252:	4b19      	ldr	r3, [pc, #100]	; (80002b8 <main+0x15c>)
 8000254:	881b      	ldrh	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d11c      	bne.n	8000294 <main+0x138>
		  {
			  estado=MIDIENDO;
 800025a:	4b16      	ldr	r3, [pc, #88]	; (80002b4 <main+0x158>)
 800025c:	2202      	movs	r2, #2
 800025e:	701a      	strb	r2, [r3, #0]
			  contador=DEMORA;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <main+0x15c>)
 8000262:	f241 3288 	movw	r2, #5000	; 0x1388
 8000266:	801a      	strh	r2, [r3, #0]
		  }
		  break;
 8000268:	e014      	b.n	8000294 <main+0x138>
	  case MIDIENDO:
		  if(!contador)
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <main+0x15c>)
 800026c:	881b      	ldrh	r3, [r3, #0]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d1a9      	bne.n	80001c6 <main+0x6a>
		  {
			  HAL_UART_Transmit_IT(&huart2,mensaje_1, strlen((char*)mensaje_1));
 8000272:	4817      	ldr	r0, [pc, #92]	; (80002d0 <main+0x174>)
 8000274:	f7ff ff6a 	bl	800014c <strlen>
 8000278:	4603      	mov	r3, r0
 800027a:	b29b      	uxth	r3, r3
 800027c:	461a      	mov	r2, r3
 800027e:	4914      	ldr	r1, [pc, #80]	; (80002d0 <main+0x174>)
 8000280:	4806      	ldr	r0, [pc, #24]	; (800029c <main+0x140>)
 8000282:	f004 f9a6 	bl	80045d2 <HAL_UART_Transmit_IT>
			  contador=DEMORA;
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <main+0x15c>)
 8000288:	f241 3288 	movw	r2, #5000	; 0x1388
 800028c:	801a      	strh	r2, [r3, #0]
 800028e:	e79a      	b.n	80001c6 <main+0x6a>
		  break;
 8000290:	bf00      	nop
 8000292:	e798      	b.n	80001c6 <main+0x6a>
		  break;
 8000294:	bf00      	nop
	  switch(estado){
 8000296:	e796      	b.n	80001c6 <main+0x6a>
 8000298:	2000019d 	.word	0x2000019d
 800029c:	20000158 	.word	0x20000158
 80002a0:	20000010 	.word	0x20000010
 80002a4:	08004f7c 	.word	0x08004f7c
 80002a8:	08004f80 	.word	0x08004f80
 80002ac:	20000000 	.word	0x20000000
 80002b0:	08004f88 	.word	0x08004f88
 80002b4:	2000019c 	.word	0x2000019c
 80002b8:	20000018 	.word	0x20000018
 80002bc:	080077d4 	.word	0x080077d4
 80002c0:	20000008 	.word	0x20000008
 80002c4:	08004f98 	.word	0x08004f98
 80002c8:	08004fa0 	.word	0x08004fa0
 80002cc:	08004fa8 	.word	0x08004fa8
 80002d0:	2000001c 	.word	0x2000001c

080002d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b090      	sub	sp, #64	; 0x40
 80002d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002da:	f107 0318 	add.w	r3, r7, #24
 80002de:	2228      	movs	r2, #40	; 0x28
 80002e0:	2100      	movs	r1, #0
 80002e2:	4618      	mov	r0, r3
 80002e4:	f004 fe36 	bl	8004f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
 80002ee:	605a      	str	r2, [r3, #4]
 80002f0:	609a      	str	r2, [r3, #8]
 80002f2:	60da      	str	r2, [r3, #12]
 80002f4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f6:	2301      	movs	r3, #1
 80002f8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000300:	2300      	movs	r3, #0
 8000302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000304:	2301      	movs	r3, #1
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000308:	2302      	movs	r3, #2
 800030a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800030c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000310:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000312:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000316:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000318:	f107 0318 	add.w	r3, r7, #24
 800031c:	4618      	mov	r0, r3
 800031e:	f003 fbdb 	bl	8003ad8 <HAL_RCC_OscConfig>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000328:	f000 f9c4 	bl	80006b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032c:	230f      	movs	r3, #15
 800032e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000330:	2302      	movs	r3, #2
 8000332:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000334:	2300      	movs	r3, #0
 8000336:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800033c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2102      	movs	r1, #2
 8000346:	4618      	mov	r0, r3
 8000348:	f003 fe48 	bl	8003fdc <HAL_RCC_ClockConfig>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000352:	f000 f9af 	bl	80006b4 <Error_Handler>
  }
}
 8000356:	bf00      	nop
 8000358:	3740      	adds	r7, #64	; 0x40
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000366:	4a13      	ldr	r2, [pc, #76]	; (80003b4 <MX_I2C1_Init+0x54>)
 8000368:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800036a:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_I2C1_Init+0x50>)
 800036c:	4a12      	ldr	r2, [pc, #72]	; (80003b8 <MX_I2C1_Init+0x58>)
 800036e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000372:	2200      	movs	r2, #0
 8000374:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000376:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_I2C1_Init+0x50>)
 800037e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000382:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000386:	2200      	movs	r2, #0
 8000388:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_I2C1_Init+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_I2C1_Init+0x50>)
 800039e:	f001 fa6d 	bl	800187c <HAL_I2C_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003a8:	f000 f984 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000058 	.word	0x20000058
 80003b4:	40005400 	.word	0x40005400
 80003b8:	000186a0 	.word	0x000186a0

080003bc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80003c0:	4b12      	ldr	r3, [pc, #72]	; (800040c <MX_I2C2_Init+0x50>)
 80003c2:	4a13      	ldr	r2, [pc, #76]	; (8000410 <MX_I2C2_Init+0x54>)
 80003c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80003c6:	4b11      	ldr	r3, [pc, #68]	; (800040c <MX_I2C2_Init+0x50>)
 80003c8:	4a12      	ldr	r2, [pc, #72]	; (8000414 <MX_I2C2_Init+0x58>)
 80003ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80003cc:	4b0f      	ldr	r3, [pc, #60]	; (800040c <MX_I2C2_Init+0x50>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80003d2:	4b0e      	ldr	r3, [pc, #56]	; (800040c <MX_I2C2_Init+0x50>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	; (800040c <MX_I2C2_Init+0x50>)
 80003da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80003de:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <MX_I2C2_Init+0x50>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80003e6:	4b09      	ldr	r3, [pc, #36]	; (800040c <MX_I2C2_Init+0x50>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <MX_I2C2_Init+0x50>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003f2:	4b06      	ldr	r3, [pc, #24]	; (800040c <MX_I2C2_Init+0x50>)
 80003f4:	2200      	movs	r2, #0
 80003f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <MX_I2C2_Init+0x50>)
 80003fa:	f001 fa3f 	bl	800187c <HAL_I2C_Init>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000404:	f000 f956 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000408:	bf00      	nop
 800040a:	bd80      	pop	{r7, pc}
 800040c:	200000ac 	.word	0x200000ac
 8000410:	40005800 	.word	0x40005800
 8000414:	00061a80 	.word	0x00061a80

08000418 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <MX_SPI2_Init+0x64>)
 800041e:	4a18      	ldr	r2, [pc, #96]	; (8000480 <MX_SPI2_Init+0x68>)
 8000420:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000422:	4b16      	ldr	r3, [pc, #88]	; (800047c <MX_SPI2_Init+0x64>)
 8000424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000428:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800042a:	4b14      	ldr	r3, [pc, #80]	; (800047c <MX_SPI2_Init+0x64>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000430:	4b12      	ldr	r3, [pc, #72]	; (800047c <MX_SPI2_Init+0x64>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000436:	4b11      	ldr	r3, [pc, #68]	; (800047c <MX_SPI2_Init+0x64>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	; (800047c <MX_SPI2_Init+0x64>)
 800043e:	2200      	movs	r2, #0
 8000440:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <MX_SPI2_Init+0x64>)
 8000444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000448:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <MX_SPI2_Init+0x64>)
 800044c:	2200      	movs	r2, #0
 800044e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000450:	4b0a      	ldr	r3, [pc, #40]	; (800047c <MX_SPI2_Init+0x64>)
 8000452:	2200      	movs	r2, #0
 8000454:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <MX_SPI2_Init+0x64>)
 8000458:	2200      	movs	r2, #0
 800045a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <MX_SPI2_Init+0x64>)
 800045e:	2200      	movs	r2, #0
 8000460:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000462:	4b06      	ldr	r3, [pc, #24]	; (800047c <MX_SPI2_Init+0x64>)
 8000464:	220a      	movs	r2, #10
 8000466:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000468:	4804      	ldr	r0, [pc, #16]	; (800047c <MX_SPI2_Init+0x64>)
 800046a:	f003 ff4f 	bl	800430c <HAL_SPI_Init>
 800046e:	4603      	mov	r3, r0
 8000470:	2b00      	cmp	r3, #0
 8000472:	d001      	beq.n	8000478 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000474:	f000 f91e 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000478:	bf00      	nop
 800047a:	bd80      	pop	{r7, pc}
 800047c:	20000100 	.word	0x20000100
 8000480:	40003800 	.word	0x40003800

08000484 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__USART2_CLK_ENABLE();
 800048a:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <MX_USART2_UART_Init+0x78>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a1b      	ldr	r2, [pc, #108]	; (80004fc <MX_USART2_UART_Init+0x78>)
 8000490:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b19      	ldr	r3, [pc, #100]	; (80004fc <MX_USART2_UART_Init+0x78>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004a2:	4b17      	ldr	r3, [pc, #92]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004a4:	4a17      	ldr	r2, [pc, #92]	; (8000504 <MX_USART2_UART_Init+0x80>)
 80004a6:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004a8:	4b15      	ldr	r3, [pc, #84]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004aa:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004ae:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004b0:	4b13      	ldr	r3, [pc, #76]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004be:	2200      	movs	r2, #0
 80004c0:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c2:	4b0f      	ldr	r3, [pc, #60]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004c4:	220c      	movs	r2, #12
 80004c6:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <MX_USART2_UART_Init+0x7c>)
 80004d6:	f003 ff9d 	bl	8004414 <HAL_UART_Init>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 80004e0:	f000 f8e8 	bl	80006b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2026      	movs	r0, #38	; 0x26
 80004ea:	f000 ff38 	bl	800135e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80004ee:	2026      	movs	r0, #38	; 0x26
 80004f0:	f000 ff51 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40021000 	.word	0x40021000
 8000500:	20000158 	.word	0x20000158
 8000504:	40004400 	.word	0x40004400

08000508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 0310 	add.w	r3, r7, #16
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051c:	4b35      	ldr	r3, [pc, #212]	; (80005f4 <MX_GPIO_Init+0xec>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a34      	ldr	r2, [pc, #208]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000522:	f043 0310 	orr.w	r3, r3, #16
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b32      	ldr	r3, [pc, #200]	; (80005f4 <MX_GPIO_Init+0xec>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0310 	and.w	r3, r3, #16
 8000530:	60fb      	str	r3, [r7, #12]
 8000532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000534:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	4a2e      	ldr	r2, [pc, #184]	; (80005f4 <MX_GPIO_Init+0xec>)
 800053a:	f043 0320 	orr.w	r3, r3, #32
 800053e:	6193      	str	r3, [r2, #24]
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	f003 0320 	and.w	r3, r3, #32
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <MX_GPIO_Init+0xec>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a28      	ldr	r2, [pc, #160]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000552:	f043 0304 	orr.w	r3, r3, #4
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <MX_GPIO_Init+0xec>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f003 0304 	and.w	r3, r3, #4
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <MX_GPIO_Init+0xec>)
 800056a:	f043 0308 	orr.w	r3, r3, #8
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <MX_GPIO_Init+0xec>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0308 	and.w	r3, r3, #8
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800057c:	2200      	movs	r2, #0
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	481d      	ldr	r0, [pc, #116]	; (80005f8 <MX_GPIO_Init+0xf0>)
 8000584:	f001 f962 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSS_GPIO_Port, SPI2_CSS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058e:	481b      	ldr	r0, [pc, #108]	; (80005fc <MX_GPIO_Init+0xf4>)
 8000590:	f001 f95c 	bl	800184c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2302      	movs	r3, #2
 80005a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0310 	add.w	r3, r7, #16
 80005aa:	4619      	mov	r1, r3
 80005ac:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MX_GPIO_Init+0xf0>)
 80005ae:	f000 ffc9 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80005b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b8:	4b11      	ldr	r3, [pc, #68]	; (8000600 <MX_GPIO_Init+0xf8>)
 80005ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005c0:	f107 0310 	add.w	r3, r7, #16
 80005c4:	4619      	mov	r1, r3
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MX_GPIO_Init+0xf0>)
 80005c8:	f000 ffbc 	bl	8001544 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSS_Pin */
  GPIO_InitStruct.Pin = SPI2_CSS_Pin;
 80005cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2302      	movs	r3, #2
 80005dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSS_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <MX_GPIO_Init+0xf4>)
 80005e6:	f000 ffad 	bl	8001544 <HAL_GPIO_Init>

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40011000 	.word	0x40011000
 80005fc:	40010c00 	.word	0x40010c00
 8000600:	10210000 	.word	0x10210000

08000604 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b0a      	ldr	r3, [pc, #40]	; (8000634 <HAL_IncTick+0x30>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <HAL_IncTick+0x34>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a08      	ldr	r2, [pc, #32]	; (8000638 <HAL_IncTick+0x34>)
 8000616:	6013      	str	r3, [r2, #0]

  if(contador)
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_IncTick+0x38>)
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d005      	beq.n	800062c <HAL_IncTick+0x28>
  contador--;
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <HAL_IncTick+0x38>)
 8000622:	881b      	ldrh	r3, [r3, #0]
 8000624:	3b01      	subs	r3, #1
 8000626:	b29a      	uxth	r2, r3
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <HAL_IncTick+0x38>)
 800062a:	801a      	strh	r2, [r3, #0]
}
 800062c:	bf00      	nop
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	20000038 	.word	0x20000038
 8000638:	200005a8 	.word	0x200005a8
 800063c:	20000018 	.word	0x20000018

08000640 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <HAL_UART_RxCpltCallback+0x64>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d123      	bne.n	800069a <HAL_UART_RxCpltCallback+0x5a>
	{
		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8000652:	2201      	movs	r2, #1
 8000654:	4914      	ldr	r1, [pc, #80]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000656:	4815      	ldr	r0, [pc, #84]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000658:	f003 ffff 	bl	800465a <HAL_UART_Receive_IT>
		//Transmitir byte de nuevo
		HAL_UART_Transmit(&huart2, &byte, sizeof(byte), 100);
 800065c:	2364      	movs	r3, #100	; 0x64
 800065e:	2201      	movs	r2, #1
 8000660:	4911      	ldr	r1, [pc, #68]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000662:	4812      	ldr	r0, [pc, #72]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 8000664:	f003 ff23 	bl	80044ae <HAL_UART_Transmit>
		//Habilito la interrupción
		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8000668:	2201      	movs	r2, #1
 800066a:	490f      	ldr	r1, [pc, #60]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 800066c:	480f      	ldr	r0, [pc, #60]	; (80006ac <HAL_UART_RxCpltCallback+0x6c>)
 800066e:	f003 fff4 	bl	800465a <HAL_UART_Receive_IT>

		if (byte == 'a')
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2b61      	cmp	r3, #97	; 0x61
 8000678:	d105      	bne.n	8000686 <HAL_UART_RxCpltCallback+0x46>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000680:	480b      	ldr	r0, [pc, #44]	; (80006b0 <HAL_UART_RxCpltCallback+0x70>)
 8000682:	f001 f8e3 	bl	800184c <HAL_GPIO_WritePin>

		if (byte == 'b')
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_UART_RxCpltCallback+0x68>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	2b62      	cmp	r3, #98	; 0x62
 800068c:	d105      	bne.n	800069a <HAL_UART_RxCpltCallback+0x5a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000694:	4806      	ldr	r0, [pc, #24]	; (80006b0 <HAL_UART_RxCpltCallback+0x70>)
 8000696:	f001 f8d9 	bl	800184c <HAL_GPIO_WritePin>
	}
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40004400 	.word	0x40004400
 80006a8:	2000019d 	.word	0x2000019d
 80006ac:	20000158 	.word	0x20000158
 80006b0:	40011000 	.word	0x40011000

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	e7fe      	b.n	80006bc <Error_Handler+0x8>

080006be <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80006be:	b580      	push	{r7, lr}
 80006c0:	b082      	sub	sp, #8
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	4603      	mov	r3, r0
 80006c6:	460a      	mov	r2, r1
 80006c8:	71fb      	strb	r3, [r7, #7]
 80006ca:	4613      	mov	r3, r2
 80006cc:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80006ce:	2226      	movs	r2, #38	; 0x26
 80006d0:	2100      	movs	r1, #0
 80006d2:	2078      	movs	r0, #120	; 0x78
 80006d4:	f000 fb40 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80006d8:	2200      	movs	r2, #0
 80006da:	2100      	movs	r1, #0
 80006dc:	2078      	movs	r0, #120	; 0x78
 80006de:	f000 fb3b 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	461a      	mov	r2, r3
 80006e6:	2100      	movs	r1, #0
 80006e8:	2078      	movs	r0, #120	; 0x78
 80006ea:	f000 fb35 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80006ee:	2200      	movs	r2, #0
 80006f0:	2100      	movs	r1, #0
 80006f2:	2078      	movs	r0, #120	; 0x78
 80006f4:	f000 fb30 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80006f8:	79bb      	ldrb	r3, [r7, #6]
 80006fa:	461a      	mov	r2, r3
 80006fc:	2100      	movs	r1, #0
 80006fe:	2078      	movs	r0, #120	; 0x78
 8000700:	f000 fb2a 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2078      	movs	r0, #120	; 0x78
 800070a:	f000 fb25 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 800070e:	22ff      	movs	r2, #255	; 0xff
 8000710:	2100      	movs	r1, #0
 8000712:	2078      	movs	r0, #120	; 0x78
 8000714:	f000 fb20 	bl	8000d58 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000718:	222f      	movs	r2, #47	; 0x2f
 800071a:	2100      	movs	r1, #0
 800071c:	2078      	movs	r0, #120	; 0x78
 800071e:	f000 fb1b 	bl	8000d58 <ssd1306_I2C_Write>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800072e:	222e      	movs	r2, #46	; 0x2e
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 fb10 	bl	8000d58 <ssd1306_I2C_Write>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0
 8000742:	60ba      	str	r2, [r7, #8]
 8000744:	461a      	mov	r2, r3
 8000746:	4603      	mov	r3, r0
 8000748:	81fb      	strh	r3, [r7, #14]
 800074a:	460b      	mov	r3, r1
 800074c:	81bb      	strh	r3, [r7, #12]
 800074e:	4613      	mov	r3, r2
 8000750:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000752:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000756:	3307      	adds	r3, #7
 8000758:	2b00      	cmp	r3, #0
 800075a:	da00      	bge.n	800075e <SSD1306_DrawBitmap+0x22>
 800075c:	3307      	adds	r3, #7
 800075e:	10db      	asrs	r3, r3, #3
 8000760:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8000762:	2300      	movs	r3, #0
 8000764:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000766:	2300      	movs	r3, #0
 8000768:	82bb      	strh	r3, [r7, #20]
 800076a:	e044      	b.n	80007f6 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 800076c:	2300      	movs	r3, #0
 800076e:	827b      	strh	r3, [r7, #18]
 8000770:	e02f      	b.n	80007d2 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8000772:	8a7b      	ldrh	r3, [r7, #18]
 8000774:	f003 0307 	and.w	r3, r3, #7
 8000778:	2b00      	cmp	r3, #0
 800077a:	d003      	beq.n	8000784 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 800077c:	7dfb      	ldrb	r3, [r7, #23]
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	75fb      	strb	r3, [r7, #23]
 8000782:	e012      	b.n	80007aa <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000784:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000788:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800078c:	fb03 f202 	mul.w	r2, r3, r2
 8000790:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000794:	2b00      	cmp	r3, #0
 8000796:	da00      	bge.n	800079a <SSD1306_DrawBitmap+0x5e>
 8000798:	3307      	adds	r3, #7
 800079a:	10db      	asrs	r3, r3, #3
 800079c:	b21b      	sxth	r3, r3
 800079e:	4413      	add	r3, r2
 80007a0:	461a      	mov	r2, r3
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	4413      	add	r3, r2
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80007aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	da09      	bge.n	80007c6 <SSD1306_DrawBitmap+0x8a>
 80007b2:	89fa      	ldrh	r2, [r7, #14]
 80007b4:	8a7b      	ldrh	r3, [r7, #18]
 80007b6:	4413      	add	r3, r2
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	89b9      	ldrh	r1, [r7, #12]
 80007bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	4618      	mov	r0, r3
 80007c2:	f000 f92d 	bl	8000a20 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80007c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	3301      	adds	r3, #1
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	827b      	strh	r3, [r7, #18]
 80007d2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80007d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007da:	429a      	cmp	r2, r3
 80007dc:	dbc9      	blt.n	8000772 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80007de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	3301      	adds	r3, #1
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	82bb      	strh	r3, [r7, #20]
 80007ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	81bb      	strh	r3, [r7, #12]
 80007f6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80007fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80007fe:	429a      	cmp	r2, r3
 8000800:	dbb4      	blt.n	800076c <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000812:	f000 fa27 	bl	8000c64 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000816:	f644 6320 	movw	r3, #20000	; 0x4e20
 800081a:	2201      	movs	r2, #1
 800081c:	2178      	movs	r1, #120	; 0x78
 800081e:	485b      	ldr	r0, [pc, #364]	; (800098c <SSD1306_Init+0x180>)
 8000820:	f001 fa6e 	bl	8001d00 <HAL_I2C_IsDeviceReady>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800082a:	2300      	movs	r3, #0
 800082c:	e0a9      	b.n	8000982 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800082e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000832:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000834:	e002      	b.n	800083c <SSD1306_Init+0x30>
		p--;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	3b01      	subs	r3, #1
 800083a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d1f9      	bne.n	8000836 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000842:	22ae      	movs	r2, #174	; 0xae
 8000844:	2100      	movs	r1, #0
 8000846:	2078      	movs	r0, #120	; 0x78
 8000848:	f000 fa86 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	2078      	movs	r0, #120	; 0x78
 8000852:	f000 fa81 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000856:	2210      	movs	r2, #16
 8000858:	2100      	movs	r1, #0
 800085a:	2078      	movs	r0, #120	; 0x78
 800085c:	f000 fa7c 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000860:	22b0      	movs	r2, #176	; 0xb0
 8000862:	2100      	movs	r1, #0
 8000864:	2078      	movs	r0, #120	; 0x78
 8000866:	f000 fa77 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800086a:	22c8      	movs	r2, #200	; 0xc8
 800086c:	2100      	movs	r1, #0
 800086e:	2078      	movs	r0, #120	; 0x78
 8000870:	f000 fa72 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2078      	movs	r0, #120	; 0x78
 800087a:	f000 fa6d 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800087e:	2210      	movs	r2, #16
 8000880:	2100      	movs	r1, #0
 8000882:	2078      	movs	r0, #120	; 0x78
 8000884:	f000 fa68 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000888:	2240      	movs	r2, #64	; 0x40
 800088a:	2100      	movs	r1, #0
 800088c:	2078      	movs	r0, #120	; 0x78
 800088e:	f000 fa63 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000892:	2281      	movs	r2, #129	; 0x81
 8000894:	2100      	movs	r1, #0
 8000896:	2078      	movs	r0, #120	; 0x78
 8000898:	f000 fa5e 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800089c:	22ff      	movs	r2, #255	; 0xff
 800089e:	2100      	movs	r1, #0
 80008a0:	2078      	movs	r0, #120	; 0x78
 80008a2:	f000 fa59 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008a6:	22a1      	movs	r2, #161	; 0xa1
 80008a8:	2100      	movs	r1, #0
 80008aa:	2078      	movs	r0, #120	; 0x78
 80008ac:	f000 fa54 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008b0:	22a6      	movs	r2, #166	; 0xa6
 80008b2:	2100      	movs	r1, #0
 80008b4:	2078      	movs	r0, #120	; 0x78
 80008b6:	f000 fa4f 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008ba:	22a8      	movs	r2, #168	; 0xa8
 80008bc:	2100      	movs	r1, #0
 80008be:	2078      	movs	r0, #120	; 0x78
 80008c0:	f000 fa4a 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80008c4:	223f      	movs	r2, #63	; 0x3f
 80008c6:	2100      	movs	r1, #0
 80008c8:	2078      	movs	r0, #120	; 0x78
 80008ca:	f000 fa45 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008ce:	22a4      	movs	r2, #164	; 0xa4
 80008d0:	2100      	movs	r1, #0
 80008d2:	2078      	movs	r0, #120	; 0x78
 80008d4:	f000 fa40 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80008d8:	22d3      	movs	r2, #211	; 0xd3
 80008da:	2100      	movs	r1, #0
 80008dc:	2078      	movs	r0, #120	; 0x78
 80008de:	f000 fa3b 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80008e2:	2200      	movs	r2, #0
 80008e4:	2100      	movs	r1, #0
 80008e6:	2078      	movs	r0, #120	; 0x78
 80008e8:	f000 fa36 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80008ec:	22d5      	movs	r2, #213	; 0xd5
 80008ee:	2100      	movs	r1, #0
 80008f0:	2078      	movs	r0, #120	; 0x78
 80008f2:	f000 fa31 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80008f6:	22f0      	movs	r2, #240	; 0xf0
 80008f8:	2100      	movs	r1, #0
 80008fa:	2078      	movs	r0, #120	; 0x78
 80008fc:	f000 fa2c 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000900:	22d9      	movs	r2, #217	; 0xd9
 8000902:	2100      	movs	r1, #0
 8000904:	2078      	movs	r0, #120	; 0x78
 8000906:	f000 fa27 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800090a:	2222      	movs	r2, #34	; 0x22
 800090c:	2100      	movs	r1, #0
 800090e:	2078      	movs	r0, #120	; 0x78
 8000910:	f000 fa22 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000914:	22da      	movs	r2, #218	; 0xda
 8000916:	2100      	movs	r1, #0
 8000918:	2078      	movs	r0, #120	; 0x78
 800091a:	f000 fa1d 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800091e:	2212      	movs	r2, #18
 8000920:	2100      	movs	r1, #0
 8000922:	2078      	movs	r0, #120	; 0x78
 8000924:	f000 fa18 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000928:	22db      	movs	r2, #219	; 0xdb
 800092a:	2100      	movs	r1, #0
 800092c:	2078      	movs	r0, #120	; 0x78
 800092e:	f000 fa13 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000932:	2220      	movs	r2, #32
 8000934:	2100      	movs	r1, #0
 8000936:	2078      	movs	r0, #120	; 0x78
 8000938:	f000 fa0e 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800093c:	228d      	movs	r2, #141	; 0x8d
 800093e:	2100      	movs	r1, #0
 8000940:	2078      	movs	r0, #120	; 0x78
 8000942:	f000 fa09 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000946:	2214      	movs	r2, #20
 8000948:	2100      	movs	r1, #0
 800094a:	2078      	movs	r0, #120	; 0x78
 800094c:	f000 fa04 	bl	8000d58 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000950:	22af      	movs	r2, #175	; 0xaf
 8000952:	2100      	movs	r1, #0
 8000954:	2078      	movs	r0, #120	; 0x78
 8000956:	f000 f9ff 	bl	8000d58 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800095a:	222e      	movs	r2, #46	; 0x2e
 800095c:	2100      	movs	r1, #0
 800095e:	2078      	movs	r0, #120	; 0x78
 8000960:	f000 f9fa 	bl	8000d58 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000964:	2000      	movs	r0, #0
 8000966:	f000 f843 	bl	80009f0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800096a:	f000 f813 	bl	8000994 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <SSD1306_Init+0x184>)
 8000970:	2200      	movs	r2, #0
 8000972:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <SSD1306_Init+0x184>)
 8000976:	2200      	movs	r2, #0
 8000978:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <SSD1306_Init+0x184>)
 800097c:	2201      	movs	r2, #1
 800097e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000980:	2301      	movs	r3, #1
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	200000ac 	.word	0x200000ac
 8000990:	200005a0 	.word	0x200005a0

08000994 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800099a:	2300      	movs	r3, #0
 800099c:	71fb      	strb	r3, [r7, #7]
 800099e:	e01d      	b.n	80009dc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	3b50      	subs	r3, #80	; 0x50
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	2078      	movs	r0, #120	; 0x78
 80009ac:	f000 f9d4 	bl	8000d58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2078      	movs	r0, #120	; 0x78
 80009b6:	f000 f9cf 	bl	8000d58 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009ba:	2210      	movs	r2, #16
 80009bc:	2100      	movs	r1, #0
 80009be:	2078      	movs	r0, #120	; 0x78
 80009c0:	f000 f9ca 	bl	8000d58 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	01db      	lsls	r3, r3, #7
 80009c8:	4a08      	ldr	r2, [pc, #32]	; (80009ec <SSD1306_UpdateScreen+0x58>)
 80009ca:	441a      	add	r2, r3
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	2140      	movs	r1, #64	; 0x40
 80009d0:	2078      	movs	r0, #120	; 0x78
 80009d2:	f000 f95b 	bl	8000c8c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80009d6:	79fb      	ldrb	r3, [r7, #7]
 80009d8:	3301      	adds	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	2b07      	cmp	r3, #7
 80009e0:	d9de      	bls.n	80009a0 <SSD1306_UpdateScreen+0xc>
	}
}
 80009e2:	bf00      	nop
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001a0 	.word	0x200001a0

080009f0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d101      	bne.n	8000a04 <SSD1306_Fill+0x14>
 8000a00:	2300      	movs	r3, #0
 8000a02:	e000      	b.n	8000a06 <SSD1306_Fill+0x16>
 8000a04:	23ff      	movs	r3, #255	; 0xff
 8000a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <SSD1306_Fill+0x2c>)
 8000a0e:	f004 faa1 	bl	8004f54 <memset>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001a0 	.word	0x200001a0

08000a20 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	80fb      	strh	r3, [r7, #6]
 8000a2a:	460b      	mov	r3, r1
 8000a2c:	80bb      	strh	r3, [r7, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	70fb      	strb	r3, [r7, #3]
	if (
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	2b7f      	cmp	r3, #127	; 0x7f
 8000a36:	d848      	bhi.n	8000aca <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	2b3f      	cmp	r3, #63	; 0x3f
 8000a3c:	d845      	bhi.n	8000aca <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a3e:	4b25      	ldr	r3, [pc, #148]	; (8000ad4 <SSD1306_DrawPixel+0xb4>)
 8000a40:	791b      	ldrb	r3, [r3, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d006      	beq.n	8000a54 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000a46:	78fb      	ldrb	r3, [r7, #3]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	bf0c      	ite	eq
 8000a4c:	2301      	moveq	r3, #1
 8000a4e:	2300      	movne	r3, #0
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000a54:	78fb      	ldrb	r3, [r7, #3]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d11a      	bne.n	8000a90 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000a5a:	88fa      	ldrh	r2, [r7, #6]
 8000a5c:	88bb      	ldrh	r3, [r7, #4]
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	b298      	uxth	r0, r3
 8000a62:	4603      	mov	r3, r0
 8000a64:	01db      	lsls	r3, r3, #7
 8000a66:	4413      	add	r3, r2
 8000a68:	4a1b      	ldr	r2, [pc, #108]	; (8000ad8 <SSD1306_DrawPixel+0xb8>)
 8000a6a:	5cd3      	ldrb	r3, [r2, r3]
 8000a6c:	b25a      	sxtb	r2, r3
 8000a6e:	88bb      	ldrh	r3, [r7, #4]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	2101      	movs	r1, #1
 8000a76:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	b259      	sxtb	r1, r3
 8000a80:	88fa      	ldrh	r2, [r7, #6]
 8000a82:	4603      	mov	r3, r0
 8000a84:	01db      	lsls	r3, r3, #7
 8000a86:	4413      	add	r3, r2
 8000a88:	b2c9      	uxtb	r1, r1
 8000a8a:	4a13      	ldr	r2, [pc, #76]	; (8000ad8 <SSD1306_DrawPixel+0xb8>)
 8000a8c:	54d1      	strb	r1, [r2, r3]
 8000a8e:	e01d      	b.n	8000acc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	88bb      	ldrh	r3, [r7, #4]
 8000a94:	08db      	lsrs	r3, r3, #3
 8000a96:	b298      	uxth	r0, r3
 8000a98:	4603      	mov	r3, r0
 8000a9a:	01db      	lsls	r3, r3, #7
 8000a9c:	4413      	add	r3, r2
 8000a9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ad8 <SSD1306_DrawPixel+0xb8>)
 8000aa0:	5cd3      	ldrb	r3, [r2, r3]
 8000aa2:	b25a      	sxtb	r2, r3
 8000aa4:	88bb      	ldrh	r3, [r7, #4]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	2101      	movs	r1, #1
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	b25b      	sxtb	r3, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	b25b      	sxtb	r3, r3
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	b259      	sxtb	r1, r3
 8000aba:	88fa      	ldrh	r2, [r7, #6]
 8000abc:	4603      	mov	r3, r0
 8000abe:	01db      	lsls	r3, r3, #7
 8000ac0:	4413      	add	r3, r2
 8000ac2:	b2c9      	uxtb	r1, r1
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <SSD1306_DrawPixel+0xb8>)
 8000ac6:	54d1      	strb	r1, [r2, r3]
 8000ac8:	e000      	b.n	8000acc <SSD1306_DrawPixel+0xac>
		return;
 8000aca:	bf00      	nop
	}
}
 8000acc:	370c      	adds	r7, #12
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	200005a0 	.word	0x200005a0
 8000ad8:	200001a0 	.word	0x200001a0

08000adc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	80fb      	strh	r3, [r7, #6]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000aec:	4a05      	ldr	r2, [pc, #20]	; (8000b04 <SSD1306_GotoXY+0x28>)
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <SSD1306_GotoXY+0x28>)
 8000af4:	88bb      	ldrh	r3, [r7, #4]
 8000af6:	8053      	strh	r3, [r2, #2]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	200005a0 	.word	0x200005a0

08000b08 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	6039      	str	r1, [r7, #0]
 8000b12:	71fb      	strb	r3, [r7, #7]
 8000b14:	4613      	mov	r3, r2
 8000b16:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
	if (
 8000b24:	2b7f      	cmp	r3, #127	; 0x7f
 8000b26:	dc07      	bgt.n	8000b38 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000b2a:	885b      	ldrh	r3, [r3, #2]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	785b      	ldrb	r3, [r3, #1]
 8000b32:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b34:	2b3f      	cmp	r3, #63	; 0x3f
 8000b36:	dd01      	ble.n	8000b3c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	e05e      	b.n	8000bfa <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e04b      	b.n	8000bda <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685a      	ldr	r2, [r3, #4]
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	3b20      	subs	r3, #32
 8000b4a:	6839      	ldr	r1, [r7, #0]
 8000b4c:	7849      	ldrb	r1, [r1, #1]
 8000b4e:	fb01 f303 	mul.w	r3, r1, r3
 8000b52:	4619      	mov	r1, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	440b      	add	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	881b      	ldrh	r3, [r3, #0]
 8000b5e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	e030      	b.n	8000bc8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d010      	beq.n	8000b98 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000b78:	881a      	ldrh	r2, [r3, #0]
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	4413      	add	r3, r2
 8000b80:	b298      	uxth	r0, r3
 8000b82:	4b20      	ldr	r3, [pc, #128]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000b84:	885a      	ldrh	r2, [r3, #2]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	79ba      	ldrb	r2, [r7, #6]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f7ff ff45 	bl	8000a20 <SSD1306_DrawPixel>
 8000b96:	e014      	b.n	8000bc2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000b98:	4b1a      	ldr	r3, [pc, #104]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000b9a:	881a      	ldrh	r2, [r3, #0]
 8000b9c:	693b      	ldr	r3, [r7, #16]
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4413      	add	r3, r2
 8000ba2:	b298      	uxth	r0, r3
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000ba6:	885a      	ldrh	r2, [r3, #2]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	4413      	add	r3, r2
 8000bae:	b299      	uxth	r1, r3
 8000bb0:	79bb      	ldrb	r3, [r7, #6]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bf0c      	ite	eq
 8000bb6:	2301      	moveq	r3, #1
 8000bb8:	2300      	movne	r3, #0
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	f7ff ff2f 	bl	8000a20 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	3301      	adds	r3, #1
 8000bc6:	613b      	str	r3, [r7, #16]
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	461a      	mov	r2, r3
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d3c8      	bcc.n	8000b66 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	785b      	ldrb	r3, [r3, #1]
 8000bde:	461a      	mov	r2, r3
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d3ad      	bcc.n	8000b42 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000be6:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000be8:	881a      	ldrh	r2, [r3, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <SSD1306_Putc+0xfc>)
 8000bf6:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200005a0 	.word	0x200005a0

08000c08 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	4613      	mov	r3, r2
 8000c14:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000c16:	e012      	b.n	8000c3e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	79fa      	ldrb	r2, [r7, #7]
 8000c1e:	68b9      	ldr	r1, [r7, #8]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff71 	bl	8000b08 <SSD1306_Putc>
 8000c26:	4603      	mov	r3, r0
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	429a      	cmp	r2, r3
 8000c30:	d002      	beq.n	8000c38 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	e008      	b.n	8000c4a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d1e8      	bne.n	8000c18 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	781b      	ldrb	r3, [r3, #0]
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff feca 	bl	80009f0 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000c5c:	f7ff fe9a 	bl	8000994 <SSD1306_UpdateScreen>
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <ssd1306_I2C_Init+0x24>)
 8000c6c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c6e:	e002      	b.n	8000c76 <ssd1306_I2C_Init+0x12>
		p--;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1f9      	bne.n	8000c70 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000c7c:	bf00      	nop
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	0003d090 	.word	0x0003d090

08000c8c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b0c7      	sub	sp, #284	; 0x11c
 8000c90:	af02      	add	r7, sp, #8
 8000c92:	4604      	mov	r4, r0
 8000c94:	4608      	mov	r0, r1
 8000c96:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8000c9a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8000c9e:	600a      	str	r2, [r1, #0]
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000ca6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000caa:	4622      	mov	r2, r4
 8000cac:	701a      	strb	r2, [r3, #0]
 8000cae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cb2:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc2:	460a      	mov	r2, r1
 8000cc4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000cc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000cce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cd2:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8000cd6:	7812      	ldrb	r2, [r2, #0]
 8000cd8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000ce0:	e015      	b.n	8000d0e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000ce2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000ce6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cea:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000cee:	6812      	ldr	r2, [r2, #0]
 8000cf0:	441a      	add	r2, r3
 8000cf2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	7811      	ldrb	r1, [r2, #0]
 8000cfa:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000cfe:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8000d02:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d04:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d08:	3301      	adds	r3, #1
 8000d0a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000d0e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d18:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d1c:	8812      	ldrh	r2, [r2, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d8df      	bhi.n	8000ce2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000d22:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d26:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	b299      	uxth	r1, r3
 8000d2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	3301      	adds	r3, #1
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	f107 020c 	add.w	r2, r7, #12
 8000d40:	200a      	movs	r0, #10
 8000d42:	9000      	str	r0, [sp, #0]
 8000d44:	4803      	ldr	r0, [pc, #12]	; (8000d54 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d46:	f000 fedd 	bl	8001b04 <HAL_I2C_Master_Transmit>
}
 8000d4a:	bf00      	nop
 8000d4c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	200000ac 	.word	0x200000ac

08000d58 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af02      	add	r7, sp, #8
 8000d5e:	4603      	mov	r3, r0
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	460b      	mov	r3, r1
 8000d64:	71bb      	strb	r3, [r7, #6]
 8000d66:	4613      	mov	r3, r2
 8000d68:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000d6e:	797b      	ldrb	r3, [r7, #5]
 8000d70:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	b299      	uxth	r1, r3
 8000d76:	f107 020c 	add.w	r2, r7, #12
 8000d7a:	230a      	movs	r3, #10
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2302      	movs	r3, #2
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <ssd1306_I2C_Write+0x38>)
 8000d82:	f000 febf 	bl	8001b04 <HAL_I2C_Master_Transmit>
}
 8000d86:	bf00      	nop
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	200000ac 	.word	0x200000ac

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_MspInit+0x5c>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	4a14      	ldr	r2, [pc, #80]	; (8000df0 <HAL_MspInit+0x5c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6193      	str	r3, [r2, #24]
 8000da6:	4b12      	ldr	r3, [pc, #72]	; (8000df0 <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db2:	4b0f      	ldr	r3, [pc, #60]	; (8000df0 <HAL_MspInit+0x5c>)
 8000db4:	69db      	ldr	r3, [r3, #28]
 8000db6:	4a0e      	ldr	r2, [pc, #56]	; (8000df0 <HAL_MspInit+0x5c>)
 8000db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbc:	61d3      	str	r3, [r2, #28]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc6:	607b      	str	r3, [r7, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_MspInit+0x60>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_MspInit+0x60>)
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr
 8000df0:	40021000 	.word	0x40021000
 8000df4:	40010000 	.word	0x40010000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0318 	add.w	r3, r7, #24
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <HAL_I2C_MspInit+0xe8>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d12c      	bne.n	8000e72 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e18:	4b32      	ldr	r3, [pc, #200]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e1e:	f043 0308 	orr.w	r3, r3, #8
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b2f      	ldr	r3, [pc, #188]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0308 	and.w	r3, r3, #8
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e30:	23c0      	movs	r3, #192	; 0xc0
 8000e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	f107 0318 	add.w	r3, r7, #24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4829      	ldr	r0, [pc, #164]	; (8000ee8 <HAL_I2C_MspInit+0xf0>)
 8000e44:	f000 fb7e 	bl	8001544 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e48:	4b26      	ldr	r3, [pc, #152]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e4a:	69db      	ldr	r3, [r3, #28]
 8000e4c:	4a25      	ldr	r2, [pc, #148]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e52:	61d3      	str	r3, [r2, #28]
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	201f      	movs	r0, #31
 8000e66:	f000 fa7a 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e6a:	201f      	movs	r0, #31
 8000e6c:	f000 fa93 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e70:	e031      	b.n	8000ed6 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <HAL_I2C_MspInit+0xf4>)
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	d12c      	bne.n	8000ed6 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a18      	ldr	r2, [pc, #96]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e82:	f043 0308 	orr.w	r3, r3, #8
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b16      	ldr	r3, [pc, #88]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0308 	and.w	r3, r3, #8
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e9a:	2312      	movs	r3, #18
 8000e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	f107 0318 	add.w	r3, r7, #24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	480f      	ldr	r0, [pc, #60]	; (8000ee8 <HAL_I2C_MspInit+0xf0>)
 8000eaa:	f000 fb4b 	bl	8001544 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000eae:	4b0d      	ldr	r3, [pc, #52]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	4a0c      	ldr	r2, [pc, #48]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000eb8:	61d3      	str	r3, [r2, #28]
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_I2C_MspInit+0xec>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2021      	movs	r0, #33	; 0x21
 8000ecc:	f000 fa47 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000ed0:	2021      	movs	r0, #33	; 0x21
 8000ed2:	f000 fa60 	bl	8001396 <HAL_NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	; 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40005400 	.word	0x40005400
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40005800 	.word	0x40005800

08000ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b088      	sub	sp, #32
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a1c      	ldr	r2, [pc, #112]	; (8000f7c <HAL_SPI_MspInit+0x8c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d131      	bne.n	8000f74 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f10:	4b1b      	ldr	r3, [pc, #108]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f12:	69db      	ldr	r3, [r3, #28]
 8000f14:	4a1a      	ldr	r2, [pc, #104]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1a:	61d3      	str	r3, [r2, #28]
 8000f1c:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b15      	ldr	r3, [pc, #84]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_SPI_MspInit+0x90>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f40:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4e:	f107 0310 	add.w	r3, r7, #16
 8000f52:	4619      	mov	r1, r3
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <HAL_SPI_MspInit+0x94>)
 8000f56:	f000 faf5 	bl	8001544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000f5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f68:	f107 0310 	add.w	r3, r7, #16
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4805      	ldr	r0, [pc, #20]	; (8000f84 <HAL_SPI_MspInit+0x94>)
 8000f70:	f000 fae8 	bl	8001544 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f74:	bf00      	nop
 8000f76:	3720      	adds	r7, #32
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40003800 	.word	0x40003800
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010c00 	.word	0x40010c00

08000f88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a1f      	ldr	r2, [pc, #124]	; (8001020 <HAL_UART_MspInit+0x98>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d137      	bne.n	8001018 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	4a1d      	ldr	r2, [pc, #116]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fb2:	61d3      	str	r3, [r2, #28]
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fb6:	69db      	ldr	r3, [r3, #28]
 8000fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc0:	4b18      	ldr	r3, [pc, #96]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fc6:	f043 0304 	orr.w	r3, r3, #4
 8000fca:	6193      	str	r3, [r2, #24]
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <HAL_UART_MspInit+0x9c>)
 8000fce:	699b      	ldr	r3, [r3, #24]
 8000fd0:	f003 0304 	and.w	r3, r3, #4
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 0310 	add.w	r3, r7, #16
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480f      	ldr	r0, [pc, #60]	; (8001028 <HAL_UART_MspInit+0xa0>)
 8000fec:	f000 faaa 	bl	8001544 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4809      	ldr	r0, [pc, #36]	; (8001028 <HAL_UART_MspInit+0xa0>)
 8001004:	f000 fa9e 	bl	8001544 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2026      	movs	r0, #38	; 0x26
 800100e:	f000 f9a6 	bl	800135e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001012:	2026      	movs	r0, #38	; 0x26
 8001014:	f000 f9bf 	bl	8001396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40004400 	.word	0x40004400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <NMI_Handler+0x4>

08001032 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <MemManage_Handler+0x4>

0800103e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001042:	e7fe      	b.n	8001042 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	e7fe      	b.n	8001048 <UsageFault_Handler+0x4>

0800104a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr

08001056 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	bc80      	pop	{r7}
 800106c:	4770      	bx	lr

0800106e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001072:	f7ff fac7 	bl	8000604 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001076:	bf00      	nop
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <I2C1_EV_IRQHandler+0x10>)
 8001082:	f000 ff6b 	bl	8001f5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000058 	.word	0x20000058

08001090 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <I2C2_EV_IRQHandler+0x10>)
 8001096:	f000 ff61 	bl	8001f5c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200000ac 	.word	0x200000ac

080010a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <USART2_IRQHandler+0x10>)
 80010aa:	f003 fb07 	bl	80046bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	20000158 	.word	0x20000158

080010b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010c6:	490d      	ldr	r1, [pc, #52]	; (80010fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010cc:	e002      	b.n	80010d4 <LoopCopyDataInit>

080010ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d2:	3304      	adds	r3, #4

080010d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d8:	d3f9      	bcc.n	80010ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010dc:	4c0a      	ldr	r4, [pc, #40]	; (8001108 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e0:	e001      	b.n	80010e6 <LoopFillZerobss>

080010e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e4:	3204      	adds	r2, #4

080010e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e8:	d3fb      	bcc.n	80010e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ea:	f7ff ffe5 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f003 ff0d 	bl	8004f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff f833 	bl	800015c <main>
  bx lr
 80010f6:	4770      	bx	lr
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001100:	08007bf4 	.word	0x08007bf4
  ldr r2, =_sbss
 8001104:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001108:	200005ac 	.word	0x200005ac

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <HAL_Init+0x28>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a07      	ldr	r2, [pc, #28]	; (8001138 <HAL_Init+0x28>)
 800111a:	f043 0310 	orr.w	r3, r3, #16
 800111e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f911 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f808 	bl	800113c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800112c:	f7ff fe32 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40022000 	.word	0x40022000

0800113c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_InitTick+0x54>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	4b12      	ldr	r3, [pc, #72]	; (8001194 <HAL_InitTick+0x58>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	fbb3 f3f1 	udiv	r3, r3, r1
 8001156:	fbb2 f3f3 	udiv	r3, r2, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f929 	bl	80013b2 <HAL_SYSTICK_Config>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e00e      	b.n	8001188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2b0f      	cmp	r3, #15
 800116e:	d80a      	bhi.n	8001186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001170:	2200      	movs	r2, #0
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f04f 30ff 	mov.w	r0, #4294967295
 8001178:	f000 f8f1 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <HAL_InitTick+0x5c>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000030 	.word	0x20000030
 8001194:	20000038 	.word	0x20000038
 8001198:	20000034 	.word	0x20000034

0800119c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_GetTick+0x10>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200005a8 	.word	0x200005a8

080011b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	f003 0307 	and.w	r3, r3, #7
 80011be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c6:	68ba      	ldr	r2, [r7, #8]
 80011c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011cc:	4013      	ands	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011e2:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <__NVIC_SetPriorityGrouping+0x44>)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	60d3      	str	r3, [r2, #12]
}
 80011e8:	bf00      	nop
 80011ea:	3714      	adds	r7, #20
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bc80      	pop	{r7}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011fc:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_GetPriorityGrouping+0x18>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	0a1b      	lsrs	r3, r3, #8
 8001202:	f003 0307 	and.w	r3, r3, #7
}
 8001206:	4618      	mov	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	bc80      	pop	{r7}
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	e000ed00 	.word	0xe000ed00

08001214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	db0b      	blt.n	800123e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001226:	79fb      	ldrb	r3, [r7, #7]
 8001228:	f003 021f 	and.w	r2, r3, #31
 800122c:	4906      	ldr	r1, [pc, #24]	; (8001248 <__NVIC_EnableIRQ+0x34>)
 800122e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	2001      	movs	r0, #1
 8001236:	fa00 f202 	lsl.w	r2, r0, r2
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	; (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	; (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f7ff ff90 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	; (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff2d 	bl	80011b0 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001370:	f7ff ff42 	bl	80011f8 <__NVIC_GetPriorityGrouping>
 8001374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	68b9      	ldr	r1, [r7, #8]
 800137a:	6978      	ldr	r0, [r7, #20]
 800137c:	f7ff ff90 	bl	80012a0 <NVIC_EncodePriority>
 8001380:	4602      	mov	r2, r0
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff5f 	bl	800124c <__NVIC_SetPriority>
}
 800138e:	bf00      	nop
 8001390:	3718      	adds	r7, #24
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff ff35 	bl	8001214 <__NVIC_EnableIRQ>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff ffa2 	bl	8001304 <SysTick_Config>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d008      	beq.n	80013f2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e020      	b.n	8001434 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f022 020e 	bic.w	r2, r2, #14
 8001400:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0201 	bic.w	r2, r2, #1
 8001410:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141a:	2101      	movs	r1, #1
 800141c:	fa01 f202 	lsl.w	r2, r1, r2
 8001420:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2201      	movs	r2, #1
 8001426:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001432:	7bfb      	ldrb	r3, [r7, #15]
}
 8001434:	4618      	mov	r0, r3
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr
	...

08001440 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001448:	2300      	movs	r3, #0
 800144a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001452:	2b02      	cmp	r3, #2
 8001454:	d005      	beq.n	8001462 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2204      	movs	r2, #4
 800145a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e051      	b.n	8001506 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 020e 	bic.w	r2, r2, #14
 8001470:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 0201 	bic.w	r2, r2, #1
 8001480:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a22      	ldr	r2, [pc, #136]	; (8001510 <HAL_DMA_Abort_IT+0xd0>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d029      	beq.n	80014e0 <HAL_DMA_Abort_IT+0xa0>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a20      	ldr	r2, [pc, #128]	; (8001514 <HAL_DMA_Abort_IT+0xd4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d022      	beq.n	80014dc <HAL_DMA_Abort_IT+0x9c>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_DMA_Abort_IT+0xd8>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d01a      	beq.n	80014d6 <HAL_DMA_Abort_IT+0x96>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a1d      	ldr	r2, [pc, #116]	; (800151c <HAL_DMA_Abort_IT+0xdc>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d012      	beq.n	80014d0 <HAL_DMA_Abort_IT+0x90>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1c      	ldr	r2, [pc, #112]	; (8001520 <HAL_DMA_Abort_IT+0xe0>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d00a      	beq.n	80014ca <HAL_DMA_Abort_IT+0x8a>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a1a      	ldr	r2, [pc, #104]	; (8001524 <HAL_DMA_Abort_IT+0xe4>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d102      	bne.n	80014c4 <HAL_DMA_Abort_IT+0x84>
 80014be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80014c2:	e00e      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014c8:	e00b      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014ce:	e008      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	e005      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014da:	e002      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014dc:	2310      	movs	r3, #16
 80014de:	e000      	b.n	80014e2 <HAL_DMA_Abort_IT+0xa2>
 80014e0:	2301      	movs	r3, #1
 80014e2:	4a11      	ldr	r2, [pc, #68]	; (8001528 <HAL_DMA_Abort_IT+0xe8>)
 80014e4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
    } 
  }
  return status;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3710      	adds	r7, #16
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40020008 	.word	0x40020008
 8001514:	4002001c 	.word	0x4002001c
 8001518:	40020030 	.word	0x40020030
 800151c:	40020044 	.word	0x40020044
 8001520:	40020058 	.word	0x40020058
 8001524:	4002006c 	.word	0x4002006c
 8001528:	40020000 	.word	0x40020000

0800152c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800153a:	4618      	mov	r0, r3
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001544:	b480      	push	{r7}
 8001546:	b08b      	sub	sp, #44	; 0x2c
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800154e:	2300      	movs	r3, #0
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001552:	2300      	movs	r3, #0
 8001554:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001556:	e169      	b.n	800182c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001558:	2201      	movs	r2, #1
 800155a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	4013      	ands	r3, r2
 800156a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	429a      	cmp	r2, r3
 8001572:	f040 8158 	bne.w	8001826 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	4a9a      	ldr	r2, [pc, #616]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d05e      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001580:	4a98      	ldr	r2, [pc, #608]	; (80017e4 <HAL_GPIO_Init+0x2a0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d875      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001586:	4a98      	ldr	r2, [pc, #608]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d058      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 800158c:	4a96      	ldr	r2, [pc, #600]	; (80017e8 <HAL_GPIO_Init+0x2a4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d86f      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 8001592:	4a96      	ldr	r2, [pc, #600]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d052      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 8001598:	4a94      	ldr	r2, [pc, #592]	; (80017ec <HAL_GPIO_Init+0x2a8>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d869      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 800159e:	4a94      	ldr	r2, [pc, #592]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d04c      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015a4:	4a92      	ldr	r2, [pc, #584]	; (80017f0 <HAL_GPIO_Init+0x2ac>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d863      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015aa:	4a92      	ldr	r2, [pc, #584]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d046      	beq.n	800163e <HAL_GPIO_Init+0xfa>
 80015b0:	4a90      	ldr	r2, [pc, #576]	; (80017f4 <HAL_GPIO_Init+0x2b0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d85d      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015b6:	2b12      	cmp	r3, #18
 80015b8:	d82a      	bhi.n	8001610 <HAL_GPIO_Init+0xcc>
 80015ba:	2b12      	cmp	r3, #18
 80015bc:	d859      	bhi.n	8001672 <HAL_GPIO_Init+0x12e>
 80015be:	a201      	add	r2, pc, #4	; (adr r2, 80015c4 <HAL_GPIO_Init+0x80>)
 80015c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015c4:	0800163f 	.word	0x0800163f
 80015c8:	08001619 	.word	0x08001619
 80015cc:	0800162b 	.word	0x0800162b
 80015d0:	0800166d 	.word	0x0800166d
 80015d4:	08001673 	.word	0x08001673
 80015d8:	08001673 	.word	0x08001673
 80015dc:	08001673 	.word	0x08001673
 80015e0:	08001673 	.word	0x08001673
 80015e4:	08001673 	.word	0x08001673
 80015e8:	08001673 	.word	0x08001673
 80015ec:	08001673 	.word	0x08001673
 80015f0:	08001673 	.word	0x08001673
 80015f4:	08001673 	.word	0x08001673
 80015f8:	08001673 	.word	0x08001673
 80015fc:	08001673 	.word	0x08001673
 8001600:	08001673 	.word	0x08001673
 8001604:	08001673 	.word	0x08001673
 8001608:	08001621 	.word	0x08001621
 800160c:	08001635 	.word	0x08001635
 8001610:	4a79      	ldr	r2, [pc, #484]	; (80017f8 <HAL_GPIO_Init+0x2b4>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001616:	e02c      	b.n	8001672 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	623b      	str	r3, [r7, #32]
          break;
 800161e:	e029      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	3304      	adds	r3, #4
 8001626:	623b      	str	r3, [r7, #32]
          break;
 8001628:	e024      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	3308      	adds	r3, #8
 8001630:	623b      	str	r3, [r7, #32]
          break;
 8001632:	e01f      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	330c      	adds	r3, #12
 800163a:	623b      	str	r3, [r7, #32]
          break;
 800163c:	e01a      	b.n	8001674 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001646:	2304      	movs	r3, #4
 8001648:	623b      	str	r3, [r7, #32]
          break;
 800164a:	e013      	b.n	8001674 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2b01      	cmp	r3, #1
 8001652:	d105      	bne.n	8001660 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001654:	2308      	movs	r3, #8
 8001656:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69fa      	ldr	r2, [r7, #28]
 800165c:	611a      	str	r2, [r3, #16]
          break;
 800165e:	e009      	b.n	8001674 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001660:	2308      	movs	r3, #8
 8001662:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	69fa      	ldr	r2, [r7, #28]
 8001668:	615a      	str	r2, [r3, #20]
          break;
 800166a:	e003      	b.n	8001674 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800166c:	2300      	movs	r3, #0
 800166e:	623b      	str	r3, [r7, #32]
          break;
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x130>
          break;
 8001672:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2bff      	cmp	r3, #255	; 0xff
 8001678:	d801      	bhi.n	800167e <HAL_GPIO_Init+0x13a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	e001      	b.n	8001682 <HAL_GPIO_Init+0x13e>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	2bff      	cmp	r3, #255	; 0xff
 8001688:	d802      	bhi.n	8001690 <HAL_GPIO_Init+0x14c>
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0x152>
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	3b08      	subs	r3, #8
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	210f      	movs	r1, #15
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	fa01 f303 	lsl.w	r3, r1, r3
 80016a4:	43db      	mvns	r3, r3
 80016a6:	401a      	ands	r2, r3
 80016a8:	6a39      	ldr	r1, [r7, #32]
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	431a      	orrs	r2, r3
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	f000 80b1 	beq.w	8001826 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016c4:	4b4d      	ldr	r3, [pc, #308]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	4a4c      	ldr	r2, [pc, #304]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6193      	str	r3, [r2, #24]
 80016d0:	4b4a      	ldr	r3, [pc, #296]	; (80017fc <HAL_GPIO_Init+0x2b8>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016dc:	4a48      	ldr	r2, [pc, #288]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 80016de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4013      	ands	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <HAL_GPIO_Init+0x2c0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d013      	beq.n	8001730 <HAL_GPIO_Init+0x1ec>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4a3f      	ldr	r2, [pc, #252]	; (8001808 <HAL_GPIO_Init+0x2c4>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d00d      	beq.n	800172c <HAL_GPIO_Init+0x1e8>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a3e      	ldr	r2, [pc, #248]	; (800180c <HAL_GPIO_Init+0x2c8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d007      	beq.n	8001728 <HAL_GPIO_Init+0x1e4>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4a3d      	ldr	r2, [pc, #244]	; (8001810 <HAL_GPIO_Init+0x2cc>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d101      	bne.n	8001724 <HAL_GPIO_Init+0x1e0>
 8001720:	2303      	movs	r3, #3
 8001722:	e006      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001724:	2304      	movs	r3, #4
 8001726:	e004      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001728:	2302      	movs	r3, #2
 800172a:	e002      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <HAL_GPIO_Init+0x1ee>
 8001730:	2300      	movs	r3, #0
 8001732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001734:	f002 0203 	and.w	r2, r2, #3
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	4093      	lsls	r3, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001742:	492f      	ldr	r1, [pc, #188]	; (8001800 <HAL_GPIO_Init+0x2bc>)
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	3302      	adds	r3, #2
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800175c:	4b2d      	ldr	r3, [pc, #180]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	492c      	ldr	r1, [pc, #176]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176a:	4b2a      	ldr	r3, [pc, #168]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	4928      	ldr	r1, [pc, #160]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4922      	ldr	r1, [pc, #136]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001792:	4b20      	ldr	r3, [pc, #128]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	491e      	ldr	r1, [pc, #120]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d006      	beq.n	80017ba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017ae:	689a      	ldr	r2, [r3, #8]
 80017b0:	4918      	ldr	r1, [pc, #96]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	608b      	str	r3, [r1, #8]
 80017b8:	e006      	b.n	80017c8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017bc:	689a      	ldr	r2, [r3, #8]
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4914      	ldr	r1, [pc, #80]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017c4:	4013      	ands	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d021      	beq.n	8001818 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017d4:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_GPIO_Init+0x2d0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
 80017e0:	e021      	b.n	8001826 <HAL_GPIO_Init+0x2e2>
 80017e2:	bf00      	nop
 80017e4:	10320000 	.word	0x10320000
 80017e8:	10310000 	.word	0x10310000
 80017ec:	10220000 	.word	0x10220000
 80017f0:	10210000 	.word	0x10210000
 80017f4:	10120000 	.word	0x10120000
 80017f8:	10110000 	.word	0x10110000
 80017fc:	40021000 	.word	0x40021000
 8001800:	40010000 	.word	0x40010000
 8001804:	40010800 	.word	0x40010800
 8001808:	40010c00 	.word	0x40010c00
 800180c:	40011000 	.word	0x40011000
 8001810:	40011400 	.word	0x40011400
 8001814:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_GPIO_Init+0x304>)
 800181a:	68da      	ldr	r2, [r3, #12]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	43db      	mvns	r3, r3
 8001820:	4909      	ldr	r1, [pc, #36]	; (8001848 <HAL_GPIO_Init+0x304>)
 8001822:	4013      	ands	r3, r2
 8001824:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	fa22 f303 	lsr.w	r3, r2, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	f47f ae8e 	bne.w	8001558 <HAL_GPIO_Init+0x14>
  }
}
 800183c:	bf00      	nop
 800183e:	bf00      	nop
 8001840:	372c      	adds	r7, #44	; 0x2c
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr
 8001848:	40010400 	.word	0x40010400

0800184c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	460b      	mov	r3, r1
 8001856:	807b      	strh	r3, [r7, #2]
 8001858:	4613      	mov	r3, r2
 800185a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	787b      	ldrb	r3, [r7, #1]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001862:	887a      	ldrh	r2, [r7, #2]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001868:	e003      	b.n	8001872 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800186a:	887b      	ldrh	r3, [r7, #2]
 800186c:	041a      	lsls	r2, r3, #16
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	611a      	str	r2, [r3, #16]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	bc80      	pop	{r7}
 800187a:	4770      	bx	lr

0800187c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d101      	bne.n	800188e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e12b      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001894:	b2db      	uxtb	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff faa8 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2224      	movs	r2, #36	; 0x24
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f022 0201 	bic.w	r2, r2, #1
 80018be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018e0:	f002 fcce 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 80018e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	4a81      	ldr	r2, [pc, #516]	; (8001af0 <HAL_I2C_Init+0x274>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d807      	bhi.n	8001900 <HAL_I2C_Init+0x84>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4a80      	ldr	r2, [pc, #512]	; (8001af4 <HAL_I2C_Init+0x278>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	bf94      	ite	ls
 80018f8:	2301      	movls	r3, #1
 80018fa:	2300      	movhi	r3, #0
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	e006      	b.n	800190e <HAL_I2C_Init+0x92>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4a7d      	ldr	r2, [pc, #500]	; (8001af8 <HAL_I2C_Init+0x27c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	bf94      	ite	ls
 8001908:	2301      	movls	r3, #1
 800190a:	2300      	movhi	r3, #0
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e0e7      	b.n	8001ae6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a78      	ldr	r2, [pc, #480]	; (8001afc <HAL_I2C_Init+0x280>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0c9b      	lsrs	r3, r3, #18
 8001920:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68ba      	ldr	r2, [r7, #8]
 8001932:	430a      	orrs	r2, r1
 8001934:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6a1b      	ldr	r3, [r3, #32]
 800193c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d802      	bhi.n	8001950 <HAL_I2C_Init+0xd4>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3301      	adds	r3, #1
 800194e:	e009      	b.n	8001964 <HAL_I2C_Init+0xe8>
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	4a69      	ldr	r2, [pc, #420]	; (8001b00 <HAL_I2C_Init+0x284>)
 800195c:	fba2 2303 	umull	r2, r3, r2, r3
 8001960:	099b      	lsrs	r3, r3, #6
 8001962:	3301      	adds	r3, #1
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6812      	ldr	r2, [r2, #0]
 8001968:	430b      	orrs	r3, r1
 800196a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001976:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	495c      	ldr	r1, [pc, #368]	; (8001af0 <HAL_I2C_Init+0x274>)
 8001980:	428b      	cmp	r3, r1
 8001982:	d819      	bhi.n	80019b8 <HAL_I2C_Init+0x13c>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e59      	subs	r1, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001992:	1c59      	adds	r1, r3, #1
 8001994:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001998:	400b      	ands	r3, r1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d00a      	beq.n	80019b4 <HAL_I2C_Init+0x138>
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1e59      	subs	r1, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b2:	e051      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b4:	2304      	movs	r3, #4
 80019b6:	e04f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d111      	bne.n	80019e4 <HAL_I2C_Init+0x168>
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1e58      	subs	r0, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6859      	ldr	r1, [r3, #4]
 80019c8:	460b      	mov	r3, r1
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	440b      	add	r3, r1
 80019ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d2:	3301      	adds	r3, #1
 80019d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019d8:	2b00      	cmp	r3, #0
 80019da:	bf0c      	ite	eq
 80019dc:	2301      	moveq	r3, #1
 80019de:	2300      	movne	r3, #0
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	e012      	b.n	8001a0a <HAL_I2C_Init+0x18e>
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	1e58      	subs	r0, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6859      	ldr	r1, [r3, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	0099      	lsls	r1, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fa:	3301      	adds	r3, #1
 80019fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	bf0c      	ite	eq
 8001a04:	2301      	moveq	r3, #1
 8001a06:	2300      	movne	r3, #0
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_I2C_Init+0x196>
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e022      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d10e      	bne.n	8001a38 <HAL_I2C_Init+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	1e58      	subs	r0, r3, #1
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	460b      	mov	r3, r1
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	440b      	add	r3, r1
 8001a28:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a36:	e00f      	b.n	8001a58 <HAL_I2C_Init+0x1dc>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	1e58      	subs	r0, r3, #1
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6859      	ldr	r1, [r3, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	440b      	add	r3, r1
 8001a46:	0099      	lsls	r1, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a58:	6879      	ldr	r1, [r7, #4]
 8001a5a:	6809      	ldr	r1, [r1, #0]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69da      	ldr	r2, [r3, #28]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a1b      	ldr	r3, [r3, #32]
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6911      	ldr	r1, [r2, #16]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68d2      	ldr	r2, [r2, #12]
 8001a92:	4311      	orrs	r1, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695a      	ldr	r2, [r3, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 0201 	orr.w	r2, r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2220      	movs	r2, #32
 8001ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	000186a0 	.word	0x000186a0
 8001af4:	001e847f 	.word	0x001e847f
 8001af8:	003d08ff 	.word	0x003d08ff
 8001afc:	431bde83 	.word	0x431bde83
 8001b00:	10624dd3 	.word	0x10624dd3

08001b04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	607a      	str	r2, [r7, #4]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	460b      	mov	r3, r1
 8001b12:	817b      	strh	r3, [r7, #10]
 8001b14:	4613      	mov	r3, r2
 8001b16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b18:	f7ff fb40 	bl	800119c <HAL_GetTick>
 8001b1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b20      	cmp	r3, #32
 8001b28:	f040 80e0 	bne.w	8001cec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2319      	movs	r3, #25
 8001b32:	2201      	movs	r2, #1
 8001b34:	4970      	ldr	r1, [pc, #448]	; (8001cf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f001 fdfc 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001b42:	2302      	movs	r3, #2
 8001b44:	e0d3      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_I2C_Master_Transmit+0x50>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e0cc      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d007      	beq.n	8001b7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f042 0201 	orr.w	r2, r2, #1
 8001b78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2221      	movs	r2, #33	; 0x21
 8001b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2210      	movs	r2, #16
 8001b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	893a      	ldrh	r2, [r7, #8]
 8001baa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4a50      	ldr	r2, [pc, #320]	; (8001cfc <HAL_I2C_Master_Transmit+0x1f8>)
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	6a3a      	ldr	r2, [r7, #32]
 8001bc2:	68f8      	ldr	r0, [r7, #12]
 8001bc4:	f001 fc8c 	bl	80034e0 <I2C_MasterRequestWrite>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e08d      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	613b      	str	r3, [r7, #16]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	613b      	str	r3, [r7, #16]
 8001be6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001be8:	e066      	b.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	6a39      	ldr	r1, [r7, #32]
 8001bee:	68f8      	ldr	r0, [r7, #12]
 8001bf0:	f001 fe76 	bl	80038e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00d      	beq.n	8001c16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	2b04      	cmp	r3, #4
 8001c00:	d107      	bne.n	8001c12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e06b      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	781a      	ldrb	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c26:	1c5a      	adds	r2, r3, #1
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c30:	b29b      	uxth	r3, r3
 8001c32:	3b01      	subs	r3, #1
 8001c34:	b29a      	uxth	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	b29a      	uxth	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695b      	ldr	r3, [r3, #20]
 8001c4c:	f003 0304 	and.w	r3, r3, #4
 8001c50:	2b04      	cmp	r3, #4
 8001c52:	d11b      	bne.n	8001c8c <HAL_I2C_Master_Transmit+0x188>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d017      	beq.n	8001c8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	6a39      	ldr	r1, [r7, #32]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f001 fe66 	bl	8003962 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d107      	bne.n	8001cb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e01a      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d194      	bne.n	8001bea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e000      	b.n	8001cee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001cec:	2302      	movs	r3, #2
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	00100002 	.word	0x00100002
 8001cfc:	ffff0000 	.word	0xffff0000

08001d00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af02      	add	r7, sp, #8
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fa44 	bl	800119c <HAL_GetTick>
 8001d14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b20      	cmp	r3, #32
 8001d24:	f040 8111 	bne.w	8001f4a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	2319      	movs	r3, #25
 8001d2e:	2201      	movs	r2, #1
 8001d30:	4988      	ldr	r1, [pc, #544]	; (8001f54 <HAL_I2C_IsDeviceReady+0x254>)
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f001 fcfe 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e104      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d101      	bne.n	8001d50 <HAL_I2C_IsDeviceReady+0x50>
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	e0fd      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d007      	beq.n	8001d76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0201 	orr.w	r2, r2, #1
 8001d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2224      	movs	r2, #36	; 0x24
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a70      	ldr	r2, [pc, #448]	; (8001f58 <HAL_I2C_IsDeviceReady+0x258>)
 8001d98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001da8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f001 fcbc 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d00d      	beq.n	8001dde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dd0:	d103      	bne.n	8001dda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0b6      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dde:	897b      	ldrh	r3, [r7, #10]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	461a      	mov	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff f9d5 	bl	800119c <HAL_GetTick>
 8001df2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	bf0c      	ite	eq
 8001e02:	2301      	moveq	r3, #1
 8001e04:	2300      	movne	r3, #0
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e18:	bf0c      	ite	eq
 8001e1a:	2301      	moveq	r3, #1
 8001e1c:	2300      	movne	r3, #0
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e22:	e025      	b.n	8001e70 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001e24:	f7ff f9ba 	bl	800119c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d302      	bcc.n	8001e3a <HAL_I2C_IsDeviceReady+0x13a>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d103      	bne.n	8001e42 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	22a0      	movs	r2, #160	; 0xa0
 8001e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	f003 0302 	and.w	r3, r3, #2
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	2ba0      	cmp	r3, #160	; 0xa0
 8001e7a:	d005      	beq.n	8001e88 <HAL_I2C_IsDeviceReady+0x188>
 8001e7c:	7dfb      	ldrb	r3, [r7, #23]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_I2C_IsDeviceReady+0x188>
 8001e82:	7dbb      	ldrb	r3, [r7, #22]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d0cd      	beq.n	8001e24 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d129      	bne.n	8001ef2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	2319      	movs	r3, #25
 8001eca:	2201      	movs	r2, #1
 8001ecc:	4921      	ldr	r1, [pc, #132]	; (8001f54 <HAL_I2C_IsDeviceReady+0x254>)
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f001 fc30 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e036      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	e02c      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f00:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f0a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	490f      	ldr	r1, [pc, #60]	; (8001f54 <HAL_I2C_IsDeviceReady+0x254>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f001 fc0c 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e012      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f4ff af32 	bcc.w	8001d9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00100002 	.word	0x00100002
 8001f58:	ffff0000 	.word	0xffff0000

08001f5c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b088      	sub	sp, #32
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f74:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f7c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f84:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f86:	7bfb      	ldrb	r3, [r7, #15]
 8001f88:	2b10      	cmp	r3, #16
 8001f8a:	d003      	beq.n	8001f94 <HAL_I2C_EV_IRQHandler+0x38>
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	f040 80c1 	bne.w	8002116 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10d      	bne.n	8001fca <HAL_I2C_EV_IRQHandler+0x6e>
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001fb4:	d003      	beq.n	8001fbe <HAL_I2C_EV_IRQHandler+0x62>
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001fbc:	d101      	bne.n	8001fc2 <HAL_I2C_EV_IRQHandler+0x66>
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x68>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f000 8132 	beq.w	800222e <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00c      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x92>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	0a5b      	lsrs	r3, r3, #9
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d006      	beq.n	8001fee <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f001 fd5f 	bl	8003aa4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 fcc8 	bl	800297c <I2C_Master_SB>
 8001fec:	e092      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d009      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0xb2>
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	0a5b      	lsrs	r3, r3, #9
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fd3d 	bl	8002a86 <I2C_Master_ADD10>
 800200c:	e082      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	085b      	lsrs	r3, r3, #1
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d009      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0xd2>
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	0a5b      	lsrs	r3, r3, #9
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 fd56 	bl	8002ad8 <I2C_Master_ADDR>
 800202c:	e072      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	089b      	lsrs	r3, r3, #2
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	d03b      	beq.n	80020b2 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002048:	f000 80f3 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	09db      	lsrs	r3, r3, #7
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00f      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	d103      	bne.n	8002078 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f942 	bl	80022fa <I2C_MasterTransmit_TXE>
 8002076:	e04d      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 80d6 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	0a5b      	lsrs	r3, r3, #9
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 80cf 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002094:	7bbb      	ldrb	r3, [r7, #14]
 8002096:	2b21      	cmp	r3, #33	; 0x21
 8002098:	d103      	bne.n	80020a2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f9c9 	bl	8002432 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020a0:	e0c7      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80020a2:	7bfb      	ldrb	r3, [r7, #15]
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	f040 80c4 	bne.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa37 	bl	800251e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b0:	e0bf      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80020c0:	f000 80b7 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	099b      	lsrs	r3, r3, #6
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00f      	beq.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	0a9b      	lsrs	r3, r3, #10
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d009      	beq.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	089b      	lsrs	r3, r3, #2
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d103      	bne.n	80020f0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 faac 	bl	8002646 <I2C_MasterReceive_RXNE>
 80020ee:	e011      	b.n	8002114 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	f000 809a 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	0a5b      	lsrs	r3, r3, #9
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8093 	beq.w	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 fb4b 	bl	80027a8 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002112:	e08e      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002114:	e08d      	b.n	8002232 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d004      	beq.n	8002128 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	e007      	b.n	8002138 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	085b      	lsrs	r3, r3, #1
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d012      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x20e>
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	0a5b      	lsrs	r3, r3, #9
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00c      	beq.n	800216a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 ff0f 	bl	8002f86 <I2C_Slave_ADDR>
 8002168:	e066      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	091b      	lsrs	r3, r3, #4
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d009      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x22e>
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 ff4a 	bl	800301c <I2C_Slave_STOPF>
 8002188:	e056      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800218a:	7bbb      	ldrb	r3, [r7, #14]
 800218c:	2b21      	cmp	r3, #33	; 0x21
 800218e:	d002      	beq.n	8002196 <HAL_I2C_EV_IRQHandler+0x23a>
 8002190:	7bbb      	ldrb	r3, [r7, #14]
 8002192:	2b29      	cmp	r3, #41	; 0x29
 8002194:	d125      	bne.n	80021e2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	09db      	lsrs	r3, r3, #7
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00f      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	0a9b      	lsrs	r3, r3, #10
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d009      	beq.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d103      	bne.n	80021c2 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 fe27 	bl	8002e0e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021c0:	e039      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	089b      	lsrs	r3, r3, #2
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d033      	beq.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	0a5b      	lsrs	r3, r3, #9
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d02d      	beq.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 fe54 	bl	8002e88 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021e0:	e029      	b.n	8002236 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	099b      	lsrs	r3, r3, #6
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00f      	beq.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	0a9b      	lsrs	r3, r3, #10
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	089b      	lsrs	r3, r3, #2
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d103      	bne.n	800220e <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 fe5e 	bl	8002ec8 <I2C_SlaveReceive_RXNE>
 800220c:	e014      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	089b      	lsrs	r3, r3, #2
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	0a5b      	lsrs	r3, r3, #9
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fe8c 	bl	8002f44 <I2C_SlaveReceive_BTF>
 800222c:	e004      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 800222e:	bf00      	nop
 8002230:	e002      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002232:	bf00      	nop
 8002234:	e000      	b.n	8002238 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002236:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8002238:	3720      	adds	r7, #32
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	bc80      	pop	{r7}
 8002284:	4770      	bx	lr

08002286 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	70fb      	strb	r3, [r7, #3]
 8002292:	4613      	mov	r3, r2
 8002294:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b084      	sub	sp, #16
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002308:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002310:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002316:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d150      	bne.n	80023c2 <I2C_MasterTransmit_TXE+0xc8>
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	2b21      	cmp	r3, #33	; 0x21
 8002324:	d14d      	bne.n	80023c2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	2b08      	cmp	r3, #8
 800232a:	d01d      	beq.n	8002368 <I2C_MasterTransmit_TXE+0x6e>
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2b20      	cmp	r3, #32
 8002330:	d01a      	beq.n	8002368 <I2C_MasterTransmit_TXE+0x6e>
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002338:	d016      	beq.n	8002368 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002348:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2211      	movs	r2, #17
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2220      	movs	r2, #32
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff6c 	bl	800223e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002366:	e060      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002376:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2220      	movs	r2, #32
 8002392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b40      	cmp	r3, #64	; 0x40
 80023a0:	d107      	bne.n	80023b2 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff81 	bl	80022b2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023b0:	e03b      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff ff3f 	bl	800223e <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023c0:	e033      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b21      	cmp	r3, #33	; 0x21
 80023c6:	d005      	beq.n	80023d4 <I2C_MasterTransmit_TXE+0xda>
 80023c8:	7bbb      	ldrb	r3, [r7, #14]
 80023ca:	2b40      	cmp	r3, #64	; 0x40
 80023cc:	d12d      	bne.n	800242a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80023ce:	7bfb      	ldrb	r3, [r7, #15]
 80023d0:	2b22      	cmp	r3, #34	; 0x22
 80023d2:	d12a      	bne.n	800242a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ec:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80023ee:	e01c      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d103      	bne.n	8002404 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f000 f88e 	bl	800251e <I2C_MemoryTransmit_TXE_BTF>
}
 8002402:	e012      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002408:	781a      	ldrb	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002414:	1c5a      	adds	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800241e:	b29b      	uxth	r3, r3
 8002420:	3b01      	subs	r3, #1
 8002422:	b29a      	uxth	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002428:	e7ff      	b.n	800242a <I2C_MasterTransmit_TXE+0x130>
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b21      	cmp	r3, #33	; 0x21
 800244a:	d164      	bne.n	8002516 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002450:	b29b      	uxth	r3, r3
 8002452:	2b00      	cmp	r3, #0
 8002454:	d012      	beq.n	800247c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	781a      	ldrb	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002466:	1c5a      	adds	r2, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	3b01      	subs	r3, #1
 8002474:	b29a      	uxth	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800247a:	e04c      	b.n	8002516 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2b08      	cmp	r3, #8
 8002480:	d01d      	beq.n	80024be <I2C_MasterTransmit_BTF+0x8c>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b20      	cmp	r3, #32
 8002486:	d01a      	beq.n	80024be <I2C_MasterTransmit_BTF+0x8c>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800248e:	d016      	beq.n	80024be <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800249e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2211      	movs	r2, #17
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7ff fec1 	bl	800223e <HAL_I2C_MasterTxCpltCallback>
}
 80024bc:	e02b      	b.n	8002516 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	685a      	ldr	r2, [r3, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024cc:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024dc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d107      	bne.n	8002508 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7ff fed6 	bl	80022b2 <HAL_I2C_MemTxCpltCallback>
}
 8002506:	e006      	b.n	8002516 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fe94 	bl	800223e <HAL_I2C_MasterTxCpltCallback>
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800252c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	2b00      	cmp	r3, #0
 8002534:	d11d      	bne.n	8002572 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10b      	bne.n	8002556 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002542:	b2da      	uxtb	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800254e:	1c9a      	adds	r2, r3, #2
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002554:	e073      	b.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800255a:	b29b      	uxth	r3, r3
 800255c:	121b      	asrs	r3, r3, #8
 800255e:	b2da      	uxtb	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002570:	e065      	b.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	2b01      	cmp	r3, #1
 8002578:	d10b      	bne.n	8002592 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257e:	b2da      	uxtb	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002590:	e055      	b.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b02      	cmp	r3, #2
 8002598:	d151      	bne.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b22      	cmp	r3, #34	; 0x22
 800259e:	d10d      	bne.n	80025bc <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ae:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80025ba:	e040      	b.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	2b21      	cmp	r3, #33	; 0x21
 80025ca:	d112      	bne.n	80025f2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	781a      	ldrb	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	1c5a      	adds	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025f0:	e025      	b.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d120      	bne.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b21      	cmp	r3, #33	; 0x21
 8002600:	d11d      	bne.n	800263e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002610:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002620:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2220      	movs	r2, #32
 800262c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f7ff fe3a 	bl	80022b2 <HAL_I2C_MemTxCpltCallback>
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b084      	sub	sp, #16
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b22      	cmp	r3, #34	; 0x22
 8002658:	f040 80a2 	bne.w	80027a0 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002660:	b29b      	uxth	r3, r3
 8002662:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2b03      	cmp	r3, #3
 8002668:	d921      	bls.n	80026ae <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	b2d2      	uxtb	r2, r2
 8002676:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	1c5a      	adds	r2, r3, #1
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b03      	cmp	r3, #3
 8002698:	f040 8082 	bne.w	80027a0 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026aa:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80026ac:	e078      	b.n	80027a0 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d074      	beq.n	80027a0 <I2C_MasterReceive_RXNE+0x15a>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d002      	beq.n	80026c2 <I2C_MasterReceive_RXNE+0x7c>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d16e      	bne.n	80027a0 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f001 f98e 	bl	80039e4 <I2C_WaitOnSTOPRequestThroughIT>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d142      	bne.n	8002754 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026dc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026ec:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	3b01      	subs	r3, #1
 800270e:	b29a      	uxth	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d10a      	bne.n	800273e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7ff fdc4 	bl	80022c4 <HAL_I2C_MemRxCpltCallback>
}
 800273c:	e030      	b.n	80027a0 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2212      	movs	r2, #18
 800274a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f7ff fd7f 	bl	8002250 <HAL_I2C_MasterRxCpltCallback>
}
 8002752:	e025      	b.n	80027a0 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002762:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	691a      	ldr	r2, [r3, #16]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	1c5a      	adds	r2, r3, #1
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002780:	b29b      	uxth	r3, r3
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2220      	movs	r2, #32
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fd9b 	bl	80022d6 <HAL_I2C_ErrorCallback>
}
 80027a0:	bf00      	nop
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d11b      	bne.n	80027f8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027ce:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80027f6:	e0bd      	b.n	8002974 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	2b03      	cmp	r3, #3
 8002800:	d129      	bne.n	8002856 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685a      	ldr	r2, [r3, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002810:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b04      	cmp	r3, #4
 8002816:	d00a      	beq.n	800282e <I2C_MasterReceive_BTF+0x86>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d007      	beq.n	800282e <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800282c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284a:	b29b      	uxth	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002854:	e08e      	b.n	8002974 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800285a:	b29b      	uxth	r3, r3
 800285c:	2b02      	cmp	r3, #2
 800285e:	d176      	bne.n	800294e <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d002      	beq.n	800286c <I2C_MasterReceive_BTF+0xc4>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2b10      	cmp	r3, #16
 800286a:	d108      	bne.n	800287e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	e019      	b.n	80028b2 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d002      	beq.n	800288a <I2C_MasterReceive_BTF+0xe2>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d108      	bne.n	800289c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	e00a      	b.n	80028b2 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b10      	cmp	r3, #16
 80028a0:	d007      	beq.n	80028b2 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	691a      	ldr	r2, [r3, #16]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	3b01      	subs	r3, #1
 80028f8:	b29a      	uxth	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800290c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d10a      	bne.n	8002938 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fcc7 	bl	80022c4 <HAL_I2C_MemRxCpltCallback>
}
 8002936:	e01d      	b.n	8002974 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2212      	movs	r2, #18
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fc82 	bl	8002250 <HAL_I2C_MasterRxCpltCallback>
}
 800294c:	e012      	b.n	8002974 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002958:	b2d2      	uxtb	r2, r2
 800295a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	1c5a      	adds	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296a:	b29b      	uxth	r3, r3
 800296c:	3b01      	subs	r3, #1
 800296e:	b29a      	uxth	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b40      	cmp	r3, #64	; 0x40
 800298e:	d117      	bne.n	80029c0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002994:	2b00      	cmp	r3, #0
 8002996:	d109      	bne.n	80029ac <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029a8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80029aa:	e067      	b.n	8002a7c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	f043 0301 	orr.w	r3, r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	611a      	str	r2, [r3, #16]
}
 80029be:	e05d      	b.n	8002a7c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029c8:	d133      	bne.n	8002a32 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b21      	cmp	r3, #33	; 0x21
 80029d4:	d109      	bne.n	80029ea <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	461a      	mov	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029e6:	611a      	str	r2, [r3, #16]
 80029e8:	e008      	b.n	80029fc <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d004      	beq.n	8002a0e <I2C_Master_SB+0x92>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d108      	bne.n	8002a20 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d032      	beq.n	8002a7c <I2C_Master_SB+0x100>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d02d      	beq.n	8002a7c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	685a      	ldr	r2, [r3, #4]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2e:	605a      	str	r2, [r3, #4]
}
 8002a30:	e024      	b.n	8002a7c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10e      	bne.n	8002a58 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	11db      	asrs	r3, r3, #7
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f003 0306 	and.w	r3, r3, #6
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f063 030f 	orn	r3, r3, #15
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	611a      	str	r2, [r3, #16]
}
 8002a56:	e011      	b.n	8002a7c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d10d      	bne.n	8002a7c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	11db      	asrs	r3, r3, #7
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	f003 0306 	and.w	r3, r3, #6
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f063 030e 	orn	r3, r3, #14
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bc80      	pop	{r7}
 8002a84:	4770      	bx	lr

08002a86 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	b2da      	uxtb	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d004      	beq.n	8002aac <I2C_Master_ADD10+0x26>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d108      	bne.n	8002abe <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00c      	beq.n	8002ace <I2C_Master_ADD10+0x48>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d007      	beq.n	8002ace <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002acc:	605a      	str	r2, [r3, #4]
  }
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr

08002ad8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b091      	sub	sp, #68	; 0x44
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b22      	cmp	r3, #34	; 0x22
 8002b00:	f040 8174 	bne.w	8002dec <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <I2C_Master_ADDR+0x54>
 8002b0c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002b10:	2b40      	cmp	r3, #64	; 0x40
 8002b12:	d10b      	bne.n	8002b2c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b14:	2300      	movs	r3, #0
 8002b16:	633b      	str	r3, [r7, #48]	; 0x30
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	633b      	str	r3, [r7, #48]	; 0x30
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	e16b      	b.n	8002e04 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d11d      	bne.n	8002b70 <I2C_Master_ADDR+0x98>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b3c:	d118      	bne.n	8002b70 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b62:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b68:	1c5a      	adds	r2, r3, #1
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b6e:	e149      	b.n	8002e04 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d113      	bne.n	8002ba2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	e120      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	f040 808a 	bne.w	8002cc2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bb4:	d137      	bne.n	8002c26 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bd4:	d113      	bne.n	8002bfe <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	e0f2      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	623b      	str	r3, [r7, #32]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	623b      	str	r3, [r7, #32]
 8002c12:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	e0de      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d02e      	beq.n	8002c8a <I2C_Master_ADDR+0x1b2>
 8002c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d02b      	beq.n	8002c8a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c34:	2b12      	cmp	r3, #18
 8002c36:	d102      	bne.n	8002c3e <I2C_Master_ADDR+0x166>
 8002c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d125      	bne.n	8002c8a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d00e      	beq.n	8002c62 <I2C_Master_ADDR+0x18a>
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d00b      	beq.n	8002c62 <I2C_Master_ADDR+0x18a>
 8002c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d008      	beq.n	8002c62 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	e007      	b.n	8002c72 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	61fb      	str	r3, [r7, #28]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	61fb      	str	r3, [r7, #28]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	e0ac      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c98:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	61bb      	str	r3, [r7, #24]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e090      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d158      	bne.n	8002d7e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d021      	beq.n	8002d16 <I2C_Master_ADDR+0x23e>
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d01e      	beq.n	8002d16 <I2C_Master_ADDR+0x23e>
 8002cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cda:	2b10      	cmp	r3, #16
 8002cdc:	d01b      	beq.n	8002d16 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cec:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	617b      	str	r3, [r7, #20]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	617b      	str	r3, [r7, #20]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	e012      	b.n	8002d3c <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d24:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d26:	2300      	movs	r3, #0
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d4a:	d14b      	bne.n	8002de4 <I2C_Master_ADDR+0x30c>
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d52:	d00b      	beq.n	8002d6c <I2C_Master_ADDR+0x294>
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d008      	beq.n	8002d6c <I2C_Master_ADDR+0x294>
 8002d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d005      	beq.n	8002d6c <I2C_Master_ADDR+0x294>
 8002d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d62:	2b10      	cmp	r3, #16
 8002d64:	d002      	beq.n	8002d6c <I2C_Master_ADDR+0x294>
 8002d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d68:	2b20      	cmp	r3, #32
 8002d6a:	d13b      	bne.n	8002de4 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	e032      	b.n	8002de4 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9c:	d117      	bne.n	8002dce <I2C_Master_ADDR+0x2f6>
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002da4:	d00b      	beq.n	8002dbe <I2C_Master_ADDR+0x2e6>
 8002da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d008      	beq.n	8002dbe <I2C_Master_ADDR+0x2e6>
 8002dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d005      	beq.n	8002dbe <I2C_Master_ADDR+0x2e6>
 8002db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db4:	2b10      	cmp	r3, #16
 8002db6:	d002      	beq.n	8002dbe <I2C_Master_ADDR+0x2e6>
 8002db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dba:	2b20      	cmp	r3, #32
 8002dbc:	d107      	bne.n	8002dce <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	695b      	ldr	r3, [r3, #20]
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002dea:	e00b      	b.n	8002e04 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dec:	2300      	movs	r3, #0
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
}
 8002e02:	e7ff      	b.n	8002e04 <I2C_Master_ADDR+0x32c>
 8002e04:	bf00      	nop
 8002e06:	3744      	adds	r7, #68	; 0x44
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02b      	beq.n	8002e80 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	781a      	ldrb	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	3b01      	subs	r3, #1
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d114      	bne.n	8002e80 <I2C_SlaveTransmit_TXE+0x72>
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	2b29      	cmp	r3, #41	; 0x29
 8002e5a:	d111      	bne.n	8002e80 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e6a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2221      	movs	r2, #33	; 0x21
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2228      	movs	r2, #40	; 0x28
 8002e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff f9f1 	bl	8002262 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d011      	beq.n	8002ebe <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	781a      	ldrb	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bc80      	pop	{r7}
 8002ec6:	4770      	bx	lr

08002ec8 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d02c      	beq.n	8002f3c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	3b01      	subs	r3, #1
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d114      	bne.n	8002f3c <I2C_SlaveReceive_RXNE+0x74>
 8002f12:	7bfb      	ldrb	r3, [r7, #15]
 8002f14:	2b2a      	cmp	r3, #42	; 0x2a
 8002f16:	d111      	bne.n	8002f3c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f26:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2222      	movs	r2, #34	; 0x22
 8002f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2228      	movs	r2, #40	; 0x28
 8002f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff f99c 	bl	8002274 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}

08002f44 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d012      	beq.n	8002f7c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691a      	ldr	r2, [r3, #16]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f60:	b2d2      	uxtb	r2, r2
 8002f62:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	1c5a      	adds	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bc80      	pop	{r7}
 8002f84:	4770      	bx	lr

08002f86 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b084      	sub	sp, #16
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
 8002f8e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002f90:	2300      	movs	r3, #0
 8002f92:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002fa0:	2b28      	cmp	r3, #40	; 0x28
 8002fa2:	d127      	bne.n	8002ff4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d101      	bne.n	8002fc4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	09db      	lsrs	r3, r3, #7
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	81bb      	strh	r3, [r7, #12]
 8002fd6:	e002      	b.n	8002fde <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002fe6:	89ba      	ldrh	r2, [r7, #12]
 8002fe8:	7bfb      	ldrb	r3, [r7, #15]
 8002fea:	4619      	mov	r1, r3
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff f94a 	bl	8002286 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ff2:	e00e      	b.n	8003012 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	60bb      	str	r3, [r7, #8]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60bb      	str	r3, [r7, #8]
 8003008:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003012:	bf00      	nop
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
	...

0800301c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800302a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800303a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	60bb      	str	r3, [r7, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]
 8003058:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003068:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003074:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003078:	d172      	bne.n	8003160 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800307a:	7bfb      	ldrb	r3, [r7, #15]
 800307c:	2b22      	cmp	r3, #34	; 0x22
 800307e:	d002      	beq.n	8003086 <I2C_Slave_STOPF+0x6a>
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	2b2a      	cmp	r3, #42	; 0x2a
 8003084:	d135      	bne.n	80030f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0204 	orr.w	r2, r3, #4
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030be:	4618      	mov	r0, r3
 80030c0:	f7fe fa34 	bl	800152c <HAL_DMA_GetState>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d049      	beq.n	800315e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ce:	4a69      	ldr	r2, [pc, #420]	; (8003274 <I2C_Slave_STOPF+0x258>)
 80030d0:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe f9b2 	bl	8001440 <HAL_DMA_Abort_IT>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d03d      	beq.n	800315e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030ec:	4610      	mov	r0, r2
 80030ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030f0:	e035      	b.n	800315e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0204 	orr.w	r2, r3, #4
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685a      	ldr	r2, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003124:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe f9fe 	bl	800152c <HAL_DMA_GetState>
 8003130:	4603      	mov	r3, r0
 8003132:	2b01      	cmp	r3, #1
 8003134:	d014      	beq.n	8003160 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313a:	4a4e      	ldr	r2, [pc, #312]	; (8003274 <I2C_Slave_STOPF+0x258>)
 800313c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	4618      	mov	r0, r3
 8003144:	f7fe f97c 	bl	8001440 <HAL_DMA_Abort_IT>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003158:	4610      	mov	r0, r2
 800315a:	4798      	blx	r3
 800315c:	e000      	b.n	8003160 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800315e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d03e      	beq.n	80031e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b04      	cmp	r3, #4
 8003176:	d112      	bne.n	800319e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	691a      	ldr	r2, [r3, #16]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d112      	bne.n	80031d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d005      	beq.n	80031e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f843 	bl	800327c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80031f6:	e039      	b.n	800326c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80031f8:	7bfb      	ldrb	r3, [r7, #15]
 80031fa:	2b2a      	cmp	r3, #42	; 0x2a
 80031fc:	d109      	bne.n	8003212 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2228      	movs	r2, #40	; 0x28
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff f831 	bl	8002274 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b28      	cmp	r3, #40	; 0x28
 800321c:	d111      	bne.n	8003242 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a15      	ldr	r2, [pc, #84]	; (8003278 <I2C_Slave_STOPF+0x25c>)
 8003222:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff f830 	bl	80022a0 <HAL_I2C_ListenCpltCallback>
}
 8003240:	e014      	b.n	800326c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003246:	2b22      	cmp	r3, #34	; 0x22
 8003248:	d002      	beq.n	8003250 <I2C_Slave_STOPF+0x234>
 800324a:	7bfb      	ldrb	r3, [r7, #15]
 800324c:	2b22      	cmp	r3, #34	; 0x22
 800324e:	d10d      	bne.n	800326c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff f804 	bl	8002274 <HAL_I2C_SlaveRxCpltCallback>
}
 800326c:	bf00      	nop
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	080035e5 	.word	0x080035e5
 8003278:	ffff0000 	.word	0xffff0000

0800327c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003292:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003294:	7bbb      	ldrb	r3, [r7, #14]
 8003296:	2b10      	cmp	r3, #16
 8003298:	d002      	beq.n	80032a0 <I2C_ITError+0x24>
 800329a:	7bbb      	ldrb	r3, [r7, #14]
 800329c:	2b40      	cmp	r3, #64	; 0x40
 800329e:	d10a      	bne.n	80032b6 <I2C_ITError+0x3a>
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
 80032a2:	2b22      	cmp	r3, #34	; 0x22
 80032a4:	d107      	bne.n	80032b6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80032b6:	7bfb      	ldrb	r3, [r7, #15]
 80032b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032bc:	2b28      	cmp	r3, #40	; 0x28
 80032be:	d107      	bne.n	80032d0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2228      	movs	r2, #40	; 0x28
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032ce:	e015      	b.n	80032fc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032de:	d00a      	beq.n	80032f6 <I2C_ITError+0x7a>
 80032e0:	7bfb      	ldrb	r3, [r7, #15]
 80032e2:	2b60      	cmp	r3, #96	; 0x60
 80032e4:	d007      	beq.n	80032f6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2220      	movs	r2, #32
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800330a:	d161      	bne.n	80033d0 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800331a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003320:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003324:	2b01      	cmp	r3, #1
 8003326:	d020      	beq.n	800336a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	4a6a      	ldr	r2, [pc, #424]	; (80034d8 <I2C_ITError+0x25c>)
 800332e:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	4618      	mov	r0, r3
 8003336:	f7fe f883 	bl	8001440 <HAL_DMA_Abort_IT>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8089 	beq.w	8003454 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2220      	movs	r2, #32
 8003356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003364:	4610      	mov	r0, r2
 8003366:	4798      	blx	r3
 8003368:	e074      	b.n	8003454 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336e:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <I2C_ITError+0x25c>)
 8003370:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe f862 	bl	8001440 <HAL_DMA_Abort_IT>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d068      	beq.n	8003454 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d10b      	bne.n	80033a8 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033ca:	4610      	mov	r0, r2
 80033cc:	4798      	blx	r3
 80033ce:	e041      	b.n	8003454 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	2b60      	cmp	r3, #96	; 0x60
 80033da:	d125      	bne.n	8003428 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f4:	2b40      	cmp	r3, #64	; 0x40
 80033f6:	d10b      	bne.n	8003410 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691a      	ldr	r2, [r3, #16]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	b2d2      	uxtb	r2, r2
 8003404:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7fe ff61 	bl	80022e8 <HAL_I2C_AbortCpltCallback>
 8003426:	e015      	b.n	8003454 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003432:	2b40      	cmp	r3, #64	; 0x40
 8003434:	d10b      	bne.n	800344e <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe ff41 	bl	80022d6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d10e      	bne.n	8003482 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003474:	2b00      	cmp	r3, #0
 8003476:	d104      	bne.n	8003482 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003490:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003498:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f003 0304 	and.w	r3, r3, #4
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d113      	bne.n	80034ce <I2C_ITError+0x252>
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b28      	cmp	r3, #40	; 0x28
 80034aa:	d110      	bne.n	80034ce <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a0b      	ldr	r2, [pc, #44]	; (80034dc <I2C_ITError+0x260>)
 80034b0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7fe fee9 	bl	80022a0 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80034ce:	bf00      	nop
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	080035e5 	.word	0x080035e5
 80034dc:	ffff0000 	.word	0xffff0000

080034e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af02      	add	r7, sp, #8
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2b08      	cmp	r3, #8
 80034fa:	d006      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d003      	beq.n	800350a <I2C_MasterRequestWrite+0x2a>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003508:	d108      	bne.n	800351c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	e00b      	b.n	8003534 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	2b12      	cmp	r3, #18
 8003522:	d107      	bne.n	8003534 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003532:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f000 f8f7 	bl	8003734 <I2C_WaitOnFlagUntilTimeout>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00d      	beq.n	8003568 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355a:	d103      	bne.n	8003564 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003562:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e035      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003570:	d108      	bne.n	8003584 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003572:	897b      	ldrh	r3, [r7, #10]
 8003574:	b2db      	uxtb	r3, r3
 8003576:	461a      	mov	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003580:	611a      	str	r2, [r3, #16]
 8003582:	e01b      	b.n	80035bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	11db      	asrs	r3, r3, #7
 8003588:	b2db      	uxtb	r3, r3
 800358a:	f003 0306 	and.w	r3, r3, #6
 800358e:	b2db      	uxtb	r3, r3
 8003590:	f063 030f 	orn	r3, r3, #15
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	490e      	ldr	r1, [pc, #56]	; (80035dc <I2C_MasterRequestWrite+0xfc>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f91d 	bl	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e010      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035b2:	897b      	ldrh	r3, [r7, #10]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	4907      	ldr	r1, [pc, #28]	; (80035e0 <I2C_MasterRequestWrite+0x100>)
 80035c2:	68f8      	ldr	r0, [r7, #12]
 80035c4:	f000 f90d 	bl	80037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d001      	beq.n	80035d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	00010008 	.word	0x00010008
 80035e0:	00010002 	.word	0x00010002

080035e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80035fe:	4b4b      	ldr	r3, [pc, #300]	; (800372c <I2C_DMAAbort+0x148>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	4a4a      	ldr	r2, [pc, #296]	; (8003730 <I2C_DMAAbort+0x14c>)
 8003606:	fba2 2303 	umull	r2, r3, r2, r3
 800360a:	0a1a      	lsrs	r2, r3, #8
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00da      	lsls	r2, r3, #3
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d106      	bne.n	800362c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	f043 0220 	orr.w	r2, r3, #32
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800362a:	e00a      	b.n	8003642 <I2C_DMAAbort+0x5e>
    }
    count--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3b01      	subs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800363c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003640:	d0ea      	beq.n	8003618 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364e:	2200      	movs	r2, #0
 8003650:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2200      	movs	r2, #0
 8003676:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003684:	2200      	movs	r2, #0
 8003686:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	2b00      	cmp	r3, #0
 800368e:	d003      	beq.n	8003698 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	2200      	movs	r2, #0
 8003696:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b60      	cmp	r3, #96	; 0x60
 80036b2:	d10e      	bne.n	80036d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2220      	movs	r2, #32
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2200      	movs	r2, #0
 80036c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80036ca:	6978      	ldr	r0, [r7, #20]
 80036cc:	f7fe fe0c 	bl	80022e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036d0:	e027      	b.n	8003722 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036d2:	7cfb      	ldrb	r3, [r7, #19]
 80036d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036d8:	2b28      	cmp	r3, #40	; 0x28
 80036da:	d117      	bne.n	800370c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f042 0201 	orr.w	r2, r2, #1
 80036ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	2200      	movs	r2, #0
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	2228      	movs	r2, #40	; 0x28
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800370a:	e007      	b.n	800371c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	2220      	movs	r2, #32
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800371c:	6978      	ldr	r0, [r7, #20]
 800371e:	f7fe fdda 	bl	80022d6 <HAL_I2C_ErrorCallback>
}
 8003722:	bf00      	nop
 8003724:	3718      	adds	r7, #24
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000030 	.word	0x20000030
 8003730:	14f8b589 	.word	0x14f8b589

08003734 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003744:	e025      	b.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800374c:	d021      	beq.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374e:	f7fd fd25 	bl	800119c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d302      	bcc.n	8003764 <I2C_WaitOnFlagUntilTimeout+0x30>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d116      	bne.n	8003792 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e023      	b.n	80037da <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	0c1b      	lsrs	r3, r3, #16
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b01      	cmp	r3, #1
 800379a:	d10d      	bne.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	43da      	mvns	r2, r3
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	4013      	ands	r3, r2
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	bf0c      	ite	eq
 80037ae:	2301      	moveq	r3, #1
 80037b0:	2300      	movne	r3, #0
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	461a      	mov	r2, r3
 80037b6:	e00c      	b.n	80037d2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	4013      	ands	r3, r2
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d0b6      	beq.n	8003746 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b084      	sub	sp, #16
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037f0:	e051      	b.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d123      	bne.n	800384a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800381a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e046      	b.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d021      	beq.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003852:	f7fd fca3 	bl	800119c <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	429a      	cmp	r2, r3
 8003860:	d302      	bcc.n	8003868 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d116      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	f043 0220 	orr.w	r2, r3, #32
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e020      	b.n	80038d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	0c1b      	lsrs	r3, r3, #16
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b01      	cmp	r3, #1
 800389e:	d10c      	bne.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	43da      	mvns	r2, r3
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4013      	ands	r3, r2
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	e00b      	b.n	80038d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	43da      	mvns	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	4013      	ands	r3, r2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf14      	ite	ne
 80038cc:	2301      	movne	r3, #1
 80038ce:	2300      	moveq	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d18d      	bne.n	80037f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038ec:	e02d      	b.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f8aa 	bl	8003a48 <I2C_IsAcknowledgeFailed>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e02d      	b.n	800395a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003904:	d021      	beq.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003906:	f7fd fc49 	bl	800119c <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	68ba      	ldr	r2, [r7, #8]
 8003912:	429a      	cmp	r2, r3
 8003914:	d302      	bcc.n	800391c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d116      	bne.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f043 0220 	orr.w	r2, r3, #32
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e007      	b.n	800395a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003954:	2b80      	cmp	r3, #128	; 0x80
 8003956:	d1ca      	bne.n	80038ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}

08003962 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800396e:	e02d      	b.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 f869 	bl	8003a48 <I2C_IsAcknowledgeFailed>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e02d      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d021      	beq.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003988:	f7fd fc08 	bl	800119c <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	429a      	cmp	r2, r3
 8003996:	d302      	bcc.n	800399e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d116      	bne.n	80039cc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d1ca      	bne.n	8003970 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80039f0:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	08db      	lsrs	r3, r3, #3
 80039f6:	4a13      	ldr	r2, [pc, #76]	; (8003a44 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80039f8:	fba2 2303 	umull	r2, r3, r2, r3
 80039fc:	0a1a      	lsrs	r2, r3, #8
 80039fe:	4613      	mov	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	4413      	add	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0220 	orr.w	r2, r3, #32
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e008      	b.n	8003a34 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a30:	d0e9      	beq.n	8003a06 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3714      	adds	r7, #20
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bc80      	pop	{r7}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000030 	.word	0x20000030
 8003a44:	14f8b589 	.word	0x14f8b589

08003a48 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5e:	d11b      	bne.n	8003a98 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a68:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2220      	movs	r2, #32
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f043 0204 	orr.w	r2, r3, #4
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bc80      	pop	{r7}
 8003aa2:	4770      	bx	lr

08003aa4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003ab4:	d103      	bne.n	8003abe <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2201      	movs	r2, #1
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003abc:	e007      	b.n	8003ace <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003ac6:	d102      	bne.n	8003ace <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2208      	movs	r2, #8
 8003acc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b086      	sub	sp, #24
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e272      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 8087 	beq.w	8003c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003af8:	4b92      	ldr	r3, [pc, #584]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b04      	cmp	r3, #4
 8003b02:	d00c      	beq.n	8003b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b04:	4b8f      	ldr	r3, [pc, #572]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d112      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
 8003b10:	4b8c      	ldr	r3, [pc, #560]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b1c:	d10b      	bne.n	8003b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b1e:	4b89      	ldr	r3, [pc, #548]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d06c      	beq.n	8003c04 <HAL_RCC_OscConfig+0x12c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d168      	bne.n	8003c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e24c      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b3e:	d106      	bne.n	8003b4e <HAL_RCC_OscConfig+0x76>
 8003b40:	4b80      	ldr	r3, [pc, #512]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a7f      	ldr	r2, [pc, #508]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b4a:	6013      	str	r3, [r2, #0]
 8003b4c:	e02e      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x98>
 8003b56:	4b7b      	ldr	r3, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7a      	ldr	r2, [pc, #488]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b60:	6013      	str	r3, [r2, #0]
 8003b62:	4b78      	ldr	r3, [pc, #480]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a77      	ldr	r2, [pc, #476]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	e01d      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b78:	d10c      	bne.n	8003b94 <HAL_RCC_OscConfig+0xbc>
 8003b7a:	4b72      	ldr	r3, [pc, #456]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a71      	ldr	r2, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b6f      	ldr	r3, [pc, #444]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a6e      	ldr	r2, [pc, #440]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e00b      	b.n	8003bac <HAL_RCC_OscConfig+0xd4>
 8003b94:	4b6b      	ldr	r3, [pc, #428]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a6a      	ldr	r2, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b68      	ldr	r3, [pc, #416]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a67      	ldr	r2, [pc, #412]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d013      	beq.n	8003bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb4:	f7fd faf2 	bl	800119c <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bbc:	f7fd faee 	bl	800119c <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b64      	cmp	r3, #100	; 0x64
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e200      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bce:	4b5d      	ldr	r3, [pc, #372]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0xe4>
 8003bda:	e014      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bdc:	f7fd fade 	bl	800119c <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fada 	bl	800119c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e1ec      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bf6:	4b53      	ldr	r3, [pc, #332]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d1f0      	bne.n	8003be4 <HAL_RCC_OscConfig+0x10c>
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d063      	beq.n	8003cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c12:	4b4c      	ldr	r3, [pc, #304]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 030c 	and.w	r3, r3, #12
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00b      	beq.n	8003c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c1e:	4b49      	ldr	r3, [pc, #292]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b08      	cmp	r3, #8
 8003c28:	d11c      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
 8003c2a:	4b46      	ldr	r3, [pc, #280]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d116      	bne.n	8003c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	4b43      	ldr	r3, [pc, #268]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e1c0      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c4e:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4939      	ldr	r1, [pc, #228]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c62:	e03a      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d020      	beq.n	8003cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd fa93 	bl	800119c <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c7a:	f7fd fa8f 	bl	800119c <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e1a1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8c:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0f0      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c98:	4b2a      	ldr	r3, [pc, #168]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	00db      	lsls	r3, r3, #3
 8003ca6:	4927      	ldr	r1, [pc, #156]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	600b      	str	r3, [r1, #0]
 8003cac:	e015      	b.n	8003cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cae:	4b26      	ldr	r3, [pc, #152]	; (8003d48 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fa72 	bl	800119c <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cbc:	f7fd fa6e 	bl	800119c <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e180      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d1f0      	bne.n	8003cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0308 	and.w	r3, r3, #8
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d03a      	beq.n	8003d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d019      	beq.n	8003d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf4:	f7fd fa52 	bl	800119c <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cfc:	f7fd fa4e 	bl	800119c <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e160      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d0e:	4b0d      	ldr	r3, [pc, #52]	; (8003d44 <HAL_RCC_OscConfig+0x26c>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d0f0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d1a:	2001      	movs	r0, #1
 8003d1c:	f000 fad8 	bl	80042d0 <RCC_Delay>
 8003d20:	e01c      	b.n	8003d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d22:	4b0a      	ldr	r3, [pc, #40]	; (8003d4c <HAL_RCC_OscConfig+0x274>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d28:	f7fd fa38 	bl	800119c <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d2e:	e00f      	b.n	8003d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d30:	f7fd fa34 	bl	800119c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d908      	bls.n	8003d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e146      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
 8003d48:	42420000 	.word	0x42420000
 8003d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d50:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e9      	bne.n	8003d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0304 	and.w	r3, r3, #4
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 80a6 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d6e:	4b8b      	ldr	r3, [pc, #556]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d10d      	bne.n	8003d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	4b88      	ldr	r3, [pc, #544]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	4a87      	ldr	r2, [pc, #540]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d84:	61d3      	str	r3, [r2, #28]
 8003d86:	4b85      	ldr	r3, [pc, #532]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d8e:	60bb      	str	r3, [r7, #8]
 8003d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d92:	2301      	movs	r3, #1
 8003d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d96:	4b82      	ldr	r3, [pc, #520]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d118      	bne.n	8003dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da2:	4b7f      	ldr	r3, [pc, #508]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a7e      	ldr	r2, [pc, #504]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dae:	f7fd f9f5 	bl	800119c <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db6:	f7fd f9f1 	bl	800119c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b64      	cmp	r3, #100	; 0x64
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e103      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc8:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_OscConfig+0x4c8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d0f0      	beq.n	8003db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d106      	bne.n	8003dea <HAL_RCC_OscConfig+0x312>
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4a6e      	ldr	r2, [pc, #440]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6213      	str	r3, [r2, #32]
 8003de8:	e02d      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10c      	bne.n	8003e0c <HAL_RCC_OscConfig+0x334>
 8003df2:	4b6a      	ldr	r3, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	4a69      	ldr	r2, [pc, #420]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003df8:	f023 0301 	bic.w	r3, r3, #1
 8003dfc:	6213      	str	r3, [r2, #32]
 8003dfe:	4b67      	ldr	r3, [pc, #412]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e00:	6a1b      	ldr	r3, [r3, #32]
 8003e02:	4a66      	ldr	r2, [pc, #408]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e04:	f023 0304 	bic.w	r3, r3, #4
 8003e08:	6213      	str	r3, [r2, #32]
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x356>
 8003e14:	4b61      	ldr	r3, [pc, #388]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4a60      	ldr	r2, [pc, #384]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6213      	str	r3, [r2, #32]
 8003e20:	4b5e      	ldr	r3, [pc, #376]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	4a5d      	ldr	r2, [pc, #372]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6213      	str	r3, [r2, #32]
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x36e>
 8003e2e:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e30:	6a1b      	ldr	r3, [r3, #32]
 8003e32:	4a5a      	ldr	r2, [pc, #360]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6213      	str	r3, [r2, #32]
 8003e3a:	4b58      	ldr	r3, [pc, #352]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e3c:	6a1b      	ldr	r3, [r3, #32]
 8003e3e:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e4e:	f7fd f9a5 	bl	800119c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7fd f9a1 	bl	800119c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0b1      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b4b      	ldr	r3, [pc, #300]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x37e>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7fd f98f 	bl	800119c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7fd f98b 	bl	800119c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e09b      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b40      	ldr	r3, [pc, #256]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003e9a:	6a1b      	ldr	r3, [r3, #32]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b3c      	ldr	r3, [pc, #240]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	4a3b      	ldr	r2, [pc, #236]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69db      	ldr	r3, [r3, #28]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8087 	beq.w	8003fce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ec0:	4b36      	ldr	r3, [pc, #216]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d061      	beq.n	8003f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	69db      	ldr	r3, [r3, #28]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d146      	bne.n	8003f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b33      	ldr	r3, [pc, #204]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7fd f95f 	bl	800119c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7fd f95b 	bl	800119c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e06d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a1b      	ldr	r3, [r3, #32]
 8003f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f08:	d108      	bne.n	8003f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f0a:	4b24      	ldr	r3, [pc, #144]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	4921      	ldr	r1, [pc, #132]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1c:	4b1f      	ldr	r3, [pc, #124]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a19      	ldr	r1, [r3, #32]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	430b      	orrs	r3, r1
 8003f2e:	491b      	ldr	r1, [pc, #108]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f30:	4313      	orrs	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f36:	2201      	movs	r2, #1
 8003f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd f92f 	bl	800119c <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f40:	e008      	b.n	8003f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f42:	f7fd f92b 	bl	800119c <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d901      	bls.n	8003f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f50:	2303      	movs	r3, #3
 8003f52:	e03d      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f54:	4b11      	ldr	r3, [pc, #68]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x46a>
 8003f60:	e035      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f62:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <HAL_RCC_OscConfig+0x4cc>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd f918 	bl	800119c <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f70:	f7fd f914 	bl	800119c <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e026      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f82:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCC_OscConfig+0x4c4>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0x498>
 8003f8e:	e01e      	b.n	8003fce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	69db      	ldr	r3, [r3, #28]
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e019      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40007000 	.word	0x40007000
 8003fa4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_RCC_OscConfig+0x500>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d106      	bne.n	8003fca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d001      	beq.n	8003fce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000

08003fdc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0d0      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b6a      	ldr	r3, [pc, #424]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d910      	bls.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b67      	ldr	r3, [pc, #412]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f023 0207 	bic.w	r2, r3, #7
 8004006:	4965      	ldr	r1, [pc, #404]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	4313      	orrs	r3, r2
 800400c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800400e:	4b63      	ldr	r3, [pc, #396]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	683a      	ldr	r2, [r7, #0]
 8004018:	429a      	cmp	r2, r3
 800401a:	d001      	beq.n	8004020 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0b8      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d020      	beq.n	800406e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004038:	4b59      	ldr	r3, [pc, #356]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a58      	ldr	r2, [pc, #352]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004042:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0308 	and.w	r3, r3, #8
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004050:	4b53      	ldr	r3, [pc, #332]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a52      	ldr	r2, [pc, #328]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004056:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800405a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800405c:	4b50      	ldr	r3, [pc, #320]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	494d      	ldr	r1, [pc, #308]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b00      	cmp	r3, #0
 8004078:	d040      	beq.n	80040fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004082:	4b47      	ldr	r3, [pc, #284]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d115      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e07f      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b02      	cmp	r3, #2
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800409a:	4b41      	ldr	r3, [pc, #260]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e073      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040aa:	4b3d      	ldr	r3, [pc, #244]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e06b      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ba:	4b39      	ldr	r3, [pc, #228]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	f023 0203 	bic.w	r2, r3, #3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4936      	ldr	r1, [pc, #216]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040cc:	f7fd f866 	bl	800119c <HAL_GetTick>
 80040d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040d4:	f7fd f862 	bl	800119c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	; 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e053      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ea:	4b2d      	ldr	r3, [pc, #180]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f003 020c 	and.w	r2, r3, #12
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d1eb      	bne.n	80040d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040fc:	4b27      	ldr	r3, [pc, #156]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d210      	bcs.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410a:	4b24      	ldr	r3, [pc, #144]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 0207 	bic.w	r2, r3, #7
 8004112:	4922      	ldr	r1, [pc, #136]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	4313      	orrs	r3, r2
 8004118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800411a:	4b20      	ldr	r3, [pc, #128]	; (800419c <HAL_RCC_ClockConfig+0x1c0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0307 	and.w	r3, r3, #7
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	429a      	cmp	r2, r3
 8004126:	d001      	beq.n	800412c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e032      	b.n	8004192 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	d008      	beq.n	800414a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004138:	4b19      	ldr	r3, [pc, #100]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4916      	ldr	r1, [pc, #88]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004156:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	490e      	ldr	r1, [pc, #56]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	4313      	orrs	r3, r2
 8004168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800416a:	f000 f821 	bl	80041b0 <HAL_RCC_GetSysClockFreq>
 800416e:	4602      	mov	r2, r0
 8004170:	4b0b      	ldr	r3, [pc, #44]	; (80041a0 <HAL_RCC_ClockConfig+0x1c4>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	490a      	ldr	r1, [pc, #40]	; (80041a4 <HAL_RCC_ClockConfig+0x1c8>)
 800417c:	5ccb      	ldrb	r3, [r1, r3]
 800417e:	fa22 f303 	lsr.w	r3, r2, r3
 8004182:	4a09      	ldr	r2, [pc, #36]	; (80041a8 <HAL_RCC_ClockConfig+0x1cc>)
 8004184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004186:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_ClockConfig+0x1d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fc ffd6 	bl	800113c <HAL_InitTick>

  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	40022000 	.word	0x40022000
 80041a0:	40021000 	.word	0x40021000
 80041a4:	08007bd4 	.word	0x08007bd4
 80041a8:	20000030 	.word	0x20000030
 80041ac:	20000034 	.word	0x20000034

080041b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041b0:	b490      	push	{r4, r7}
 80041b2:	b08a      	sub	sp, #40	; 0x28
 80041b4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80041b6:	4b29      	ldr	r3, [pc, #164]	; (800425c <HAL_RCC_GetSysClockFreq+0xac>)
 80041b8:	1d3c      	adds	r4, r7, #4
 80041ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80041bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80041c0:	f240 2301 	movw	r3, #513	; 0x201
 80041c4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	2300      	movs	r3, #0
 80041cc:	61bb      	str	r3, [r7, #24]
 80041ce:	2300      	movs	r3, #0
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	2300      	movs	r3, #0
 80041d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041da:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb0>)
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d002      	beq.n	80041f0 <HAL_RCC_GetSysClockFreq+0x40>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d003      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x46>
 80041ee:	e02b      	b.n	8004248 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041f0:	4b1c      	ldr	r3, [pc, #112]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 80041f2:	623b      	str	r3, [r7, #32]
      break;
 80041f4:	e02b      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	0c9b      	lsrs	r3, r3, #18
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	3328      	adds	r3, #40	; 0x28
 8004200:	443b      	add	r3, r7
 8004202:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004206:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d012      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004212:	4b13      	ldr	r3, [pc, #76]	; (8004260 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	0c5b      	lsrs	r3, r3, #17
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	3328      	adds	r3, #40	; 0x28
 800421e:	443b      	add	r3, r7
 8004220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004224:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 800422a:	fb03 f202 	mul.w	r2, r3, r2
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	fbb2 f3f3 	udiv	r3, r2, r3
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
 8004236:	e004      	b.n	8004242 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423c:	fb02 f303 	mul.w	r3, r2, r3
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	623b      	str	r3, [r7, #32]
      break;
 8004246:	e002      	b.n	800424e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004248:	4b06      	ldr	r3, [pc, #24]	; (8004264 <HAL_RCC_GetSysClockFreq+0xb4>)
 800424a:	623b      	str	r3, [r7, #32]
      break;
 800424c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800424e:	6a3b      	ldr	r3, [r7, #32]
}
 8004250:	4618      	mov	r0, r3
 8004252:	3728      	adds	r7, #40	; 0x28
 8004254:	46bd      	mov	sp, r7
 8004256:	bc90      	pop	{r4, r7}
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	08004fb0 	.word	0x08004fb0
 8004260:	40021000 	.word	0x40021000
 8004264:	007a1200 	.word	0x007a1200
 8004268:	003d0900 	.word	0x003d0900

0800426c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b02      	ldr	r3, [pc, #8]	; (800427c <HAL_RCC_GetHCLKFreq+0x10>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	20000030 	.word	0x20000030

08004280 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004284:	f7ff fff2 	bl	800426c <HAL_RCC_GetHCLKFreq>
 8004288:	4602      	mov	r2, r0
 800428a:	4b05      	ldr	r3, [pc, #20]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	4903      	ldr	r1, [pc, #12]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004296:	5ccb      	ldrb	r3, [r1, r3]
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08007be4 	.word	0x08007be4

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80042ac:	f7ff ffde 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b05      	ldr	r3, [pc, #20]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	0adb      	lsrs	r3, r3, #11
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4903      	ldr	r1, [pc, #12]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	08007be4 	.word	0x08007be4

080042d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <RCC_Delay+0x34>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <RCC_Delay+0x38>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a5b      	lsrs	r3, r3, #9
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042ec:	bf00      	nop
  }
  while (Delay --);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	60fa      	str	r2, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f9      	bne.n	80042ec <RCC_Delay+0x1c>
}
 80042f8:	bf00      	nop
 80042fa:	bf00      	nop
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	20000030 	.word	0x20000030
 8004308:	10624dd3 	.word	0x10624dd3

0800430c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e076      	b.n	800440c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800432e:	d009      	beq.n	8004344 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
 8004336:	e005      	b.n	8004344 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fdc6 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2202      	movs	r2, #2
 8004368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800437a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	431a      	orrs	r2, r3
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	69db      	ldr	r3, [r3, #28]
 80043ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	ea42 0103 	orr.w	r1, r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	0c1a      	lsrs	r2, r3, #16
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f002 0204 	and.w	r2, r2, #4
 80043ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69da      	ldr	r2, [r3, #28]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e03f      	b.n	80044a6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fc fda4 	bl	8000f88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	; 0x24
 8004444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fcc9 	bl	8004df0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800446c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800448c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b08a      	sub	sp, #40	; 0x28
 80044b2:	af02      	add	r7, sp, #8
 80044b4:	60f8      	str	r0, [r7, #12]
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	603b      	str	r3, [r7, #0]
 80044ba:	4613      	mov	r3, r2
 80044bc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	d17c      	bne.n	80045c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <HAL_UART_Transmit+0x2c>
 80044d4:	88fb      	ldrh	r3, [r7, #6]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d101      	bne.n	80044de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e075      	b.n	80045ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d101      	bne.n	80044ec <HAL_UART_Transmit+0x3e>
 80044e8:	2302      	movs	r3, #2
 80044ea:	e06e      	b.n	80045ca <HAL_UART_Transmit+0x11c>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2221      	movs	r2, #33	; 0x21
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004502:	f7fc fe4b 	bl	800119c <HAL_GetTick>
 8004506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	88fa      	ldrh	r2, [r7, #6]
 800450c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	88fa      	ldrh	r2, [r7, #6]
 8004512:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451c:	d108      	bne.n	8004530 <HAL_UART_Transmit+0x82>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004540:	e02a      	b.n	8004598 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	9300      	str	r3, [sp, #0]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2200      	movs	r2, #0
 800454a:	2180      	movs	r1, #128	; 0x80
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 fa7c 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e036      	b.n	80045ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004570:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e007      	b.n	800458a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1cf      	bne.n	8004542 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	9300      	str	r3, [sp, #0]
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2200      	movs	r2, #0
 80045aa:	2140      	movs	r1, #64	; 0x40
 80045ac:	68f8      	ldr	r0, [r7, #12]
 80045ae:	f000 fa4c 	bl	8004a4a <UART_WaitOnFlagUntilTimeout>
 80045b2:	4603      	mov	r3, r0
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d001      	beq.n	80045bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e006      	b.n	80045ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	e000      	b.n	80045ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80045c8:	2302      	movs	r3, #2
  }
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3720      	adds	r7, #32
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045d2:	b480      	push	{r7}
 80045d4:	b085      	sub	sp, #20
 80045d6:	af00      	add	r7, sp, #0
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	2b20      	cmp	r3, #32
 80045ea:	d130      	bne.n	800464e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <HAL_UART_Transmit_IT+0x26>
 80045f2:	88fb      	ldrh	r3, [r7, #6]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e029      	b.n	8004650 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_UART_Transmit_IT+0x38>
 8004606:	2302      	movs	r3, #2
 8004608:	e022      	b.n	8004650 <HAL_UART_Transmit_IT+0x7e>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	88fa      	ldrh	r2, [r7, #6]
 8004622:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2221      	movs	r2, #33	; 0x21
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68da      	ldr	r2, [r3, #12]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004648:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	bc80      	pop	{r7}
 8004658:	4770      	bx	lr

0800465a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	4613      	mov	r3, r2
 8004666:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b20      	cmp	r3, #32
 8004672:	d11d      	bne.n	80046b0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_UART_Receive_IT+0x26>
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e016      	b.n	80046b2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_UART_Receive_IT+0x38>
 800468e:	2302      	movs	r3, #2
 8004690:	e00f      	b.n	80046b2 <HAL_UART_Receive_IT+0x58>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80046a0:	88fb      	ldrh	r3, [r7, #6]
 80046a2:	461a      	mov	r2, r3
 80046a4:	68b9      	ldr	r1, [r7, #8]
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa19 	bl	8004ade <UART_Start_Receive_IT>
 80046ac:	4603      	mov	r3, r0
 80046ae:	e000      	b.n	80046b2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80046b0:	2302      	movs	r3, #2
  }
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b08a      	sub	sp, #40	; 0x28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68db      	ldr	r3, [r3, #12]
 80046d2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80046dc:	2300      	movs	r3, #0
 80046de:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10d      	bne.n	800470e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f4:	f003 0320 	and.w	r3, r3, #32
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_UART_IRQHandler+0x52>
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	f003 0320 	and.w	r3, r3, #32
 8004702:	2b00      	cmp	r3, #0
 8004704:	d003      	beq.n	800470e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fac9 	bl	8004c9e <UART_Receive_IT>
      return;
 800470c:	e17b      	b.n	8004a06 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 80b1 	beq.w	8004878 <HAL_UART_IRQHandler+0x1bc>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <HAL_UART_IRQHandler+0x70>
 8004720:	6a3b      	ldr	r3, [r7, #32]
 8004722:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80a6 	beq.w	8004878 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f003 0301 	and.w	r3, r3, #1
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_UART_IRQHandler+0x90>
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f043 0201 	orr.w	r2, r3, #1
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f003 0304 	and.w	r3, r3, #4
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00a      	beq.n	800476c <HAL_UART_IRQHandler+0xb0>
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004764:	f043 0202 	orr.w	r2, r3, #2
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d00a      	beq.n	800478c <HAL_UART_IRQHandler+0xd0>
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d005      	beq.n	800478c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800478c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00f      	beq.n	80047b6 <HAL_UART_IRQHandler+0xfa>
 8004796:	6a3b      	ldr	r3, [r7, #32]
 8004798:	f003 0320 	and.w	r3, r3, #32
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_UART_IRQHandler+0xee>
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f000 811e 	beq.w	80049fc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d007      	beq.n	80047da <HAL_UART_IRQHandler+0x11e>
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d002      	beq.n	80047da <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa62 	bl	8004c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	695b      	ldr	r3, [r3, #20]
 80047e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	bf14      	ite	ne
 80047e8:	2301      	movne	r3, #1
 80047ea:	2300      	moveq	r3, #0
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d102      	bne.n	8004802 <HAL_UART_IRQHandler+0x146>
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d031      	beq.n	8004866 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f9a4 	bl	8004b50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d023      	beq.n	800485e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	695a      	ldr	r2, [r3, #20]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004824:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	2b00      	cmp	r3, #0
 800482c:	d013      	beq.n	8004856 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	4a76      	ldr	r2, [pc, #472]	; (8004a0c <HAL_UART_IRQHandler+0x350>)
 8004834:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	4618      	mov	r0, r3
 800483c:	f7fc fe00 	bl	8001440 <HAL_DMA_Abort_IT>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d016      	beq.n	8004874 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004850:	4610      	mov	r0, r2
 8004852:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e00e      	b.n	8004874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8e3 	bl	8004a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	e00a      	b.n	8004874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f8df 	bl	8004a22 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004864:	e006      	b.n	8004874 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8db 	bl	8004a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004872:	e0c3      	b.n	80049fc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004874:	bf00      	nop
    return;
 8004876:	e0c1      	b.n	80049fc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 80a1 	bne.w	80049c4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004884:	f003 0310 	and.w	r3, r3, #16
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 809b 	beq.w	80049c4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800488e:	6a3b      	ldr	r3, [r7, #32]
 8004890:	f003 0310 	and.w	r3, r3, #16
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 8095 	beq.w	80049c4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	695b      	ldr	r3, [r3, #20]
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04e      	beq.n	800495c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80048c8:	8a3b      	ldrh	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 8098 	beq.w	8004a00 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048d4:	8a3a      	ldrh	r2, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	f080 8092 	bcs.w	8004a00 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8a3a      	ldrh	r2, [r7, #16]
 80048e0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b20      	cmp	r3, #32
 80048ea:	d02b      	beq.n	8004944 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048fa:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695a      	ldr	r2, [r3, #20]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2220      	movs	r2, #32
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f022 0210 	bic.w	r2, r2, #16
 8004938:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	4618      	mov	r0, r3
 8004940:	f7fc fd43 	bl	80013ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800494c:	b29b      	uxth	r3, r3
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	b29b      	uxth	r3, r3
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f86d 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800495a:	e051      	b.n	8004a00 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004964:	b29b      	uxth	r3, r3
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496e:	b29b      	uxth	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d047      	beq.n	8004a04 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004974:	8a7b      	ldrh	r3, [r7, #18]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d044      	beq.n	8004a04 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004988:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	695a      	ldr	r2, [r3, #20]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f022 0201 	bic.w	r2, r2, #1
 8004998:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2220      	movs	r2, #32
 800499e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2200      	movs	r2, #0
 80049a6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0210 	bic.w	r2, r2, #16
 80049b6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049b8:	8a7b      	ldrh	r3, [r7, #18]
 80049ba:	4619      	mov	r1, r3
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f839 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80049c2:	e01f      	b.n	8004a04 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d008      	beq.n	80049e0 <HAL_UART_IRQHandler+0x324>
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f8f9 	bl	8004bd0 <UART_Transmit_IT>
    return;
 80049de:	e012      	b.n	8004a06 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00d      	beq.n	8004a06 <HAL_UART_IRQHandler+0x34a>
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d008      	beq.n	8004a06 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f93a 	bl	8004c6e <UART_EndTransmit_IT>
    return;
 80049fa:	e004      	b.n	8004a06 <HAL_UART_IRQHandler+0x34a>
    return;
 80049fc:	bf00      	nop
 80049fe:	e002      	b.n	8004a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a00:	bf00      	nop
 8004a02:	e000      	b.n	8004a06 <HAL_UART_IRQHandler+0x34a>
      return;
 8004a04:	bf00      	nop
  }
}
 8004a06:	3728      	adds	r7, #40	; 0x28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	08004ba9 	.word	0x08004ba9

08004a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bc80      	pop	{r7}
 8004a20:	4770      	bx	lr

08004a22 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr

08004a34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bc80      	pop	{r7}
 8004a48:	4770      	bx	lr

08004a4a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a4a:	b580      	push	{r7, lr}
 8004a4c:	b084      	sub	sp, #16
 8004a4e:	af00      	add	r7, sp, #0
 8004a50:	60f8      	str	r0, [r7, #12]
 8004a52:	60b9      	str	r1, [r7, #8]
 8004a54:	603b      	str	r3, [r7, #0]
 8004a56:	4613      	mov	r3, r2
 8004a58:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a5a:	e02c      	b.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a62:	d028      	beq.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d007      	beq.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x30>
 8004a6a:	f7fc fb97 	bl	800119c <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	69ba      	ldr	r2, [r7, #24]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d21d      	bcs.n	8004ab6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68da      	ldr	r2, [r3, #12]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a88:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	695a      	ldr	r2, [r3, #20]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0201 	bic.w	r2, r2, #1
 8004a98:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2220      	movs	r2, #32
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e00f      	b.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d0c3      	beq.n	8004a5c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	60f8      	str	r0, [r7, #12]
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	88fa      	ldrh	r2, [r7, #6]
 8004af6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	88fa      	ldrh	r2, [r7, #6]
 8004afc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2222      	movs	r2, #34	; 0x22
 8004b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0220 	orr.w	r2, r2, #32
 8004b42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	68da      	ldr	r2, [r3, #12]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004b66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0201 	bic.w	r2, r2, #1
 8004b76:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d107      	bne.n	8004b90 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f022 0210 	bic.w	r2, r2, #16
 8004b8e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b9e:	bf00      	nop
 8004ba0:	370c      	adds	r7, #12
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bc2:	68f8      	ldr	r0, [r7, #12]
 8004bc4:	f7ff ff2d 	bl	8004a22 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b21      	cmp	r3, #33	; 0x21
 8004be2:	d13e      	bne.n	8004c62 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bec:	d114      	bne.n	8004c18 <UART_Transmit_IT+0x48>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d110      	bne.n	8004c18 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	881b      	ldrh	r3, [r3, #0]
 8004c00:	461a      	mov	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c0a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	621a      	str	r2, [r3, #32]
 8004c16:	e008      	b.n	8004c2a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6211      	str	r1, [r2, #32]
 8004c22:	781a      	ldrb	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	4619      	mov	r1, r3
 8004c38:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10f      	bne.n	8004c5e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68da      	ldr	r2, [r3, #12]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c4c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68da      	ldr	r2, [r3, #12]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c5c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	e000      	b.n	8004c64 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c62:	2302      	movs	r3, #2
  }
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3714      	adds	r7, #20
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bc80      	pop	{r7}
 8004c6c:	4770      	bx	lr

08004c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b082      	sub	sp, #8
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff febe 	bl	8004a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b086      	sub	sp, #24
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b22      	cmp	r3, #34	; 0x22
 8004cb0:	f040 8099 	bne.w	8004de6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbc:	d117      	bne.n	8004cee <UART_Receive_IT+0x50>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d113      	bne.n	8004cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28
 8004cec:	e026      	b.n	8004d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d007      	beq.n	8004d12 <UART_Receive_IT+0x74>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <UART_Receive_IT+0x82>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	701a      	strb	r2, [r3, #0]
 8004d1e:	e008      	b.n	8004d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d2c:	b2da      	uxtb	r2, r3
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	3b01      	subs	r3, #1
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4619      	mov	r1, r3
 8004d4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d148      	bne.n	8004de2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68da      	ldr	r2, [r3, #12]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0220 	bic.w	r2, r2, #32
 8004d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695a      	ldr	r2, [r3, #20]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d123      	bne.n	8004dd8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0210 	bic.w	r2, r2, #16
 8004da4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0310 	and.w	r3, r3, #16
 8004db0:	2b10      	cmp	r3, #16
 8004db2:	d10a      	bne.n	8004dca <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004db4:	2300      	movs	r3, #0
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004dce:	4619      	mov	r1, r3
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f7ff fe2f 	bl	8004a34 <HAL_UARTEx_RxEventCallback>
 8004dd6:	e002      	b.n	8004dde <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f7fb fc31 	bl	8000640 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004dde:	2300      	movs	r3, #0
 8004de0:	e002      	b.n	8004de8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	e000      	b.n	8004de8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004de6:	2302      	movs	r3, #2
  }
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68da      	ldr	r2, [r3, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	689a      	ldr	r2, [r3, #8]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	691b      	ldr	r3, [r3, #16]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e2a:	f023 030c 	bic.w	r3, r3, #12
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	68b9      	ldr	r1, [r7, #8]
 8004e34:	430b      	orrs	r3, r1
 8004e36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	695b      	ldr	r3, [r3, #20]
 8004e3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	699a      	ldr	r2, [r3, #24]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a2c      	ldr	r2, [pc, #176]	; (8004f04 <UART_SetConfig+0x114>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d103      	bne.n	8004e60 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004e58:	f7ff fa26 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 8004e5c:	60f8      	str	r0, [r7, #12]
 8004e5e:	e002      	b.n	8004e66 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004e60:	f7ff fa0e 	bl	8004280 <HAL_RCC_GetPCLK1Freq>
 8004e64:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009a      	lsls	r2, r3, #2
 8004e70:	441a      	add	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7c:	4a22      	ldr	r2, [pc, #136]	; (8004f08 <UART_SetConfig+0x118>)
 8004e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e82:	095b      	lsrs	r3, r3, #5
 8004e84:	0119      	lsls	r1, r3, #4
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009a      	lsls	r2, r3, #2
 8004e90:	441a      	add	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e9c:	4b1a      	ldr	r3, [pc, #104]	; (8004f08 <UART_SetConfig+0x118>)
 8004e9e:	fba3 0302 	umull	r0, r3, r3, r2
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2064      	movs	r0, #100	; 0x64
 8004ea6:	fb00 f303 	mul.w	r3, r0, r3
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <UART_SetConfig+0x118>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebc:	4419      	add	r1, r3
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009a      	lsls	r2, r3, #2
 8004ec8:	441a      	add	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <UART_SetConfig+0x118>)
 8004ed6:	fba3 0302 	umull	r0, r3, r3, r2
 8004eda:	095b      	lsrs	r3, r3, #5
 8004edc:	2064      	movs	r0, #100	; 0x64
 8004ede:	fb00 f303 	mul.w	r3, r0, r3
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	3332      	adds	r3, #50	; 0x32
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <UART_SetConfig+0x118>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	f003 020f 	and.w	r2, r3, #15
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	440a      	add	r2, r1
 8004efa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004efc:	bf00      	nop
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	40013800 	.word	0x40013800
 8004f08:	51eb851f 	.word	0x51eb851f

08004f0c <__libc_init_array>:
 8004f0c:	b570      	push	{r4, r5, r6, lr}
 8004f0e:	2600      	movs	r6, #0
 8004f10:	4d0c      	ldr	r5, [pc, #48]	; (8004f44 <__libc_init_array+0x38>)
 8004f12:	4c0d      	ldr	r4, [pc, #52]	; (8004f48 <__libc_init_array+0x3c>)
 8004f14:	1b64      	subs	r4, r4, r5
 8004f16:	10a4      	asrs	r4, r4, #2
 8004f18:	42a6      	cmp	r6, r4
 8004f1a:	d109      	bne.n	8004f30 <__libc_init_array+0x24>
 8004f1c:	f000 f822 	bl	8004f64 <_init>
 8004f20:	2600      	movs	r6, #0
 8004f22:	4d0a      	ldr	r5, [pc, #40]	; (8004f4c <__libc_init_array+0x40>)
 8004f24:	4c0a      	ldr	r4, [pc, #40]	; (8004f50 <__libc_init_array+0x44>)
 8004f26:	1b64      	subs	r4, r4, r5
 8004f28:	10a4      	asrs	r4, r4, #2
 8004f2a:	42a6      	cmp	r6, r4
 8004f2c:	d105      	bne.n	8004f3a <__libc_init_array+0x2e>
 8004f2e:	bd70      	pop	{r4, r5, r6, pc}
 8004f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f34:	4798      	blx	r3
 8004f36:	3601      	adds	r6, #1
 8004f38:	e7ee      	b.n	8004f18 <__libc_init_array+0xc>
 8004f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f3e:	4798      	blx	r3
 8004f40:	3601      	adds	r6, #1
 8004f42:	e7f2      	b.n	8004f2a <__libc_init_array+0x1e>
 8004f44:	08007bec 	.word	0x08007bec
 8004f48:	08007bec 	.word	0x08007bec
 8004f4c:	08007bec 	.word	0x08007bec
 8004f50:	08007bf0 	.word	0x08007bf0

08004f54 <memset>:
 8004f54:	4603      	mov	r3, r0
 8004f56:	4402      	add	r2, r0
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d100      	bne.n	8004f5e <memset+0xa>
 8004f5c:	4770      	bx	lr
 8004f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f62:	e7f9      	b.n	8004f58 <memset+0x4>

08004f64 <_init>:
 8004f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f66:	bf00      	nop
 8004f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f6a:	bc08      	pop	{r3}
 8004f6c:	469e      	mov	lr, r3
 8004f6e:	4770      	bx	lr

08004f70 <_fini>:
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	bf00      	nop
 8004f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f76:	bc08      	pop	{r3}
 8004f78:	469e      	mov	lr, r3
 8004f7a:	4770      	bx	lr
