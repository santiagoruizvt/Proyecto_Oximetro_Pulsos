
Oxy_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002da4  0800bad0  0800bad0  0001bad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e874  0800e874  00020108  2**0
                  CONTENTS
  4 .ARM          00000000  0800e874  0800e874  00020108  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e874  0800e874  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e874  0800e874  0001e874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e878  0800e878  0001e878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0800e87c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b2c  20000108  0800e984  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c34  0800e984  00020c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d11  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dfa  00000000  00000000  00031e42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001000  00000000  00000000  00034c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001910b  00000000  00000000  00036b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b55  00000000  00000000  0004fc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088959  00000000  00000000  00064790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ed0e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a20  00000000  00000000  000ed13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000108 	.word	0x20000108
 800012c:	00000000 	.word	0x00000000
 8000130:	0800bab8 	.word	0x0800bab8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000010c 	.word	0x2000010c
 800014c:	0800bab8 	.word	0x0800bab8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <__gesf2>:
 8000f94:	f04f 3cff 	mov.w	ip, #4294967295
 8000f98:	e006      	b.n	8000fa8 <__cmpsf2+0x4>
 8000f9a:	bf00      	nop

08000f9c <__lesf2>:
 8000f9c:	f04f 0c01 	mov.w	ip, #1
 8000fa0:	e002      	b.n	8000fa8 <__cmpsf2+0x4>
 8000fa2:	bf00      	nop

08000fa4 <__cmpsf2>:
 8000fa4:	f04f 0c01 	mov.w	ip, #1
 8000fa8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fb8:	bf18      	it	ne
 8000fba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fbe:	d011      	beq.n	8000fe4 <__cmpsf2+0x40>
 8000fc0:	b001      	add	sp, #4
 8000fc2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fc6:	bf18      	it	ne
 8000fc8:	ea90 0f01 	teqne	r0, r1
 8000fcc:	bf58      	it	pl
 8000fce:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fd2:	bf88      	it	hi
 8000fd4:	17c8      	asrhi	r0, r1, #31
 8000fd6:	bf38      	it	cc
 8000fd8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fdc:	bf18      	it	ne
 8000fde:	f040 0001 	orrne.w	r0, r0, #1
 8000fe2:	4770      	bx	lr
 8000fe4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fe8:	d102      	bne.n	8000ff0 <__cmpsf2+0x4c>
 8000fea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fee:	d105      	bne.n	8000ffc <__cmpsf2+0x58>
 8000ff0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ff4:	d1e4      	bne.n	8000fc0 <__cmpsf2+0x1c>
 8000ff6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ffa:	d0e1      	beq.n	8000fc0 <__cmpsf2+0x1c>
 8000ffc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <__aeabi_cfrcmple>:
 8001004:	4684      	mov	ip, r0
 8001006:	4608      	mov	r0, r1
 8001008:	4661      	mov	r1, ip
 800100a:	e7ff      	b.n	800100c <__aeabi_cfcmpeq>

0800100c <__aeabi_cfcmpeq>:
 800100c:	b50f      	push	{r0, r1, r2, r3, lr}
 800100e:	f7ff ffc9 	bl	8000fa4 <__cmpsf2>
 8001012:	2800      	cmp	r0, #0
 8001014:	bf48      	it	mi
 8001016:	f110 0f00 	cmnmi.w	r0, #0
 800101a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800101c <__aeabi_fcmpeq>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff fff4 	bl	800100c <__aeabi_cfcmpeq>
 8001024:	bf0c      	ite	eq
 8001026:	2001      	moveq	r0, #1
 8001028:	2000      	movne	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmplt>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff ffea 	bl	800100c <__aeabi_cfcmpeq>
 8001038:	bf34      	ite	cc
 800103a:	2001      	movcc	r0, #1
 800103c:	2000      	movcs	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmple>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffe0 	bl	800100c <__aeabi_cfcmpeq>
 800104c:	bf94      	ite	ls
 800104e:	2001      	movls	r0, #1
 8001050:	2000      	movhi	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmpge>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffd2 	bl	8001004 <__aeabi_cfrcmple>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpgt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffc8 	bl	8001004 <__aeabi_cfrcmple>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_f2uiz>:
 8001080:	0042      	lsls	r2, r0, #1
 8001082:	d20e      	bcs.n	80010a2 <__aeabi_f2uiz+0x22>
 8001084:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001088:	d30b      	bcc.n	80010a2 <__aeabi_f2uiz+0x22>
 800108a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800108e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001092:	d409      	bmi.n	80010a8 <__aeabi_f2uiz+0x28>
 8001094:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001098:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800109c:	fa23 f002 	lsr.w	r0, r3, r2
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr
 80010a8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010ac:	d101      	bne.n	80010b2 <__aeabi_f2uiz+0x32>
 80010ae:	0242      	lsls	r2, r0, #9
 80010b0:	d102      	bne.n	80010b8 <__aeabi_f2uiz+0x38>
 80010b2:	f04f 30ff 	mov.w	r0, #4294967295
 80010b6:	4770      	bx	lr
 80010b8:	f04f 0000 	mov.w	r0, #0
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <Inicio_SPO2_HR>:
	flag_HR_ON=1;
}

// INICIALIZACION EN MODO HR y SPO2
void Inicio_SPO2_HR(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
	uint8_t buffer=0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
	/*
	MAX30100_I2C_Write(MAX_ADDRESS_WR,MODE,SPO2);
	MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,ILEDS);
	MAX30100_I2C_Write(MAX_ADDRESS_WR,SPO2_SR_LED_PW,SRATEPULSEW);
	*/
	MAX30100_I2C_Write(MAX_ADDRESS_WR,MODE_RG,DEFAULT_OPERATING_MODE);
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <Inicio_SPO2_HR+0x50>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <Inicio_SPO2_HR+0x54>)
 80010d0:	7811      	ldrb	r1, [r2, #0]
 80010d2:	2203      	movs	r2, #3
 80010d4:	4618      	mov	r0, r3
 80010d6:	f000 fb9b 	bl	8001810 <MAX30100_I2C_Write>
	buffer=((DEFAULT_SAMPLING_RATE<<2)|DEFAULT_LED_PULSE_WIDTH |0b01000000);
 80010da:	2347      	movs	r3, #71	; 0x47
 80010dc:	71fb      	strb	r3, [r7, #7]
	MAX30100_I2C_Write(MAX_ADDRESS_WR,SPO2_CONFIGURATION,buffer);
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <Inicio_SPO2_HR+0x50>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <Inicio_SPO2_HR+0x58>)
 80010e4:	7811      	ldrb	r1, [r2, #0]
 80010e6:	79fa      	ldrb	r2, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 fb91 	bl	8001810 <MAX30100_I2C_Write>
	buffer=((STARTING_RED_LED_CURRENT<<4)|DEFAULT_IR_LED_CURRENT);
 80010ee:	238f      	movs	r3, #143	; 0x8f
 80010f0:	71fb      	strb	r3, [r7, #7]
	MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,buffer);
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <Inicio_SPO2_HR+0x50>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	4a09      	ldr	r2, [pc, #36]	; (800111c <Inicio_SPO2_HR+0x5c>)
 80010f8:	7811      	ldrb	r1, [r2, #0]
 80010fa:	79fa      	ldrb	r2, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 fb87 	bl	8001810 <MAX30100_I2C_Write>
	flag_HR_ON=0;
 8001102:	4b07      	ldr	r3, [pc, #28]	; (8001120 <Inicio_SPO2_HR+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000005 	.word	0x20000005
 8001118:	20000006 	.word	0x20000006
 800111c:	20000007 	.word	0x20000007
 8001120:	2000037e 	.word	0x2000037e

08001124 <Lectura_FIFO>:
/*FUNCION PARA LA LECTURA DEL FIFO
 *SE RECIBE UN PUNTERO A UNA VARIABLE TIPO FIFO COMPUESTA POR DOS CAMPOS rawIR y rawRED donde se guardará cada muestra leída. VER HOJA DE DATOS.
*/

void Lectura_FIFO(FIFO_t *FIFO)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af02      	add	r7, sp, #8
 800112a:	6078      	str	r0, [r7, #4]
	//uint8_t NUM_AVAILABLE_SAMPLES=0;
	//uint8_t NUM_SAMPLES_TO_READ=0;
	//uint8_t *p1=(uint8_t*)&FIFO->rawIR;
	//uint8_t *p2=(uint8_t*)&FIFO->rawRED;
	uint16_t aux=0;
 800112c:	2300      	movs	r3, #0
 800112e:	81fb      	strh	r3, [r7, #14]
	//MAX30100_I2C_Write(MAX_ADDRESS_WR,FIFO_WR_PTR,CLEAR);
	//MAX30100_I2C_Read(MAX_ADDRESS_RD,FIFO_WR_PTR,BYTE_RD);
	HAL_I2C_Master_Transmit(&hi2c1, MAX_ADDRESS_WR, &FIFO_WR_PTR, sizeof(FIFO_WR_PTR), 10);
 8001130:	4b3c      	ldr	r3, [pc, #240]	; (8001224 <Lectura_FIFO+0x100>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b299      	uxth	r1, r3
 8001136:	230a      	movs	r3, #10
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4a3a      	ldr	r2, [pc, #232]	; (8001228 <Lectura_FIFO+0x104>)
 800113e:	483b      	ldr	r0, [pc, #236]	; (800122c <Lectura_FIFO+0x108>)
 8001140:	f002 fe0c 	bl	8003d5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
 8001144:	4b3a      	ldr	r3, [pc, #232]	; (8001230 <Lectura_FIFO+0x10c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b299      	uxth	r1, r3
 800114a:	230a      	movs	r3, #10
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2301      	movs	r3, #1
 8001150:	4a38      	ldr	r2, [pc, #224]	; (8001234 <Lectura_FIFO+0x110>)
 8001152:	4836      	ldr	r0, [pc, #216]	; (800122c <Lectura_FIFO+0x108>)
 8001154:	f002 ff00 	bl	8003f58 <HAL_I2C_Master_Receive>
	FIFO_RD_PTR=BYTE_RD;
 8001158:	4b36      	ldr	r3, [pc, #216]	; (8001234 <Lectura_FIFO+0x110>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <Lectura_FIFO+0x114>)
 800115e:	701a      	strb	r2, [r3, #0]
	//NUM_AVAILABLE_SAMPLES=FIFO_WR_PTR–FIFO_RD_PTR;
//	NUM_AVAILABLE_SAMPLES=0x10;  //SETEO EL NUMERO DE MUESTRAS EN 16, PROBLEMAS AL COMPILAR CON LA LINEA DE ARRIBA
	//NUM_SAMPLES_TO_READ=NUM_AVAILABLE_SAMPLES;
	HAL_I2C_Master_Transmit(&hi2c1, MAX_ADDRESS_WR, &FIFO_DATA, sizeof(FIFO_DATA), 10);
 8001160:	4b30      	ldr	r3, [pc, #192]	; (8001224 <Lectura_FIFO+0x100>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b299      	uxth	r1, r3
 8001166:	230a      	movs	r3, #10
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	4a33      	ldr	r2, [pc, #204]	; (800123c <Lectura_FIFO+0x118>)
 800116e:	482f      	ldr	r0, [pc, #188]	; (800122c <Lectura_FIFO+0x108>)
 8001170:	f002 fdf4 	bl	8003d5c <HAL_I2C_Master_Transmit>
//for(int i=0;i<NUM_SAMPLES_TO_READ;i++)
//	{
		HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
 8001174:	4b2e      	ldr	r3, [pc, #184]	; (8001230 <Lectura_FIFO+0x10c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	b299      	uxth	r1, r3
 800117a:	230a      	movs	r3, #10
 800117c:	9300      	str	r3, [sp, #0]
 800117e:	2301      	movs	r3, #1
 8001180:	4a2c      	ldr	r2, [pc, #176]	; (8001234 <Lectura_FIFO+0x110>)
 8001182:	482a      	ldr	r0, [pc, #168]	; (800122c <Lectura_FIFO+0x108>)
 8001184:	f002 fee8 	bl	8003f58 <HAL_I2C_Master_Receive>
		BYTE_MSB=BYTE_RD;
 8001188:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <Lectura_FIFO+0x110>)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <Lectura_FIFO+0x11c>)
 800118e:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <Lectura_FIFO+0x10c>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b299      	uxth	r1, r3
 8001196:	230a      	movs	r3, #10
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2301      	movs	r3, #1
 800119c:	4a25      	ldr	r2, [pc, #148]	; (8001234 <Lectura_FIFO+0x110>)
 800119e:	4823      	ldr	r0, [pc, #140]	; (800122c <Lectura_FIFO+0x108>)
 80011a0:	f002 feda 	bl	8003f58 <HAL_I2C_Master_Receive>
		BYTE_LSB=BYTE_RD;
 80011a4:	4b23      	ldr	r3, [pc, #140]	; (8001234 <Lectura_FIFO+0x110>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <Lectura_FIFO+0x120>)
 80011aa:	701a      	strb	r2, [r3, #0]

		// BUSCO ACOMODAR LOS DATOS QUE LEO DE A BYTES EN UNA VARIABLE FIFO.IRraw de 16bits
		aux=BYTE_MSB;
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <Lectura_FIFO+0x11c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	81fb      	strh	r3, [r7, #14]
		FIFO->rawIR=((aux<<8)|BYTE_LSB);
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b22      	ldr	r3, [pc, #136]	; (8001244 <Lectura_FIFO+0x120>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	b21b      	sxth	r3, r3
 80011be:	4313      	orrs	r3, r2
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	801a      	strh	r2, [r3, #0]

		HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
 80011c8:	4b19      	ldr	r3, [pc, #100]	; (8001230 <Lectura_FIFO+0x10c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	b299      	uxth	r1, r3
 80011ce:	230a      	movs	r3, #10
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2301      	movs	r3, #1
 80011d4:	4a17      	ldr	r2, [pc, #92]	; (8001234 <Lectura_FIFO+0x110>)
 80011d6:	4815      	ldr	r0, [pc, #84]	; (800122c <Lectura_FIFO+0x108>)
 80011d8:	f002 febe 	bl	8003f58 <HAL_I2C_Master_Receive>
		BYTE_MSB=BYTE_RD;
 80011dc:	4b15      	ldr	r3, [pc, #84]	; (8001234 <Lectura_FIFO+0x110>)
 80011de:	781a      	ldrb	r2, [r3, #0]
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <Lectura_FIFO+0x11c>)
 80011e2:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Receive(&hi2c1, MAX_ADDRESS_RD, &BYTE_RD, sizeof(BYTE_RD), 10);
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <Lectura_FIFO+0x10c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	b299      	uxth	r1, r3
 80011ea:	230a      	movs	r3, #10
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	4a10      	ldr	r2, [pc, #64]	; (8001234 <Lectura_FIFO+0x110>)
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <Lectura_FIFO+0x108>)
 80011f4:	f002 feb0 	bl	8003f58 <HAL_I2C_Master_Receive>
		BYTE_LSB=BYTE_RD;
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <Lectura_FIFO+0x110>)
 80011fa:	781a      	ldrb	r2, [r3, #0]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <Lectura_FIFO+0x120>)
 80011fe:	701a      	strb	r2, [r3, #0]

		aux=BYTE_MSB;
 8001200:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <Lectura_FIFO+0x11c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	81fb      	strh	r3, [r7, #14]
		FIFO->rawRED=((aux<<8)|BYTE_LSB);
 8001206:	89fb      	ldrh	r3, [r7, #14]
 8001208:	021b      	lsls	r3, r3, #8
 800120a:	b21a      	sxth	r2, r3
 800120c:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <Lectura_FIFO+0x120>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b21b      	sxth	r3, r3
 8001216:	b29a      	uxth	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	805a      	strh	r2, [r3, #2]
	}
 800121c:	bf00      	nop
 800121e:	3710      	adds	r7, #16
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000000 	.word	0x20000000
 8001228:	20000002 	.word	0x20000002
 800122c:	20000180 	.word	0x20000180
 8001230:	20000001 	.word	0x20000001
 8001234:	20000124 	.word	0x20000124
 8001238:	20000003 	.word	0x20000003
 800123c:	20000004 	.word	0x20000004
 8001240:	20000126 	.word	0x20000126
 8001244:	20000125 	.word	0x20000125

08001248 <Filtrado_DC>:



void Filtrado_DC(uint16_t *raw_values,float *ptrprev_w, float *output_signal)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
	float x=0;
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
	float w=0;
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
	float alpha=0.95;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <Filtrado_DC+0x6c>)
 8001262:	61fb      	str	r3, [r7, #28]
	float prev_w=*ptrprev_w;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	61bb      	str	r3, [r7, #24]
	float result=0;
 800126a:	f04f 0300 	mov.w	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
	x=*raw_values;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fce5 	bl	8000c44 <__aeabi_ui2f>
 800127a:	4603      	mov	r3, r0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24

	//for(int i=0;i<=15;i++){

		w = x + alpha * prev_w;
 800127e:	69b9      	ldr	r1, [r7, #24]
 8001280:	69f8      	ldr	r0, [r7, #28]
 8001282:	f7ff fd37 	bl	8000cf4 <__aeabi_fmul>
 8001286:	4603      	mov	r3, r0
 8001288:	4619      	mov	r1, r3
 800128a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800128c:	f7ff fc2a 	bl	8000ae4 <__addsf3>
 8001290:	4603      	mov	r3, r0
 8001292:	623b      	str	r3, [r7, #32]
		//(float) output_signal = w - prev_w;
		result = w - prev_w;
 8001294:	69b9      	ldr	r1, [r7, #24]
 8001296:	6a38      	ldr	r0, [r7, #32]
 8001298:	f7ff fc22 	bl	8000ae0 <__aeabi_fsub>
 800129c:	4603      	mov	r3, r0
 800129e:	617b      	str	r3, [r7, #20]

		*ptrprev_w=w;
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	6a3a      	ldr	r2, [r7, #32]
 80012a4:	601a      	str	r2, [r3, #0]
		*output_signal=result;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	697a      	ldr	r2, [r7, #20]
 80012aa:	601a      	str	r2, [r3, #0]
	//}
}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	3f733333 	.word	0x3f733333

080012b8 <Mean_Median_Filter>:

void Mean_Median_Filter(float M,meanDiffFilter_t *filterValues,float *ir_meanfiltrado)
{
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b087      	sub	sp, #28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	float avg = 0;
 80012c4:	f04f 0300 	mov.w	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
	float aux = 0;
 80012ca:	f04f 0300 	mov.w	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
	//filterValues->index = 0;
	//filterValues->sum = 0;
	//filterValues->count = 0;
	//for(int i=0;i<=15;i++)
	//{
		filterValues->sum -= filterValues->values[filterValues->index];
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012da:	4619      	mov	r1, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80012e2:	4619      	mov	r1, r3
 80012e4:	4610      	mov	r0, r2
 80012e6:	f7ff fbfb 	bl	8000ae0 <__aeabi_fsub>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->values[filterValues->index] = M;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f8:	4619      	mov	r1, r3
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		filterValues->sum += filterValues->values[filterValues->index];
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800130c:	4619      	mov	r1, r3
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001314:	4619      	mov	r1, r3
 8001316:	4610      	mov	r0, r2
 8001318:	f7ff fbe4 	bl	8000ae4 <__addsf3>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	641a      	str	r2, [r3, #64]	; 0x40
		filterValues->index++;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800132a:	3301      	adds	r3, #1
 800132c:	b2da      	uxtb	r2, r3
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		filterValues->index = filterValues->index % MEAN_FILTER_SIZE;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <Mean_Median_Filter+0xec>)
 800133c:	fba3 1302 	umull	r1, r3, r3, r2
 8001340:	08d9      	lsrs	r1, r3, #3
 8001342:	460b      	mov	r3, r1
 8001344:	011b      	lsls	r3, r3, #4
 8001346:	1a5b      	subs	r3, r3, r1
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b2da      	uxtb	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
		if(filterValues->count < MEAN_FILTER_SIZE)
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001358:	2b0e      	cmp	r3, #14
 800135a:	d807      	bhi.n	800136c <Mean_Median_Filter+0xb4>
		filterValues->count++;
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

		avg = filterValues->sum / filterValues->count;
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc68 	bl	8000c4c <__aeabi_i2f>
 800137c:	4603      	mov	r3, r0
 800137e:	4619      	mov	r1, r3
 8001380:	4620      	mov	r0, r4
 8001382:	f7ff fd6b 	bl	8000e5c <__aeabi_fdiv>
 8001386:	4603      	mov	r3, r0
 8001388:	617b      	str	r3, [r7, #20]
		aux = avg-M;
 800138a:	68f9      	ldr	r1, [r7, #12]
 800138c:	6978      	ldr	r0, [r7, #20]
 800138e:	f7ff fba7 	bl	8000ae0 <__aeabi_fsub>
 8001392:	4603      	mov	r3, r0
 8001394:	613b      	str	r3, [r7, #16]
		*ir_meanfiltrado=aux;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	601a      	str	r2, [r3, #0]
	//}
}
 800139c:	bf00      	nop
 800139e:	371c      	adds	r7, #28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd90      	pop	{r4, r7, pc}
 80013a4:	88888889 	.word	0x88888889

080013a8 <Filtro_PasabajosButterworth>:

void Filtro_PasabajosButterworth(float* x,butterworthFilter_t* filterResult ,float*ir_lpbfiltrado)
{
 80013a8:	b5b0      	push	{r4, r5, r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	float aux=*x;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	617b      	str	r3, [r7, #20]
	filterResult->v[0] = filterResult->v[1];
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	601a      	str	r2, [r3, #0]

	  //Fs = 100Hz and Fc = 10Hz
	filterResult->v[1] = (2.452372752527856026e-1 * aux) + (0.50952544949442879485 * filterResult->v[0]);
 80013c2:	6978      	ldr	r0, [r7, #20]
 80013c4:	f7ff f830 	bl	8000428 <__aeabi_f2d>
 80013c8:	a31b      	add	r3, pc, #108	; (adr r3, 8001438 <Filtro_PasabajosButterworth+0x90>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff f883 	bl	80004d8 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4614      	mov	r4, r2
 80013d8:	461d      	mov	r5, r3
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff f822 	bl	8000428 <__aeabi_f2d>
 80013e4:	a316      	add	r3, pc, #88	; (adr r3, 8001440 <Filtro_PasabajosButterworth+0x98>)
 80013e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ea:	f7ff f875 	bl	80004d8 <__aeabi_dmul>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4620      	mov	r0, r4
 80013f4:	4629      	mov	r1, r5
 80013f6:	f7fe feb9 	bl	800016c <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb19 	bl	8000a38 <__aeabi_d2f>
 8001406:	4602      	mov	r2, r0
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	605a      	str	r2, [r3, #4]

	filterResult->result = filterResult->v[0] + filterResult->v[1];
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	4619      	mov	r1, r3
 8001416:	4610      	mov	r0, r2
 8001418:	f7ff fb64 	bl	8000ae4 <__addsf3>
 800141c:	4603      	mov	r3, r0
 800141e:	461a      	mov	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	609a      	str	r2, [r3, #8]

	*ir_lpbfiltrado=filterResult->result;
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	601a      	str	r2, [r3, #0]
}
 800142c:	bf00      	nop
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bdb0      	pop	{r4, r5, r7, pc}
 8001434:	f3af 8000 	nop.w
 8001438:	5e7c4548 	.word	0x5e7c4548
 800143c:	3fcf63ef 	.word	0x3fcf63ef
 8001440:	50c1dd5c 	.word	0x50c1dd5c
 8001444:	3fe04e08 	.word	0x3fe04e08

08001448 <detectPulse>:

bool detectPulse(float sensor_value,pulseoxymeter_t *result)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b087      	sub	sp, #28
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
 8001450:	6039      	str	r1, [r7, #0]
	static float prev_sensor_value = 0;
	static uint8_t values_went_down = 0;
	static uint32_t currentBeat = 0;
	static uint32_t lastBeat = 0;

	  if(sensor_value > PULSE_MAX_THRESHOLD)
 8001452:	4973      	ldr	r1, [pc, #460]	; (8001620 <detectPulse+0x1d8>)
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fe09 	bl	800106c <__aeabi_fcmpgt>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d014      	beq.n	800148a <detectPulse+0x42>
	  {
	    currentPulseDetectorState = PULSE_IDLE;
 8001460:	4b70      	ldr	r3, [pc, #448]	; (8001624 <detectPulse+0x1dc>)
 8001462:	2200      	movs	r2, #0
 8001464:	701a      	strb	r2, [r3, #0]
	    prev_sensor_value = 0;
 8001466:	4b70      	ldr	r3, [pc, #448]	; (8001628 <detectPulse+0x1e0>)
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
	    lastBeat = 0;
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <detectPulse+0x1e4>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
	    currentBeat = 0;
 8001474:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <detectPulse+0x1e8>)
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
	    values_went_down = 0;
 800147a:	4b6e      	ldr	r3, [pc, #440]	; (8001634 <detectPulse+0x1ec>)
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]
	    lastBeatThreshold = 0;
 8001480:	4b6d      	ldr	r3, [pc, #436]	; (8001638 <detectPulse+0x1f0>)
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
	    return false;
 8001486:	2300      	movs	r3, #0
 8001488:	e0c6      	b.n	8001618 <detectPulse+0x1d0>
	  }
	    switch(currentPulseDetectorState)
 800148a:	4b66      	ldr	r3, [pc, #408]	; (8001624 <detectPulse+0x1dc>)
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	2b02      	cmp	r3, #2
 8001490:	f000 80a3 	beq.w	80015da <detectPulse+0x192>
 8001494:	2b02      	cmp	r3, #2
 8001496:	f300 80bb 	bgt.w	8001610 <detectPulse+0x1c8>
 800149a:	2b00      	cmp	r3, #0
 800149c:	d002      	beq.n	80014a4 <detectPulse+0x5c>
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d00f      	beq.n	80014c2 <detectPulse+0x7a>
 80014a2:	e0b5      	b.n	8001610 <detectPulse+0x1c8>
	     {
	       case PULSE_IDLE:
	         if(sensor_value >= PULSE_MIN_THRESHOLD) {
 80014a4:	4965      	ldr	r1, [pc, #404]	; (800163c <detectPulse+0x1f4>)
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fdd6 	bl	8001058 <__aeabi_fcmpge>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d100      	bne.n	80014b4 <detectPulse+0x6c>
	           currentPulseDetectorState = PULSE_TRACE_UP;
	           values_went_down = 0;
	         }
	         break;
 80014b2:	e0ad      	b.n	8001610 <detectPulse+0x1c8>
	           currentPulseDetectorState = PULSE_TRACE_UP;
 80014b4:	4b5b      	ldr	r3, [pc, #364]	; (8001624 <detectPulse+0x1dc>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	701a      	strb	r2, [r3, #0]
	           values_went_down = 0;
 80014ba:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <detectPulse+0x1ec>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	         break;
 80014c0:	e0a6      	b.n	8001610 <detectPulse+0x1c8>

	       case PULSE_TRACE_UP:
	         if(sensor_value > prev_sensor_value)
 80014c2:	4b59      	ldr	r3, [pc, #356]	; (8001628 <detectPulse+0x1e0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f7ff fdcf 	bl	800106c <__aeabi_fcmpgt>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d00f      	beq.n	80014f4 <detectPulse+0xac>
	         {
	           currentBeat = HAL_GetTick();
 80014d4:	f001 ff6a 	bl	80033ac <HAL_GetTick>
 80014d8:	4603      	mov	r3, r0
 80014da:	4a55      	ldr	r2, [pc, #340]	; (8001630 <detectPulse+0x1e8>)
 80014dc:	6013      	str	r3, [r2, #0]
	           lastBeatThreshold = sensor_value;
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff fdce 	bl	8001080 <__aeabi_f2uiz>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a54      	ldr	r2, [pc, #336]	; (8001638 <detectPulse+0x1f0>)
 80014e8:	6013      	str	r3, [r2, #0]
	           result->lastBeatThreshold = lastBeatThreshold;
 80014ea:	4b53      	ldr	r3, [pc, #332]	; (8001638 <detectPulse+0x1f0>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	619a      	str	r2, [r3, #24]

	           currentPulseDetectorState = PULSE_TRACE_DOWN;

	           return true;
	         }
	         break;
 80014f2:	e08d      	b.n	8001610 <detectPulse+0x1c8>
	           uint32_t beatDuration = currentBeat - lastBeat;
 80014f4:	4b4e      	ldr	r3, [pc, #312]	; (8001630 <detectPulse+0x1e8>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b4c      	ldr	r3, [pc, #304]	; (800162c <detectPulse+0x1e4>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	60fb      	str	r3, [r7, #12]
	           lastBeat = currentBeat;
 8001500:	4b4b      	ldr	r3, [pc, #300]	; (8001630 <detectPulse+0x1e8>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a49      	ldr	r2, [pc, #292]	; (800162c <detectPulse+0x1e4>)
 8001506:	6013      	str	r3, [r2, #0]
	           float rawBPM = 0;
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
	           if(beatDuration > 0)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <detectPulse+0xe0>
	             rawBPM = 60000.0 / (float)beatDuration;
 8001514:	68f8      	ldr	r0, [r7, #12]
 8001516:	f7ff fb95 	bl	8000c44 <__aeabi_ui2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4619      	mov	r1, r3
 800151e:	4848      	ldr	r0, [pc, #288]	; (8001640 <detectPulse+0x1f8>)
 8001520:	f7ff fc9c 	bl	8000e5c <__aeabi_fdiv>
 8001524:	4603      	mov	r3, r0
 8001526:	617b      	str	r3, [r7, #20]
	           valuesBPM[bpmIndex] = rawBPM;
 8001528:	4b46      	ldr	r3, [pc, #280]	; (8001644 <detectPulse+0x1fc>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	4a46      	ldr	r2, [pc, #280]	; (8001648 <detectPulse+0x200>)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	           valuesBPMSum = 0;
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <detectPulse+0x204>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 800153e:	2300      	movs	r3, #0
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e010      	b.n	8001566 <detectPulse+0x11e>
	             valuesBPMSum += valuesBPM[i];
 8001544:	4a40      	ldr	r2, [pc, #256]	; (8001648 <detectPulse+0x200>)
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800154c:	4a3f      	ldr	r2, [pc, #252]	; (800164c <detectPulse+0x204>)
 800154e:	6812      	ldr	r2, [r2, #0]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fac6 	bl	8000ae4 <__addsf3>
 8001558:	4603      	mov	r3, r0
 800155a:	461a      	mov	r2, r3
 800155c:	4b3b      	ldr	r3, [pc, #236]	; (800164c <detectPulse+0x204>)
 800155e:	601a      	str	r2, [r3, #0]
	           for(int i=0; i<PULSE_BPM_SAMPLE_SIZE; i++)
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	3301      	adds	r3, #1
 8001564:	613b      	str	r3, [r7, #16]
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	2b09      	cmp	r3, #9
 800156a:	ddeb      	ble.n	8001544 <detectPulse+0xfc>
	           bpmIndex++;
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <detectPulse+0x1fc>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	3301      	adds	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b33      	ldr	r3, [pc, #204]	; (8001644 <detectPulse+0x1fc>)
 8001576:	701a      	strb	r2, [r3, #0]
	           bpmIndex = bpmIndex % PULSE_BPM_SAMPLE_SIZE;
 8001578:	4b32      	ldr	r3, [pc, #200]	; (8001644 <detectPulse+0x1fc>)
 800157a:	781a      	ldrb	r2, [r3, #0]
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <detectPulse+0x208>)
 800157e:	fba3 1302 	umull	r1, r3, r3, r2
 8001582:	08d9      	lsrs	r1, r3, #3
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <detectPulse+0x1fc>)
 8001592:	701a      	strb	r2, [r3, #0]
	           if(valuesBPMCount < PULSE_BPM_SAMPLE_SIZE)
 8001594:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <detectPulse+0x20c>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d805      	bhi.n	80015a8 <detectPulse+0x160>
	             valuesBPMCount++;
 800159c:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <detectPulse+0x20c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b2da      	uxtb	r2, r3
 80015a4:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <detectPulse+0x20c>)
 80015a6:	701a      	strb	r2, [r3, #0]
	           currentBPM = valuesBPMSum / valuesBPMCount;
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <detectPulse+0x204>)
 80015aa:	681c      	ldr	r4, [r3, #0]
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <detectPulse+0x20c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff fb4b 	bl	8000c4c <__aeabi_i2f>
 80015b6:	4603      	mov	r3, r0
 80015b8:	4619      	mov	r1, r3
 80015ba:	4620      	mov	r0, r4
 80015bc:	f7ff fc4e 	bl	8000e5c <__aeabi_fdiv>
 80015c0:	4603      	mov	r3, r0
 80015c2:	461a      	mov	r2, r3
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <detectPulse+0x210>)
 80015c6:	601a      	str	r2, [r3, #0]
	           result->heartBPM = currentBPM;
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <detectPulse+0x210>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	605a      	str	r2, [r3, #4]
	           currentPulseDetectorState = PULSE_TRACE_DOWN;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <detectPulse+0x1dc>)
 80015d2:	2202      	movs	r2, #2
 80015d4:	701a      	strb	r2, [r3, #0]
	           return true;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e01e      	b.n	8001618 <detectPulse+0x1d0>

	       case PULSE_TRACE_DOWN:
	         if(sensor_value < prev_sensor_value)
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <detectPulse+0x1e0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4619      	mov	r1, r3
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fd25 	bl	8001030 <__aeabi_fcmplt>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d005      	beq.n	80015f8 <detectPulse+0x1b0>
	         {
	           values_went_down++;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <detectPulse+0x1ec>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b2da      	uxtb	r2, r3
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <detectPulse+0x1ec>)
 80015f6:	701a      	strb	r2, [r3, #0]
	         }


	         if(sensor_value < PULSE_MIN_THRESHOLD)
 80015f8:	4910      	ldr	r1, [pc, #64]	; (800163c <detectPulse+0x1f4>)
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff fd18 	bl	8001030 <__aeabi_fcmplt>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d100      	bne.n	8001608 <detectPulse+0x1c0>
	         {
	           currentPulseDetectorState = PULSE_IDLE;
	         }
	         break;
 8001606:	e002      	b.n	800160e <detectPulse+0x1c6>
	           currentPulseDetectorState = PULSE_IDLE;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <detectPulse+0x1dc>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]
	         break;
 800160e:	bf00      	nop
	     }

	     prev_sensor_value = sensor_value;
 8001610:	4a05      	ldr	r2, [pc, #20]	; (8001628 <detectPulse+0x1e0>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
	     return false;
 8001616:	2300      	movs	r3, #0

}
 8001618:	4618      	mov	r0, r3
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd90      	pop	{r4, r7, pc}
 8001620:	44fa0000 	.word	0x44fa0000
 8001624:	2000012c 	.word	0x2000012c
 8001628:	20000168 	.word	0x20000168
 800162c:	2000016c 	.word	0x2000016c
 8001630:	20000170 	.word	0x20000170
 8001634:	20000174 	.word	0x20000174
 8001638:	20000164 	.word	0x20000164
 800163c:	42c80000 	.word	0x42c80000
 8001640:	476a6000 	.word	0x476a6000
 8001644:	20000161 	.word	0x20000161
 8001648:	20000134 	.word	0x20000134
 800164c:	2000015c 	.word	0x2000015c
 8001650:	cccccccd 	.word	0xcccccccd
 8001654:	20000160 	.word	0x20000160
 8001658:	20000130 	.word	0x20000130

0800165c <Balance_Intensidades>:

void Balance_Intensidades(float redLedDC, float IRLedDC)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
	uint8_t buffer=0;
 8001666:	2300      	movs	r3, #0
 8001668:	73fb      	strb	r3, [r7, #15]
	uint8_t aux1=0;
 800166a:	2300      	movs	r3, #0
 800166c:	73bb      	strb	r3, [r7, #14]
	uint8_t aux2=0;
 800166e:	2300      	movs	r3, #0
 8001670:	737b      	strb	r3, [r7, #13]
    aux1=(uint8_t)redLedDC;
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fd04 	bl	8001080 <__aeabi_f2uiz>
 8001678:	4603      	mov	r3, r0
 800167a:	73bb      	strb	r3, [r7, #14]
    aux2=(uint8_t)IRLedDC;
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f7ff fcff 	bl	8001080 <__aeabi_f2uiz>
 8001682:	4603      	mov	r3, r0
 8001684:	737b      	strb	r3, [r7, #13]

	if( HAL_GetTick() - lastREDLedCurrentCheck >= RED_LED_CURRENT_ADJUSTMENT_MS)
 8001686:	f001 fe91 	bl	80033ac <HAL_GetTick>
 800168a:	4603      	mov	r3, r0
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff fad9 	bl	8000c44 <__aeabi_ui2f>
 8001692:	4602      	mov	r2, r0
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <Balance_Intensidades+0x10c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f7ff fa20 	bl	8000ae0 <__aeabi_fsub>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4932      	ldr	r1, [pc, #200]	; (800176c <Balance_Intensidades+0x110>)
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff fcd7 	bl	8001058 <__aeabi_fcmpge>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d100      	bne.n	80016b2 <Balance_Intensidades+0x56>
	        //Serial.println("RED LED Current -");
	    }

	    lastREDLedCurrentCheck = HAL_GetTick();
	  }
}
 80016b0:	e055      	b.n	800175e <Balance_Intensidades+0x102>
	    if( IRLedDC - redLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent < MAX30100_LED_CURRENT_50MA)
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff fa13 	bl	8000ae0 <__aeabi_fsub>
 80016ba:	4603      	mov	r3, r0
 80016bc:	492c      	ldr	r1, [pc, #176]	; (8001770 <Balance_Intensidades+0x114>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fcd4 	bl	800106c <__aeabi_fcmpgt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d01a      	beq.n	8001700 <Balance_Intensidades+0xa4>
 80016ca:	4b2a      	ldr	r3, [pc, #168]	; (8001774 <Balance_Intensidades+0x118>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2b0e      	cmp	r3, #14
 80016d0:	d816      	bhi.n	8001700 <Balance_Intensidades+0xa4>
	      redLEDCurrent++;
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <Balance_Intensidades+0x118>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <Balance_Intensidades+0x118>)
 80016dc:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	011b      	lsls	r3, r3, #4
 80016e2:	b25a      	sxtb	r2, r3
 80016e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 80016ee:	4b22      	ldr	r3, [pc, #136]	; (8001778 <Balance_Intensidades+0x11c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4a22      	ldr	r2, [pc, #136]	; (800177c <Balance_Intensidades+0x120>)
 80016f4:	7811      	ldrb	r1, [r2, #0]
 80016f6:	7bfa      	ldrb	r2, [r7, #15]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 f889 	bl	8001810 <MAX30100_I2C_Write>
 80016fe:	e025      	b.n	800174c <Balance_Intensidades+0xf0>
	    else if(redLedDC - IRLedDC > MAGIC_ACCEPTABLE_INTENSITY_DIFF && redLEDCurrent > 0)
 8001700:	6839      	ldr	r1, [r7, #0]
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff f9ec 	bl	8000ae0 <__aeabi_fsub>
 8001708:	4603      	mov	r3, r0
 800170a:	4919      	ldr	r1, [pc, #100]	; (8001770 <Balance_Intensidades+0x114>)
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fcad 	bl	800106c <__aeabi_fcmpgt>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d019      	beq.n	800174c <Balance_Intensidades+0xf0>
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <Balance_Intensidades+0x118>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d015      	beq.n	800174c <Balance_Intensidades+0xf0>
	      redLEDCurrent--;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <Balance_Intensidades+0x118>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <Balance_Intensidades+0x118>)
 800172a:	701a      	strb	r2, [r3, #0]
	      buffer=((aux1<<4)|aux2);
 800172c:	7bbb      	ldrb	r3, [r7, #14]
 800172e:	011b      	lsls	r3, r3, #4
 8001730:	b25a      	sxtb	r2, r3
 8001732:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001736:	4313      	orrs	r3, r2
 8001738:	b25b      	sxtb	r3, r3
 800173a:	73fb      	strb	r3, [r7, #15]
	      MAX30100_I2C_Write(MAX_ADDRESS_WR,LED_CONFIGURATION,(uint8_t)buffer);
 800173c:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <Balance_Intensidades+0x11c>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4a0e      	ldr	r2, [pc, #56]	; (800177c <Balance_Intensidades+0x120>)
 8001742:	7811      	ldrb	r1, [r2, #0]
 8001744:	7bfa      	ldrb	r2, [r7, #15]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f862 	bl	8001810 <MAX30100_I2C_Write>
	    lastREDLedCurrentCheck = HAL_GetTick();
 800174c:	f001 fe2e 	bl	80033ac <HAL_GetTick>
 8001750:	4603      	mov	r3, r0
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fa76 	bl	8000c44 <__aeabi_ui2f>
 8001758:	4603      	mov	r3, r0
 800175a:	4a03      	ldr	r2, [pc, #12]	; (8001768 <Balance_Intensidades+0x10c>)
 800175c:	6013      	str	r3, [r2, #0]
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000128 	.word	0x20000128
 800176c:	43fa0000 	.word	0x43fa0000
 8001770:	477de800 	.word	0x477de800
 8001774:	20000008 	.word	0x20000008
 8001778:	20000000 	.word	0x20000000
 800177c:	20000007 	.word	0x20000007

08001780 <Resetea_Resultados>:

void Resetea_Resultados(pulseoxymeter_t *result,meanDiffFilter_t *meanfilter,float currentSaO2Value)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
	result->pulseDetected=false;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	result->heartBPM=0.0;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	605a      	str	r2, [r3, #4]
	result->irCardiogram=0.0;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
	result->irDcValue=0.0;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
	result->redDcValue=0.0;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	611a      	str	r2, [r3, #16]
	result->SaO2=currentSaO2Value;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	615a      	str	r2, [r3, #20]
	result->lastBeatThreshold=0;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
	result->dcFilteredIR=0.0;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f04f 0200 	mov.w	r2, #0
 80017c4:	61da      	str	r2, [r3, #28]
	result->dcFilteredRed=0.0;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
	for(int i=0;i<MEAN_FILTER_SIZE;i++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e008      	b.n	80017e6 <Resetea_Resultados+0x66>
	{
		meanfilter->values[i]=0;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	697a      	ldr	r2, [r7, #20]
 80017d8:	f04f 0100 	mov.w	r1, #0
 80017dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for(int i=0;i<MEAN_FILTER_SIZE;i++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b0e      	cmp	r3, #14
 80017ea:	ddf3      	ble.n	80017d4 <Resetea_Resultados+0x54>
	}
	meanfilter->index=0;
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	meanfilter->sum=0;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	641a      	str	r2, [r3, #64]	; 0x40
	meanfilter->count=0;
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2200      	movs	r2, #0
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8001804:	bf00      	nop
 8001806:	371c      	adds	r7, #28
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
	...

08001810 <MAX30100_I2C_Write>:

void MAX30100_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af02      	add	r7, sp, #8
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
 800181a:	460b      	mov	r3, r1
 800181c:	71bb      	strb	r3, [r7, #6]
 800181e:	4613      	mov	r3, r2
 8001820:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001822:	79bb      	ldrb	r3, [r7, #6]
 8001824:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001826:	797b      	ldrb	r3, [r7, #5]
 8001828:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800182a:	79fb      	ldrb	r3, [r7, #7]
 800182c:	b299      	uxth	r1, r3
 800182e:	f107 020c 	add.w	r2, r7, #12
 8001832:	230a      	movs	r3, #10
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	2302      	movs	r3, #2
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <MAX30100_I2C_Write+0x38>)
 800183a:	f002 fa8f 	bl	8003d5c <HAL_I2C_Master_Transmit>
}
 800183e:	bf00      	nop
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000180 	.word	0x20000180

0800184c <SPISD_EscribirSector>:
 * Escribe un sector en la SD
 * En el caso de direccionar al byte, revisa si SectorAddressing es 0
 * y multiplica el sector por 512 para apuntar al byte.
 */
uint8_t SPISD_EscribirSector(SPISD *spisd, uint32_t sector,
		const uint8_t *buffer) {
 800184c:	b580      	push	{r7, lr}
 800184e:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8001852:	af00      	add	r7, sp, #0
 8001854:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001858:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800185c:	6018      	str	r0, [r3, #0]
 800185e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001862:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8001866:	6019      	str	r1, [r3, #0]
 8001868:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800186c:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001870:	601a      	str	r2, [r3, #0]
	//Verificar que la memoria SD soporte direccionamiento al sector y no al byte.
	if (!spisd->sectorAddressing)
 8001872:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001876:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	7b9b      	ldrb	r3, [r3, #14]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10a      	bne.n	8001898 <SPISD_EscribirSector+0x4c>
		sector = sector * 512;
 8001882:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001886:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 800188a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800188e:	f5a2 7206 	sub.w	r2, r2, #536	; 0x218
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	0252      	lsls	r2, r2, #9
 8001896:	601a      	str	r2, [r3, #0]

	//El sector es uint32, pero hay que enviarlo en 4 bytes en SPISD_CMD24
	//Lo partimos en 4 partes con shifts y mascaras.
	SPISD_CMD24[4] = sector & 0xff;
 8001898:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800189c:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b75      	ldr	r3, [pc, #468]	; (8001a7c <SPISD_EscribirSector+0x230>)
 80018a6:	711a      	strb	r2, [r3, #4]
	SPISD_CMD24[3] = (sector & 0xff00) >> 8;
 80018a8:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80018ac:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0a1b      	lsrs	r3, r3, #8
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4b71      	ldr	r3, [pc, #452]	; (8001a7c <SPISD_EscribirSector+0x230>)
 80018b8:	70da      	strb	r2, [r3, #3]
	SPISD_CMD24[2] = (sector & 0xff0000) >> 16;
 80018ba:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80018be:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <SPISD_EscribirSector+0x230>)
 80018ca:	709a      	strb	r2, [r3, #2]
	SPISD_CMD24[1] = (sector & 0xff000000) >> 24;
 80018cc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80018d0:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	0e1b      	lsrs	r3, r3, #24
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	4b68      	ldr	r3, [pc, #416]	; (8001a7c <SPISD_EscribirSector+0x230>)
 80018dc:	705a      	strb	r2, [r3, #1]
	//Enviamos el comando CMD24
	SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 80018de:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80018e2:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80018e6:	2207      	movs	r2, #7
 80018e8:	4964      	ldr	r1, [pc, #400]	; (8001a7c <SPISD_EscribirSector+0x230>)
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f000 f978 	bl	8001be0 <SPISD_EnviarComando>
	HAL_Delay(1);
 80018f0:	2001      	movs	r0, #1
 80018f2:	f001 fd65 	bl	80033c0 <HAL_Delay>
	uint8_t timeout = 10;
 80018f6:	230a      	movs	r3, #10
 80018f8:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	recbuffer[0] = 0xFF;
 80018fc:	4b60      	ldr	r3, [pc, #384]	; (8001a80 <SPISD_EscribirSector+0x234>)
 80018fe:	22ff      	movs	r2, #255	; 0xff
 8001900:	701a      	strb	r2, [r3, #0]
	while (timeout > 0) {
 8001902:	e030      	b.n	8001966 <SPISD_EscribirSector+0x11a>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 4);
 8001904:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001908:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800190c:	2204      	movs	r2, #4
 800190e:	495c      	ldr	r1, [pc, #368]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001910:	6818      	ldr	r0, [r3, #0]
 8001912:	f000 f987 	bl	8001c24 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0, todo marcha bien...
		if (recbuffer[0]==0)
 8001916:	4b5a      	ldr	r3, [pc, #360]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d028      	beq.n	8001970 <SPISD_EscribirSector+0x124>
			break;
		//Si no es 0
		timeout--;
 800191e:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 8001922:	3b01      	subs	r3, #1
 8001924:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
		//Si paso 5 veces y no responde, reiniciamos la SD
		if (timeout == 5) {
 8001928:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800192c:	2b05      	cmp	r3, #5
 800192e:	d10b      	bne.n	8001948 <SPISD_EscribirSector+0xfc>
			if (!SPISD_DetectarSD(spisd))
 8001930:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001934:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001938:	6818      	ldr	r0, [r3, #0]
 800193a:	f000 f9a5 	bl	8001c88 <SPISD_DetectarSD>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <SPISD_EscribirSector+0xfc>
				return 0; // Falla la SD
 8001944:	2300      	movs	r3, #0
 8001946:	e094      	b.n	8001a72 <SPISD_EscribirSector+0x226>
		}
		HAL_Delay(20);
 8001948:	2014      	movs	r0, #20
 800194a:	f001 fd39 	bl	80033c0 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD24, sizeof(SPISD_CMD24));
 800194e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001952:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001956:	2207      	movs	r2, #7
 8001958:	4948      	ldr	r1, [pc, #288]	; (8001a7c <SPISD_EscribirSector+0x230>)
 800195a:	6818      	ldr	r0, [r3, #0]
 800195c:	f000 f940 	bl	8001be0 <SPISD_EnviarComando>
		HAL_Delay(2);
 8001960:	2002      	movs	r0, #2
 8001962:	f001 fd2d 	bl	80033c0 <HAL_Delay>
	while (timeout > 0) {
 8001966:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ca      	bne.n	8001904 <SPISD_EscribirSector+0xb8>
 800196e:	e000      	b.n	8001972 <SPISD_EscribirSector+0x126>
			break;
 8001970:	bf00      	nop
	}
	if (recbuffer[0] != 0)
 8001972:	4b43      	ldr	r3, [pc, #268]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <SPISD_EscribirSector+0x132>
		return 0; //Fallo escribiendo.
 800197a:	2300      	movs	r3, #0
 800197c:	e079      	b.n	8001a72 <SPISD_EscribirSector+0x226>
	HAL_Delay(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f001 fd1e 	bl	80033c0 <HAL_Delay>
	uint8_t outputBuffer[515]; //Armamos un buffer con start, datos y CRC (mentiroso)
	outputBuffer[0] = 0xFE; //Start
 8001984:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001988:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800198c:	22fe      	movs	r2, #254	; 0xfe
 800198e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8001996:	e015      	b.n	80019c4 <SPISD_EscribirSector+0x178>
		outputBuffer[i + 1] = buffer[i];
 8001998:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800199c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80019a0:	f5a2 7207 	sub.w	r2, r2, #540	; 0x21c
 80019a4:	6812      	ldr	r2, [r2, #0]
 80019a6:	441a      	add	r2, r3
 80019a8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80019ac:	3301      	adds	r3, #1
 80019ae:	7811      	ldrb	r1, [r2, #0]
 80019b0:	f507 7208 	add.w	r2, r7, #544	; 0x220
 80019b4:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80019b8:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 512; i++) {
 80019ba:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80019be:	3301      	adds	r3, #1
 80019c0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80019c4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80019c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019cc:	dbe4      	blt.n	8001998 <SPISD_EscribirSector+0x14c>
	}
	outputBuffer[513] = 0xFF; //CRC mentiroso1
 80019ce:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80019d6:	22ff      	movs	r2, #255	; 0xff
 80019d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	outputBuffer[514] = 0xFF; //CRC mentiroso2
 80019dc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019e0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80019e4:	22ff      	movs	r2, #255	; 0xff
 80019e6:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 80019ea:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019ee:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6898      	ldr	r0, [r3, #8]
 80019f6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80019fa:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	899b      	ldrh	r3, [r3, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	4619      	mov	r1, r3
 8001a06:	f002 f84d 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, outputBuffer, 515, 100);
 8001a0a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001a0e:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6818      	ldr	r0, [r3, #0]
 8001a16:	f107 0114 	add.w	r1, r7, #20
 8001a1a:	2364      	movs	r3, #100	; 0x64
 8001a1c:	f240 2203 	movw	r2, #515	; 0x203
 8001a20:	f005 f9a8 	bl	8006d74 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001a24:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001a28:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6898      	ldr	r0, [r3, #8]
 8001a30:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001a34:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	899b      	ldrh	r3, [r3, #12]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f002 f830 	bl	8003aa4 <HAL_GPIO_WritePin>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 2);
 8001a44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001a48:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	490c      	ldr	r1, [pc, #48]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001a50:	6818      	ldr	r0, [r3, #0]
 8001a52:	f000 f8e7 	bl	8001c24 <SPISD_RecibirRespuestaComando>
	recbuffer[0] = recbuffer[0] & 0x1F; //Mascara para los 5 bits menos significativos
 8001a56:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	f003 031f 	and.w	r3, r3, #31
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001a62:	701a      	strb	r2, [r3, #0]
	//Debe devolver xxx00101 si el sector fue escrito correctamente.
	if (recbuffer[0] != 0x05) {
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SPISD_EscribirSector+0x234>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d001      	beq.n	8001a70 <SPISD_EscribirSector+0x224>
		return 0; //Error
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e000      	b.n	8001a72 <SPISD_EscribirSector+0x226>
	}
	return 1;
 8001a70:	2301      	movs	r3, #1
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000048 	.word	0x20000048
 8001a80:	20000178 	.word	0x20000178

08001a84 <SPISD_LeerSector>:

/**
 * Lee un sector de la SD. La misma debe estar inicializada
 *
 */
uint8_t SPISD_LeerSector(SPISD *spisd, uint32_t sector, uint8_t *buffer) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	60f8      	str	r0, [r7, #12]
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
	//Si la memoria direcciona al byte, multiplicamos sector*512.
	if (!spisd->sectorAddressing)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7b9b      	ldrb	r3, [r3, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <SPISD_LeerSector+0x1a>
		sector = sector * 512;
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	60bb      	str	r3, [r7, #8]
	//Pasamos el sector/byte a 4 bytes
	SPISD_CMD17[4] = sector & 0xff;
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001aa4:	711a      	strb	r2, [r3, #4]
	SPISD_CMD17[3] = (sector & 0xff00) >> 8;
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	0a1b      	lsrs	r3, r3, #8
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b4a      	ldr	r3, [pc, #296]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001aae:	70da      	strb	r2, [r3, #3]
	SPISD_CMD17[2] = (sector & 0xff0000) >> 16;
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	0c1b      	lsrs	r3, r3, #16
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4b48      	ldr	r3, [pc, #288]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001ab8:	709a      	strb	r2, [r3, #2]
	SPISD_CMD17[1] = (sector & 0xff000000) >> 24;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	0e1b      	lsrs	r3, r3, #24
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b45      	ldr	r3, [pc, #276]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001ac2:	705a      	strb	r2, [r3, #1]
	//Comando 17, leer sector (o byte).
	SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001ac4:	2207      	movs	r2, #7
 8001ac6:	4944      	ldr	r1, [pc, #272]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f889 	bl	8001be0 <SPISD_EnviarComando>
	//Ahora la SD deberia responder on 0x00 indicando que esta lista
	//para enviar el sector.. pero esto puede tardar...
	uint8_t timeout = 10;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001ad2:	e024      	b.n	8001b1e <SPISD_LeerSector+0x9a>
		//Busco la respuesta
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	4941      	ldr	r1, [pc, #260]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001ad8:	68f8      	ldr	r0, [r7, #12]
 8001ada:	f000 f8a3 	bl	8001c24 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] == 0)
 8001ade:	4b3f      	ldr	r3, [pc, #252]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01f      	beq.n	8001b26 <SPISD_LeerSector+0xa2>
			break; //Todo funciono bien
		//Tengo que mandar el comando de vuelta.
		timeout--;
 8001ae6:	7dfb      	ldrb	r3, [r7, #23]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	75fb      	strb	r3, [r7, #23]
		//A veces queda en IDLE, asi que si timeout es 5, mandamos
		//de nuevo la secuencia de init
		if (timeout == 5) {
 8001aec:	7dfb      	ldrb	r3, [r7, #23]
 8001aee:	2b05      	cmp	r3, #5
 8001af0:	d10a      	bne.n	8001b08 <SPISD_LeerSector+0x84>
			if (!SPISD_DetectarSD(spisd))
 8001af2:	68f8      	ldr	r0, [r7, #12]
 8001af4:	f000 f8c8 	bl	8001c88 <SPISD_DetectarSD>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <SPISD_LeerSector+0x7e>
				return 0;
 8001afe:	2300      	movs	r3, #0
 8001b00:	e065      	b.n	8001bce <SPISD_LeerSector+0x14a>
			HAL_Delay(100);
 8001b02:	2064      	movs	r0, #100	; 0x64
 8001b04:	f001 fc5c 	bl	80033c0 <HAL_Delay>
		}
		HAL_Delay(20);
 8001b08:	2014      	movs	r0, #20
 8001b0a:	f001 fc59 	bl	80033c0 <HAL_Delay>
		SPISD_EnviarComando(spisd, SPISD_CMD17, sizeof(SPISD_CMD17));
 8001b0e:	2207      	movs	r2, #7
 8001b10:	4931      	ldr	r1, [pc, #196]	; (8001bd8 <SPISD_LeerSector+0x154>)
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f000 f864 	bl	8001be0 <SPISD_EnviarComando>
		HAL_Delay(2);
 8001b18:	2002      	movs	r0, #2
 8001b1a:	f001 fc51 	bl	80033c0 <HAL_Delay>
	while (timeout > 0) {
 8001b1e:	7dfb      	ldrb	r3, [r7, #23]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1d7      	bne.n	8001ad4 <SPISD_LeerSector+0x50>
 8001b24:	e000      	b.n	8001b28 <SPISD_LeerSector+0xa4>
			break; //Todo funciono bien
 8001b26:	bf00      	nop

	}
	//Pude haber salido por timeout o porque recbuffer[0]==0
	if (recbuffer[0] != 0)
 8001b28:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <SPISD_LeerSector+0xb0>
		return 0; //No responde mas a comandos.
 8001b30:	2300      	movs	r3, #0
 8001b32:	e04c      	b.n	8001bce <SPISD_LeerSector+0x14a>

	//Si la memoria responde 0 a CMD17, entonces va a comenzar a enviar el sector
	//El comienzo del sector es siempre 0xFE, pero depende la memoria, puede responder
	//con una cantidad de 0xFF primero. Leemos de a uno hasta que llega el primer 0xFF
	recbuffer[0] = 0xFF;
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001b36:	22ff      	movs	r2, #255	; 0xff
 8001b38:	701a      	strb	r2, [r3, #0]
	timeout = 100; //Maximo 100 lecturas
 8001b3a:	2364      	movs	r3, #100	; 0x64
 8001b3c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6898      	ldr	r0, [r3, #8]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	899b      	ldrh	r3, [r3, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f001 ffab 	bl	8003aa4 <HAL_GPIO_WritePin>
	while (timeout > 0) {
 8001b4e:	e00d      	b.n	8001b6c <SPISD_LeerSector+0xe8>
		HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 1, 100);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	2364      	movs	r3, #100	; 0x64
 8001b56:	2201      	movs	r2, #1
 8001b58:	4920      	ldr	r1, [pc, #128]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001b5a:	f005 fa47 	bl	8006fec <HAL_SPI_Receive>
		//SPISD_RecibirRespuestaComando(spisd,recbuffer,1);
		if (recbuffer[0] == 0xFE) {
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	2bfe      	cmp	r3, #254	; 0xfe
 8001b64:	d006      	beq.n	8001b74 <SPISD_LeerSector+0xf0>
			break;
		}
		timeout--; //Si no hubo break, decrementamos el timeout
 8001b66:	7dfb      	ldrb	r3, [r7, #23]
 8001b68:	3b01      	subs	r3, #1
 8001b6a:	75fb      	strb	r3, [r7, #23]
	while (timeout > 0) {
 8001b6c:	7dfb      	ldrb	r3, [r7, #23]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ee      	bne.n	8001b50 <SPISD_LeerSector+0xcc>
 8001b72:	e000      	b.n	8001b76 <SPISD_LeerSector+0xf2>
			break;
 8001b74:	bf00      	nop
	}

	//Si recbuffer[0] NO es 0xFE, levantamos CS y chau, la SD no responde.
	if (recbuffer[0] != 0xFE) {
 8001b76:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2bfe      	cmp	r3, #254	; 0xfe
 8001b7c:	d009      	beq.n	8001b92 <SPISD_LeerSector+0x10e>
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET); //Subo CS
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6898      	ldr	r0, [r3, #8]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	899b      	ldrh	r3, [r3, #12]
 8001b86:	2201      	movs	r2, #1
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f001 ff8b 	bl	8003aa4 <HAL_GPIO_WritePin>
		return 0;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e01d      	b.n	8001bce <SPISD_LeerSector+0x14a>
	}
	//Si recibimos el 0xFE, entonces podemos recibir los 512+2 bytes (2 de CRC).
	HAL_SPI_Receive(spisd->puertoSPI, buffer, 512, 200);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6818      	ldr	r0, [r3, #0]
 8001b96:	23c8      	movs	r3, #200	; 0xc8
 8001b98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	f005 fa25 	bl	8006fec <HAL_SPI_Receive>
	//Ahora falta el CRC
	recbuffer[0] = 0xFF;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001ba4:	22ff      	movs	r2, #255	; 0xff
 8001ba6:	701a      	strb	r2, [r3, #0]
	recbuffer[1] = 0xFF;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001baa:	22ff      	movs	r2, #255	; 0xff
 8001bac:	705a      	strb	r2, [r3, #1]
	HAL_SPI_Receive(spisd->puertoSPI, recbuffer, 2, 200);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6818      	ldr	r0, [r3, #0]
 8001bb2:	23c8      	movs	r3, #200	; 0xc8
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	4909      	ldr	r1, [pc, #36]	; (8001bdc <SPISD_LeerSector+0x158>)
 8001bb8:	f005 fa18 	bl	8006fec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6898      	ldr	r0, [r3, #8]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	899b      	ldrh	r3, [r3, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f001 ff6c 	bl	8003aa4 <HAL_GPIO_WritePin>
	return 1;
 8001bcc:	2301      	movs	r3, #1
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000040 	.word	0x20000040
 8001bdc:	20000178 	.word	0x20000178

08001be0 <SPISD_EnviarComando>:

/**
 * Envia comando a la SD controlando CS.
 */
void SPISD_EnviarComando(SPISD *spisd, uint8_t *buffer, uint16_t cantidad) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	4613      	mov	r3, r2
 8001bec:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6898      	ldr	r0, [r3, #8]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	899b      	ldrh	r3, [r3, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f001 ff53 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, buffer, cantidad, 200);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	88fa      	ldrh	r2, [r7, #6]
 8001c04:	23c8      	movs	r3, #200	; 0xc8
 8001c06:	68b9      	ldr	r1, [r7, #8]
 8001c08:	f005 f8b4 	bl	8006d74 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6898      	ldr	r0, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	899b      	ldrh	r3, [r3, #12]
 8001c14:	2201      	movs	r2, #1
 8001c16:	4619      	mov	r1, r3
 8001c18:	f001 ff44 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8001c1c:	bf00      	nop
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <SPISD_RecibirRespuestaComando>:
/**
 * Recibe por SPI una cantidad de bytes de forma bloqueante.
 * Se asegura que la linea (MOSI) este en 1 mientras se recibe.
 */
void SPISD_RecibirRespuestaComando(SPISD *spisd, uint8_t *buffer,
		uint16_t cantidad) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	80fb      	strh	r3, [r7, #6]
	//Cuando se recibe, la linea debe quedar en 1, por ende ponemos 0xFF en cada byte
	//que se quiera transmitir.
	for (int i = 0; i < cantidad; i++) {
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e007      	b.n	8001c48 <SPISD_RecibirRespuestaComando+0x24>
		buffer[i] = 0xFF;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	68ba      	ldr	r2, [r7, #8]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	22ff      	movs	r2, #255	; 0xff
 8001c40:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < cantidad; i++) {
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf3      	blt.n	8001c38 <SPISD_RecibirRespuestaComando+0x14>
	}
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	6898      	ldr	r0, [r3, #8]
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	899b      	ldrh	r3, [r3, #12]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f001 ff22 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(spisd->puertoSPI, buffer, cantidad, 200);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	88fa      	ldrh	r2, [r7, #6]
 8001c66:	23c8      	movs	r3, #200	; 0xc8
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	f005 f9bf 	bl	8006fec <HAL_SPI_Receive>
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6898      	ldr	r0, [r3, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	899b      	ldrh	r3, [r3, #12]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f001 ff13 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8001c7e:	bf00      	nop
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <SPISD_DetectarSD>:

/**
 * Ejecuta la secuencia de inicializacion. Detecta el tipo de tarjeta
 * y deja esa info en la estructura.
 */
uint8_t SPISD_DetectarSD(SPISD *spisd) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	//La SD recien insertada se encuentra en modo SD
	//Debemos enviar al menos 72 clocks con CS en 1
	spisd->FSM = Encendido;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	711a      	strb	r2, [r3, #4]
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6898      	ldr	r0, [r3, #8]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	899b      	ldrh	r3, [r3, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f001 feff 	bl	8003aa4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6818      	ldr	r0, [r3, #0]
 8001caa:	2364      	movs	r3, #100	; 0x64
 8001cac:	220b      	movs	r2, #11
 8001cae:	4957      	ldr	r1, [pc, #348]	; (8001e0c <SPISD_DetectarSD+0x184>)
 8001cb0:	f005 f860 	bl	8006d74 <HAL_SPI_Transmit>
			100);
	HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6898      	ldr	r0, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	899b      	ldrh	r3, [r3, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f001 fef0 	bl	8003aa4 <HAL_GPIO_WritePin>
	//Ahora debemos enviar CMD0 (Software Reset)
	SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4952      	ldr	r1, [pc, #328]	; (8001e10 <SPISD_DetectarSD+0x188>)
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff89 	bl	8001be0 <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	4950      	ldr	r1, [pc, #320]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ffa6 	bl	8001c24 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 8001cd8:	4b4e      	ldr	r3, [pc, #312]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d026      	beq.n	8001d2e <SPISD_DetectarSD+0xa6>
		// Hubo un error, la SD no responde 0x01 al sw reset
		// Hacemos otro intento antes de desistir...
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_SET);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6898      	ldr	r0, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	899b      	ldrh	r3, [r3, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	4619      	mov	r1, r3
 8001cec:	f001 feda 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(spisd->puertoSPI, SPISD_INITSEQ, sizeof(SPISD_INITSEQ),
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	2364      	movs	r3, #100	; 0x64
 8001cf6:	220b      	movs	r2, #11
 8001cf8:	4944      	ldr	r1, [pc, #272]	; (8001e0c <SPISD_DetectarSD+0x184>)
 8001cfa:	f005 f83b 	bl	8006d74 <HAL_SPI_Transmit>
				100);
		HAL_GPIO_WritePin(spisd->csPuerto, spisd->csPin, GPIO_PIN_RESET);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6898      	ldr	r0, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	899b      	ldrh	r3, [r3, #12]
 8001d06:	2200      	movs	r2, #0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f001 fecb 	bl	8003aa4 <HAL_GPIO_WritePin>
		//Ahora debemos enviar CMD0 (Software Reset)
		SPISD_EnviarComando(spisd, SPISD_CMD0, sizeof(SPISD_CMD0));
 8001d0e:	2207      	movs	r2, #7
 8001d10:	493f      	ldr	r1, [pc, #252]	; (8001e10 <SPISD_DetectarSD+0x188>)
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f7ff ff64 	bl	8001be0 <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 1);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	493e      	ldr	r1, [pc, #248]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ff81 	bl	8001c24 <SPISD_RecibirRespuestaComando>

		if (recbuffer[0] != 0x01)
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d001      	beq.n	8001d2e <SPISD_DetectarSD+0xa6>
			return 0; //Error en la SD, no responde.
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e069      	b.n	8001e02 <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = sinc;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	711a      	strb	r2, [r3, #4]
	//Ahora mandamos CMD8 (Check Voltage Range)
	SPISD_EnviarComando(spisd, SPISD_CMD8, sizeof(SPISD_CMD8));
 8001d34:	2207      	movs	r2, #7
 8001d36:	4938      	ldr	r1, [pc, #224]	; (8001e18 <SPISD_DetectarSD+0x190>)
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ff51 	bl	8001be0 <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 8001d3e:	2206      	movs	r2, #6
 8001d40:	4934      	ldr	r1, [pc, #208]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff6e 	bl	8001c24 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x01) {
 8001d48:	4b32      	ldr	r3, [pc, #200]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d001      	beq.n	8001d54 <SPISD_DetectarSD+0xcc>
		// Hubo un error, la SD no responde 0x01 al check voltage range
		return 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	e056      	b.n	8001e02 <SPISD_DetectarSD+0x17a>
	}
	spisd->FSM = version;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2202      	movs	r2, #2
 8001d58:	711a      	strb	r2, [r3, #4]

	//Ahora hay que mandar CMD55 y CMD41 (lo que genera ACMD41).
	//Este par va a devolver valores, pero en algun momento debe
	//devolver 0
	uint8_t reintento = 3;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	73fb      	strb	r3, [r7, #15]
	uint8_t encontrado = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73bb      	strb	r3, [r7, #14]
	while (reintento >= 0) {
		reintento--;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	3b01      	subs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
		SPISD_EnviarComando(spisd, SPISD_CMD55, sizeof(SPISD_CMD55));
 8001d68:	2207      	movs	r2, #7
 8001d6a:	492c      	ldr	r1, [pc, #176]	; (8001e1c <SPISD_DetectarSD+0x194>)
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7ff ff37 	bl	8001be0 <SPISD_EnviarComando>
		//Siempre a CMD55 debe responder 0x01.
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 8001d72:	2206      	movs	r2, #6
 8001d74:	4927      	ldr	r1, [pc, #156]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ff54 	bl	8001c24 <SPISD_RecibirRespuestaComando>
		if (recbuffer[0] != 0x01) {
 8001d7c:	4b25      	ldr	r3, [pc, #148]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d001      	beq.n	8001d88 <SPISD_DetectarSD+0x100>

			return 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	e03c      	b.n	8001e02 <SPISD_DetectarSD+0x17a>
		}
		//Mando CMD41 lo cual genera ACMD41.
		SPISD_EnviarComando(spisd, SPISD_CMD41, sizeof(SPISD_CMD41));
 8001d88:	2207      	movs	r2, #7
 8001d8a:	4925      	ldr	r1, [pc, #148]	; (8001e20 <SPISD_DetectarSD+0x198>)
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f7ff ff27 	bl	8001be0 <SPISD_EnviarComando>
		SPISD_RecibirRespuestaComando(spisd, recbuffer, 6);
 8001d92:	2206      	movs	r2, #6
 8001d94:	491f      	ldr	r1, [pc, #124]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f7ff ff44 	bl	8001c24 <SPISD_RecibirRespuestaComando>
		//Si la respuesta en 0x00, podemos continuar
		if (recbuffer[0] == 0x00) {
 8001d9c:	4b1d      	ldr	r3, [pc, #116]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d106      	bne.n	8001db2 <SPISD_DetectarSD+0x12a>
			encontrado = 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	73bb      	strb	r3, [r7, #14]
			break;
 8001da8:	bf00      	nop
		}
		//Sino, demoramos 100ms y volvemos a probar.
		HAL_Delay(100);
	}
	if (encontrado) {
 8001daa:	7bbb      	ldrb	r3, [r7, #14]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d016      	beq.n	8001dde <SPISD_DetectarSD+0x156>
 8001db0:	e003      	b.n	8001dba <SPISD_DetectarSD+0x132>
		HAL_Delay(100);
 8001db2:	2064      	movs	r0, #100	; 0x64
 8001db4:	f001 fb04 	bl	80033c0 <HAL_Delay>
		reintento--;
 8001db8:	e7d3      	b.n	8001d62 <SPISD_DetectarSD+0xda>
		spisd->FSM = initCheck;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	711a      	strb	r2, [r3, #4]
	} else {
		return 0;
	}
	//Enviamos Comando 58 , para saber que tipo de memoria SD tenemos.
	SPISD_EnviarComando(spisd, SPISD_CMD58, sizeof(SPISD_CMD58));
 8001dc0:	2207      	movs	r2, #7
 8001dc2:	4918      	ldr	r1, [pc, #96]	; (8001e24 <SPISD_DetectarSD+0x19c>)
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ff0b 	bl	8001be0 <SPISD_EnviarComando>
	SPISD_RecibirRespuestaComando(spisd, recbuffer, 5);
 8001dca:	2205      	movs	r2, #5
 8001dcc:	4911      	ldr	r1, [pc, #68]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff28 	bl	8001c24 <SPISD_RecibirRespuestaComando>
	if (recbuffer[0] != 0x00) {
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d004      	beq.n	8001de6 <SPISD_DetectarSD+0x15e>
 8001ddc:	e001      	b.n	8001de2 <SPISD_DetectarSD+0x15a>
		return 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	e00f      	b.n	8001e02 <SPISD_DetectarSD+0x17a>
		// Fallo el CMD58
		return 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	e00d      	b.n	8001e02 <SPISD_DetectarSD+0x17a>
	}
	//Este comando informa si la SD es HC
	if ((recbuffer[1] & 0x40)) {
 8001de6:	4b0b      	ldr	r3, [pc, #44]	; (8001e14 <SPISD_DetectarSD+0x18c>)
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <SPISD_DetectarSD+0x172>
		//La SD direcciona al sector (SDHC)
		spisd->sectorAddressing = 1;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2201      	movs	r2, #1
 8001df6:	739a      	strb	r2, [r3, #14]
 8001df8:	e002      	b.n	8001e00 <SPISD_DetectarSD+0x178>
	} else {
		//La SD direcciona al byte (SD)
		spisd->sectorAddressing = 0;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	739a      	strb	r2, [r3, #14]
	}
	return 1;
 8001e00:	2301      	movs	r3, #1

}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	20000018 	.word	0x20000018
 8001e14:	20000178 	.word	0x20000178
 8001e18:	20000020 	.word	0x20000020
 8001e1c:	20000028 	.word	0x20000028
 8001e20:	20000030 	.word	0x20000030
 8001e24:	20000038 	.word	0x20000038

08001e28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e2a:	b089      	sub	sp, #36	; 0x24
 8001e2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e2e:	f001 fa77 	bl	8003320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e32:	f000 fb15 	bl	8002460 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  spisd.FSM=Encendido;
 8001e36:	4b5d      	ldr	r3, [pc, #372]	; (8001fac <main+0x184>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	711a      	strb	r2, [r3, #4]
  spisd.csPuerto = GPIOB;
 8001e3c:	4b5b      	ldr	r3, [pc, #364]	; (8001fac <main+0x184>)
 8001e3e:	4a5c      	ldr	r2, [pc, #368]	; (8001fb0 <main+0x188>)
 8001e40:	609a      	str	r2, [r3, #8]
  spisd.csPin = SPI2_CSS_Pin;
 8001e42:	4b5a      	ldr	r3, [pc, #360]	; (8001fac <main+0x184>)
 8001e44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e48:	819a      	strh	r2, [r3, #12]
  spisd.puertoSPI = &hspi2;
 8001e4a:	4b58      	ldr	r3, [pc, #352]	; (8001fac <main+0x184>)
 8001e4c:	4a59      	ldr	r2, [pc, #356]	; (8001fb4 <main+0x18c>)
 8001e4e:	601a      	str	r2, [r3, #0]
  spisd.sectorAddressing=1; //Asumimos SDHC (+2GB)
 8001e50:	4b56      	ldr	r3, [pc, #344]	; (8001fac <main+0x184>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	739a      	strb	r2, [r3, #14]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e56:	f000 fc1d 	bl	8002694 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e5a:	f000 fb47 	bl	80024ec <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e5e:	f000 fb73 	bl	8002548 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001e62:	f000 fb9f 	bl	80025a4 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8001e66:	f000 fbd3 	bl	8002610 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8001e6a:	f006 f9e7 	bl	800823c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8001e6e:	f000 fd9f 	bl	80029b0 <SSD1306_Init>
  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8001e72:	2201      	movs	r2, #1
 8001e74:	4950      	ldr	r1, [pc, #320]	; (8001fb8 <main+0x190>)
 8001e76:	4851      	ldr	r0, [pc, #324]	; (8001fbc <main+0x194>)
 8001e78:	f005 fd87 	bl	800798a <HAL_UART_Receive_IT>

  SSD1306_GotoXY(40, 0);
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2028      	movs	r0, #40	; 0x28
 8001e80:	f000 fefe 	bl	8002c80 <SSD1306_GotoXY>
  SSD1306_Puts("OXY",&Font_16x26,1);
 8001e84:	2201      	movs	r2, #1
 8001e86:	494e      	ldr	r1, [pc, #312]	; (8001fc0 <main+0x198>)
 8001e88:	484e      	ldr	r0, [pc, #312]	; (8001fc4 <main+0x19c>)
 8001e8a:	f000 ff8f 	bl	8002dac <SSD1306_Puts>
  SSD1306_GotoXY(25, 24);
 8001e8e:	2118      	movs	r1, #24
 8001e90:	2019      	movs	r0, #25
 8001e92:	f000 fef5 	bl	8002c80 <SSD1306_GotoXY>
  SSD1306_Puts("PULSE",&Font_16x26,1);
 8001e96:	2201      	movs	r2, #1
 8001e98:	4949      	ldr	r1, [pc, #292]	; (8001fc0 <main+0x198>)
 8001e9a:	484b      	ldr	r0, [pc, #300]	; (8001fc8 <main+0x1a0>)
 8001e9c:	f000 ff86 	bl	8002dac <SSD1306_Puts>
  SSD1306_GotoXY(10, 50);
 8001ea0:	2132      	movs	r1, #50	; 0x32
 8001ea2:	200a      	movs	r0, #10
 8001ea4:	f000 feec 	bl	8002c80 <SSD1306_GotoXY>
  SSD1306_Puts("...Iniciando...",&Font_7x10,1);
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	4948      	ldr	r1, [pc, #288]	; (8001fcc <main+0x1a4>)
 8001eac:	4848      	ldr	r0, [pc, #288]	; (8001fd0 <main+0x1a8>)
 8001eae:	f000 ff7d 	bl	8002dac <SSD1306_Puts>
  SSD1306_UpdateScreen();
 8001eb2:	f000 fe41 	bl	8002b38 <SSD1306_UpdateScreen>

   f_mount(&USERFatFS,USERPath,0);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	4946      	ldr	r1, [pc, #280]	; (8001fd4 <main+0x1ac>)
 8001eba:	4847      	ldr	r0, [pc, #284]	; (8001fd8 <main+0x1b0>)
 8001ebc:	f008 f8e8 	bl	800a090 <f_mount>
   f_open(&USERFile,"InformeOxy.txt",FA_CREATE_ALWAYS | FA_WRITE);
 8001ec0:	220a      	movs	r2, #10
 8001ec2:	4946      	ldr	r1, [pc, #280]	; (8001fdc <main+0x1b4>)
 8001ec4:	4846      	ldr	r0, [pc, #280]	; (8001fe0 <main+0x1b8>)
 8001ec6:	f008 f92b 	bl	800a120 <f_open>
   uint32_t output;
   if (f_write(&USERFile,"Hola Mundo SD Card!",sizeof("Hola Mundo SD Card!"),(void*)&output)==FR_OK)
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2214      	movs	r2, #20
 8001ed0:	4944      	ldr	r1, [pc, #272]	; (8001fe4 <main+0x1bc>)
 8001ed2:	4843      	ldr	r0, [pc, #268]	; (8001fe0 <main+0x1b8>)
 8001ed4:	f008 fb9d 	bl	800a612 <f_write>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d108      	bne.n	8001ef0 <main+0xc8>
   {
 	  if (f_sync(&USERFile)==FR_OK){
 8001ede:	4840      	ldr	r0, [pc, #256]	; (8001fe0 <main+0x1b8>)
 8001ee0:	f008 fd44 	bl	800a96c <f_sync>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <main+0xc8>
 		  f_close(&USERFile);
 8001eea:	483d      	ldr	r0, [pc, #244]	; (8001fe0 <main+0x1b8>)
 8001eec:	f008 fdf8 	bl	800aae0 <f_close>
 	  }

   }
   //Inicio_SPO2_HR();
   Inicio_SPO2_HR();
 8001ef0:	f7ff f8e6 	bl	80010c0 <Inicio_SPO2_HR>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado){
 8001ef4:	4b3c      	ldr	r3, [pc, #240]	; (8001fe8 <main+0x1c0>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d8fb      	bhi.n	8001ef4 <main+0xcc>
 8001efc:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <main+0xdc>)
 8001efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f02:	bf00      	nop
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f3f 	.word	0x08001f3f
 8001f0c:	08002011 	.word	0x08002011
 8001f10:	08002305 	.word	0x08002305
	  case INICIANDO:
		  SSD1306_ScrollRight(0x06, 0x07);
 8001f14:	2107      	movs	r1, #7
 8001f16:	2006      	movs	r0, #6
 8001f18:	f000 fca3 	bl	8002862 <SSD1306_ScrollRight>
		  if(!contador)
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <main+0x1c4>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f040 8274 	bne.w	800240e <main+0x5e6>
		  {
			  estado=PREPARADO;
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <main+0x1c0>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
			  contador=DEMORA;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <main+0x1c4>)
 8001f2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f32:	801a      	strh	r2, [r3, #0]
			  SSD1306_Stopscroll();
 8001f34:	f000 fccb 	bl	80028ce <SSD1306_Stopscroll>
			  SSD1306_Clear();
 8001f38:	f000 ff5d 	bl	8002df6 <SSD1306_Clear>

		  }
		  break;
 8001f3c:	e267      	b.n	800240e <main+0x5e6>
	  case PREPARADO:
		  SSD1306_DrawBitmap(0, 0, LOGO, 128, 64, 1);
 8001f3e:	2301      	movs	r3, #1
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2340      	movs	r3, #64	; 0x40
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <main+0x1c8>)
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f000 fcc7 	bl	80028e0 <SSD1306_DrawBitmap>
		  SSD1306_GotoXY(70, 0);
 8001f52:	2100      	movs	r1, #0
 8001f54:	2046      	movs	r0, #70	; 0x46
 8001f56:	f000 fe93 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts("'OK'",&Font_11x18,1);
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	4925      	ldr	r1, [pc, #148]	; (8001ff4 <main+0x1cc>)
 8001f5e:	4826      	ldr	r0, [pc, #152]	; (8001ff8 <main+0x1d0>)
 8001f60:	f000 ff24 	bl	8002dac <SSD1306_Puts>
		  SSD1306_GotoXY(80, 27);
 8001f64:	211b      	movs	r1, #27
 8001f66:	2050      	movs	r0, #80	; 0x50
 8001f68:	f000 fe8a 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts("para",&Font_7x10,1);
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	4917      	ldr	r1, [pc, #92]	; (8001fcc <main+0x1a4>)
 8001f70:	4822      	ldr	r0, [pc, #136]	; (8001ffc <main+0x1d4>)
 8001f72:	f000 ff1b 	bl	8002dac <SSD1306_Puts>
		  SSD1306_GotoXY(70, 50);
 8001f76:	2132      	movs	r1, #50	; 0x32
 8001f78:	2046      	movs	r0, #70	; 0x46
 8001f7a:	f000 fe81 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts("iniciar",&Font_7x10,1);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	4912      	ldr	r1, [pc, #72]	; (8001fcc <main+0x1a4>)
 8001f82:	481f      	ldr	r0, [pc, #124]	; (8002000 <main+0x1d8>)
 8001f84:	f000 ff12 	bl	8002dac <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8001f88:	f000 fdd6 	bl	8002b38 <SSD1306_UpdateScreen>
		  if(!contador)
 8001f8c:	4b17      	ldr	r3, [pc, #92]	; (8001fec <main+0x1c4>)
 8001f8e:	881b      	ldrh	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f040 823e 	bne.w	8002412 <main+0x5ea>
		  {
			  estado=MIDIENDO;
 8001f96:	4b14      	ldr	r3, [pc, #80]	; (8001fe8 <main+0x1c0>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	701a      	strb	r2, [r3, #0]
			  //contador=DEMORA3;
			  Resetea_Resultados(&result,&meanfilter,currentSaO2Value);
 8001f9c:	4b19      	ldr	r3, [pc, #100]	; (8002004 <main+0x1dc>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4919      	ldr	r1, [pc, #100]	; (8002008 <main+0x1e0>)
 8001fa4:	4819      	ldr	r0, [pc, #100]	; (800200c <main+0x1e4>)
 8001fa6:	f7ff fbeb 	bl	8001780 <Resetea_Resultados>
		  }
		  break;
 8001faa:	e232      	b.n	8002412 <main+0x5ea>
 8001fac:	20000368 	.word	0x20000368
 8001fb0:	40010c00 	.word	0x40010c00
 8001fb4:	20000228 	.word	0x20000228
 8001fb8:	2000037d 	.word	0x2000037d
 8001fbc:	20000280 	.word	0x20000280
 8001fc0:	20000060 	.word	0x20000060
 8001fc4:	0800bad0 	.word	0x0800bad0
 8001fc8:	0800bad4 	.word	0x0800bad4
 8001fcc:	20000050 	.word	0x20000050
 8001fd0:	0800badc 	.word	0x0800badc
 8001fd4:	20000798 	.word	0x20000798
 8001fd8:	2000079c 	.word	0x2000079c
 8001fdc:	0800baec 	.word	0x0800baec
 8001fe0:	200009cc 	.word	0x200009cc
 8001fe4:	0800bafc 	.word	0x0800bafc
 8001fe8:	2000037c 	.word	0x2000037c
 8001fec:	2000006c 	.word	0x2000006c
 8001ff0:	0800e3a8 	.word	0x0800e3a8
 8001ff4:	20000058 	.word	0x20000058
 8001ff8:	0800bb10 	.word	0x0800bb10
 8001ffc:	0800bb18 	.word	0x0800bb18
 8002000:	0800bb20 	.word	0x0800bb20
 8002004:	20000360 	.word	0x20000360
 8002008:	200002c8 	.word	0x200002c8
 800200c:	2000031c 	.word	0x2000031c
	  case MIDIENDO:

		  Lectura_FIFO(&fifo);
 8002010:	48a1      	ldr	r0, [pc, #644]	; (8002298 <main+0x470>)
 8002012:	f7ff f887 	bl	8001124 <Lectura_FIFO>

		  Filtrado_DC(&fifo.rawIR,&IRprev_w,&ir_dcfiltrado);
 8002016:	4aa1      	ldr	r2, [pc, #644]	; (800229c <main+0x474>)
 8002018:	49a1      	ldr	r1, [pc, #644]	; (80022a0 <main+0x478>)
 800201a:	489f      	ldr	r0, [pc, #636]	; (8002298 <main+0x470>)
 800201c:	f7ff f914 	bl	8001248 <Filtrado_DC>
		  Filtrado_DC(&fifo.rawRED,&REDprev_w,&red_dcfiltrado);
 8002020:	4aa0      	ldr	r2, [pc, #640]	; (80022a4 <main+0x47c>)
 8002022:	49a1      	ldr	r1, [pc, #644]	; (80022a8 <main+0x480>)
 8002024:	48a1      	ldr	r0, [pc, #644]	; (80022ac <main+0x484>)
 8002026:	f7ff f90f 	bl	8001248 <Filtrado_DC>

		  Mean_Median_Filter(ir_dcfiltrado,&meanfilter,&ir_meanfiltrado);
 800202a:	4b9c      	ldr	r3, [pc, #624]	; (800229c <main+0x474>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4aa0      	ldr	r2, [pc, #640]	; (80022b0 <main+0x488>)
 8002030:	49a0      	ldr	r1, [pc, #640]	; (80022b4 <main+0x48c>)
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff f940 	bl	80012b8 <Mean_Median_Filter>
		  Filtro_PasabajosButterworth(&ir_meanfiltrado,&lpbFilterIR,&ir_lpbfiltrado);
 8002038:	4a9f      	ldr	r2, [pc, #636]	; (80022b8 <main+0x490>)
 800203a:	49a0      	ldr	r1, [pc, #640]	; (80022bc <main+0x494>)
 800203c:	489c      	ldr	r0, [pc, #624]	; (80022b0 <main+0x488>)
 800203e:	f7ff f9b3 	bl	80013a8 <Filtro_PasabajosButterworth>

		  irACValueSqSum  +=ir_dcfiltrado * ir_dcfiltrado;
 8002042:	4b96      	ldr	r3, [pc, #600]	; (800229c <main+0x474>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a95      	ldr	r2, [pc, #596]	; (800229c <main+0x474>)
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fe51 	bl	8000cf4 <__aeabi_fmul>
 8002052:	4603      	mov	r3, r0
 8002054:	461a      	mov	r2, r3
 8002056:	4b9a      	ldr	r3, [pc, #616]	; (80022c0 <main+0x498>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4619      	mov	r1, r3
 800205c:	4610      	mov	r0, r2
 800205e:	f7fe fd41 	bl	8000ae4 <__addsf3>
 8002062:	4603      	mov	r3, r0
 8002064:	461a      	mov	r2, r3
 8002066:	4b96      	ldr	r3, [pc, #600]	; (80022c0 <main+0x498>)
 8002068:	601a      	str	r2, [r3, #0]
		  redACValueSqSum +=red_dcfiltrado * red_dcfiltrado;
 800206a:	4b8e      	ldr	r3, [pc, #568]	; (80022a4 <main+0x47c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a8d      	ldr	r2, [pc, #564]	; (80022a4 <main+0x47c>)
 8002070:	6812      	ldr	r2, [r2, #0]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7fe fe3d 	bl	8000cf4 <__aeabi_fmul>
 800207a:	4603      	mov	r3, r0
 800207c:	461a      	mov	r2, r3
 800207e:	4b91      	ldr	r3, [pc, #580]	; (80022c4 <main+0x49c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4619      	mov	r1, r3
 8002084:	4610      	mov	r0, r2
 8002086:	f7fe fd2d 	bl	8000ae4 <__addsf3>
 800208a:	4603      	mov	r3, r0
 800208c:	461a      	mov	r2, r3
 800208e:	4b8d      	ldr	r3, [pc, #564]	; (80022c4 <main+0x49c>)
 8002090:	601a      	str	r2, [r3, #0]
		  samplesRecorded++;
 8002092:	4b8d      	ldr	r3, [pc, #564]	; (80022c8 <main+0x4a0>)
 8002094:	881b      	ldrh	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	b29a      	uxth	r2, r3
 800209a:	4b8b      	ldr	r3, [pc, #556]	; (80022c8 <main+0x4a0>)
 800209c:	801a      	strh	r2, [r3, #0]

		  if( detectPulse( ir_lpbfiltrado, &result ) && samplesRecorded > 0 )
 800209e:	4b86      	ldr	r3, [pc, #536]	; (80022b8 <main+0x490>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	498a      	ldr	r1, [pc, #552]	; (80022cc <main+0x4a4>)
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff f9cf 	bl	8001448 <detectPulse>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 8087 	beq.w	80021c0 <main+0x398>
 80020b2:	4b85      	ldr	r3, [pc, #532]	; (80022c8 <main+0x4a0>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8082 	beq.w	80021c0 <main+0x398>
		    {
		      result.pulseDetected=true;
 80020bc:	4b83      	ldr	r3, [pc, #524]	; (80022cc <main+0x4a4>)
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]
		      pulsesDetected++;
 80020c2:	4b83      	ldr	r3, [pc, #524]	; (80022d0 <main+0x4a8>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	3301      	adds	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <main+0x4a8>)
 80020cc:	801a      	strh	r2, [r3, #0]

		       ratioRMS = log( sqrt(redACValueSqSum/samplesRecorded) ) / log( sqrt(irACValueSqSum/samplesRecorded) );
 80020ce:	4b7d      	ldr	r3, [pc, #500]	; (80022c4 <main+0x49c>)
 80020d0:	681c      	ldr	r4, [r3, #0]
 80020d2:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <main+0x4a0>)
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fdb8 	bl	8000c4c <__aeabi_i2f>
 80020dc:	4603      	mov	r3, r0
 80020de:	4619      	mov	r1, r3
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7fe febb 	bl	8000e5c <__aeabi_fdiv>
 80020e6:	4603      	mov	r3, r0
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe f99d 	bl	8000428 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	4610      	mov	r0, r2
 80020f4:	4619      	mov	r1, r3
 80020f6:	f009 fa53 	bl	800b5a0 <sqrt>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f009 fa1b 	bl	800b53c <log>
 8002106:	4604      	mov	r4, r0
 8002108:	460d      	mov	r5, r1
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <main+0x498>)
 800210c:	681e      	ldr	r6, [r3, #0]
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <main+0x4a0>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fd9a 	bl	8000c4c <__aeabi_i2f>
 8002118:	4603      	mov	r3, r0
 800211a:	4619      	mov	r1, r3
 800211c:	4630      	mov	r0, r6
 800211e:	f7fe fe9d 	bl	8000e5c <__aeabi_fdiv>
 8002122:	4603      	mov	r3, r0
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f97f 	bl	8000428 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f009 fa35 	bl	800b5a0 <sqrt>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f009 f9fd 	bl	800b53c <log>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4620      	mov	r0, r4
 8002148:	4629      	mov	r1, r5
 800214a:	f7fe faef 	bl	800072c <__aeabi_ddiv>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4610      	mov	r0, r2
 8002154:	4619      	mov	r1, r3
 8002156:	f7fe fc6f 	bl	8000a38 <__aeabi_d2f>
 800215a:	4603      	mov	r3, r0
 800215c:	4a5d      	ldr	r2, [pc, #372]	; (80022d4 <main+0x4ac>)
 800215e:	6013      	str	r3, [r2, #0]
		      if( debug == true )
		      {
		        //Serial.print("RMS Ratio: ");
		        //Serial.println(ratioRMS);
		      }
		      	  currentSaO2Value = 110.0 - 18.0 * ratioRMS;
 8002160:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <main+0x4ac>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe f95f 	bl	8000428 <__aeabi_f2d>
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	4b5a      	ldr	r3, [pc, #360]	; (80022d8 <main+0x4b0>)
 8002170:	f7fe f9b2 	bl	80004d8 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	f04f 0000 	mov.w	r0, #0
 800217c:	4957      	ldr	r1, [pc, #348]	; (80022dc <main+0x4b4>)
 800217e:	f7fd fff3 	bl	8000168 <__aeabi_dsub>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fc55 	bl	8000a38 <__aeabi_d2f>
 800218e:	4603      	mov	r3, r0
 8002190:	4a53      	ldr	r2, [pc, #332]	; (80022e0 <main+0x4b8>)
 8002192:	6013      	str	r3, [r2, #0]
		          result.SaO2 = currentSaO2Value;
 8002194:	4b52      	ldr	r3, [pc, #328]	; (80022e0 <main+0x4b8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4c      	ldr	r2, [pc, #304]	; (80022cc <main+0x4a4>)
 800219a:	6153      	str	r3, [r2, #20]

		          if( pulsesDetected % RESET_SPO2_EVERY_N_PULSES == 0)
 800219c:	4b4c      	ldr	r3, [pc, #304]	; (80022d0 <main+0x4a8>)
 800219e:	881b      	ldrh	r3, [r3, #0]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10a      	bne.n	80021c0 <main+0x398>
		          {
		            irACValueSqSum = 0;
 80021aa:	4b45      	ldr	r3, [pc, #276]	; (80022c0 <main+0x498>)
 80021ac:	f04f 0200 	mov.w	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
		            redACValueSqSum = 0;
 80021b2:	4b44      	ldr	r3, [pc, #272]	; (80022c4 <main+0x49c>)
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]
		            samplesRecorded = 0;
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <main+0x4a0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	801a      	strh	r2, [r3, #0]
		          }
		     }
		  Balance_Intensidades( REDprev_w, IRprev_w);
 80021c0:	4b39      	ldr	r3, [pc, #228]	; (80022a8 <main+0x480>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a36      	ldr	r2, [pc, #216]	; (80022a0 <main+0x478>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	4611      	mov	r1, r2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f7ff fa46 	bl	800165c <Balance_Intensidades>

		  //result.heartBPM = currentBPM;
		  result.irCardiogram = lpbFilterIR.result;
 80021d0:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <main+0x494>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <main+0x4a4>)
 80021d6:	6093      	str	r3, [r2, #8]
		  result.irDcValue = IRprev_w;
 80021d8:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <main+0x478>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a3b      	ldr	r2, [pc, #236]	; (80022cc <main+0x4a4>)
 80021de:	60d3      	str	r3, [r2, #12]
		  result.redDcValue = REDprev_w;
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <main+0x480>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a39      	ldr	r2, [pc, #228]	; (80022cc <main+0x4a4>)
 80021e6:	6113      	str	r3, [r2, #16]
		  //result.lastBeatThreshold = lastBeatThreshold;
		  result.dcFilteredIR = ir_dcfiltrado;
 80021e8:	4b2c      	ldr	r3, [pc, #176]	; (800229c <main+0x474>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a37      	ldr	r2, [pc, #220]	; (80022cc <main+0x4a4>)
 80021ee:	61d3      	str	r3, [r2, #28]
		  result.dcFilteredRed = red_dcfiltrado;
 80021f0:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <main+0x47c>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a35      	ldr	r2, [pc, #212]	; (80022cc <main+0x4a4>)
 80021f6:	6213      	str	r3, [r2, #32]


		  //if(!cuenta)
		  	// {
		  			  estado=PRESENTACION;
 80021f8:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <main+0x4bc>)
 80021fa:	2203      	movs	r2, #3
 80021fc:	701a      	strb	r2, [r3, #0]
		  			  contador=DEMORA3;
 80021fe:	4b3a      	ldr	r3, [pc, #232]	; (80022e8 <main+0x4c0>)
 8002200:	221b      	movs	r2, #27
 8002202:	801a      	strh	r2, [r3, #0]
		  			  cuenta=0;
 8002204:	4b39      	ldr	r3, [pc, #228]	; (80022ec <main+0x4c4>)
 8002206:	2200      	movs	r2, #0
 8002208:	801a      	strh	r2, [r3, #0]
		  			  //SSD1306_Clear();
		  	// }
		  if(!contador && flag_1)
 800220a:	4b37      	ldr	r3, [pc, #220]	; (80022e8 <main+0x4c0>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d115      	bne.n	800223e <main+0x416>
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <main+0x4c8>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d011      	beq.n	800223e <main+0x416>
		  {
			  HAL_UART_Transmit_IT(&huart2,mensaje_1, strlen((char*)mensaje_1));
 800221a:	4836      	ldr	r0, [pc, #216]	; (80022f4 <main+0x4cc>)
 800221c:	f7fd ff98 	bl	8000150 <strlen>
 8002220:	4603      	mov	r3, r0
 8002222:	b29b      	uxth	r3, r3
 8002224:	461a      	mov	r2, r3
 8002226:	4933      	ldr	r1, [pc, #204]	; (80022f4 <main+0x4cc>)
 8002228:	4833      	ldr	r0, [pc, #204]	; (80022f8 <main+0x4d0>)
 800222a:	f005 fb6a 	bl	8007902 <HAL_UART_Transmit_IT>
			  contador=DEMORA;
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <main+0x4c0>)
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	801a      	strh	r2, [r3, #0]
			  flag_1=0;
 8002236:	4b2e      	ldr	r3, [pc, #184]	; (80022f0 <main+0x4c8>)
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);

				if (byte == 'b')
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
			}
		  break;
 800223c:	e0eb      	b.n	8002416 <main+0x5ee>
		  else if (!contador && !flag_1){
 800223e:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <main+0x4c0>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	2b00      	cmp	r3, #0
 8002244:	f040 80e7 	bne.w	8002416 <main+0x5ee>
 8002248:	4b29      	ldr	r3, [pc, #164]	; (80022f0 <main+0x4c8>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f083 0301 	eor.w	r3, r3, #1
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80df 	beq.w	8002416 <main+0x5ee>
			  HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 8002258:	2201      	movs	r2, #1
 800225a:	4928      	ldr	r1, [pc, #160]	; (80022fc <main+0x4d4>)
 800225c:	4826      	ldr	r0, [pc, #152]	; (80022f8 <main+0x4d0>)
 800225e:	f005 fb94 	bl	800798a <HAL_UART_Receive_IT>
			  contador=DEMORA;
 8002262:	4b21      	ldr	r3, [pc, #132]	; (80022e8 <main+0x4c0>)
 8002264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002268:	801a      	strh	r2, [r3, #0]
				if (byte == 'a')
 800226a:	4b24      	ldr	r3, [pc, #144]	; (80022fc <main+0x4d4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b61      	cmp	r3, #97	; 0x61
 8002270:	d105      	bne.n	800227e <main+0x456>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002278:	4821      	ldr	r0, [pc, #132]	; (8002300 <main+0x4d8>)
 800227a:	f001 fc13 	bl	8003aa4 <HAL_GPIO_WritePin>
				if (byte == 'b')
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <main+0x4d4>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b62      	cmp	r3, #98	; 0x62
 8002284:	f040 80c7 	bne.w	8002416 <main+0x5ee>
					HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002288:	2201      	movs	r2, #1
 800228a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800228e:	481c      	ldr	r0, [pc, #112]	; (8002300 <main+0x4d8>)
 8002290:	f001 fc08 	bl	8003aa4 <HAL_GPIO_WritePin>
		  break;
 8002294:	e0bf      	b.n	8002416 <main+0x5ee>
 8002296:	bf00      	nop
 8002298:	200002c4 	.word	0x200002c4
 800229c:	20000348 	.word	0x20000348
 80022a0:	20000340 	.word	0x20000340
 80022a4:	2000034c 	.word	0x2000034c
 80022a8:	20000344 	.word	0x20000344
 80022ac:	200002c6 	.word	0x200002c6
 80022b0:	20000350 	.word	0x20000350
 80022b4:	200002c8 	.word	0x200002c8
 80022b8:	20000354 	.word	0x20000354
 80022bc:	20000310 	.word	0x20000310
 80022c0:	20000358 	.word	0x20000358
 80022c4:	2000035c 	.word	0x2000035c
 80022c8:	20000378 	.word	0x20000378
 80022cc:	2000031c 	.word	0x2000031c
 80022d0:	2000037a 	.word	0x2000037a
 80022d4:	20000364 	.word	0x20000364
 80022d8:	40320000 	.word	0x40320000
 80022dc:	405b8000 	.word	0x405b8000
 80022e0:	20000360 	.word	0x20000360
 80022e4:	2000037c 	.word	0x2000037c
 80022e8:	2000006c 	.word	0x2000006c
 80022ec:	2000006e 	.word	0x2000006e
 80022f0:	20000083 	.word	0x20000083
 80022f4:	20000070 	.word	0x20000070
 80022f8:	20000280 	.word	0x20000280
 80022fc:	2000037d 	.word	0x2000037d
 8002300:	40011000 	.word	0x40011000
	  case PRESENTACION:
		  if(result.pulseDetected == true)
 8002304:	4b46      	ldr	r3, [pc, #280]	; (8002420 <main+0x5f8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d075      	beq.n	80023f8 <main+0x5d0>
		  {
		  buf2=(uint8_t)result.SaO2;
 800230c:	4b44      	ldr	r3, [pc, #272]	; (8002420 <main+0x5f8>)
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	4618      	mov	r0, r3
 8002312:	f7fe feb5 	bl	8001080 <__aeabi_f2uiz>
 8002316:	4603      	mov	r3, r0
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4b42      	ldr	r3, [pc, #264]	; (8002424 <main+0x5fc>)
 800231c:	701a      	strb	r2, [r3, #0]
		  buf1=(uint8_t)result.heartBPM;
 800231e:	4b40      	ldr	r3, [pc, #256]	; (8002420 <main+0x5f8>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe feac 	bl	8001080 <__aeabi_f2uiz>
 8002328:	4603      	mov	r3, r0
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b3e      	ldr	r3, [pc, #248]	; (8002428 <main+0x600>)
 800232e:	701a      	strb	r2, [r3, #0]
		  char buffer_bpm[5]={0};
 8002330:	2300      	movs	r3, #0
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	2300      	movs	r3, #0
 8002336:	743b      	strb	r3, [r7, #16]
		  char buffer_SO2[5]={0};
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	2300      	movs	r3, #0
 800233e:	723b      	strb	r3, [r7, #8]

		  //buf1=56;
		  //buf2=94;
		  //itoa(buf1,buffer_bpm,5);
		  //itoa(buf2,buffer_SO2,5);
		  sprintf(buffer_bpm,"%u",buf1);
 8002340:	4b39      	ldr	r3, [pc, #228]	; (8002428 <main+0x600>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4938      	ldr	r1, [pc, #224]	; (800242c <main+0x604>)
 800234c:	4618      	mov	r0, r3
 800234e:	f008 fc7b 	bl	800ac48 <siprintf>
		  sprintf(buffer_SO2,"%u",buf2);
 8002352:	4b34      	ldr	r3, [pc, #208]	; (8002424 <main+0x5fc>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	461a      	mov	r2, r3
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4934      	ldr	r1, [pc, #208]	; (800242c <main+0x604>)
 800235c:	4618      	mov	r0, r3
 800235e:	f008 fc73 	bl	800ac48 <siprintf>

		  //buffer_bpm[0]=5;
		  //buffer_bpm[1]=6;
		  SSD1306_Clear();
 8002362:	f000 fd48 	bl	8002df6 <SSD1306_Clear>
		  SSD1306_GotoXY(10, 5);
 8002366:	2105      	movs	r1, #5
 8002368:	200a      	movs	r0, #10
 800236a:	f000 fc89 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts("BPM:",&Font_11x18,1);
 800236e:	2201      	movs	r2, #1
 8002370:	492f      	ldr	r1, [pc, #188]	; (8002430 <main+0x608>)
 8002372:	4830      	ldr	r0, [pc, #192]	; (8002434 <main+0x60c>)
 8002374:	f000 fd1a 	bl	8002dac <SSD1306_Puts>
		  SSD1306_GotoXY(70, 5);
 8002378:	2105      	movs	r1, #5
 800237a:	2046      	movs	r0, #70	; 0x46
 800237c:	f000 fc80 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts(buffer_bpm,&Font_11x18,1);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	2201      	movs	r2, #1
 8002386:	492a      	ldr	r1, [pc, #168]	; (8002430 <main+0x608>)
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fd0f 	bl	8002dac <SSD1306_Puts>
		  //SSD1306_Putc(buf1, &Font_11x18, 1);
		  SSD1306_GotoXY(10, 35);
 800238e:	2123      	movs	r1, #35	; 0x23
 8002390:	200a      	movs	r0, #10
 8002392:	f000 fc75 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts("SO2:",&Font_11x18,1);
 8002396:	2201      	movs	r2, #1
 8002398:	4925      	ldr	r1, [pc, #148]	; (8002430 <main+0x608>)
 800239a:	4827      	ldr	r0, [pc, #156]	; (8002438 <main+0x610>)
 800239c:	f000 fd06 	bl	8002dac <SSD1306_Puts>
		  SSD1306_GotoXY(70, 35);
 80023a0:	2123      	movs	r1, #35	; 0x23
 80023a2:	2046      	movs	r0, #70	; 0x46
 80023a4:	f000 fc6c 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts(buffer_SO2,&Font_11x18,1);
 80023a8:	1d3b      	adds	r3, r7, #4
 80023aa:	2201      	movs	r2, #1
 80023ac:	4920      	ldr	r1, [pc, #128]	; (8002430 <main+0x608>)
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fcfc 	bl	8002dac <SSD1306_Puts>
		  //SSD1306_Putc(buf2, &Font_11x18, 1);
		  SSD1306_GotoXY(90, 35);
 80023b4:	2123      	movs	r1, #35	; 0x23
 80023b6:	205a      	movs	r0, #90	; 0x5a
 80023b8:	f000 fc62 	bl	8002c80 <SSD1306_GotoXY>
		  SSD1306_Puts(" %",&Font_11x18,1);
 80023bc:	2201      	movs	r2, #1
 80023be:	491c      	ldr	r1, [pc, #112]	; (8002430 <main+0x608>)
 80023c0:	481e      	ldr	r0, [pc, #120]	; (800243c <main+0x614>)
 80023c2:	f000 fcf3 	bl	8002dac <SSD1306_Puts>

		  SSD1306_UpdateScreen();
 80023c6:	f000 fbb7 	bl	8002b38 <SSD1306_UpdateScreen>
		  Resetea_Resultados(&result,&meanfilter,currentSaO2Value);
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <main+0x618>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	461a      	mov	r2, r3
 80023d0:	491c      	ldr	r1, [pc, #112]	; (8002444 <main+0x61c>)
 80023d2:	4813      	ldr	r0, [pc, #76]	; (8002420 <main+0x5f8>)
 80023d4:	f7ff f9d4 	bl	8001780 <Resetea_Resultados>
		  ir_dcfiltrado=0;
 80023d8:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <main+0x620>)
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	601a      	str	r2, [r3, #0]
		  ir_lpbfiltrado=0;
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <main+0x624>)
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
		  red_dcfiltrado=0;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <main+0x628>)
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
		  REDprev_w=0;
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <main+0x62c>)
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
		  }
		  if(!contador)
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <main+0x630>)
 80023fa:	881b      	ldrh	r3, [r3, #0]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10c      	bne.n	800241a <main+0x5f2>
		  {
			  estado=MIDIENDO;
 8002400:	4b16      	ldr	r3, [pc, #88]	; (800245c <main+0x634>)
 8002402:	2202      	movs	r2, #2
 8002404:	701a      	strb	r2, [r3, #0]
			  contador=0;
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <main+0x630>)
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
				  flag_HR_ON=1;
				  Inicio_Heart_Rate();
			  }
			  */
		  }
		  break;
 800240c:	e005      	b.n	800241a <main+0x5f2>
		  break;
 800240e:	bf00      	nop
 8002410:	e570      	b.n	8001ef4 <main+0xcc>
		  break;
 8002412:	bf00      	nop
 8002414:	e56e      	b.n	8001ef4 <main+0xcc>
		  break;
 8002416:	bf00      	nop
 8002418:	e56c      	b.n	8001ef4 <main+0xcc>
		  break;
 800241a:	bf00      	nop
	  switch(estado){
 800241c:	e56a      	b.n	8001ef4 <main+0xcc>
 800241e:	bf00      	nop
 8002420:	2000031c 	.word	0x2000031c
 8002424:	20000380 	.word	0x20000380
 8002428:	2000037f 	.word	0x2000037f
 800242c:	0800bb28 	.word	0x0800bb28
 8002430:	20000058 	.word	0x20000058
 8002434:	0800bb2c 	.word	0x0800bb2c
 8002438:	0800bb34 	.word	0x0800bb34
 800243c:	0800bb3c 	.word	0x0800bb3c
 8002440:	20000360 	.word	0x20000360
 8002444:	200002c8 	.word	0x200002c8
 8002448:	20000348 	.word	0x20000348
 800244c:	20000354 	.word	0x20000354
 8002450:	2000034c 	.word	0x2000034c
 8002454:	20000344 	.word	0x20000344
 8002458:	2000006c 	.word	0x2000006c
 800245c:	2000037c 	.word	0x2000037c

08002460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b090      	sub	sp, #64	; 0x40
 8002464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002466:	f107 0318 	add.w	r3, r7, #24
 800246a:	2228      	movs	r2, #40	; 0x28
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f008 fbe2 	bl	800ac38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002474:	1d3b      	adds	r3, r7, #4
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002482:	2301      	movs	r3, #1
 8002484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002486:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800248a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002490:	2301      	movs	r3, #1
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002494:	2302      	movs	r3, #2
 8002496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800249c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800249e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 ffc5 	bl	8006438 <HAL_RCC_OscConfig>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80024b4:	f000 f9d0 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024b8:	230f      	movs	r3, #15
 80024ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024bc:	2302      	movs	r3, #2
 80024be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024c0:	2300      	movs	r3, #0
 80024c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2102      	movs	r1, #2
 80024d2:	4618      	mov	r0, r3
 80024d4:	f004 fa32 	bl	800693c <HAL_RCC_ClockConfig>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80024de:	f000 f9bb 	bl	8002858 <Error_Handler>
  }
}
 80024e2:	bf00      	nop
 80024e4:	3740      	adds	r7, #64	; 0x40
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
	...

080024ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <MX_I2C1_Init+0x50>)
 80024f2:	4a13      	ldr	r2, [pc, #76]	; (8002540 <MX_I2C1_Init+0x54>)
 80024f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <MX_I2C1_Init+0x50>)
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <MX_I2C1_Init+0x58>)
 80024fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024fc:	4b0f      	ldr	r3, [pc, #60]	; (800253c <MX_I2C1_Init+0x50>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <MX_I2C1_Init+0x50>)
 8002504:	2200      	movs	r2, #0
 8002506:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <MX_I2C1_Init+0x50>)
 800250a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800250e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <MX_I2C1_Init+0x50>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <MX_I2C1_Init+0x50>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <MX_I2C1_Init+0x50>)
 800251e:	2200      	movs	r2, #0
 8002520:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <MX_I2C1_Init+0x50>)
 8002524:	2200      	movs	r2, #0
 8002526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	; (800253c <MX_I2C1_Init+0x50>)
 800252a:	f001 fad3 	bl	8003ad4 <HAL_I2C_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002534:	f000 f990 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000180 	.word	0x20000180
 8002540:	40005400 	.word	0x40005400
 8002544:	000186a0 	.word	0x000186a0

08002548 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800254c:	4b12      	ldr	r3, [pc, #72]	; (8002598 <MX_I2C2_Init+0x50>)
 800254e:	4a13      	ldr	r2, [pc, #76]	; (800259c <MX_I2C2_Init+0x54>)
 8002550:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002552:	4b11      	ldr	r3, [pc, #68]	; (8002598 <MX_I2C2_Init+0x50>)
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <MX_I2C2_Init+0x58>)
 8002556:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002558:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <MX_I2C2_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <MX_I2C2_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002564:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <MX_I2C2_Init+0x50>)
 8002566:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800256a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800256c:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <MX_I2C2_Init+0x50>)
 800256e:	2200      	movs	r2, #0
 8002570:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <MX_I2C2_Init+0x50>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002578:	4b07      	ldr	r3, [pc, #28]	; (8002598 <MX_I2C2_Init+0x50>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <MX_I2C2_Init+0x50>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002584:	4804      	ldr	r0, [pc, #16]	; (8002598 <MX_I2C2_Init+0x50>)
 8002586:	f001 faa5 	bl	8003ad4 <HAL_I2C_Init>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002590:	f000 f962 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200001d4 	.word	0x200001d4
 800259c:	40005800 	.word	0x40005800
 80025a0:	00061a80 	.word	0x00061a80

080025a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80025a8:	4b17      	ldr	r3, [pc, #92]	; (8002608 <MX_SPI2_Init+0x64>)
 80025aa:	4a18      	ldr	r2, [pc, #96]	; (800260c <MX_SPI2_Init+0x68>)
 80025ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <MX_SPI2_Init+0x64>)
 80025b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <MX_SPI2_Init+0x64>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80025bc:	4b12      	ldr	r3, [pc, #72]	; (8002608 <MX_SPI2_Init+0x64>)
 80025be:	2200      	movs	r2, #0
 80025c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025c2:	4b11      	ldr	r3, [pc, #68]	; (8002608 <MX_SPI2_Init+0x64>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c8:	4b0f      	ldr	r3, [pc, #60]	; (8002608 <MX_SPI2_Init+0x64>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80025ce:	4b0e      	ldr	r3, [pc, #56]	; (8002608 <MX_SPI2_Init+0x64>)
 80025d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025d6:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <MX_SPI2_Init+0x64>)
 80025d8:	2200      	movs	r2, #0
 80025da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <MX_SPI2_Init+0x64>)
 80025de:	2200      	movs	r2, #0
 80025e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <MX_SPI2_Init+0x64>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e8:	4b07      	ldr	r3, [pc, #28]	; (8002608 <MX_SPI2_Init+0x64>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80025ee:	4b06      	ldr	r3, [pc, #24]	; (8002608 <MX_SPI2_Init+0x64>)
 80025f0:	220a      	movs	r2, #10
 80025f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80025f4:	4804      	ldr	r0, [pc, #16]	; (8002608 <MX_SPI2_Init+0x64>)
 80025f6:	f004 fb39 	bl	8006c6c <HAL_SPI_Init>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002600:	f000 f92a 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002604:	bf00      	nop
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000228 	.word	0x20000228
 800260c:	40003800 	.word	0x40003800

08002610 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
	__USART2_CLK_ENABLE();
 8002616:	4b1c      	ldr	r3, [pc, #112]	; (8002688 <MX_USART2_UART_Init+0x78>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <MX_USART2_UART_Init+0x78>)
 800261c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002620:	61d3      	str	r3, [r2, #28]
 8002622:	4b19      	ldr	r3, [pc, #100]	; (8002688 <MX_USART2_UART_Init+0x78>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002630:	4a17      	ldr	r2, [pc, #92]	; (8002690 <MX_USART2_UART_Init+0x80>)
 8002632:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002634:	4b15      	ldr	r3, [pc, #84]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002636:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800263a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <MX_USART2_UART_Init+0x7c>)
 800263e:	2200      	movs	r2, #0
 8002640:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002644:	2200      	movs	r2, #0
 8002646:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <MX_USART2_UART_Init+0x7c>)
 800264a:	2200      	movs	r2, #0
 800264c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800264e:	4b0f      	ldr	r3, [pc, #60]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002650:	220c      	movs	r2, #12
 8002652:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002654:	4b0d      	ldr	r3, [pc, #52]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002656:	2200      	movs	r2, #0
 8002658:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800265a:	4b0c      	ldr	r3, [pc, #48]	; (800268c <MX_USART2_UART_Init+0x7c>)
 800265c:	2200      	movs	r2, #0
 800265e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002660:	480a      	ldr	r0, [pc, #40]	; (800268c <MX_USART2_UART_Init+0x7c>)
 8002662:	f005 f86f 	bl	8007744 <HAL_UART_Init>
 8002666:	4603      	mov	r3, r0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <MX_USART2_UART_Init+0x60>
  {
    Error_Handler();
 800266c:	f000 f8f4 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2026      	movs	r0, #38	; 0x26
 8002676:	f000 ff9e 	bl	80035b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800267a:	2026      	movs	r0, #38	; 0x26
 800267c:	f000 ffb7 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40021000 	.word	0x40021000
 800268c:	20000280 	.word	0x20000280
 8002690:	40004400 	.word	0x40004400

08002694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b088      	sub	sp, #32
 8002698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269a:	f107 0310 	add.w	r3, r7, #16
 800269e:	2200      	movs	r2, #0
 80026a0:	601a      	str	r2, [r3, #0]
 80026a2:	605a      	str	r2, [r3, #4]
 80026a4:	609a      	str	r2, [r3, #8]
 80026a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <MX_GPIO_Init+0xec>)
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	4a34      	ldr	r2, [pc, #208]	; (8002780 <MX_GPIO_Init+0xec>)
 80026ae:	f043 0310 	orr.w	r3, r3, #16
 80026b2:	6193      	str	r3, [r2, #24]
 80026b4:	4b32      	ldr	r3, [pc, #200]	; (8002780 <MX_GPIO_Init+0xec>)
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	60fb      	str	r3, [r7, #12]
 80026be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c0:	4b2f      	ldr	r3, [pc, #188]	; (8002780 <MX_GPIO_Init+0xec>)
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <MX_GPIO_Init+0xec>)
 80026c6:	f043 0320 	orr.w	r3, r3, #32
 80026ca:	6193      	str	r3, [r2, #24]
 80026cc:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <MX_GPIO_Init+0xec>)
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	f003 0320 	and.w	r3, r3, #32
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d8:	4b29      	ldr	r3, [pc, #164]	; (8002780 <MX_GPIO_Init+0xec>)
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	4a28      	ldr	r2, [pc, #160]	; (8002780 <MX_GPIO_Init+0xec>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6193      	str	r3, [r2, #24]
 80026e4:	4b26      	ldr	r3, [pc, #152]	; (8002780 <MX_GPIO_Init+0xec>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b23      	ldr	r3, [pc, #140]	; (8002780 <MX_GPIO_Init+0xec>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <MX_GPIO_Init+0xec>)
 80026f6:	f043 0308 	orr.w	r3, r3, #8
 80026fa:	6193      	str	r3, [r2, #24]
 80026fc:	4b20      	ldr	r3, [pc, #128]	; (8002780 <MX_GPIO_Init+0xec>)
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	603b      	str	r3, [r7, #0]
 8002706:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002708:	2200      	movs	r2, #0
 800270a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800270e:	481d      	ldr	r0, [pc, #116]	; (8002784 <MX_GPIO_Init+0xf0>)
 8002710:	f001 f9c8 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSS_GPIO_Port, SPI2_CSS_Pin, GPIO_PIN_RESET);
 8002714:	2200      	movs	r2, #0
 8002716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271a:	481b      	ldr	r0, [pc, #108]	; (8002788 <MX_GPIO_Init+0xf4>)
 800271c:	f001 f9c2 	bl	8003aa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002724:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2302      	movs	r3, #2
 8002730:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002732:	f107 0310 	add.w	r3, r7, #16
 8002736:	4619      	mov	r1, r3
 8002738:	4812      	ldr	r0, [pc, #72]	; (8002784 <MX_GPIO_Init+0xf0>)
 800273a:	f001 f82f 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800273e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_GPIO_Init+0xf8>)
 8002746:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800274c:	f107 0310 	add.w	r3, r7, #16
 8002750:	4619      	mov	r1, r3
 8002752:	480c      	ldr	r0, [pc, #48]	; (8002784 <MX_GPIO_Init+0xf0>)
 8002754:	f001 f822 	bl	800379c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSS_Pin */
  GPIO_InitStruct.Pin = SPI2_CSS_Pin;
 8002758:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800275c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275e:	2301      	movs	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002766:	2302      	movs	r3, #2
 8002768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSS_GPIO_Port, &GPIO_InitStruct);
 800276a:	f107 0310 	add.w	r3, r7, #16
 800276e:	4619      	mov	r1, r3
 8002770:	4805      	ldr	r0, [pc, #20]	; (8002788 <MX_GPIO_Init+0xf4>)
 8002772:	f001 f813 	bl	800379c <HAL_GPIO_Init>

}
 8002776:	bf00      	nop
 8002778:	3720      	adds	r7, #32
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	40011000 	.word	0x40011000
 8002788:	40010c00 	.word	0x40010c00
 800278c:	10210000 	.word	0x10210000

08002790 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <HAL_IncTick+0x44>)
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <HAL_IncTick+0x48>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4413      	add	r3, r2
 80027a0:	4a0d      	ldr	r2, [pc, #52]	; (80027d8 <HAL_IncTick+0x48>)
 80027a2:	6013      	str	r3, [r2, #0]

  if(contador)
 80027a4:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_IncTick+0x4c>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_IncTick+0x28>
  contador--;
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <HAL_IncTick+0x4c>)
 80027ae:	881b      	ldrh	r3, [r3, #0]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <HAL_IncTick+0x4c>)
 80027b6:	801a      	strh	r2, [r3, #0]

  if(cuenta)
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_IncTick+0x50>)
 80027ba:	881b      	ldrh	r3, [r3, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <HAL_IncTick+0x3c>
  cuenta--;
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_IncTick+0x50>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	3b01      	subs	r3, #1
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_IncTick+0x50>)
 80027ca:	801a      	strh	r2, [r3, #0]
}
 80027cc:	bf00      	nop
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	2000008c 	.word	0x2000008c
 80027d8:	20000790 	.word	0x20000790
 80027dc:	2000006c 	.word	0x2000006c
 80027e0:	2000006e 	.word	0x2000006e

080027e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a15      	ldr	r2, [pc, #84]	; (8002848 <HAL_UART_RxCpltCallback+0x64>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d123      	bne.n	800283e <HAL_UART_RxCpltCallback+0x5a>
	{
		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 80027f6:	2201      	movs	r2, #1
 80027f8:	4914      	ldr	r1, [pc, #80]	; (800284c <HAL_UART_RxCpltCallback+0x68>)
 80027fa:	4815      	ldr	r0, [pc, #84]	; (8002850 <HAL_UART_RxCpltCallback+0x6c>)
 80027fc:	f005 f8c5 	bl	800798a <HAL_UART_Receive_IT>
		//Transmitir byte de nuevo
		HAL_UART_Transmit(&huart2, &byte, sizeof(byte), 100);
 8002800:	2364      	movs	r3, #100	; 0x64
 8002802:	2201      	movs	r2, #1
 8002804:	4911      	ldr	r1, [pc, #68]	; (800284c <HAL_UART_RxCpltCallback+0x68>)
 8002806:	4812      	ldr	r0, [pc, #72]	; (8002850 <HAL_UART_RxCpltCallback+0x6c>)
 8002808:	f004 ffe9 	bl	80077de <HAL_UART_Transmit>
		//Habilito la interrupción
		HAL_UART_Receive_IT(&huart2, &byte, sizeof(byte));
 800280c:	2201      	movs	r2, #1
 800280e:	490f      	ldr	r1, [pc, #60]	; (800284c <HAL_UART_RxCpltCallback+0x68>)
 8002810:	480f      	ldr	r0, [pc, #60]	; (8002850 <HAL_UART_RxCpltCallback+0x6c>)
 8002812:	f005 f8ba 	bl	800798a <HAL_UART_Receive_IT>

		if (byte == 'a')
 8002816:	4b0d      	ldr	r3, [pc, #52]	; (800284c <HAL_UART_RxCpltCallback+0x68>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b61      	cmp	r3, #97	; 0x61
 800281c:	d105      	bne.n	800282a <HAL_UART_RxCpltCallback+0x46>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002824:	480b      	ldr	r0, [pc, #44]	; (8002854 <HAL_UART_RxCpltCallback+0x70>)
 8002826:	f001 f93d 	bl	8003aa4 <HAL_GPIO_WritePin>

		if (byte == 'b')
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <HAL_UART_RxCpltCallback+0x68>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b62      	cmp	r3, #98	; 0x62
 8002830:	d105      	bne.n	800283e <HAL_UART_RxCpltCallback+0x5a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, 1);
 8002832:	2201      	movs	r2, #1
 8002834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002838:	4806      	ldr	r0, [pc, #24]	; (8002854 <HAL_UART_RxCpltCallback+0x70>)
 800283a:	f001 f933 	bl	8003aa4 <HAL_GPIO_WritePin>
	}
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40004400 	.word	0x40004400
 800284c:	2000037d 	.word	0x2000037d
 8002850:	20000280 	.word	0x20000280
 8002854:	40011000 	.word	0x40011000

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	e7fe      	b.n	8002860 <Error_Handler+0x8>

08002862 <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	460a      	mov	r2, r1
 800286c:	71fb      	strb	r3, [r7, #7]
 800286e:	4613      	mov	r3, r2
 8002870:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 8002872:	2226      	movs	r2, #38	; 0x26
 8002874:	2100      	movs	r1, #0
 8002876:	2078      	movs	r0, #120	; 0x78
 8002878:	f000 fb40 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 800287c:	2200      	movs	r2, #0
 800287e:	2100      	movs	r1, #0
 8002880:	2078      	movs	r0, #120	; 0x78
 8002882:	f000 fb3b 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 8002886:	79fb      	ldrb	r3, [r7, #7]
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	2078      	movs	r0, #120	; 0x78
 800288e:	f000 fb35 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 8002892:	2200      	movs	r2, #0
 8002894:	2100      	movs	r1, #0
 8002896:	2078      	movs	r0, #120	; 0x78
 8002898:	f000 fb30 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	461a      	mov	r2, r3
 80028a0:	2100      	movs	r1, #0
 80028a2:	2078      	movs	r0, #120	; 0x78
 80028a4:	f000 fb2a 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80028a8:	2200      	movs	r2, #0
 80028aa:	2100      	movs	r1, #0
 80028ac:	2078      	movs	r0, #120	; 0x78
 80028ae:	f000 fb25 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80028b2:	22ff      	movs	r2, #255	; 0xff
 80028b4:	2100      	movs	r1, #0
 80028b6:	2078      	movs	r0, #120	; 0x78
 80028b8:	f000 fb20 	bl	8002efc <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 80028bc:	222f      	movs	r2, #47	; 0x2f
 80028be:	2100      	movs	r1, #0
 80028c0:	2078      	movs	r0, #120	; 0x78
 80028c2:	f000 fb1b 	bl	8002efc <ssd1306_I2C_Write>
}
 80028c6:	bf00      	nop
 80028c8:	3708      	adds	r7, #8
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80028d2:	222e      	movs	r2, #46	; 0x2e
 80028d4:	2100      	movs	r1, #0
 80028d6:	2078      	movs	r0, #120	; 0x78
 80028d8:	f000 fb10 	bl	8002efc <ssd1306_I2C_Write>
}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}

080028e0 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60ba      	str	r2, [r7, #8]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	81fb      	strh	r3, [r7, #14]
 80028ee:	460b      	mov	r3, r1
 80028f0:	81bb      	strh	r3, [r7, #12]
 80028f2:	4613      	mov	r3, r2
 80028f4:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80028f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028fa:	3307      	adds	r3, #7
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	da00      	bge.n	8002902 <SSD1306_DrawBitmap+0x22>
 8002900:	3307      	adds	r3, #7
 8002902:	10db      	asrs	r3, r3, #3
 8002904:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 800290a:	2300      	movs	r3, #0
 800290c:	82bb      	strh	r3, [r7, #20]
 800290e:	e044      	b.n	800299a <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	827b      	strh	r3, [r7, #18]
 8002914:	e02f      	b.n	8002976 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 8002916:	8a7b      	ldrh	r3, [r7, #18]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002920:	7dfb      	ldrb	r3, [r7, #23]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	75fb      	strb	r3, [r7, #23]
 8002926:	e012      	b.n	800294e <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8002928:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800292c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002930:	fb03 f202 	mul.w	r2, r3, r2
 8002934:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002938:	2b00      	cmp	r3, #0
 800293a:	da00      	bge.n	800293e <SSD1306_DrawBitmap+0x5e>
 800293c:	3307      	adds	r3, #7
 800293e:	10db      	asrs	r3, r3, #3
 8002940:	b21b      	sxth	r3, r3
 8002942:	4413      	add	r3, r2
 8002944:	461a      	mov	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4413      	add	r3, r2
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 800294e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002952:	2b00      	cmp	r3, #0
 8002954:	da09      	bge.n	800296a <SSD1306_DrawBitmap+0x8a>
 8002956:	89fa      	ldrh	r2, [r7, #14]
 8002958:	8a7b      	ldrh	r3, [r7, #18]
 800295a:	4413      	add	r3, r2
 800295c:	b29b      	uxth	r3, r3
 800295e:	89b9      	ldrh	r1, [r7, #12]
 8002960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	4618      	mov	r0, r3
 8002966:	f000 f92d 	bl	8002bc4 <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 800296a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800296e:	b29b      	uxth	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	b29b      	uxth	r3, r3
 8002974:	827b      	strh	r3, [r7, #18]
 8002976:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800297a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800297e:	429a      	cmp	r2, r3
 8002980:	dbc9      	blt.n	8002916 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8002982:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002986:	b29b      	uxth	r3, r3
 8002988:	3301      	adds	r3, #1
 800298a:	b29b      	uxth	r3, r3
 800298c:	82bb      	strh	r3, [r7, #20]
 800298e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002992:	b29b      	uxth	r3, r3
 8002994:	3301      	adds	r3, #1
 8002996:	b29b      	uxth	r3, r3
 8002998:	81bb      	strh	r3, [r7, #12]
 800299a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800299e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	dbb4      	blt.n	8002910 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80029b6:	f000 fa27 	bl	8002e08 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80029ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80029be:	2201      	movs	r2, #1
 80029c0:	2178      	movs	r1, #120	; 0x78
 80029c2:	485b      	ldr	r0, [pc, #364]	; (8002b30 <SSD1306_Init+0x180>)
 80029c4:	f001 fd28 	bl	8004418 <HAL_I2C_IsDeviceReady>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e0a9      	b.n	8002b26 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80029d2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80029d6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029d8:	e002      	b.n	80029e0 <SSD1306_Init+0x30>
		p--;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	3b01      	subs	r3, #1
 80029de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f9      	bne.n	80029da <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80029e6:	22ae      	movs	r2, #174	; 0xae
 80029e8:	2100      	movs	r1, #0
 80029ea:	2078      	movs	r0, #120	; 0x78
 80029ec:	f000 fa86 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80029f0:	2220      	movs	r2, #32
 80029f2:	2100      	movs	r1, #0
 80029f4:	2078      	movs	r0, #120	; 0x78
 80029f6:	f000 fa81 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80029fa:	2210      	movs	r2, #16
 80029fc:	2100      	movs	r1, #0
 80029fe:	2078      	movs	r0, #120	; 0x78
 8002a00:	f000 fa7c 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002a04:	22b0      	movs	r2, #176	; 0xb0
 8002a06:	2100      	movs	r1, #0
 8002a08:	2078      	movs	r0, #120	; 0x78
 8002a0a:	f000 fa77 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002a0e:	22c8      	movs	r2, #200	; 0xc8
 8002a10:	2100      	movs	r1, #0
 8002a12:	2078      	movs	r0, #120	; 0x78
 8002a14:	f000 fa72 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	2078      	movs	r0, #120	; 0x78
 8002a1e:	f000 fa6d 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8002a22:	2210      	movs	r2, #16
 8002a24:	2100      	movs	r1, #0
 8002a26:	2078      	movs	r0, #120	; 0x78
 8002a28:	f000 fa68 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002a2c:	2240      	movs	r2, #64	; 0x40
 8002a2e:	2100      	movs	r1, #0
 8002a30:	2078      	movs	r0, #120	; 0x78
 8002a32:	f000 fa63 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8002a36:	2281      	movs	r2, #129	; 0x81
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2078      	movs	r0, #120	; 0x78
 8002a3c:	f000 fa5e 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002a40:	22ff      	movs	r2, #255	; 0xff
 8002a42:	2100      	movs	r1, #0
 8002a44:	2078      	movs	r0, #120	; 0x78
 8002a46:	f000 fa59 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002a4a:	22a1      	movs	r2, #161	; 0xa1
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	2078      	movs	r0, #120	; 0x78
 8002a50:	f000 fa54 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8002a54:	22a6      	movs	r2, #166	; 0xa6
 8002a56:	2100      	movs	r1, #0
 8002a58:	2078      	movs	r0, #120	; 0x78
 8002a5a:	f000 fa4f 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002a5e:	22a8      	movs	r2, #168	; 0xa8
 8002a60:	2100      	movs	r1, #0
 8002a62:	2078      	movs	r0, #120	; 0x78
 8002a64:	f000 fa4a 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002a68:	223f      	movs	r2, #63	; 0x3f
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	2078      	movs	r0, #120	; 0x78
 8002a6e:	f000 fa45 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002a72:	22a4      	movs	r2, #164	; 0xa4
 8002a74:	2100      	movs	r1, #0
 8002a76:	2078      	movs	r0, #120	; 0x78
 8002a78:	f000 fa40 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8002a7c:	22d3      	movs	r2, #211	; 0xd3
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2078      	movs	r0, #120	; 0x78
 8002a82:	f000 fa3b 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8002a86:	2200      	movs	r2, #0
 8002a88:	2100      	movs	r1, #0
 8002a8a:	2078      	movs	r0, #120	; 0x78
 8002a8c:	f000 fa36 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8002a90:	22d5      	movs	r2, #213	; 0xd5
 8002a92:	2100      	movs	r1, #0
 8002a94:	2078      	movs	r0, #120	; 0x78
 8002a96:	f000 fa31 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8002a9a:	22f0      	movs	r2, #240	; 0xf0
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2078      	movs	r0, #120	; 0x78
 8002aa0:	f000 fa2c 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8002aa4:	22d9      	movs	r2, #217	; 0xd9
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	2078      	movs	r0, #120	; 0x78
 8002aaa:	f000 fa27 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8002aae:	2222      	movs	r2, #34	; 0x22
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	2078      	movs	r0, #120	; 0x78
 8002ab4:	f000 fa22 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8002ab8:	22da      	movs	r2, #218	; 0xda
 8002aba:	2100      	movs	r1, #0
 8002abc:	2078      	movs	r0, #120	; 0x78
 8002abe:	f000 fa1d 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8002ac2:	2212      	movs	r2, #18
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2078      	movs	r0, #120	; 0x78
 8002ac8:	f000 fa18 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8002acc:	22db      	movs	r2, #219	; 0xdb
 8002ace:	2100      	movs	r1, #0
 8002ad0:	2078      	movs	r0, #120	; 0x78
 8002ad2:	f000 fa13 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	2100      	movs	r1, #0
 8002ada:	2078      	movs	r0, #120	; 0x78
 8002adc:	f000 fa0e 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002ae0:	228d      	movs	r2, #141	; 0x8d
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	2078      	movs	r0, #120	; 0x78
 8002ae6:	f000 fa09 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002aea:	2214      	movs	r2, #20
 8002aec:	2100      	movs	r1, #0
 8002aee:	2078      	movs	r0, #120	; 0x78
 8002af0:	f000 fa04 	bl	8002efc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8002af4:	22af      	movs	r2, #175	; 0xaf
 8002af6:	2100      	movs	r1, #0
 8002af8:	2078      	movs	r0, #120	; 0x78
 8002afa:	f000 f9ff 	bl	8002efc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002afe:	222e      	movs	r2, #46	; 0x2e
 8002b00:	2100      	movs	r1, #0
 8002b02:	2078      	movs	r0, #120	; 0x78
 8002b04:	f000 f9fa 	bl	8002efc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002b08:	2000      	movs	r0, #0
 8002b0a:	f000 f843 	bl	8002b94 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002b0e:	f000 f813 	bl	8002b38 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <SSD1306_Init+0x184>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002b18:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <SSD1306_Init+0x184>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002b1e:	4b05      	ldr	r3, [pc, #20]	; (8002b34 <SSD1306_Init+0x184>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8002b24:	2301      	movs	r3, #1
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	200001d4 	.word	0x200001d4
 8002b34:	20000784 	.word	0x20000784

08002b38 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002b3e:	2300      	movs	r3, #0
 8002b40:	71fb      	strb	r3, [r7, #7]
 8002b42:	e01d      	b.n	8002b80 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8002b44:	79fb      	ldrb	r3, [r7, #7]
 8002b46:	3b50      	subs	r3, #80	; 0x50
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	2078      	movs	r0, #120	; 0x78
 8002b50:	f000 f9d4 	bl	8002efc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8002b54:	2200      	movs	r2, #0
 8002b56:	2100      	movs	r1, #0
 8002b58:	2078      	movs	r0, #120	; 0x78
 8002b5a:	f000 f9cf 	bl	8002efc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002b5e:	2210      	movs	r2, #16
 8002b60:	2100      	movs	r1, #0
 8002b62:	2078      	movs	r0, #120	; 0x78
 8002b64:	f000 f9ca 	bl	8002efc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	01db      	lsls	r3, r3, #7
 8002b6c:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <SSD1306_UpdateScreen+0x58>)
 8002b6e:	441a      	add	r2, r3
 8002b70:	2380      	movs	r3, #128	; 0x80
 8002b72:	2140      	movs	r1, #64	; 0x40
 8002b74:	2078      	movs	r0, #120	; 0x78
 8002b76:	f000 f95b 	bl	8002e30 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8002b7a:	79fb      	ldrb	r3, [r7, #7]
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	71fb      	strb	r3, [r7, #7]
 8002b80:	79fb      	ldrb	r3, [r7, #7]
 8002b82:	2b07      	cmp	r3, #7
 8002b84:	d9de      	bls.n	8002b44 <SSD1306_UpdateScreen+0xc>
	}
}
 8002b86:	bf00      	nop
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000384 	.word	0x20000384

08002b94 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <SSD1306_Fill+0x14>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	e000      	b.n	8002baa <SSD1306_Fill+0x16>
 8002ba8:	23ff      	movs	r3, #255	; 0xff
 8002baa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4803      	ldr	r0, [pc, #12]	; (8002bc0 <SSD1306_Fill+0x2c>)
 8002bb2:	f008 f841 	bl	800ac38 <memset>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000384 	.word	0x20000384

08002bc4 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	4603      	mov	r3, r0
 8002bcc:	80fb      	strh	r3, [r7, #6]
 8002bce:	460b      	mov	r3, r1
 8002bd0:	80bb      	strh	r3, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	70fb      	strb	r3, [r7, #3]
	if (
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	2b7f      	cmp	r3, #127	; 0x7f
 8002bda:	d848      	bhi.n	8002c6e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002bdc:	88bb      	ldrh	r3, [r7, #4]
 8002bde:	2b3f      	cmp	r3, #63	; 0x3f
 8002be0:	d845      	bhi.n	8002c6e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8002be2:	4b25      	ldr	r3, [pc, #148]	; (8002c78 <SSD1306_DrawPixel+0xb4>)
 8002be4:	791b      	ldrb	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d006      	beq.n	8002bf8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	bf0c      	ite	eq
 8002bf0:	2301      	moveq	r3, #1
 8002bf2:	2300      	movne	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002bf8:	78fb      	ldrb	r3, [r7, #3]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d11a      	bne.n	8002c34 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	88bb      	ldrh	r3, [r7, #4]
 8002c02:	08db      	lsrs	r3, r3, #3
 8002c04:	b298      	uxth	r0, r3
 8002c06:	4603      	mov	r3, r0
 8002c08:	01db      	lsls	r3, r3, #7
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a1b      	ldr	r2, [pc, #108]	; (8002c7c <SSD1306_DrawPixel+0xb8>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	b25a      	sxtb	r2, r3
 8002c12:	88bb      	ldrh	r3, [r7, #4]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	2101      	movs	r1, #1
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	4313      	orrs	r3, r2
 8002c22:	b259      	sxtb	r1, r3
 8002c24:	88fa      	ldrh	r2, [r7, #6]
 8002c26:	4603      	mov	r3, r0
 8002c28:	01db      	lsls	r3, r3, #7
 8002c2a:	4413      	add	r3, r2
 8002c2c:	b2c9      	uxtb	r1, r1
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <SSD1306_DrawPixel+0xb8>)
 8002c30:	54d1      	strb	r1, [r2, r3]
 8002c32:	e01d      	b.n	8002c70 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002c34:	88fa      	ldrh	r2, [r7, #6]
 8002c36:	88bb      	ldrh	r3, [r7, #4]
 8002c38:	08db      	lsrs	r3, r3, #3
 8002c3a:	b298      	uxth	r0, r3
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	01db      	lsls	r3, r3, #7
 8002c40:	4413      	add	r3, r2
 8002c42:	4a0e      	ldr	r2, [pc, #56]	; (8002c7c <SSD1306_DrawPixel+0xb8>)
 8002c44:	5cd3      	ldrb	r3, [r2, r3]
 8002c46:	b25a      	sxtb	r2, r3
 8002c48:	88bb      	ldrh	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	2101      	movs	r1, #1
 8002c50:	fa01 f303 	lsl.w	r3, r1, r3
 8002c54:	b25b      	sxtb	r3, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	b25b      	sxtb	r3, r3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	b259      	sxtb	r1, r3
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	4603      	mov	r3, r0
 8002c62:	01db      	lsls	r3, r3, #7
 8002c64:	4413      	add	r3, r2
 8002c66:	b2c9      	uxtb	r1, r1
 8002c68:	4a04      	ldr	r2, [pc, #16]	; (8002c7c <SSD1306_DrawPixel+0xb8>)
 8002c6a:	54d1      	strb	r1, [r2, r3]
 8002c6c:	e000      	b.n	8002c70 <SSD1306_DrawPixel+0xac>
		return;
 8002c6e:	bf00      	nop
	}
}
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr
 8002c78:	20000784 	.word	0x20000784
 8002c7c:	20000384 	.word	0x20000384

08002c80 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	460a      	mov	r2, r1
 8002c8a:	80fb      	strh	r3, [r7, #6]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8002c90:	4a05      	ldr	r2, [pc, #20]	; (8002ca8 <SSD1306_GotoXY+0x28>)
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <SSD1306_GotoXY+0x28>)
 8002c98:	88bb      	ldrh	r3, [r7, #4]
 8002c9a:	8053      	strh	r3, [r2, #2]
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000784 	.word	0x20000784

08002cac <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	6039      	str	r1, [r7, #0]
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002cbc:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	4413      	add	r3, r2
	if (
 8002cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8002cca:	dc07      	bgt.n	8002cdc <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002cce:	885b      	ldrh	r3, [r3, #2]
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	785b      	ldrb	r3, [r3, #1]
 8002cd6:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002cd8:	2b3f      	cmp	r3, #63	; 0x3f
 8002cda:	dd01      	ble.n	8002ce0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e05e      	b.n	8002d9e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	e04b      	b.n	8002d7e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	3b20      	subs	r3, #32
 8002cee:	6839      	ldr	r1, [r7, #0]
 8002cf0:	7849      	ldrb	r1, [r1, #1]
 8002cf2:	fb01 f303 	mul.w	r3, r1, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	440b      	add	r3, r1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	4413      	add	r3, r2
 8002d00:	881b      	ldrh	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	e030      	b.n	8002d6c <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d010      	beq.n	8002d3c <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002d1a:	4b23      	ldr	r3, [pc, #140]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d1c:	881a      	ldrh	r2, [r3, #0]
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	b298      	uxth	r0, r3
 8002d26:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d28:	885a      	ldrh	r2, [r3, #2]
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	79ba      	ldrb	r2, [r7, #6]
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7ff ff45 	bl	8002bc4 <SSD1306_DrawPixel>
 8002d3a:	e014      	b.n	8002d66 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002d3c:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d3e:	881a      	ldrh	r2, [r3, #0]
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	4413      	add	r3, r2
 8002d46:	b298      	uxth	r0, r3
 8002d48:	4b17      	ldr	r3, [pc, #92]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d4a:	885a      	ldrh	r2, [r3, #2]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	4413      	add	r3, r2
 8002d52:	b299      	uxth	r1, r3
 8002d54:	79bb      	ldrb	r3, [r7, #6]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	bf0c      	ite	eq
 8002d5a:	2301      	moveq	r3, #1
 8002d5c:	2300      	movne	r3, #0
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	461a      	mov	r2, r3
 8002d62:	f7ff ff2f 	bl	8002bc4 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	613b      	str	r3, [r7, #16]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	461a      	mov	r2, r3
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d3c8      	bcc.n	8002d0a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	785b      	ldrb	r3, [r3, #1]
 8002d82:	461a      	mov	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d3ad      	bcc.n	8002ce6 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	4413      	add	r3, r2
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	4b03      	ldr	r3, [pc, #12]	; (8002da8 <SSD1306_Putc+0xfc>)
 8002d9a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8002d9c:	79fb      	ldrb	r3, [r7, #7]
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3718      	adds	r7, #24
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	20000784 	.word	0x20000784

08002dac <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8002dba:	e012      	b.n	8002de2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	79fa      	ldrb	r2, [r7, #7]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff71 	bl	8002cac <SSD1306_Putc>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	461a      	mov	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d002      	beq.n	8002ddc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	e008      	b.n	8002dee <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3301      	adds	r3, #1
 8002de0:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e8      	bne.n	8002dbc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	781b      	ldrb	r3, [r3, #0]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}

08002df6 <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8002df6:	b580      	push	{r7, lr}
 8002df8:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	f7ff feca 	bl	8002b94 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002e00:	f7ff fe9a 	bl	8002b38 <SSD1306_UpdateScreen>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <ssd1306_I2C_Init+0x24>)
 8002e10:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e12:	e002      	b.n	8002e1a <ssd1306_I2C_Init+0x12>
		p--;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f9      	bne.n	8002e14 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	0003d090 	.word	0x0003d090

08002e30 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002e30:	b590      	push	{r4, r7, lr}
 8002e32:	b0c7      	sub	sp, #284	; 0x11c
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	4604      	mov	r4, r0
 8002e38:	4608      	mov	r0, r1
 8002e3a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002e3e:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8002e42:	600a      	str	r2, [r1, #0]
 8002e44:	4619      	mov	r1, r3
 8002e46:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e4a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002e4e:	4622      	mov	r2, r4
 8002e50:	701a      	strb	r2, [r3, #0]
 8002e52:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e56:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	701a      	strb	r2, [r3, #0]
 8002e5e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e66:	460a      	mov	r2, r1
 8002e68:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002e6a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002e6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e72:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e76:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8002e7a:	7812      	ldrb	r2, [r2, #0]
 8002e7c:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002e84:	e015      	b.n	8002eb2 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8002e86:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e8a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002e8e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	441a      	add	r2, r3
 8002e96:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	7811      	ldrb	r1, [r2, #0]
 8002e9e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ea2:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002ea6:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8002ea8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002eac:	3301      	adds	r3, #1
 8002eae:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8002eb2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8002ebc:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8002ec0:	8812      	ldrh	r2, [r2, #0]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d8df      	bhi.n	8002e86 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8002ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002eca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b299      	uxth	r1, r3
 8002ed2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002ed6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	f107 020c 	add.w	r2, r7, #12
 8002ee4:	200a      	movs	r0, #10
 8002ee6:	9000      	str	r0, [sp, #0]
 8002ee8:	4803      	ldr	r0, [pc, #12]	; (8002ef8 <ssd1306_I2C_WriteMulti+0xc8>)
 8002eea:	f000 ff37 	bl	8003d5c <HAL_I2C_Master_Transmit>
}
 8002eee:	bf00      	nop
 8002ef0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd90      	pop	{r4, r7, pc}
 8002ef8:	200001d4 	.word	0x200001d4

08002efc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	4603      	mov	r3, r0
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	460b      	mov	r3, r1
 8002f08:	71bb      	strb	r3, [r7, #6]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002f0e:	79bb      	ldrb	r3, [r7, #6]
 8002f10:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8002f12:	797b      	ldrb	r3, [r7, #5]
 8002f14:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	b299      	uxth	r1, r3
 8002f1a:	f107 020c 	add.w	r2, r7, #12
 8002f1e:	230a      	movs	r3, #10
 8002f20:	9300      	str	r3, [sp, #0]
 8002f22:	2302      	movs	r3, #2
 8002f24:	4803      	ldr	r0, [pc, #12]	; (8002f34 <ssd1306_I2C_Write+0x38>)
 8002f26:	f000 ff19 	bl	8003d5c <HAL_I2C_Master_Transmit>
}
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	200001d4 	.word	0x200001d4

08002f38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f3e:	4b15      	ldr	r3, [pc, #84]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f40:	699b      	ldr	r3, [r3, #24]
 8002f42:	4a14      	ldr	r2, [pc, #80]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6193      	str	r3, [r2, #24]
 8002f4a:	4b12      	ldr	r3, [pc, #72]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f56:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	4a0e      	ldr	r2, [pc, #56]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f60:	61d3      	str	r3, [r2, #28]
 8002f62:	4b0c      	ldr	r3, [pc, #48]	; (8002f94 <HAL_MspInit+0x5c>)
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	607b      	str	r3, [r7, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002f6e:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_MspInit+0x60>)
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002f7a:	60fb      	str	r3, [r7, #12]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f82:	60fb      	str	r3, [r7, #12]
 8002f84:	4a04      	ldr	r2, [pc, #16]	; (8002f98 <HAL_MspInit+0x60>)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40010000 	.word	0x40010000

08002f9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	; 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0318 	add.w	r3, r7, #24
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a33      	ldr	r2, [pc, #204]	; (8003084 <HAL_I2C_MspInit+0xe8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d12c      	bne.n	8003016 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	4a31      	ldr	r2, [pc, #196]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002fc2:	f043 0308 	orr.w	r3, r3, #8
 8002fc6:	6193      	str	r3, [r2, #24]
 8002fc8:	4b2f      	ldr	r3, [pc, #188]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002fd4:	23c0      	movs	r3, #192	; 0xc0
 8002fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fd8:	2312      	movs	r3, #18
 8002fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe0:	f107 0318 	add.w	r3, r7, #24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4829      	ldr	r0, [pc, #164]	; (800308c <HAL_I2C_MspInit+0xf0>)
 8002fe8:	f000 fbd8 	bl	800379c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002fec:	4b26      	ldr	r3, [pc, #152]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002fee:	69db      	ldr	r3, [r3, #28]
 8002ff0:	4a25      	ldr	r2, [pc, #148]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002ff2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ff6:	61d3      	str	r3, [r2, #28]
 8002ff8:	4b23      	ldr	r3, [pc, #140]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003000:	613b      	str	r3, [r7, #16]
 8003002:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003004:	2200      	movs	r2, #0
 8003006:	2100      	movs	r1, #0
 8003008:	201f      	movs	r0, #31
 800300a:	f000 fad4 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800300e:	201f      	movs	r0, #31
 8003010:	f000 faed 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003014:	e031      	b.n	800307a <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a1d      	ldr	r2, [pc, #116]	; (8003090 <HAL_I2C_MspInit+0xf4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d12c      	bne.n	800307a <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	4a18      	ldr	r2, [pc, #96]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8003026:	f043 0308 	orr.w	r3, r3, #8
 800302a:	6193      	str	r3, [r2, #24]
 800302c:	4b16      	ldr	r3, [pc, #88]	; (8003088 <HAL_I2C_MspInit+0xec>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003038:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800303c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800303e:	2312      	movs	r3, #18
 8003040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003046:	f107 0318 	add.w	r3, r7, #24
 800304a:	4619      	mov	r1, r3
 800304c:	480f      	ldr	r0, [pc, #60]	; (800308c <HAL_I2C_MspInit+0xf0>)
 800304e:	f000 fba5 	bl	800379c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8003058:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800305c:	61d3      	str	r3, [r2, #28]
 800305e:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_I2C_MspInit+0xec>)
 8003060:	69db      	ldr	r3, [r3, #28]
 8003062:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800306a:	2200      	movs	r2, #0
 800306c:	2100      	movs	r1, #0
 800306e:	2021      	movs	r0, #33	; 0x21
 8003070:	f000 faa1 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8003074:	2021      	movs	r0, #33	; 0x21
 8003076:	f000 faba 	bl	80035ee <HAL_NVIC_EnableIRQ>
}
 800307a:	bf00      	nop
 800307c:	3728      	adds	r7, #40	; 0x28
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40005400 	.word	0x40005400
 8003088:	40021000 	.word	0x40021000
 800308c:	40010c00 	.word	0x40010c00
 8003090:	40005800 	.word	0x40005800

08003094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1c      	ldr	r2, [pc, #112]	; (8003120 <HAL_SPI_MspInit+0x8c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d131      	bne.n	8003118 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030b6:	69db      	ldr	r3, [r3, #28]
 80030b8:	4a1a      	ldr	r2, [pc, #104]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030be:	61d3      	str	r3, [r2, #28]
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030c2:	69db      	ldr	r3, [r3, #28]
 80030c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c8:	60fb      	str	r3, [r7, #12]
 80030ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b12      	ldr	r3, [pc, #72]	; (8003124 <HAL_SPI_MspInit+0x90>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	60bb      	str	r3, [r7, #8]
 80030e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80030e4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80030e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ea:	2302      	movs	r3, #2
 80030ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ee:	2303      	movs	r3, #3
 80030f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f2:	f107 0310 	add.w	r3, r7, #16
 80030f6:	4619      	mov	r1, r3
 80030f8:	480b      	ldr	r0, [pc, #44]	; (8003128 <HAL_SPI_MspInit+0x94>)
 80030fa:	f000 fb4f 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80030fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003102:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003108:	2300      	movs	r3, #0
 800310a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310c:	f107 0310 	add.w	r3, r7, #16
 8003110:	4619      	mov	r1, r3
 8003112:	4805      	ldr	r0, [pc, #20]	; (8003128 <HAL_SPI_MspInit+0x94>)
 8003114:	f000 fb42 	bl	800379c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003118:	bf00      	nop
 800311a:	3720      	adds	r7, #32
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40003800 	.word	0x40003800
 8003124:	40021000 	.word	0x40021000
 8003128:	40010c00 	.word	0x40010c00

0800312c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003134:	f107 0310 	add.w	r3, r7, #16
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a1f      	ldr	r2, [pc, #124]	; (80031c4 <HAL_UART_MspInit+0x98>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d137      	bne.n	80031bc <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800314c:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	4a1d      	ldr	r2, [pc, #116]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 8003152:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003156:	61d3      	str	r3, [r2, #28]
 8003158:	4b1b      	ldr	r3, [pc, #108]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	4a17      	ldr	r2, [pc, #92]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	6193      	str	r3, [r2, #24]
 8003170:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_UART_MspInit+0x9c>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	60bb      	str	r3, [r7, #8]
 800317a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800317c:	2304      	movs	r3, #4
 800317e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003184:	2303      	movs	r3, #3
 8003186:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	4619      	mov	r1, r3
 800318e:	480f      	ldr	r0, [pc, #60]	; (80031cc <HAL_UART_MspInit+0xa0>)
 8003190:	f000 fb04 	bl	800379c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003194:	2308      	movs	r3, #8
 8003196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003198:	2300      	movs	r3, #0
 800319a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800319c:	2300      	movs	r3, #0
 800319e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031a0:	f107 0310 	add.w	r3, r7, #16
 80031a4:	4619      	mov	r1, r3
 80031a6:	4809      	ldr	r0, [pc, #36]	; (80031cc <HAL_UART_MspInit+0xa0>)
 80031a8:	f000 faf8 	bl	800379c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031ac:	2200      	movs	r2, #0
 80031ae:	2100      	movs	r1, #0
 80031b0:	2026      	movs	r0, #38	; 0x26
 80031b2:	f000 fa00 	bl	80035b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031b6:	2026      	movs	r0, #38	; 0x26
 80031b8:	f000 fa19 	bl	80035ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80031bc:	bf00      	nop
 80031be:	3720      	adds	r7, #32
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40004400 	.word	0x40004400
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40010800 	.word	0x40010800

080031d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <NMI_Handler+0x4>

080031d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <HardFault_Handler+0x4>

080031dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <MemManage_Handler+0x4>

080031e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031e6:	e7fe      	b.n	80031e6 <BusFault_Handler+0x4>

080031e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031ec:	e7fe      	b.n	80031ec <UsageFault_Handler+0x4>

080031ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	bc80      	pop	{r7}
 8003210:	4770      	bx	lr

08003212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003216:	f7ff fabb 	bl	8002790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800321a:	bf00      	nop
 800321c:	bd80      	pop	{r7, pc}
	...

08003220 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003224:	4802      	ldr	r0, [pc, #8]	; (8003230 <I2C1_EV_IRQHandler+0x10>)
 8003226:	f001 fa25 	bl	8004674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000180 	.word	0x20000180

08003234 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003238:	4802      	ldr	r0, [pc, #8]	; (8003244 <I2C2_EV_IRQHandler+0x10>)
 800323a:	f001 fa1b 	bl	8004674 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 800323e:	bf00      	nop
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	200001d4 	.word	0x200001d4

08003248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800324c:	4802      	ldr	r0, [pc, #8]	; (8003258 <USART2_IRQHandler+0x10>)
 800324e:	f004 fbcd 	bl	80079ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003252:	bf00      	nop
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	20000280 	.word	0x20000280

0800325c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b086      	sub	sp, #24
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003264:	4a14      	ldr	r2, [pc, #80]	; (80032b8 <_sbrk+0x5c>)
 8003266:	4b15      	ldr	r3, [pc, #84]	; (80032bc <_sbrk+0x60>)
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <_sbrk+0x64>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d102      	bne.n	800327e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003278:	4b11      	ldr	r3, [pc, #68]	; (80032c0 <_sbrk+0x64>)
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <_sbrk+0x68>)
 800327c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800327e:	4b10      	ldr	r3, [pc, #64]	; (80032c0 <_sbrk+0x64>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4413      	add	r3, r2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800328c:	f007 fcaa 	bl	800abe4 <__errno>
 8003290:	4603      	mov	r3, r0
 8003292:	220c      	movs	r2, #12
 8003294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	e009      	b.n	80032b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800329c:	4b08      	ldr	r3, [pc, #32]	; (80032c0 <_sbrk+0x64>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032a2:	4b07      	ldr	r3, [pc, #28]	; (80032c0 <_sbrk+0x64>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4413      	add	r3, r2
 80032aa:	4a05      	ldr	r2, [pc, #20]	; (80032c0 <_sbrk+0x64>)
 80032ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032ae:	68fb      	ldr	r3, [r7, #12]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3718      	adds	r7, #24
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20005000 	.word	0x20005000
 80032bc:	00000400 	.word	0x00000400
 80032c0:	2000078c 	.word	0x2000078c
 80032c4:	20000c38 	.word	0x20000c38

080032c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bc80      	pop	{r7}
 80032d2:	4770      	bx	lr

080032d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032d4:	480c      	ldr	r0, [pc, #48]	; (8003308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032d6:	490d      	ldr	r1, [pc, #52]	; (800330c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032d8:	4a0d      	ldr	r2, [pc, #52]	; (8003310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032dc:	e002      	b.n	80032e4 <LoopCopyDataInit>

080032de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032e2:	3304      	adds	r3, #4

080032e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032e8:	d3f9      	bcc.n	80032de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032ea:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032ec:	4c0a      	ldr	r4, [pc, #40]	; (8003318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032f0:	e001      	b.n	80032f6 <LoopFillZerobss>

080032f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032f4:	3204      	adds	r2, #4

080032f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032f8:	d3fb      	bcc.n	80032f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032fa:	f7ff ffe5 	bl	80032c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032fe:	f007 fc77 	bl	800abf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003302:	f7fe fd91 	bl	8001e28 <main>
  bx lr
 8003306:	4770      	bx	lr
  ldr r0, =_sdata
 8003308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800330c:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8003310:	0800e87c 	.word	0x0800e87c
  ldr r2, =_sbss
 8003314:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8003318:	20000c34 	.word	0x20000c34

0800331c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800331c:	e7fe      	b.n	800331c <ADC1_2_IRQHandler>
	...

08003320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003324:	4b08      	ldr	r3, [pc, #32]	; (8003348 <HAL_Init+0x28>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a07      	ldr	r2, [pc, #28]	; (8003348 <HAL_Init+0x28>)
 800332a:	f043 0310 	orr.w	r3, r3, #16
 800332e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003330:	2003      	movs	r0, #3
 8003332:	f000 f935 	bl	80035a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003336:	200f      	movs	r0, #15
 8003338:	f000 f808 	bl	800334c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800333c:	f7ff fdfc 	bl	8002f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40022000 	.word	0x40022000

0800334c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003354:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_InitTick+0x54>)
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	4b12      	ldr	r3, [pc, #72]	; (80033a4 <HAL_InitTick+0x58>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	4619      	mov	r1, r3
 800335e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003362:	fbb3 f3f1 	udiv	r3, r3, r1
 8003366:	fbb2 f3f3 	udiv	r3, r2, r3
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f94d 	bl	800360a <HAL_SYSTICK_Config>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e00e      	b.n	8003398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b0f      	cmp	r3, #15
 800337e:	d80a      	bhi.n	8003396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003380:	2200      	movs	r2, #0
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f000 f915 	bl	80035b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800338c:	4a06      	ldr	r2, [pc, #24]	; (80033a8 <HAL_InitTick+0x5c>)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	e000      	b.n	8003398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
}
 8003398:	4618      	mov	r0, r3
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	20000084 	.word	0x20000084
 80033a4:	2000008c 	.word	0x2000008c
 80033a8:	20000088 	.word	0x20000088

080033ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return uwTick;
 80033b0:	4b02      	ldr	r3, [pc, #8]	; (80033bc <HAL_GetTick+0x10>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	20000790 	.word	0x20000790

080033c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033c8:	f7ff fff0 	bl	80033ac <HAL_GetTick>
 80033cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d005      	beq.n	80033e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033da:	4b0a      	ldr	r3, [pc, #40]	; (8003404 <HAL_Delay+0x44>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4413      	add	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033e6:	bf00      	nop
 80033e8:	f7ff ffe0 	bl	80033ac <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d8f7      	bhi.n	80033e8 <HAL_Delay+0x28>
  {
  }
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	2000008c 	.word	0x2000008c

08003408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0c      	ldr	r3, [pc, #48]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003430:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800343a:	4a04      	ldr	r2, [pc, #16]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	60d3      	str	r3, [r2, #12]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	bc80      	pop	{r7}
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4906      	ldr	r1, [pc, #24]	; (80034a0 <__NVIC_EnableIRQ+0x34>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	e000e100 	.word	0xe000e100

080034a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	db0a      	blt.n	80034ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	490c      	ldr	r1, [pc, #48]	; (80034f0 <__NVIC_SetPriority+0x4c>)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	0112      	lsls	r2, r2, #4
 80034c4:	b2d2      	uxtb	r2, r2
 80034c6:	440b      	add	r3, r1
 80034c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034cc:	e00a      	b.n	80034e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	4908      	ldr	r1, [pc, #32]	; (80034f4 <__NVIC_SetPriority+0x50>)
 80034d4:	79fb      	ldrb	r3, [r7, #7]
 80034d6:	f003 030f 	and.w	r3, r3, #15
 80034da:	3b04      	subs	r3, #4
 80034dc:	0112      	lsls	r2, r2, #4
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	440b      	add	r3, r1
 80034e2:	761a      	strb	r2, [r3, #24]
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bc80      	pop	{r7}
 80034ec:	4770      	bx	lr
 80034ee:	bf00      	nop
 80034f0:	e000e100 	.word	0xe000e100
 80034f4:	e000ed00 	.word	0xe000ed00

080034f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b089      	sub	sp, #36	; 0x24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f1c3 0307 	rsb	r3, r3, #7
 8003512:	2b04      	cmp	r3, #4
 8003514:	bf28      	it	cs
 8003516:	2304      	movcs	r3, #4
 8003518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	3304      	adds	r3, #4
 800351e:	2b06      	cmp	r3, #6
 8003520:	d902      	bls.n	8003528 <NVIC_EncodePriority+0x30>
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	3b03      	subs	r3, #3
 8003526:	e000      	b.n	800352a <NVIC_EncodePriority+0x32>
 8003528:	2300      	movs	r3, #0
 800352a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800352c:	f04f 32ff 	mov.w	r2, #4294967295
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	401a      	ands	r2, r3
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003540:	f04f 31ff 	mov.w	r1, #4294967295
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	fa01 f303 	lsl.w	r3, r1, r3
 800354a:	43d9      	mvns	r1, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003550:	4313      	orrs	r3, r2
         );
}
 8003552:	4618      	mov	r0, r3
 8003554:	3724      	adds	r7, #36	; 0x24
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800356c:	d301      	bcc.n	8003572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800356e:	2301      	movs	r3, #1
 8003570:	e00f      	b.n	8003592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003572:	4a0a      	ldr	r2, [pc, #40]	; (800359c <SysTick_Config+0x40>)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800357a:	210f      	movs	r1, #15
 800357c:	f04f 30ff 	mov.w	r0, #4294967295
 8003580:	f7ff ff90 	bl	80034a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003584:	4b05      	ldr	r3, [pc, #20]	; (800359c <SysTick_Config+0x40>)
 8003586:	2200      	movs	r2, #0
 8003588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800358a:	4b04      	ldr	r3, [pc, #16]	; (800359c <SysTick_Config+0x40>)
 800358c:	2207      	movs	r2, #7
 800358e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	e000e010 	.word	0xe000e010

080035a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff ff2d 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b086      	sub	sp, #24
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	4603      	mov	r3, r0
 80035be:	60b9      	str	r1, [r7, #8]
 80035c0:	607a      	str	r2, [r7, #4]
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035c8:	f7ff ff42 	bl	8003450 <__NVIC_GetPriorityGrouping>
 80035cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7ff ff90 	bl	80034f8 <NVIC_EncodePriority>
 80035d8:	4602      	mov	r2, r0
 80035da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035de:	4611      	mov	r1, r2
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7ff ff5f 	bl	80034a4 <__NVIC_SetPriority>
}
 80035e6:	bf00      	nop
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b082      	sub	sp, #8
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	4603      	mov	r3, r0
 80035f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff35 	bl	800346c <__NVIC_EnableIRQ>
}
 8003602:	bf00      	nop
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7ff ffa2 	bl	800355c <SysTick_Config>
 8003618:	4603      	mov	r3, r0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003634:	2b02      	cmp	r3, #2
 8003636:	d008      	beq.n	800364a <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2204      	movs	r2, #4
 800363c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e020      	b.n	800368c <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020e 	bic.w	r2, r2, #14
 8003658:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0201 	bic.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003672:	2101      	movs	r1, #1
 8003674:	fa01 f202 	lsl.w	r2, r1, r2
 8003678:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800368a:	7bfb      	ldrb	r3, [r7, #15]
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	bc80      	pop	{r7}
 8003694:	4770      	bx	lr
	...

08003698 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d005      	beq.n	80036ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2204      	movs	r2, #4
 80036b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
 80036b8:	e051      	b.n	800375e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f022 020e 	bic.w	r2, r2, #14
 80036c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_DMA_Abort_IT+0xd0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d029      	beq.n	8003738 <HAL_DMA_Abort_IT+0xa0>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_DMA_Abort_IT+0xd4>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Abort_IT+0x9c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a1f      	ldr	r2, [pc, #124]	; (8003770 <HAL_DMA_Abort_IT+0xd8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01a      	beq.n	800372e <HAL_DMA_Abort_IT+0x96>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_DMA_Abort_IT+0xdc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d012      	beq.n	8003728 <HAL_DMA_Abort_IT+0x90>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1c      	ldr	r2, [pc, #112]	; (8003778 <HAL_DMA_Abort_IT+0xe0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d00a      	beq.n	8003722 <HAL_DMA_Abort_IT+0x8a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_DMA_Abort_IT+0xe4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d102      	bne.n	800371c <HAL_DMA_Abort_IT+0x84>
 8003716:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800371a:	e00e      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 800371c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003720:	e00b      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003722:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003726:	e008      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800372c:	e005      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 800372e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003732:	e002      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003734:	2310      	movs	r3, #16
 8003736:	e000      	b.n	800373a <HAL_DMA_Abort_IT+0xa2>
 8003738:	2301      	movs	r3, #1
 800373a:	4a11      	ldr	r2, [pc, #68]	; (8003780 <HAL_DMA_Abort_IT+0xe8>)
 800373c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	4798      	blx	r3
    } 
  }
  return status;
 800375e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40020008 	.word	0x40020008
 800376c:	4002001c 	.word	0x4002001c
 8003770:	40020030 	.word	0x40020030
 8003774:	40020044 	.word	0x40020044
 8003778:	40020058 	.word	0x40020058
 800377c:	4002006c 	.word	0x4002006c
 8003780:	40020000 	.word	0x40020000

08003784 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800379c:	b480      	push	{r7}
 800379e:	b08b      	sub	sp, #44	; 0x2c
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80037aa:	2300      	movs	r3, #0
 80037ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ae:	e169      	b.n	8003a84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80037b0:	2201      	movs	r2, #1
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	fa02 f303 	lsl.w	r3, r2, r3
 80037b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	4013      	ands	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	f040 8158 	bne.w	8003a7e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a9a      	ldr	r2, [pc, #616]	; (8003a3c <HAL_GPIO_Init+0x2a0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d05e      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
 80037d8:	4a98      	ldr	r2, [pc, #608]	; (8003a3c <HAL_GPIO_Init+0x2a0>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d875      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 80037de:	4a98      	ldr	r2, [pc, #608]	; (8003a40 <HAL_GPIO_Init+0x2a4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d058      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
 80037e4:	4a96      	ldr	r2, [pc, #600]	; (8003a40 <HAL_GPIO_Init+0x2a4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d86f      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 80037ea:	4a96      	ldr	r2, [pc, #600]	; (8003a44 <HAL_GPIO_Init+0x2a8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d052      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
 80037f0:	4a94      	ldr	r2, [pc, #592]	; (8003a44 <HAL_GPIO_Init+0x2a8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d869      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 80037f6:	4a94      	ldr	r2, [pc, #592]	; (8003a48 <HAL_GPIO_Init+0x2ac>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d04c      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
 80037fc:	4a92      	ldr	r2, [pc, #584]	; (8003a48 <HAL_GPIO_Init+0x2ac>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d863      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 8003802:	4a92      	ldr	r2, [pc, #584]	; (8003a4c <HAL_GPIO_Init+0x2b0>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d046      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
 8003808:	4a90      	ldr	r2, [pc, #576]	; (8003a4c <HAL_GPIO_Init+0x2b0>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d85d      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 800380e:	2b12      	cmp	r3, #18
 8003810:	d82a      	bhi.n	8003868 <HAL_GPIO_Init+0xcc>
 8003812:	2b12      	cmp	r3, #18
 8003814:	d859      	bhi.n	80038ca <HAL_GPIO_Init+0x12e>
 8003816:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_GPIO_Init+0x80>)
 8003818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381c:	08003897 	.word	0x08003897
 8003820:	08003871 	.word	0x08003871
 8003824:	08003883 	.word	0x08003883
 8003828:	080038c5 	.word	0x080038c5
 800382c:	080038cb 	.word	0x080038cb
 8003830:	080038cb 	.word	0x080038cb
 8003834:	080038cb 	.word	0x080038cb
 8003838:	080038cb 	.word	0x080038cb
 800383c:	080038cb 	.word	0x080038cb
 8003840:	080038cb 	.word	0x080038cb
 8003844:	080038cb 	.word	0x080038cb
 8003848:	080038cb 	.word	0x080038cb
 800384c:	080038cb 	.word	0x080038cb
 8003850:	080038cb 	.word	0x080038cb
 8003854:	080038cb 	.word	0x080038cb
 8003858:	080038cb 	.word	0x080038cb
 800385c:	080038cb 	.word	0x080038cb
 8003860:	08003879 	.word	0x08003879
 8003864:	0800388d 	.word	0x0800388d
 8003868:	4a79      	ldr	r2, [pc, #484]	; (8003a50 <HAL_GPIO_Init+0x2b4>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800386e:	e02c      	b.n	80038ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	623b      	str	r3, [r7, #32]
          break;
 8003876:	e029      	b.n	80038cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	3304      	adds	r3, #4
 800387e:	623b      	str	r3, [r7, #32]
          break;
 8003880:	e024      	b.n	80038cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	3308      	adds	r3, #8
 8003888:	623b      	str	r3, [r7, #32]
          break;
 800388a:	e01f      	b.n	80038cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	330c      	adds	r3, #12
 8003892:	623b      	str	r3, [r7, #32]
          break;
 8003894:	e01a      	b.n	80038cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800389e:	2304      	movs	r3, #4
 80038a0:	623b      	str	r3, [r7, #32]
          break;
 80038a2:	e013      	b.n	80038cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d105      	bne.n	80038b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038ac:	2308      	movs	r3, #8
 80038ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	611a      	str	r2, [r3, #16]
          break;
 80038b6:	e009      	b.n	80038cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80038b8:	2308      	movs	r3, #8
 80038ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69fa      	ldr	r2, [r7, #28]
 80038c0:	615a      	str	r2, [r3, #20]
          break;
 80038c2:	e003      	b.n	80038cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038c4:	2300      	movs	r3, #0
 80038c6:	623b      	str	r3, [r7, #32]
          break;
 80038c8:	e000      	b.n	80038cc <HAL_GPIO_Init+0x130>
          break;
 80038ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038cc:	69bb      	ldr	r3, [r7, #24]
 80038ce:	2bff      	cmp	r3, #255	; 0xff
 80038d0:	d801      	bhi.n	80038d6 <HAL_GPIO_Init+0x13a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	e001      	b.n	80038da <HAL_GPIO_Init+0x13e>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3304      	adds	r3, #4
 80038da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	2bff      	cmp	r3, #255	; 0xff
 80038e0:	d802      	bhi.n	80038e8 <HAL_GPIO_Init+0x14c>
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	e002      	b.n	80038ee <HAL_GPIO_Init+0x152>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	3b08      	subs	r3, #8
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	210f      	movs	r1, #15
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	401a      	ands	r2, r3
 8003900:	6a39      	ldr	r1, [r7, #32]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	fa01 f303 	lsl.w	r3, r1, r3
 8003908:	431a      	orrs	r2, r3
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	2b00      	cmp	r3, #0
 8003918:	f000 80b1 	beq.w	8003a7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800391c:	4b4d      	ldr	r3, [pc, #308]	; (8003a54 <HAL_GPIO_Init+0x2b8>)
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	4a4c      	ldr	r2, [pc, #304]	; (8003a54 <HAL_GPIO_Init+0x2b8>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6193      	str	r3, [r2, #24]
 8003928:	4b4a      	ldr	r3, [pc, #296]	; (8003a54 <HAL_GPIO_Init+0x2b8>)
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	60bb      	str	r3, [r7, #8]
 8003932:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003934:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2bc>)
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	3302      	adds	r3, #2
 800393c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003940:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	220f      	movs	r2, #15
 800394c:	fa02 f303 	lsl.w	r3, r2, r3
 8003950:	43db      	mvns	r3, r3
 8003952:	68fa      	ldr	r2, [r7, #12]
 8003954:	4013      	ands	r3, r2
 8003956:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a40      	ldr	r2, [pc, #256]	; (8003a5c <HAL_GPIO_Init+0x2c0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d013      	beq.n	8003988 <HAL_GPIO_Init+0x1ec>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3f      	ldr	r2, [pc, #252]	; (8003a60 <HAL_GPIO_Init+0x2c4>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00d      	beq.n	8003984 <HAL_GPIO_Init+0x1e8>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3e      	ldr	r2, [pc, #248]	; (8003a64 <HAL_GPIO_Init+0x2c8>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <HAL_GPIO_Init+0x1e4>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3d      	ldr	r2, [pc, #244]	; (8003a68 <HAL_GPIO_Init+0x2cc>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d101      	bne.n	800397c <HAL_GPIO_Init+0x1e0>
 8003978:	2303      	movs	r3, #3
 800397a:	e006      	b.n	800398a <HAL_GPIO_Init+0x1ee>
 800397c:	2304      	movs	r3, #4
 800397e:	e004      	b.n	800398a <HAL_GPIO_Init+0x1ee>
 8003980:	2302      	movs	r3, #2
 8003982:	e002      	b.n	800398a <HAL_GPIO_Init+0x1ee>
 8003984:	2301      	movs	r3, #1
 8003986:	e000      	b.n	800398a <HAL_GPIO_Init+0x1ee>
 8003988:	2300      	movs	r3, #0
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	f002 0203 	and.w	r2, r2, #3
 8003990:	0092      	lsls	r2, r2, #2
 8003992:	4093      	lsls	r3, r2
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800399a:	492f      	ldr	r1, [pc, #188]	; (8003a58 <HAL_GPIO_Init+0x2bc>)
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	089b      	lsrs	r3, r3, #2
 80039a0:	3302      	adds	r3, #2
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039b4:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	492c      	ldr	r1, [pc, #176]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	600b      	str	r3, [r1, #0]
 80039c0:	e006      	b.n	80039d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039c2:	4b2a      	ldr	r3, [pc, #168]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	4928      	ldr	r1, [pc, #160]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d006      	beq.n	80039ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039dc:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4922      	ldr	r1, [pc, #136]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	491e      	ldr	r1, [pc, #120]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d006      	beq.n	8003a12 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a04:	4b19      	ldr	r3, [pc, #100]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	4918      	ldr	r1, [pc, #96]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]
 8003a10:	e006      	b.n	8003a20 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a12:	4b16      	ldr	r3, [pc, #88]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a14:	689a      	ldr	r2, [r3, #8]
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	4914      	ldr	r1, [pc, #80]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d021      	beq.n	8003a70 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a2e:	68da      	ldr	r2, [r3, #12]
 8003a30:	490e      	ldr	r1, [pc, #56]	; (8003a6c <HAL_GPIO_Init+0x2d0>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60cb      	str	r3, [r1, #12]
 8003a38:	e021      	b.n	8003a7e <HAL_GPIO_Init+0x2e2>
 8003a3a:	bf00      	nop
 8003a3c:	10320000 	.word	0x10320000
 8003a40:	10310000 	.word	0x10310000
 8003a44:	10220000 	.word	0x10220000
 8003a48:	10210000 	.word	0x10210000
 8003a4c:	10120000 	.word	0x10120000
 8003a50:	10110000 	.word	0x10110000
 8003a54:	40021000 	.word	0x40021000
 8003a58:	40010000 	.word	0x40010000
 8003a5c:	40010800 	.word	0x40010800
 8003a60:	40010c00 	.word	0x40010c00
 8003a64:	40011000 	.word	0x40011000
 8003a68:	40011400 	.word	0x40011400
 8003a6c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_GPIO_Init+0x304>)
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	4909      	ldr	r1, [pc, #36]	; (8003aa0 <HAL_GPIO_Init+0x304>)
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	3301      	adds	r3, #1
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	f47f ae8e 	bne.w	80037b0 <HAL_GPIO_Init+0x14>
  }
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	372c      	adds	r7, #44	; 0x2c
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bc80      	pop	{r7}
 8003a9e:	4770      	bx	lr
 8003aa0:	40010400 	.word	0x40010400

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e12b      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fa4e 	bl	8002f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b38:	f003 f852 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 8003b3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a81      	ldr	r2, [pc, #516]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d807      	bhi.n	8003b58 <HAL_I2C_Init+0x84>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a80      	ldr	r2, [pc, #512]	; (8003d4c <HAL_I2C_Init+0x278>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	bf94      	ite	ls
 8003b50:	2301      	movls	r3, #1
 8003b52:	2300      	movhi	r3, #0
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	e006      	b.n	8003b66 <HAL_I2C_Init+0x92>
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4a7d      	ldr	r2, [pc, #500]	; (8003d50 <HAL_I2C_Init+0x27c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	bf94      	ite	ls
 8003b60:	2301      	movls	r3, #1
 8003b62:	2300      	movhi	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e0e7      	b.n	8003d3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	4a78      	ldr	r2, [pc, #480]	; (8003d54 <HAL_I2C_Init+0x280>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a6a      	ldr	r2, [pc, #424]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <HAL_I2C_Init+0xd4>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	e009      	b.n	8003bbc <HAL_I2C_Init+0xe8>
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bae:	fb02 f303 	mul.w	r3, r2, r3
 8003bb2:	4a69      	ldr	r2, [pc, #420]	; (8003d58 <HAL_I2C_Init+0x284>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	099b      	lsrs	r3, r3, #6
 8003bba:	3301      	adds	r3, #1
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6812      	ldr	r2, [r2, #0]
 8003bc0:	430b      	orrs	r3, r1
 8003bc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	69db      	ldr	r3, [r3, #28]
 8003bca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003bce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	495c      	ldr	r1, [pc, #368]	; (8003d48 <HAL_I2C_Init+0x274>)
 8003bd8:	428b      	cmp	r3, r1
 8003bda:	d819      	bhi.n	8003c10 <HAL_I2C_Init+0x13c>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e59      	subs	r1, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bea:	1c59      	adds	r1, r3, #1
 8003bec:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_I2C_Init+0x138>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	1e59      	subs	r1, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	e051      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	e04f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d111      	bne.n	8003c3c <HAL_I2C_Init+0x168>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e58      	subs	r0, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6859      	ldr	r1, [r3, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	440b      	add	r3, r1
 8003c26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf0c      	ite	eq
 8003c34:	2301      	moveq	r3, #1
 8003c36:	2300      	movne	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e012      	b.n	8003c62 <HAL_I2C_Init+0x18e>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	1e58      	subs	r0, r3, #1
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6859      	ldr	r1, [r3, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	0099      	lsls	r1, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c52:	3301      	adds	r3, #1
 8003c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d001      	beq.n	8003c6a <HAL_I2C_Init+0x196>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e022      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10e      	bne.n	8003c90 <HAL_I2C_Init+0x1bc>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1e58      	subs	r0, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6859      	ldr	r1, [r3, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	440b      	add	r3, r1
 8003c80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c84:	3301      	adds	r3, #1
 8003c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c8e:	e00f      	b.n	8003cb0 <HAL_I2C_Init+0x1dc>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	1e58      	subs	r0, r3, #1
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	0099      	lsls	r1, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	6809      	ldr	r1, [r1, #0]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69da      	ldr	r2, [r3, #28]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6911      	ldr	r1, [r2, #16]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68d2      	ldr	r2, [r2, #12]
 8003cea:	4311      	orrs	r1, r2
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3710      	adds	r7, #16
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	000186a0 	.word	0x000186a0
 8003d4c:	001e847f 	.word	0x001e847f
 8003d50:	003d08ff 	.word	0x003d08ff
 8003d54:	431bde83 	.word	0x431bde83
 8003d58:	10624dd3 	.word	0x10624dd3

08003d5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b088      	sub	sp, #32
 8003d60:	af02      	add	r7, sp, #8
 8003d62:	60f8      	str	r0, [r7, #12]
 8003d64:	607a      	str	r2, [r7, #4]
 8003d66:	461a      	mov	r2, r3
 8003d68:	460b      	mov	r3, r1
 8003d6a:	817b      	strh	r3, [r7, #10]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff fb1c 	bl	80033ac <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	f040 80e0 	bne.w	8003f44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	2319      	movs	r3, #25
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	4970      	ldr	r1, [pc, #448]	; (8003f50 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f002 f92a 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0d3      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d101      	bne.n	8003dac <HAL_I2C_Master_Transmit+0x50>
 8003da8:	2302      	movs	r3, #2
 8003daa:	e0cc      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d007      	beq.n	8003dd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003de0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2221      	movs	r2, #33	; 0x21
 8003de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2210      	movs	r2, #16
 8003dee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	893a      	ldrh	r2, [r7, #8]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e14:	8979      	ldrh	r1, [r7, #10]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	6a3a      	ldr	r2, [r7, #32]
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f001 feec 	bl	8005bf8 <I2C_MasterRequestWrite>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e08d      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	613b      	str	r3, [r7, #16]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e40:	e066      	b.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	6a39      	ldr	r1, [r7, #32]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f002 f9a4 	bl	8006194 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	d107      	bne.n	8003e6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e06b      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	781a      	ldrb	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b04      	cmp	r3, #4
 8003eaa:	d11b      	bne.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d017      	beq.n	8003ee4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	781a      	ldrb	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	6a39      	ldr	r1, [r7, #32]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f002 f994 	bl	8006216 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00d      	beq.n	8003f10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d107      	bne.n	8003f0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01a      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d194      	bne.n	8003e42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2220      	movs	r2, #32
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f40:	2300      	movs	r3, #0
 8003f42:	e000      	b.n	8003f46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	00100002 	.word	0x00100002
 8003f54:	ffff0000 	.word	0xffff0000

08003f58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08c      	sub	sp, #48	; 0x30
 8003f5c:	af02      	add	r7, sp, #8
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	460b      	mov	r3, r1
 8003f66:	817b      	strh	r3, [r7, #10]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f70:	f7ff fa1c 	bl	80033ac <HAL_GetTick>
 8003f74:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	f040 823f 	bne.w	8004402 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	2319      	movs	r3, #25
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	497f      	ldr	r1, [pc, #508]	; (800418c <HAL_I2C_Master_Receive+0x234>)
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f002 f82a 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	e232      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_I2C_Master_Receive+0x54>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e22b      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d007      	beq.n	8003fd2 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f042 0201 	orr.w	r2, r2, #1
 8003fd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fe0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2222      	movs	r2, #34	; 0x22
 8003fe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2210      	movs	r2, #16
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4a5f      	ldr	r2, [pc, #380]	; (8004190 <HAL_I2C_Master_Receive+0x238>)
 8004012:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004014:	8979      	ldrh	r1, [r7, #10]
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	f001 fe6e 	bl	8005cfc <I2C_MasterRequestRead>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e1ec      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402e:	2b00      	cmp	r3, #0
 8004030:	d113      	bne.n	800405a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e1c0      	b.n	80043dc <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	2b01      	cmp	r3, #1
 8004060:	d11e      	bne.n	80040a0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004072:	b672      	cpsid	i
}
 8004074:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800409a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800409c:	b662      	cpsie	i
}
 800409e:	e035      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d11e      	bne.n	80040e6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040b8:	b672      	cpsid	i
}
 80040ba:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040e2:	b662      	cpsie	i
}
 80040e4:	e012      	b.n	800410c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800410c:	e166      	b.n	80043dc <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004112:	2b03      	cmp	r3, #3
 8004114:	f200 811f 	bhi.w	8004356 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411c:	2b01      	cmp	r3, #1
 800411e:	d123      	bne.n	8004168 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f002 f8e9 	bl	80062fc <I2C_WaitOnRXNEFlagUntilTimeout>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e167      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691a      	ldr	r2, [r3, #16]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004166:	e139      	b.n	80043dc <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800416c:	2b02      	cmp	r3, #2
 800416e:	d152      	bne.n	8004216 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004176:	2200      	movs	r2, #0
 8004178:	4906      	ldr	r1, [pc, #24]	; (8004194 <HAL_I2C_Master_Receive+0x23c>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f001 ff34 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d008      	beq.n	8004198 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e13c      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
 800418a:	bf00      	nop
 800418c:	00100002 	.word	0x00100002
 8004190:	ffff0000 	.word	0xffff0000
 8004194:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004198:	b672      	cpsid	i
}
 800419a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691a      	ldr	r2, [r3, #16]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	3b01      	subs	r3, #1
 80041d8:	b29a      	uxth	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80041de:	b662      	cpsie	i
}
 80041e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fe:	3b01      	subs	r3, #1
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420a:	b29b      	uxth	r3, r3
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004214:	e0e2      	b.n	80043dc <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	2200      	movs	r2, #0
 800421e:	497b      	ldr	r1, [pc, #492]	; (800440c <HAL_I2C_Master_Receive+0x4b4>)
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f001 fee1 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0e9      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800423e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004240:	b672      	cpsid	i
}
 8004242:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	b2d2      	uxtb	r2, r2
 8004250:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004260:	3b01      	subs	r3, #1
 8004262:	b29a      	uxth	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29b      	uxth	r3, r3
 800426e:	3b01      	subs	r3, #1
 8004270:	b29a      	uxth	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004276:	4b66      	ldr	r3, [pc, #408]	; (8004410 <HAL_I2C_Master_Receive+0x4b8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	08db      	lsrs	r3, r3, #3
 800427c:	4a65      	ldr	r2, [pc, #404]	; (8004414 <HAL_I2C_Master_Receive+0x4bc>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a1a      	lsrs	r2, r3, #8
 8004284:	4613      	mov	r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	4413      	add	r3, r2
 800428a:	00da      	lsls	r2, r3, #3
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8004290:	6a3b      	ldr	r3, [r7, #32]
 8004292:	3b01      	subs	r3, #1
 8004294:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d118      	bne.n	80042ce <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	f043 0220 	orr.w	r2, r3, #32
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80042be:	b662      	cpsie	i
}
 80042c0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e09a      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d1d9      	bne.n	8004290 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800431e:	b662      	cpsie	i
}
 8004320:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	691a      	ldr	r2, [r3, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004354:	e042      	b.n	80043dc <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004358:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f001 ffce 	bl	80062fc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e04c      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	3b01      	subs	r3, #1
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d118      	bne.n	80043dc <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c6:	3b01      	subs	r3, #1
 80043c8:	b29a      	uxth	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f47f ae94 	bne.w	800410e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3728      	adds	r7, #40	; 0x28
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	00010004 	.word	0x00010004
 8004410:	20000084 	.word	0x20000084
 8004414:	14f8b589 	.word	0x14f8b589

08004418 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af02      	add	r7, sp, #8
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	607a      	str	r2, [r7, #4]
 8004422:	603b      	str	r3, [r7, #0]
 8004424:	460b      	mov	r3, r1
 8004426:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004428:	f7fe ffc0 	bl	80033ac <HAL_GetTick>
 800442c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800442e:	2301      	movs	r3, #1
 8004430:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004438:	b2db      	uxtb	r3, r3
 800443a:	2b20      	cmp	r3, #32
 800443c:	f040 8111 	bne.w	8004662 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	9300      	str	r3, [sp, #0]
 8004444:	2319      	movs	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	4988      	ldr	r1, [pc, #544]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f001 fdcc 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004456:	2302      	movs	r3, #2
 8004458:	e104      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2C_IsDeviceReady+0x50>
 8004464:	2302      	movs	r3, #2
 8004466:	e0fd      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b01      	cmp	r3, #1
 800447c:	d007      	beq.n	800448e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0201 	orr.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800449c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2224      	movs	r2, #36	; 0x24
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a70      	ldr	r2, [pc, #448]	; (8004670 <HAL_I2C_IsDeviceReady+0x258>)
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044c0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f001 fd8a 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00d      	beq.n	80044f6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e8:	d103      	bne.n	80044f2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044f0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e0b6      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044f6:	897b      	ldrh	r3, [r7, #10]
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	461a      	mov	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004504:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004506:	f7fe ff51 	bl	80033ac <HAL_GetTick>
 800450a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b02      	cmp	r3, #2
 8004518:	bf0c      	ite	eq
 800451a:	2301      	moveq	r3, #1
 800451c:	2300      	movne	r3, #0
 800451e:	b2db      	uxtb	r3, r3
 8004520:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004530:	bf0c      	ite	eq
 8004532:	2301      	moveq	r3, #1
 8004534:	2300      	movne	r3, #0
 8004536:	b2db      	uxtb	r3, r3
 8004538:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800453a:	e025      	b.n	8004588 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800453c:	f7fe ff36 	bl	80033ac <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	683a      	ldr	r2, [r7, #0]
 8004548:	429a      	cmp	r2, r3
 800454a:	d302      	bcc.n	8004552 <HAL_I2C_IsDeviceReady+0x13a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d103      	bne.n	800455a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	22a0      	movs	r2, #160	; 0xa0
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b02      	cmp	r3, #2
 8004566:	bf0c      	ite	eq
 8004568:	2301      	moveq	r3, #1
 800456a:	2300      	movne	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800457e:	bf0c      	ite	eq
 8004580:	2301      	moveq	r3, #1
 8004582:	2300      	movne	r3, #0
 8004584:	b2db      	uxtb	r3, r3
 8004586:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2ba0      	cmp	r3, #160	; 0xa0
 8004592:	d005      	beq.n	80045a0 <HAL_I2C_IsDeviceReady+0x188>
 8004594:	7dfb      	ldrb	r3, [r7, #23]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <HAL_I2C_IsDeviceReady+0x188>
 800459a:	7dbb      	ldrb	r3, [r7, #22]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d0cd      	beq.n	800453c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	695b      	ldr	r3, [r3, #20]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d129      	bne.n	800460a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	613b      	str	r3, [r7, #16]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2319      	movs	r3, #25
 80045e2:	2201      	movs	r2, #1
 80045e4:	4921      	ldr	r1, [pc, #132]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 80045e6:	68f8      	ldr	r0, [r7, #12]
 80045e8:	f001 fcfe 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80045f2:	2301      	movs	r3, #1
 80045f4:	e036      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004606:	2300      	movs	r3, #0
 8004608:	e02c      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004618:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004622:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	9300      	str	r3, [sp, #0]
 8004628:	2319      	movs	r3, #25
 800462a:	2201      	movs	r2, #1
 800462c:	490f      	ldr	r1, [pc, #60]	; (800466c <HAL_I2C_IsDeviceReady+0x254>)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f001 fcda 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e012      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	3301      	adds	r3, #1
 8004642:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	429a      	cmp	r2, r3
 800464a:	f4ff af32 	bcc.w	80044b2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2220      	movs	r2, #32
 8004652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004662:	2302      	movs	r3, #2
  }
}
 8004664:	4618      	mov	r0, r3
 8004666:	3720      	adds	r7, #32
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	00100002 	.word	0x00100002
 8004670:	ffff0000 	.word	0xffff0000

08004674 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004694:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b10      	cmp	r3, #16
 80046a2:	d003      	beq.n	80046ac <HAL_I2C_EV_IRQHandler+0x38>
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	f040 80c1 	bne.w	800482e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d10d      	bne.n	80046e2 <HAL_I2C_EV_IRQHandler+0x6e>
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80046cc:	d003      	beq.n	80046d6 <HAL_I2C_EV_IRQHandler+0x62>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80046d4:	d101      	bne.n	80046da <HAL_I2C_EV_IRQHandler+0x66>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <HAL_I2C_EV_IRQHandler+0x68>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	f000 8132 	beq.w	8004946 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00c      	beq.n	8004706 <HAL_I2C_EV_IRQHandler+0x92>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	0a5b      	lsrs	r3, r3, #9
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 fe83 	bl	8006404 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 fcc8 	bl	8005094 <I2C_Master_SB>
 8004704:	e092      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f003 0301 	and.w	r3, r3, #1
 800470e:	2b00      	cmp	r3, #0
 8004710:	d009      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0xb2>
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	f003 0301 	and.w	r3, r3, #1
 800471a:	2b00      	cmp	r3, #0
 800471c:	d003      	beq.n	8004726 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f000 fd3d 	bl	800519e <I2C_Master_ADD10>
 8004724:	e082      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	2b00      	cmp	r3, #0
 8004730:	d009      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0xd2>
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	0a5b      	lsrs	r3, r3, #9
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fd56 	bl	80051f0 <I2C_Master_ADDR>
 8004744:	e072      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d03b      	beq.n	80047ca <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800475c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004760:	f000 80f3 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	09db      	lsrs	r3, r3, #7
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00f      	beq.n	8004790 <HAL_I2C_EV_IRQHandler+0x11c>
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	0a9b      	lsrs	r3, r3, #10
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b00      	cmp	r3, #0
 800477a:	d009      	beq.n	8004790 <HAL_I2C_EV_IRQHandler+0x11c>
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	089b      	lsrs	r3, r3, #2
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d103      	bne.n	8004790 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f942 	bl	8004a12 <I2C_MasterTransmit_TXE>
 800478e:	e04d      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	089b      	lsrs	r3, r3, #2
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80d6 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	0a5b      	lsrs	r3, r3, #9
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 80cf 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	2b21      	cmp	r3, #33	; 0x21
 80047b0:	d103      	bne.n	80047ba <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f9c9 	bl	8004b4a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047b8:	e0c7      	b.n	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	2b40      	cmp	r3, #64	; 0x40
 80047be:	f040 80c4 	bne.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fa37 	bl	8004c36 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c8:	e0bf      	b.n	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d8:	f000 80b7 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	099b      	lsrs	r3, r3, #6
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00f      	beq.n	8004808 <HAL_I2C_EV_IRQHandler+0x194>
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	0a9b      	lsrs	r3, r3, #10
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <HAL_I2C_EV_IRQHandler+0x194>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	089b      	lsrs	r3, r3, #2
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d103      	bne.n	8004808 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 faac 	bl	8004d5e <I2C_MasterReceive_RXNE>
 8004806:	e011      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004808:	69fb      	ldr	r3, [r7, #28]
 800480a:	089b      	lsrs	r3, r3, #2
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	f000 809a 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	0a5b      	lsrs	r3, r3, #9
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8093 	beq.w	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fb4b 	bl	8004ec0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800482a:	e08e      	b.n	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
 800482c:	e08d      	b.n	800494a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d004      	beq.n	8004840 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	e007      	b.n	8004850 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	085b      	lsrs	r3, r3, #1
 8004854:	f003 0301 	and.w	r3, r3, #1
 8004858:	2b00      	cmp	r3, #0
 800485a:	d012      	beq.n	8004882 <HAL_I2C_EV_IRQHandler+0x20e>
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	0a5b      	lsrs	r3, r3, #9
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00c      	beq.n	8004882 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004878:	69b9      	ldr	r1, [r7, #24]
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 ff0f 	bl	800569e <I2C_Slave_ADDR>
 8004880:	e066      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	091b      	lsrs	r3, r3, #4
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x22e>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 ff4a 	bl	8005734 <I2C_Slave_STOPF>
 80048a0:	e056      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048a2:	7bbb      	ldrb	r3, [r7, #14]
 80048a4:	2b21      	cmp	r3, #33	; 0x21
 80048a6:	d002      	beq.n	80048ae <HAL_I2C_EV_IRQHandler+0x23a>
 80048a8:	7bbb      	ldrb	r3, [r7, #14]
 80048aa:	2b29      	cmp	r3, #41	; 0x29
 80048ac:	d125      	bne.n	80048fa <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	09db      	lsrs	r3, r3, #7
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00f      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x266>
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	0a9b      	lsrs	r3, r3, #10
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <HAL_I2C_EV_IRQHandler+0x266>
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	089b      	lsrs	r3, r3, #2
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fe27 	bl	8005526 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048d8:	e039      	b.n	800494e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	089b      	lsrs	r3, r3, #2
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d033      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x2da>
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d02d      	beq.n	800494e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 fe54 	bl	80055a0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048f8:	e029      	b.n	800494e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00f      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	0a9b      	lsrs	r3, r3, #10
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004912:	69fb      	ldr	r3, [r7, #28]
 8004914:	089b      	lsrs	r3, r3, #2
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fe5e 	bl	80055e0 <I2C_SlaveReceive_RXNE>
 8004924:	e014      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	089b      	lsrs	r3, r3, #2
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00e      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	0a5b      	lsrs	r3, r3, #9
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fe8c 	bl	800565c <I2C_SlaveReceive_BTF>
 8004944:	e004      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800494e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004956:	b480      	push	{r7}
 8004958:	b083      	sub	sp, #12
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800495e:	bf00      	nop
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	bc80      	pop	{r7}
 8004966:	4770      	bx	lr

08004968 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	bc80      	pop	{r7}
 8004978:	4770      	bx	lr

0800497a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	bc80      	pop	{r7}
 800498a:	4770      	bx	lr

0800498c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004994:	bf00      	nop
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	bc80      	pop	{r7}
 800499c:	4770      	bx	lr

0800499e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
 80049aa:	4613      	mov	r3, r2
 80049ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80049ae:	bf00      	nop
 80049b0:	370c      	adds	r7, #12
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr

080049b8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bc80      	pop	{r7}
 80049c8:	4770      	bx	lr

080049ca <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ca:	b480      	push	{r7}
 80049cc:	b083      	sub	sp, #12
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049d2:	bf00      	nop
 80049d4:	370c      	adds	r7, #12
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr

080049dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bc80      	pop	{r7}
 80049fe:	4770      	bx	lr

08004a00 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr

08004a12 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a28:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d150      	bne.n	8004ada <I2C_MasterTransmit_TXE+0xc8>
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	2b21      	cmp	r3, #33	; 0x21
 8004a3c:	d14d      	bne.n	8004ada <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d01d      	beq.n	8004a80 <I2C_MasterTransmit_TXE+0x6e>
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	2b20      	cmp	r3, #32
 8004a48:	d01a      	beq.n	8004a80 <I2C_MasterTransmit_TXE+0x6e>
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a50:	d016      	beq.n	8004a80 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a60:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2211      	movs	r2, #17
 8004a66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff ff6c 	bl	8004956 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a7e:	e060      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a8e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a9e:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2220      	movs	r2, #32
 8004aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b40      	cmp	r3, #64	; 0x40
 8004ab8:	d107      	bne.n	8004aca <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7ff ff81 	bl	80049ca <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac8:	e03b      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff ff3f 	bl	8004956 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ad8:	e033      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b21      	cmp	r3, #33	; 0x21
 8004ade:	d005      	beq.n	8004aec <I2C_MasterTransmit_TXE+0xda>
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d12d      	bne.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b22      	cmp	r3, #34	; 0x22
 8004aea:	d12a      	bne.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d108      	bne.n	8004b08 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b04:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004b06:	e01c      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d103      	bne.n	8004b1c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 f88e 	bl	8004c36 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b1a:	e012      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	781a      	ldrb	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b40:	e7ff      	b.n	8004b42 <I2C_MasterTransmit_TXE+0x130>
 8004b42:	bf00      	nop
 8004b44:	3710      	adds	r7, #16
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b56:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b21      	cmp	r3, #33	; 0x21
 8004b62:	d164      	bne.n	8004c2e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d012      	beq.n	8004b94 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b72:	781a      	ldrb	r2, [r3, #0]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	b29a      	uxth	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b92:	e04c      	b.n	8004c2e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2b08      	cmp	r3, #8
 8004b98:	d01d      	beq.n	8004bd6 <I2C_MasterTransmit_BTF+0x8c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	d01a      	beq.n	8004bd6 <I2C_MasterTransmit_BTF+0x8c>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ba6:	d016      	beq.n	8004bd6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bb6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2211      	movs	r2, #17
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff fec1 	bl	8004956 <HAL_I2C_MasterTxCpltCallback>
}
 8004bd4:	e02b      	b.n	8004c2e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	685a      	ldr	r2, [r3, #4]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004be4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bf4:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b40      	cmp	r3, #64	; 0x40
 8004c0e:	d107      	bne.n	8004c20 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7ff fed6 	bl	80049ca <HAL_I2C_MemTxCpltCallback>
}
 8004c1e:	e006      	b.n	8004c2e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7ff fe94 	bl	8004956 <HAL_I2C_MasterTxCpltCallback>
}
 8004c2e:	bf00      	nop
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c44:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d11d      	bne.n	8004c8a <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d10b      	bne.n	8004c6e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c66:	1c9a      	adds	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004c6c:	e073      	b.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	121b      	asrs	r3, r3, #8
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004c88:	e065      	b.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10b      	bne.n	8004caa <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ca8:	e055      	b.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d151      	bne.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004cb2:	7bfb      	ldrb	r3, [r7, #15]
 8004cb4:	2b22      	cmp	r3, #34	; 0x22
 8004cb6:	d10d      	bne.n	8004cd4 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cc6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004cd2:	e040      	b.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d015      	beq.n	8004d0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b21      	cmp	r3, #33	; 0x21
 8004ce2:	d112      	bne.n	8004d0a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	781a      	ldrb	r2, [r3, #0]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	3b01      	subs	r3, #1
 8004d02:	b29a      	uxth	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d08:	e025      	b.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d120      	bne.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b21      	cmp	r3, #33	; 0x21
 8004d18:	d11d      	bne.n	8004d56 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d28:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d38:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f7ff fe3a 	bl	80049ca <HAL_I2C_MemTxCpltCallback>
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b084      	sub	sp, #16
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	2b22      	cmp	r3, #34	; 0x22
 8004d70:	f040 80a2 	bne.w	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b03      	cmp	r3, #3
 8004d80:	d921      	bls.n	8004dc6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	691a      	ldr	r2, [r3, #16]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	b2d2      	uxtb	r2, r2
 8004d8e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	f040 8082 	bne.w	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	685a      	ldr	r2, [r3, #4]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dc2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004dc4:	e078      	b.n	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d074      	beq.n	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d002      	beq.n	8004dda <I2C_MasterReceive_RXNE+0x7c>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d16e      	bne.n	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 fa5c 	bl	8006298 <I2C_WaitOnSTOPRequestThroughIT>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d142      	bne.n	8004e6c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e04:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	691a      	ldr	r2, [r3, #16]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b40      	cmp	r3, #64	; 0x40
 8004e3e:	d10a      	bne.n	8004e56 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fdc4 	bl	80049dc <HAL_I2C_MemRxCpltCallback>
}
 8004e54:	e030      	b.n	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2212      	movs	r2, #18
 8004e62:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7ff fd7f 	bl	8004968 <HAL_I2C_MasterRxCpltCallback>
}
 8004e6a:	e025      	b.n	8004eb8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e7a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7ff fd9b 	bl	80049ee <HAL_I2C_ErrorCallback>
}
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2b04      	cmp	r3, #4
 8004ed6:	d11b      	bne.n	8004f10 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691a      	ldr	r2, [r3, #16]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f0e:	e0bd      	b.n	800508c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b03      	cmp	r3, #3
 8004f18:	d129      	bne.n	8004f6e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	685a      	ldr	r2, [r3, #4]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f28:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d00a      	beq.n	8004f46 <I2C_MasterReceive_BTF+0x86>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d007      	beq.n	8004f46 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f44:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f58:	1c5a      	adds	r2, r3, #1
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	3b01      	subs	r3, #1
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004f6c:	e08e      	b.n	800508c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d176      	bne.n	8005066 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d002      	beq.n	8004f84 <I2C_MasterReceive_BTF+0xc4>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d108      	bne.n	8004f96 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f92:	601a      	str	r2, [r3, #0]
 8004f94:	e019      	b.n	8004fca <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d002      	beq.n	8004fa2 <I2C_MasterReceive_BTF+0xe2>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d108      	bne.n	8004fb4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fb0:	601a      	str	r2, [r3, #0]
 8004fb2:	e00a      	b.n	8004fca <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d007      	beq.n	8004fca <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fc8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	b2d2      	uxtb	r2, r2
 8004ffc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685a      	ldr	r2, [r3, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005024:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2220      	movs	r2, #32
 800502a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b40      	cmp	r3, #64	; 0x40
 8005038:	d10a      	bne.n	8005050 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f7ff fcc7 	bl	80049dc <HAL_I2C_MemRxCpltCallback>
}
 800504e:	e01d      	b.n	800508c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2212      	movs	r2, #18
 800505c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f7ff fc82 	bl	8004968 <HAL_I2C_MasterRxCpltCallback>
}
 8005064:	e012      	b.n	800508c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	691a      	ldr	r2, [r3, #16]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	b2d2      	uxtb	r2, r2
 8005072:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	1c5a      	adds	r2, r3, #1
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005082:	b29b      	uxth	r3, r3
 8005084:	3b01      	subs	r3, #1
 8005086:	b29a      	uxth	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b40      	cmp	r3, #64	; 0x40
 80050a6:	d117      	bne.n	80050d8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050c2:	e067      	b.n	8005194 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	f043 0301 	orr.w	r3, r3, #1
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	611a      	str	r2, [r3, #16]
}
 80050d6:	e05d      	b.n	8005194 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	691b      	ldr	r3, [r3, #16]
 80050dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050e0:	d133      	bne.n	800514a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b21      	cmp	r3, #33	; 0x21
 80050ec:	d109      	bne.n	8005102 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050fe:	611a      	str	r2, [r3, #16]
 8005100:	e008      	b.n	8005114 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f043 0301 	orr.w	r3, r3, #1
 800510c:	b2da      	uxtb	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d004      	beq.n	8005126 <I2C_Master_SB+0x92>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800512a:	2b00      	cmp	r3, #0
 800512c:	d032      	beq.n	8005194 <I2C_Master_SB+0x100>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005134:	2b00      	cmp	r3, #0
 8005136:	d02d      	beq.n	8005194 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005146:	605a      	str	r2, [r3, #4]
}
 8005148:	e024      	b.n	8005194 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800514e:	2b00      	cmp	r3, #0
 8005150:	d10e      	bne.n	8005170 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005156:	b29b      	uxth	r3, r3
 8005158:	11db      	asrs	r3, r3, #7
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f003 0306 	and.w	r3, r3, #6
 8005160:	b2db      	uxtb	r3, r3
 8005162:	f063 030f 	orn	r3, r3, #15
 8005166:	b2da      	uxtb	r2, r3
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	611a      	str	r2, [r3, #16]
}
 800516e:	e011      	b.n	8005194 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10d      	bne.n	8005194 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800517c:	b29b      	uxth	r3, r3
 800517e:	11db      	asrs	r3, r3, #7
 8005180:	b2db      	uxtb	r3, r3
 8005182:	f003 0306 	and.w	r3, r3, #6
 8005186:	b2db      	uxtb	r3, r3
 8005188:	f063 030e 	orn	r3, r3, #14
 800518c:	b2da      	uxtb	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	611a      	str	r2, [r3, #16]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800519e:	b480      	push	{r7}
 80051a0:	b083      	sub	sp, #12
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d004      	beq.n	80051c4 <I2C_Master_ADD10+0x26>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d108      	bne.n	80051d6 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00c      	beq.n	80051e6 <I2C_Master_ADD10+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e4:	605a      	str	r2, [r3, #4]
  }
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr

080051f0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b091      	sub	sp, #68	; 0x44
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b22      	cmp	r3, #34	; 0x22
 8005218:	f040 8174 	bne.w	8005504 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <I2C_Master_ADDR+0x54>
 8005224:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d10b      	bne.n	8005244 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800522c:	2300      	movs	r3, #0
 800522e:	633b      	str	r3, [r7, #48]	; 0x30
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	633b      	str	r3, [r7, #48]	; 0x30
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	633b      	str	r3, [r7, #48]	; 0x30
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	e16b      	b.n	800551c <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005248:	2b00      	cmp	r3, #0
 800524a:	d11d      	bne.n	8005288 <I2C_Master_ADDR+0x98>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005254:	d118      	bne.n	8005288 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005256:	2300      	movs	r3, #0
 8005258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800526a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800527a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	651a      	str	r2, [r3, #80]	; 0x50
 8005286:	e149      	b.n	800551c <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d113      	bne.n	80052ba <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005292:	2300      	movs	r3, #0
 8005294:	62bb      	str	r3, [r7, #40]	; 0x28
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	695b      	ldr	r3, [r3, #20]
 800529c:	62bb      	str	r3, [r7, #40]	; 0x28
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e120      	b.n	80054fc <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	f040 808a 	bne.w	80053da <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052cc:	d137      	bne.n	800533e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052dc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ec:	d113      	bne.n	8005316 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	; 0x24
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	627b      	str	r3, [r7, #36]	; 0x24
 8005312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005314:	e0f2      	b.n	80054fc <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005316:	2300      	movs	r3, #0
 8005318:	623b      	str	r3, [r7, #32]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	623b      	str	r3, [r7, #32]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	e0de      	b.n	80054fc <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b08      	cmp	r3, #8
 8005342:	d02e      	beq.n	80053a2 <I2C_Master_ADDR+0x1b2>
 8005344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005346:	2b20      	cmp	r3, #32
 8005348:	d02b      	beq.n	80053a2 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800534a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534c:	2b12      	cmp	r3, #18
 800534e:	d102      	bne.n	8005356 <I2C_Master_ADDR+0x166>
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	2b01      	cmp	r3, #1
 8005354:	d125      	bne.n	80053a2 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005358:	2b04      	cmp	r3, #4
 800535a:	d00e      	beq.n	800537a <I2C_Master_ADDR+0x18a>
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	2b02      	cmp	r3, #2
 8005360:	d00b      	beq.n	800537a <I2C_Master_ADDR+0x18a>
 8005362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005364:	2b10      	cmp	r3, #16
 8005366:	d008      	beq.n	800537a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e007      	b.n	800538a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005388:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800538a:	2300      	movs	r3, #0
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	e0ac      	b.n	80054fc <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053b0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053b2:	2300      	movs	r3, #0
 80053b4:	61bb      	str	r3, [r7, #24]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	695b      	ldr	r3, [r3, #20]
 80053bc:	61bb      	str	r3, [r7, #24]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	61bb      	str	r3, [r7, #24]
 80053c6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e090      	b.n	80054fc <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053de:	b29b      	uxth	r3, r3
 80053e0:	2b02      	cmp	r3, #2
 80053e2:	d158      	bne.n	8005496 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80053e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d021      	beq.n	800542e <I2C_Master_ADDR+0x23e>
 80053ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d01e      	beq.n	800542e <I2C_Master_ADDR+0x23e>
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d01b      	beq.n	800542e <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005404:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005406:	2300      	movs	r3, #0
 8005408:	617b      	str	r3, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	695b      	ldr	r3, [r3, #20]
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	617b      	str	r3, [r7, #20]
 800541a:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800542a:	601a      	str	r2, [r3, #0]
 800542c:	e012      	b.n	8005454 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800543c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800545e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005462:	d14b      	bne.n	80054fc <I2C_Master_ADDR+0x30c>
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800546a:	d00b      	beq.n	8005484 <I2C_Master_ADDR+0x294>
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	2b01      	cmp	r3, #1
 8005470:	d008      	beq.n	8005484 <I2C_Master_ADDR+0x294>
 8005472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005474:	2b08      	cmp	r3, #8
 8005476:	d005      	beq.n	8005484 <I2C_Master_ADDR+0x294>
 8005478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547a:	2b10      	cmp	r3, #16
 800547c:	d002      	beq.n	8005484 <I2C_Master_ADDR+0x294>
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	2b20      	cmp	r3, #32
 8005482:	d13b      	bne.n	80054fc <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005492:	605a      	str	r2, [r3, #4]
 8005494:	e032      	b.n	80054fc <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80054a4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b4:	d117      	bne.n	80054e6 <I2C_Master_ADDR+0x2f6>
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054bc:	d00b      	beq.n	80054d6 <I2C_Master_ADDR+0x2e6>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d008      	beq.n	80054d6 <I2C_Master_ADDR+0x2e6>
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d005      	beq.n	80054d6 <I2C_Master_ADDR+0x2e6>
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b10      	cmp	r3, #16
 80054ce:	d002      	beq.n	80054d6 <I2C_Master_ADDR+0x2e6>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d107      	bne.n	80054e6 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	60fb      	str	r3, [r7, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	60fb      	str	r3, [r7, #12]
 80054fa:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005502:	e00b      	b.n	800551c <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	60bb      	str	r3, [r7, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	60bb      	str	r3, [r7, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
}
 800551a:	e7ff      	b.n	800551c <I2C_Master_ADDR+0x32c>
 800551c:	bf00      	nop
 800551e:	3744      	adds	r7, #68	; 0x44
 8005520:	46bd      	mov	sp, r7
 8005522:	bc80      	pop	{r7}
 8005524:	4770      	bx	lr

08005526 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005534:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800553a:	b29b      	uxth	r3, r3
 800553c:	2b00      	cmp	r3, #0
 800553e:	d02b      	beq.n	8005598 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800555a:	b29b      	uxth	r3, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	b29a      	uxth	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	2b00      	cmp	r3, #0
 800556c:	d114      	bne.n	8005598 <I2C_SlaveTransmit_TXE+0x72>
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	2b29      	cmp	r3, #41	; 0x29
 8005572:	d111      	bne.n	8005598 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005582:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2221      	movs	r2, #33	; 0x21
 8005588:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2228      	movs	r2, #40	; 0x28
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f7ff f9f1 	bl	800497a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005598:	bf00      	nop
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b083      	sub	sp, #12
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d011      	beq.n	80055d6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	3b01      	subs	r3, #1
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	bc80      	pop	{r7}
 80055de:	4770      	bx	lr

080055e0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055ee:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d02c      	beq.n	8005654 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005604:	b2d2      	uxtb	r2, r2
 8005606:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005616:	b29b      	uxth	r3, r3
 8005618:	3b01      	subs	r3, #1
 800561a:	b29a      	uxth	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005624:	b29b      	uxth	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d114      	bne.n	8005654 <I2C_SlaveReceive_RXNE+0x74>
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b2a      	cmp	r3, #42	; 0x2a
 800562e:	d111      	bne.n	8005654 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800563e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2222      	movs	r2, #34	; 0x22
 8005644:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2228      	movs	r2, #40	; 0x28
 800564a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7ff f99c 	bl	800498c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005654:	bf00      	nop
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d012      	beq.n	8005694 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005694:	bf00      	nop
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	bc80      	pop	{r7}
 800569c:	4770      	bx	lr

0800569e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800569e:	b580      	push	{r7, lr}
 80056a0:	b084      	sub	sp, #16
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80056b8:	2b28      	cmp	r3, #40	; 0x28
 80056ba:	d127      	bne.n	800570c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056ca:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	f003 0301 	and.w	r3, r3, #1
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d101      	bne.n	80056dc <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80056d8:	2301      	movs	r3, #1
 80056da:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d103      	bne.n	80056f0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	81bb      	strh	r3, [r7, #12]
 80056ee:	e002      	b.n	80056f6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80056fe:	89ba      	ldrh	r2, [r7, #12]
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	4619      	mov	r1, r3
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff f94a 	bl	800499e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800570a:	e00e      	b.n	800572a <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570c:	2300      	movs	r3, #0
 800570e:	60bb      	str	r3, [r7, #8]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	60bb      	str	r3, [r7, #8]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800572a:	bf00      	nop
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
	...

08005734 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005742:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005752:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005754:	2300      	movs	r3, #0
 8005756:	60bb      	str	r3, [r7, #8]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	60bb      	str	r3, [r7, #8]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005780:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800578c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005790:	d172      	bne.n	8005878 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b22      	cmp	r3, #34	; 0x22
 8005796:	d002      	beq.n	800579e <I2C_Slave_STOPF+0x6a>
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b2a      	cmp	r3, #42	; 0x2a
 800579c:	d135      	bne.n	800580a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ba:	f043 0204 	orr.w	r2, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fd ffd4 	bl	8003784 <HAL_DMA_GetState>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d049      	beq.n	8005876 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	4a69      	ldr	r2, [pc, #420]	; (800598c <I2C_Slave_STOPF+0x258>)
 80057e8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fd ff52 	bl	8003698 <HAL_DMA_Abort_IT>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d03d      	beq.n	8005876 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005804:	4610      	mov	r0, r2
 8005806:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005808:	e035      	b.n	8005876 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	b29a      	uxth	r2, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d005      	beq.n	800582e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	f043 0204 	orr.w	r2, r3, #4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800583c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005842:	4618      	mov	r0, r3
 8005844:	f7fd ff9e 	bl	8003784 <HAL_DMA_GetState>
 8005848:	4603      	mov	r3, r0
 800584a:	2b01      	cmp	r3, #1
 800584c:	d014      	beq.n	8005878 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	4a4e      	ldr	r2, [pc, #312]	; (800598c <I2C_Slave_STOPF+0x258>)
 8005854:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585a:	4618      	mov	r0, r3
 800585c:	f7fd ff1c 	bl	8003698 <HAL_DMA_Abort_IT>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005870:	4610      	mov	r0, r2
 8005872:	4798      	blx	r3
 8005874:	e000      	b.n	8005878 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005876:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d03e      	beq.n	8005900 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	f003 0304 	and.w	r3, r3, #4
 800588c:	2b04      	cmp	r3, #4
 800588e:	d112      	bne.n	80058b6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b40      	cmp	r3, #64	; 0x40
 80058c2:	d112      	bne.n	80058ea <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	691a      	ldr	r2, [r3, #16]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	b2d2      	uxtb	r2, r2
 80058d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d6:	1c5a      	adds	r2, r3, #1
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	3b01      	subs	r3, #1
 80058e4:	b29a      	uxth	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d005      	beq.n	8005900 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	f043 0204 	orr.w	r2, r3, #4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	2b00      	cmp	r3, #0
 8005906:	d003      	beq.n	8005910 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f843 	bl	8005994 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800590e:	e039      	b.n	8005984 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005910:	7bfb      	ldrb	r3, [r7, #15]
 8005912:	2b2a      	cmp	r3, #42	; 0x2a
 8005914:	d109      	bne.n	800592a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2228      	movs	r2, #40	; 0x28
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff f831 	bl	800498c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b28      	cmp	r3, #40	; 0x28
 8005934:	d111      	bne.n	800595a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <I2C_Slave_STOPF+0x25c>)
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff f830 	bl	80049b8 <HAL_I2C_ListenCpltCallback>
}
 8005958:	e014      	b.n	8005984 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	2b22      	cmp	r3, #34	; 0x22
 8005960:	d002      	beq.n	8005968 <I2C_Slave_STOPF+0x234>
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	2b22      	cmp	r3, #34	; 0x22
 8005966:	d10d      	bne.n	8005984 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2220      	movs	r2, #32
 8005972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff f804 	bl	800498c <HAL_I2C_SlaveRxCpltCallback>
}
 8005984:	bf00      	nop
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	08005e99 	.word	0x08005e99
 8005990:	ffff0000 	.word	0xffff0000

08005994 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80059aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80059ac:	7bbb      	ldrb	r3, [r7, #14]
 80059ae:	2b10      	cmp	r3, #16
 80059b0:	d002      	beq.n	80059b8 <I2C_ITError+0x24>
 80059b2:	7bbb      	ldrb	r3, [r7, #14]
 80059b4:	2b40      	cmp	r3, #64	; 0x40
 80059b6:	d10a      	bne.n	80059ce <I2C_ITError+0x3a>
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b22      	cmp	r3, #34	; 0x22
 80059bc:	d107      	bne.n	80059ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059ce:	7bfb      	ldrb	r3, [r7, #15]
 80059d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80059d4:	2b28      	cmp	r3, #40	; 0x28
 80059d6:	d107      	bne.n	80059e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2228      	movs	r2, #40	; 0x28
 80059e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80059e6:	e015      	b.n	8005a14 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80059f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059f6:	d00a      	beq.n	8005a0e <I2C_ITError+0x7a>
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b60      	cmp	r3, #96	; 0x60
 80059fc:	d007      	beq.n	8005a0e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a22:	d161      	bne.n	8005ae8 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685a      	ldr	r2, [r3, #4]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a32:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d020      	beq.n	8005a82 <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a44:	4a6a      	ldr	r2, [pc, #424]	; (8005bf0 <I2C_ITError+0x25c>)
 8005a46:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fd fe23 	bl	8003698 <HAL_DMA_Abort_IT>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8089 	beq.w	8005b6c <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4798      	blx	r3
 8005a80:	e074      	b.n	8005b6c <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a86:	4a5a      	ldr	r2, [pc, #360]	; (8005bf0 <I2C_ITError+0x25c>)
 8005a88:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fd fe02 	bl	8003698 <HAL_DMA_Abort_IT>
 8005a94:	4603      	mov	r3, r0
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d068      	beq.n	8005b6c <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	2b40      	cmp	r3, #64	; 0x40
 8005aa6:	d10b      	bne.n	8005ac0 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691a      	ldr	r2, [r3, #16]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	b2d2      	uxtb	r2, r2
 8005ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f022 0201 	bic.w	r2, r2, #1
 8005ace:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	4798      	blx	r3
 8005ae6:	e041      	b.n	8005b6c <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b60      	cmp	r3, #96	; 0x60
 8005af2:	d125      	bne.n	8005b40 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695b      	ldr	r3, [r3, #20]
 8005b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d10b      	bne.n	8005b28 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	691a      	ldr	r2, [r3, #16]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	b2d2      	uxtb	r2, r2
 8005b1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	1c5a      	adds	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe ff61 	bl	8004a00 <HAL_I2C_AbortCpltCallback>
 8005b3e:	e015      	b.n	8005b6c <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b4a:	2b40      	cmp	r3, #64	; 0x40
 8005b4c:	d10b      	bne.n	8005b66 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691a      	ldr	r2, [r3, #16]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b58:	b2d2      	uxtb	r2, r2
 8005b5a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b60:	1c5a      	adds	r2, r3, #1
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fe ff41 	bl	80049ee <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b70:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10e      	bne.n	8005b9a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d104      	bne.n	8005b9a <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ba8:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb0:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	2b04      	cmp	r3, #4
 8005bbc:	d113      	bne.n	8005be6 <I2C_ITError+0x252>
 8005bbe:	7bfb      	ldrb	r3, [r7, #15]
 8005bc0:	2b28      	cmp	r3, #40	; 0x28
 8005bc2:	d110      	bne.n	8005be6 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <I2C_ITError+0x260>)
 8005bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fe fee9 	bl	80049b8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005be6:	bf00      	nop
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
 8005bee:	bf00      	nop
 8005bf0:	08005e99 	.word	0x08005e99
 8005bf4:	ffff0000 	.word	0xffff0000

08005bf8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b088      	sub	sp, #32
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	607a      	str	r2, [r7, #4]
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	460b      	mov	r3, r1
 8005c06:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d006      	beq.n	8005c22 <I2C_MasterRequestWrite+0x2a>
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d003      	beq.n	8005c22 <I2C_MasterRequestWrite+0x2a>
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c20:	d108      	bne.n	8005c34 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	e00b      	b.n	8005c4c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	2b12      	cmp	r3, #18
 8005c3a:	d107      	bne.n	8005c4c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c4a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	9300      	str	r3, [sp, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f9c5 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00d      	beq.n	8005c80 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c72:	d103      	bne.n	8005c7c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e035      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d108      	bne.n	8005c9c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c8a:	897b      	ldrh	r3, [r7, #10]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	461a      	mov	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005c98:	611a      	str	r2, [r3, #16]
 8005c9a:	e01b      	b.n	8005cd4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c9c:	897b      	ldrh	r3, [r7, #10]
 8005c9e:	11db      	asrs	r3, r3, #7
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	f003 0306 	and.w	r3, r3, #6
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f063 030f 	orn	r3, r3, #15
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	490e      	ldr	r1, [pc, #56]	; (8005cf4 <I2C_MasterRequestWrite+0xfc>)
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f9eb 	bl	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e010      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	4907      	ldr	r1, [pc, #28]	; (8005cf8 <I2C_MasterRequestWrite+0x100>)
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 f9db 	bl	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e000      	b.n	8005cec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3718      	adds	r7, #24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}
 8005cf4:	00010008 	.word	0x00010008
 8005cf8:	00010002 	.word	0x00010002

08005cfc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b088      	sub	sp, #32
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	460b      	mov	r3, r1
 8005d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d20:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	2b08      	cmp	r3, #8
 8005d26:	d006      	beq.n	8005d36 <I2C_MasterRequestRead+0x3a>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d003      	beq.n	8005d36 <I2C_MasterRequestRead+0x3a>
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d34:	d108      	bne.n	8005d48 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	e00b      	b.n	8005d60 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b11      	cmp	r3, #17
 8005d4e:	d107      	bne.n	8005d60 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d5e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	9300      	str	r3, [sp, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 f93b 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00d      	beq.n	8005d94 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d86:	d103      	bne.n	8005d90 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e079      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d9c:	d108      	bne.n	8005db0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005d9e:	897b      	ldrh	r3, [r7, #10]
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	b2da      	uxtb	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	611a      	str	r2, [r3, #16]
 8005dae:	e05f      	b.n	8005e70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005db0:	897b      	ldrh	r3, [r7, #10]
 8005db2:	11db      	asrs	r3, r3, #7
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	f063 030f 	orn	r3, r3, #15
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	4930      	ldr	r1, [pc, #192]	; (8005e90 <I2C_MasterRequestRead+0x194>)
 8005dce:	68f8      	ldr	r0, [r7, #12]
 8005dd0:	f000 f961 	bl	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e054      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dde:	897b      	ldrh	r3, [r7, #10]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4929      	ldr	r1, [pc, #164]	; (8005e94 <I2C_MasterRequestRead+0x198>)
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 f951 	bl	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005df4:	4603      	mov	r3, r0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d001      	beq.n	8005dfe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e044      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	613b      	str	r3, [r7, #16]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	699b      	ldr	r3, [r3, #24]
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	9300      	str	r3, [sp, #0]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 f8d9 	bl	8005fe8 <I2C_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d00d      	beq.n	8005e58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e4a:	d103      	bne.n	8005e54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e017      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005e58:	897b      	ldrh	r3, [r7, #10]
 8005e5a:	11db      	asrs	r3, r3, #7
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	f003 0306 	and.w	r3, r3, #6
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f063 030e 	orn	r3, r3, #14
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4907      	ldr	r1, [pc, #28]	; (8005e94 <I2C_MasterRequestRead+0x198>)
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f000 f90d 	bl	8006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005e82:	2301      	movs	r3, #1
 8005e84:	e000      	b.n	8005e88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005e86:	2300      	movs	r3, #0
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3718      	adds	r7, #24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	00010008 	.word	0x00010008
 8005e94:	00010002 	.word	0x00010002

08005e98 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b086      	sub	sp, #24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005eb2:	4b4b      	ldr	r3, [pc, #300]	; (8005fe0 <I2C_DMAAbort+0x148>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	08db      	lsrs	r3, r3, #3
 8005eb8:	4a4a      	ldr	r2, [pc, #296]	; (8005fe4 <I2C_DMAAbort+0x14c>)
 8005eba:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebe:	0a1a      	lsrs	r2, r3, #8
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	00da      	lsls	r2, r3, #3
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d106      	bne.n	8005ee0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f043 0220 	orr.w	r2, r3, #32
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005ede:	e00a      	b.n	8005ef6 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d0ea      	beq.n	8005ecc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	2200      	movs	r2, #0
 8005f04:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	2200      	movs	r2, #0
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f24:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f38:	2200      	movs	r2, #0
 8005f3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d003      	beq.n	8005f4c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	2200      	movs	r2, #0
 8005f4a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 0201 	bic.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b60      	cmp	r3, #96	; 0x60
 8005f66:	d10e      	bne.n	8005f86 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005f7e:	6978      	ldr	r0, [r7, #20]
 8005f80:	f7fe fd3e 	bl	8004a00 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f84:	e027      	b.n	8005fd6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f86:	7cfb      	ldrb	r3, [r7, #19]
 8005f88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f8c:	2b28      	cmp	r3, #40	; 0x28
 8005f8e:	d117      	bne.n	8005fc0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0201 	orr.w	r2, r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2228      	movs	r2, #40	; 0x28
 8005fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005fbe:	e007      	b.n	8005fd0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005fd0:	6978      	ldr	r0, [r7, #20]
 8005fd2:	f7fe fd0c 	bl	80049ee <HAL_I2C_ErrorCallback>
}
 8005fd6:	bf00      	nop
 8005fd8:	3718      	adds	r7, #24
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	20000084 	.word	0x20000084
 8005fe4:	14f8b589 	.word	0x14f8b589

08005fe8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ff8:	e025      	b.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006000:	d021      	beq.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006002:	f7fd f9d3 	bl	80033ac <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	69bb      	ldr	r3, [r7, #24]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	429a      	cmp	r2, r3
 8006010:	d302      	bcc.n	8006018 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d116      	bne.n	8006046 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2220      	movs	r2, #32
 8006022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006032:	f043 0220 	orr.w	r2, r3, #32
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e023      	b.n	800608e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	b2db      	uxtb	r3, r3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10d      	bne.n	800606c <I2C_WaitOnFlagUntilTimeout+0x84>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	695b      	ldr	r3, [r3, #20]
 8006056:	43da      	mvns	r2, r3
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4013      	ands	r3, r2
 800605c:	b29b      	uxth	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	bf0c      	ite	eq
 8006062:	2301      	moveq	r3, #1
 8006064:	2300      	movne	r3, #0
 8006066:	b2db      	uxtb	r3, r3
 8006068:	461a      	mov	r2, r3
 800606a:	e00c      	b.n	8006086 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	699b      	ldr	r3, [r3, #24]
 8006072:	43da      	mvns	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4013      	ands	r3, r2
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	bf0c      	ite	eq
 800607e:	2301      	moveq	r3, #1
 8006080:	2300      	movne	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	461a      	mov	r2, r3
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	429a      	cmp	r2, r3
 800608a:	d0b6      	beq.n	8005ffa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	60f8      	str	r0, [r7, #12]
 800609e:	60b9      	str	r1, [r7, #8]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060a4:	e051      	b.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b4:	d123      	bne.n	80060fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80060ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2220      	movs	r2, #32
 80060da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	f043 0204 	orr.w	r2, r3, #4
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e046      	b.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006104:	d021      	beq.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006106:	f7fd f951 	bl	80033ac <HAL_GetTick>
 800610a:	4602      	mov	r2, r0
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	1ad3      	subs	r3, r2, r3
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	429a      	cmp	r2, r3
 8006114:	d302      	bcc.n	800611c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d116      	bne.n	800614a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2220      	movs	r2, #32
 8006126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006136:	f043 0220 	orr.w	r2, r3, #32
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e020      	b.n	800618c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10c      	bne.n	800616e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	43da      	mvns	r2, r3
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	4013      	ands	r3, r2
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	bf14      	ite	ne
 8006166:	2301      	movne	r3, #1
 8006168:	2300      	moveq	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	e00b      	b.n	8006186 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	43da      	mvns	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	4013      	ands	r3, r2
 800617a:	b29b      	uxth	r3, r3
 800617c:	2b00      	cmp	r3, #0
 800617e:	bf14      	ite	ne
 8006180:	2301      	movne	r3, #1
 8006182:	2300      	moveq	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d18d      	bne.n	80060a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b084      	sub	sp, #16
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a0:	e02d      	b.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f000 f900 	bl	80063a8 <I2C_IsAcknowledgeFailed>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d001      	beq.n	80061b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e02d      	b.n	800620e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b8:	d021      	beq.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061ba:	f7fd f8f7 	bl	80033ac <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d302      	bcc.n	80061d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d116      	bne.n	80061fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2220      	movs	r2, #32
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	f043 0220 	orr.w	r2, r3, #32
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e007      	b.n	800620e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695b      	ldr	r3, [r3, #20]
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b80      	cmp	r3, #128	; 0x80
 800620a:	d1ca      	bne.n	80061a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006222:	e02d      	b.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 f8bf 	bl	80063a8 <I2C_IsAcknowledgeFailed>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e02d      	b.n	8006290 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d021      	beq.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623c:	f7fd f8b6 	bl	80033ac <HAL_GetTick>
 8006240:	4602      	mov	r2, r0
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	429a      	cmp	r2, r3
 800624a:	d302      	bcc.n	8006252 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d116      	bne.n	8006280 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f043 0220 	orr.w	r2, r3, #32
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e007      	b.n	8006290 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	f003 0304 	and.w	r3, r3, #4
 800628a:	2b04      	cmp	r3, #4
 800628c:	d1ca      	bne.n	8006224 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3710      	adds	r7, #16
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062a0:	2300      	movs	r3, #0
 80062a2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80062a4:	4b13      	ldr	r3, [pc, #76]	; (80062f4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	4a13      	ldr	r2, [pc, #76]	; (80062f8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80062ac:	fba2 2303 	umull	r2, r3, r2, r3
 80062b0:	0a1a      	lsrs	r2, r3, #8
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d107      	bne.n	80062d6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ca:	f043 0220 	orr.w	r2, r3, #32
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e008      	b.n	80062e8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80062e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062e4:	d0e9      	beq.n	80062ba <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80062e6:	2300      	movs	r3, #0
}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bc80      	pop	{r7}
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	20000084 	.word	0x20000084
 80062f8:	14f8b589 	.word	0x14f8b589

080062fc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	60f8      	str	r0, [r7, #12]
 8006304:	60b9      	str	r1, [r7, #8]
 8006306:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006308:	e042      	b.n	8006390 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	695b      	ldr	r3, [r3, #20]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b10      	cmp	r3, #16
 8006316:	d119      	bne.n	800634c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0210 	mvn.w	r2, #16
 8006320:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e029      	b.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634c:	f7fd f82e 	bl	80033ac <HAL_GetTick>
 8006350:	4602      	mov	r2, r0
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	429a      	cmp	r2, r3
 800635a:	d302      	bcc.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d116      	bne.n	8006390 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2200      	movs	r2, #0
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2200      	movs	r2, #0
 8006374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637c:	f043 0220 	orr.w	r2, r3, #32
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e007      	b.n	80063a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800639a:	2b40      	cmp	r3, #64	; 0x40
 800639c:	d1b5      	bne.n	800630a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063be:	d11b      	bne.n	80063f8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063c8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e4:	f043 0204 	orr.w	r2, r3, #4
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e000      	b.n	80063fa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	bc80      	pop	{r7}
 8006402:	4770      	bx	lr

08006404 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006414:	d103      	bne.n	800641e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800641c:	e007      	b.n	800642e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006426:	d102      	bne.n	800642e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2208      	movs	r2, #8
 800642c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	bc80      	pop	{r7}
 8006436:	4770      	bx	lr

08006438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b086      	sub	sp, #24
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e272      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 8087 	beq.w	8006566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006458:	4b92      	ldr	r3, [pc, #584]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f003 030c 	and.w	r3, r3, #12
 8006460:	2b04      	cmp	r3, #4
 8006462:	d00c      	beq.n	800647e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006464:	4b8f      	ldr	r3, [pc, #572]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	f003 030c 	and.w	r3, r3, #12
 800646c:	2b08      	cmp	r3, #8
 800646e:	d112      	bne.n	8006496 <HAL_RCC_OscConfig+0x5e>
 8006470:	4b8c      	ldr	r3, [pc, #560]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800647c:	d10b      	bne.n	8006496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800647e:	4b89      	ldr	r3, [pc, #548]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d06c      	beq.n	8006564 <HAL_RCC_OscConfig+0x12c>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d168      	bne.n	8006564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e24c      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800649e:	d106      	bne.n	80064ae <HAL_RCC_OscConfig+0x76>
 80064a0:	4b80      	ldr	r3, [pc, #512]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a7f      	ldr	r2, [pc, #508]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064aa:	6013      	str	r3, [r2, #0]
 80064ac:	e02e      	b.n	800650c <HAL_RCC_OscConfig+0xd4>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10c      	bne.n	80064d0 <HAL_RCC_OscConfig+0x98>
 80064b6:	4b7b      	ldr	r3, [pc, #492]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a7a      	ldr	r2, [pc, #488]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064c0:	6013      	str	r3, [r2, #0]
 80064c2:	4b78      	ldr	r3, [pc, #480]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a77      	ldr	r2, [pc, #476]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	e01d      	b.n	800650c <HAL_RCC_OscConfig+0xd4>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80064d8:	d10c      	bne.n	80064f4 <HAL_RCC_OscConfig+0xbc>
 80064da:	4b72      	ldr	r3, [pc, #456]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a71      	ldr	r2, [pc, #452]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	4b6f      	ldr	r3, [pc, #444]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a6e      	ldr	r2, [pc, #440]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f0:	6013      	str	r3, [r2, #0]
 80064f2:	e00b      	b.n	800650c <HAL_RCC_OscConfig+0xd4>
 80064f4:	4b6b      	ldr	r3, [pc, #428]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a6a      	ldr	r2, [pc, #424]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80064fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	4b68      	ldr	r3, [pc, #416]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a67      	ldr	r2, [pc, #412]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800650a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006514:	f7fc ff4a 	bl	80033ac <HAL_GetTick>
 8006518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800651a:	e008      	b.n	800652e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800651c:	f7fc ff46 	bl	80033ac <HAL_GetTick>
 8006520:	4602      	mov	r2, r0
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	1ad3      	subs	r3, r2, r3
 8006526:	2b64      	cmp	r3, #100	; 0x64
 8006528:	d901      	bls.n	800652e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800652a:	2303      	movs	r3, #3
 800652c:	e200      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800652e:	4b5d      	ldr	r3, [pc, #372]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d0f0      	beq.n	800651c <HAL_RCC_OscConfig+0xe4>
 800653a:	e014      	b.n	8006566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800653c:	f7fc ff36 	bl	80033ac <HAL_GetTick>
 8006540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006542:	e008      	b.n	8006556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006544:	f7fc ff32 	bl	80033ac <HAL_GetTick>
 8006548:	4602      	mov	r2, r0
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	2b64      	cmp	r3, #100	; 0x64
 8006550:	d901      	bls.n	8006556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e1ec      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006556:	4b53      	ldr	r3, [pc, #332]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1f0      	bne.n	8006544 <HAL_RCC_OscConfig+0x10c>
 8006562:	e000      	b.n	8006566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d063      	beq.n	800663a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006572:	4b4c      	ldr	r3, [pc, #304]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f003 030c 	and.w	r3, r3, #12
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00b      	beq.n	8006596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800657e:	4b49      	ldr	r3, [pc, #292]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f003 030c 	and.w	r3, r3, #12
 8006586:	2b08      	cmp	r3, #8
 8006588:	d11c      	bne.n	80065c4 <HAL_RCC_OscConfig+0x18c>
 800658a:	4b46      	ldr	r3, [pc, #280]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006592:	2b00      	cmp	r3, #0
 8006594:	d116      	bne.n	80065c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006596:	4b43      	ldr	r3, [pc, #268]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <HAL_RCC_OscConfig+0x176>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d001      	beq.n	80065ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e1c0      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065ae:	4b3d      	ldr	r3, [pc, #244]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	00db      	lsls	r3, r3, #3
 80065bc:	4939      	ldr	r1, [pc, #228]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065c2:	e03a      	b.n	800663a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d020      	beq.n	800660e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80065cc:	4b36      	ldr	r3, [pc, #216]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 80065ce:	2201      	movs	r2, #1
 80065d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065d2:	f7fc feeb 	bl	80033ac <HAL_GetTick>
 80065d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065d8:	e008      	b.n	80065ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065da:	f7fc fee7 	bl	80033ac <HAL_GetTick>
 80065de:	4602      	mov	r2, r0
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	1ad3      	subs	r3, r2, r3
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d901      	bls.n	80065ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e1a1      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ec:	4b2d      	ldr	r3, [pc, #180]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d0f0      	beq.n	80065da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065f8:	4b2a      	ldr	r3, [pc, #168]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	00db      	lsls	r3, r3, #3
 8006606:	4927      	ldr	r1, [pc, #156]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006608:	4313      	orrs	r3, r2
 800660a:	600b      	str	r3, [r1, #0]
 800660c:	e015      	b.n	800663a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800660e:	4b26      	ldr	r3, [pc, #152]	; (80066a8 <HAL_RCC_OscConfig+0x270>)
 8006610:	2200      	movs	r2, #0
 8006612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006614:	f7fc feca 	bl	80033ac <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800661c:	f7fc fec6 	bl	80033ac <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e180      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800662e:	4b1d      	ldr	r3, [pc, #116]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0308 	and.w	r3, r3, #8
 8006642:	2b00      	cmp	r3, #0
 8006644:	d03a      	beq.n	80066bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	699b      	ldr	r3, [r3, #24]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d019      	beq.n	8006682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800664e:	4b17      	ldr	r3, [pc, #92]	; (80066ac <HAL_RCC_OscConfig+0x274>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006654:	f7fc feaa 	bl	80033ac <HAL_GetTick>
 8006658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800665a:	e008      	b.n	800666e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800665c:	f7fc fea6 	bl	80033ac <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d901      	bls.n	800666e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e160      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800666e:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <HAL_RCC_OscConfig+0x26c>)
 8006670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d0f0      	beq.n	800665c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800667a:	2001      	movs	r0, #1
 800667c:	f000 fad8 	bl	8006c30 <RCC_Delay>
 8006680:	e01c      	b.n	80066bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <HAL_RCC_OscConfig+0x274>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006688:	f7fc fe90 	bl	80033ac <HAL_GetTick>
 800668c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800668e:	e00f      	b.n	80066b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006690:	f7fc fe8c 	bl	80033ac <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d908      	bls.n	80066b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	e146      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
 80066a2:	bf00      	nop
 80066a4:	40021000 	.word	0x40021000
 80066a8:	42420000 	.word	0x42420000
 80066ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066b0:	4b92      	ldr	r3, [pc, #584]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e9      	bne.n	8006690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f003 0304 	and.w	r3, r3, #4
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80a6 	beq.w	8006816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80066ca:	2300      	movs	r3, #0
 80066cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066ce:	4b8b      	ldr	r3, [pc, #556]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10d      	bne.n	80066f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066da:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80066dc:	69db      	ldr	r3, [r3, #28]
 80066de:	4a87      	ldr	r2, [pc, #540]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80066e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066e4:	61d3      	str	r3, [r2, #28]
 80066e6:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066ee:	60bb      	str	r3, [r7, #8]
 80066f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066f2:	2301      	movs	r3, #1
 80066f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066f6:	4b82      	ldr	r3, [pc, #520]	; (8006900 <HAL_RCC_OscConfig+0x4c8>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d118      	bne.n	8006734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006702:	4b7f      	ldr	r3, [pc, #508]	; (8006900 <HAL_RCC_OscConfig+0x4c8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a7e      	ldr	r2, [pc, #504]	; (8006900 <HAL_RCC_OscConfig+0x4c8>)
 8006708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800670c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800670e:	f7fc fe4d 	bl	80033ac <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006714:	e008      	b.n	8006728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006716:	f7fc fe49 	bl	80033ac <HAL_GetTick>
 800671a:	4602      	mov	r2, r0
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	2b64      	cmp	r3, #100	; 0x64
 8006722:	d901      	bls.n	8006728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8006724:	2303      	movs	r3, #3
 8006726:	e103      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006728:	4b75      	ldr	r3, [pc, #468]	; (8006900 <HAL_RCC_OscConfig+0x4c8>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0f0      	beq.n	8006716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d106      	bne.n	800674a <HAL_RCC_OscConfig+0x312>
 800673c:	4b6f      	ldr	r3, [pc, #444]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	4a6e      	ldr	r2, [pc, #440]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	6213      	str	r3, [r2, #32]
 8006748:	e02d      	b.n	80067a6 <HAL_RCC_OscConfig+0x36e>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10c      	bne.n	800676c <HAL_RCC_OscConfig+0x334>
 8006752:	4b6a      	ldr	r3, [pc, #424]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	4a69      	ldr	r2, [pc, #420]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006758:	f023 0301 	bic.w	r3, r3, #1
 800675c:	6213      	str	r3, [r2, #32]
 800675e:	4b67      	ldr	r3, [pc, #412]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	4a66      	ldr	r2, [pc, #408]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006764:	f023 0304 	bic.w	r3, r3, #4
 8006768:	6213      	str	r3, [r2, #32]
 800676a:	e01c      	b.n	80067a6 <HAL_RCC_OscConfig+0x36e>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b05      	cmp	r3, #5
 8006772:	d10c      	bne.n	800678e <HAL_RCC_OscConfig+0x356>
 8006774:	4b61      	ldr	r3, [pc, #388]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	4a60      	ldr	r2, [pc, #384]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800677a:	f043 0304 	orr.w	r3, r3, #4
 800677e:	6213      	str	r3, [r2, #32]
 8006780:	4b5e      	ldr	r3, [pc, #376]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006782:	6a1b      	ldr	r3, [r3, #32]
 8006784:	4a5d      	ldr	r2, [pc, #372]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006786:	f043 0301 	orr.w	r3, r3, #1
 800678a:	6213      	str	r3, [r2, #32]
 800678c:	e00b      	b.n	80067a6 <HAL_RCC_OscConfig+0x36e>
 800678e:	4b5b      	ldr	r3, [pc, #364]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	4a5a      	ldr	r2, [pc, #360]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006794:	f023 0301 	bic.w	r3, r3, #1
 8006798:	6213      	str	r3, [r2, #32]
 800679a:	4b58      	ldr	r3, [pc, #352]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4a57      	ldr	r2, [pc, #348]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80067a0:	f023 0304 	bic.w	r3, r3, #4
 80067a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d015      	beq.n	80067da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067ae:	f7fc fdfd 	bl	80033ac <HAL_GetTick>
 80067b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b4:	e00a      	b.n	80067cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b6:	f7fc fdf9 	bl	80033ac <HAL_GetTick>
 80067ba:	4602      	mov	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d901      	bls.n	80067cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e0b1      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067cc:	4b4b      	ldr	r3, [pc, #300]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d0ee      	beq.n	80067b6 <HAL_RCC_OscConfig+0x37e>
 80067d8:	e014      	b.n	8006804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067da:	f7fc fde7 	bl	80033ac <HAL_GetTick>
 80067de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067e0:	e00a      	b.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067e2:	f7fc fde3 	bl	80033ac <HAL_GetTick>
 80067e6:	4602      	mov	r2, r0
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d901      	bls.n	80067f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e09b      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80067f8:	4b40      	ldr	r3, [pc, #256]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	f003 0302 	and.w	r3, r3, #2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1ee      	bne.n	80067e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006804:	7dfb      	ldrb	r3, [r7, #23]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d105      	bne.n	8006816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800680a:	4b3c      	ldr	r3, [pc, #240]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	4a3b      	ldr	r2, [pc, #236]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8087 	beq.w	800692e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f003 030c 	and.w	r3, r3, #12
 8006828:	2b08      	cmp	r3, #8
 800682a:	d061      	beq.n	80068f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	69db      	ldr	r3, [r3, #28]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d146      	bne.n	80068c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006834:	4b33      	ldr	r3, [pc, #204]	; (8006904 <HAL_RCC_OscConfig+0x4cc>)
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800683a:	f7fc fdb7 	bl	80033ac <HAL_GetTick>
 800683e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006840:	e008      	b.n	8006854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006842:	f7fc fdb3 	bl	80033ac <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d901      	bls.n	8006854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	e06d      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006854:	4b29      	ldr	r3, [pc, #164]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1f0      	bne.n	8006842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006868:	d108      	bne.n	800687c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800686c:	685b      	ldr	r3, [r3, #4]
 800686e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	4921      	ldr	r1, [pc, #132]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006878:	4313      	orrs	r3, r2
 800687a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800687c:	4b1f      	ldr	r3, [pc, #124]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a19      	ldr	r1, [r3, #32]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	430b      	orrs	r3, r1
 800688e:	491b      	ldr	r1, [pc, #108]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 8006890:	4313      	orrs	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006894:	4b1b      	ldr	r3, [pc, #108]	; (8006904 <HAL_RCC_OscConfig+0x4cc>)
 8006896:	2201      	movs	r2, #1
 8006898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800689a:	f7fc fd87 	bl	80033ac <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068a2:	f7fc fd83 	bl	80033ac <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e03d      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80068b4:	4b11      	ldr	r3, [pc, #68]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x46a>
 80068c0:	e035      	b.n	800692e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068c2:	4b10      	ldr	r3, [pc, #64]	; (8006904 <HAL_RCC_OscConfig+0x4cc>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fc fd70 	bl	80033ac <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068d0:	f7fc fd6c 	bl	80033ac <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e026      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <HAL_RCC_OscConfig+0x4c4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1f0      	bne.n	80068d0 <HAL_RCC_OscConfig+0x498>
 80068ee:	e01e      	b.n	800692e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d107      	bne.n	8006908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e019      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
 80068fc:	40021000 	.word	0x40021000
 8006900:	40007000 	.word	0x40007000
 8006904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006908:	4b0b      	ldr	r3, [pc, #44]	; (8006938 <HAL_RCC_OscConfig+0x500>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	429a      	cmp	r2, r3
 800691a:	d106      	bne.n	800692a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d001      	beq.n	800692e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3718      	adds	r7, #24
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	40021000 	.word	0x40021000

0800693c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e0d0      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006950:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	429a      	cmp	r2, r3
 800695c:	d910      	bls.n	8006980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800695e:	4b67      	ldr	r3, [pc, #412]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f023 0207 	bic.w	r2, r3, #7
 8006966:	4965      	ldr	r1, [pc, #404]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	4313      	orrs	r3, r2
 800696c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800696e:	4b63      	ldr	r3, [pc, #396]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0307 	and.w	r3, r3, #7
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d001      	beq.n	8006980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e0b8      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0302 	and.w	r3, r3, #2
 8006988:	2b00      	cmp	r3, #0
 800698a:	d020      	beq.n	80069ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0304 	and.w	r3, r3, #4
 8006994:	2b00      	cmp	r3, #0
 8006996:	d005      	beq.n	80069a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006998:	4b59      	ldr	r3, [pc, #356]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	4a58      	ldr	r2, [pc, #352]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 800699e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80069a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80069b0:	4b53      	ldr	r3, [pc, #332]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a52      	ldr	r2, [pc, #328]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80069ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80069bc:	4b50      	ldr	r3, [pc, #320]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	494d      	ldr	r1, [pc, #308]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d040      	beq.n	8006a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d107      	bne.n	80069f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80069e2:	4b47      	ldr	r3, [pc, #284]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d115      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e07f      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2b02      	cmp	r3, #2
 80069f8:	d107      	bne.n	8006a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069fa:	4b41      	ldr	r3, [pc, #260]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d109      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e073      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a0a:	4b3d      	ldr	r3, [pc, #244]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e06b      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a1a:	4b39      	ldr	r3, [pc, #228]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f023 0203 	bic.w	r2, r3, #3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	4936      	ldr	r1, [pc, #216]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a2c:	f7fc fcbe 	bl	80033ac <HAL_GetTick>
 8006a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a32:	e00a      	b.n	8006a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a34:	f7fc fcba 	bl	80033ac <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d901      	bls.n	8006a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006a46:	2303      	movs	r3, #3
 8006a48:	e053      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a4a:	4b2d      	ldr	r3, [pc, #180]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f003 020c 	and.w	r2, r3, #12
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d1eb      	bne.n	8006a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0307 	and.w	r3, r3, #7
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d210      	bcs.n	8006a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f023 0207 	bic.w	r2, r3, #7
 8006a72:	4922      	ldr	r1, [pc, #136]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a7a:	4b20      	ldr	r3, [pc, #128]	; (8006afc <HAL_RCC_ClockConfig+0x1c0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d001      	beq.n	8006a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e032      	b.n	8006af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f003 0304 	and.w	r3, r3, #4
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d008      	beq.n	8006aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a98:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	4916      	ldr	r1, [pc, #88]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f003 0308 	and.w	r3, r3, #8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d009      	beq.n	8006aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006ab6:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	490e      	ldr	r1, [pc, #56]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006aca:	f000 f821 	bl	8006b10 <HAL_RCC_GetSysClockFreq>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_RCC_ClockConfig+0x1c4>)
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	091b      	lsrs	r3, r3, #4
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	490a      	ldr	r1, [pc, #40]	; (8006b04 <HAL_RCC_ClockConfig+0x1c8>)
 8006adc:	5ccb      	ldrb	r3, [r1, r3]
 8006ade:	fa22 f303 	lsr.w	r3, r2, r3
 8006ae2:	4a09      	ldr	r2, [pc, #36]	; (8006b08 <HAL_RCC_ClockConfig+0x1cc>)
 8006ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006ae6:	4b09      	ldr	r3, [pc, #36]	; (8006b0c <HAL_RCC_ClockConfig+0x1d0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f7fc fc2e 	bl	800334c <HAL_InitTick>

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	40022000 	.word	0x40022000
 8006b00:	40021000 	.word	0x40021000
 8006b04:	0800e7a8 	.word	0x0800e7a8
 8006b08:	20000084 	.word	0x20000084
 8006b0c:	20000088 	.word	0x20000088

08006b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b10:	b490      	push	{r4, r7}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b16:	4b29      	ldr	r3, [pc, #164]	; (8006bbc <HAL_RCC_GetSysClockFreq+0xac>)
 8006b18:	1d3c      	adds	r4, r7, #4
 8006b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b20:	f240 2301 	movw	r3, #513	; 0x201
 8006b24:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b26:	2300      	movs	r3, #0
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61bb      	str	r3, [r7, #24]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	2300      	movs	r3, #0
 8006b34:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b36:	2300      	movs	r3, #0
 8006b38:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b3a:	4b21      	ldr	r3, [pc, #132]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 030c 	and.w	r3, r3, #12
 8006b46:	2b04      	cmp	r3, #4
 8006b48:	d002      	beq.n	8006b50 <HAL_RCC_GetSysClockFreq+0x40>
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d003      	beq.n	8006b56 <HAL_RCC_GetSysClockFreq+0x46>
 8006b4e:	e02b      	b.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006b50:	4b1c      	ldr	r3, [pc, #112]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b52:	623b      	str	r3, [r7, #32]
      break;
 8006b54:	e02b      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	0c9b      	lsrs	r3, r3, #18
 8006b5a:	f003 030f 	and.w	r3, r3, #15
 8006b5e:	3328      	adds	r3, #40	; 0x28
 8006b60:	443b      	add	r3, r7
 8006b62:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006b66:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d012      	beq.n	8006b98 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006b72:	4b13      	ldr	r3, [pc, #76]	; (8006bc0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	0c5b      	lsrs	r3, r3, #17
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	3328      	adds	r3, #40	; 0x28
 8006b7e:	443b      	add	r3, r7
 8006b80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006b84:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	4a0e      	ldr	r2, [pc, #56]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b8a:	fb03 f202 	mul.w	r2, r3, r2
 8006b8e:	69bb      	ldr	r3, [r7, #24]
 8006b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
 8006b96:	e004      	b.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	4a0b      	ldr	r2, [pc, #44]	; (8006bc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006b9c:	fb02 f303 	mul.w	r3, r2, r3
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	623b      	str	r3, [r7, #32]
      break;
 8006ba6:	e002      	b.n	8006bae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006ba8:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006baa:	623b      	str	r3, [r7, #32]
      break;
 8006bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bae:	6a3b      	ldr	r3, [r7, #32]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3728      	adds	r7, #40	; 0x28
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bc90      	pop	{r4, r7}
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	0800bb40 	.word	0x0800bb40
 8006bc0:	40021000 	.word	0x40021000
 8006bc4:	007a1200 	.word	0x007a1200
 8006bc8:	003d0900 	.word	0x003d0900

08006bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bd0:	4b02      	ldr	r3, [pc, #8]	; (8006bdc <HAL_RCC_GetHCLKFreq+0x10>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	20000084 	.word	0x20000084

08006be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006be4:	f7ff fff2 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006be8:	4602      	mov	r2, r0
 8006bea:	4b05      	ldr	r3, [pc, #20]	; (8006c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	0a1b      	lsrs	r3, r3, #8
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	4903      	ldr	r1, [pc, #12]	; (8006c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bf6:	5ccb      	ldrb	r3, [r1, r3]
 8006bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	40021000 	.word	0x40021000
 8006c04:	0800e7b8 	.word	0x0800e7b8

08006c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c0c:	f7ff ffde 	bl	8006bcc <HAL_RCC_GetHCLKFreq>
 8006c10:	4602      	mov	r2, r0
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	0adb      	lsrs	r3, r3, #11
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	4903      	ldr	r1, [pc, #12]	; (8006c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c1e:	5ccb      	ldrb	r3, [r1, r3]
 8006c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	40021000 	.word	0x40021000
 8006c2c:	0800e7b8 	.word	0x0800e7b8

08006c30 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006c30:	b480      	push	{r7}
 8006c32:	b085      	sub	sp, #20
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006c38:	4b0a      	ldr	r3, [pc, #40]	; (8006c64 <RCC_Delay+0x34>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a0a      	ldr	r2, [pc, #40]	; (8006c68 <RCC_Delay+0x38>)
 8006c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006c42:	0a5b      	lsrs	r3, r3, #9
 8006c44:	687a      	ldr	r2, [r7, #4]
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
 8006c4a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006c4c:	bf00      	nop
  }
  while (Delay --);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1e5a      	subs	r2, r3, #1
 8006c52:	60fa      	str	r2, [r7, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f9      	bne.n	8006c4c <RCC_Delay+0x1c>
}
 8006c58:	bf00      	nop
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bc80      	pop	{r7}
 8006c62:	4770      	bx	lr
 8006c64:	20000084 	.word	0x20000084
 8006c68:	10624dd3 	.word	0x10624dd3

08006c6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d101      	bne.n	8006c7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e076      	b.n	8006d6c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d108      	bne.n	8006c98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c8e:	d009      	beq.n	8006ca4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	61da      	str	r2, [r3, #28]
 8006c96:	e005      	b.n	8006ca4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fc f9e8 	bl	8003094 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cda:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006cec:	431a      	orrs	r2, r3
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	431a      	orrs	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	695b      	ldr	r3, [r3, #20]
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	431a      	orrs	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d14:	431a      	orrs	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006d1e:	431a      	orrs	r2, r3
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a1b      	ldr	r3, [r3, #32]
 8006d24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d28:	ea42 0103 	orr.w	r1, r2, r3
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	0c1a      	lsrs	r2, r3, #16
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f002 0204 	and.w	r2, r2, #4
 8006d4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2201      	movs	r2, #1
 8006d66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3708      	adds	r7, #8
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_SPI_Transmit+0x22>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e126      	b.n	8006fe4 <HAL_SPI_Transmit+0x270>
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d9e:	f7fc fb05 	bl	80033ac <HAL_GetTick>
 8006da2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d002      	beq.n	8006dba <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006db4:	2302      	movs	r3, #2
 8006db6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006db8:	e10b      	b.n	8006fd2 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_SPI_Transmit+0x52>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006dca:	e102      	b.n	8006fd2 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2203      	movs	r2, #3
 8006dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e12:	d10f      	bne.n	8006e34 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e22:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e32:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e3e:	2b40      	cmp	r3, #64	; 0x40
 8006e40:	d007      	beq.n	8006e52 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e50:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e5a:	d14b      	bne.n	8006ef4 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <HAL_SPI_Transmit+0xf6>
 8006e64:	8afb      	ldrh	r3, [r7, #22]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d13e      	bne.n	8006ee8 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6e:	881a      	ldrh	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7a:	1c9a      	adds	r2, r3, #2
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e8e:	e02b      	b.n	8006ee8 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d112      	bne.n	8006ec4 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea2:	881a      	ldrh	r2, [r3, #0]
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b29a      	uxth	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ec2:	e011      	b.n	8006ee8 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec4:	f7fc fa72 	bl	80033ac <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d803      	bhi.n	8006edc <HAL_SPI_Transmit+0x168>
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eda:	d102      	bne.n	8006ee2 <HAL_SPI_Transmit+0x16e>
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d102      	bne.n	8006ee8 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ee6:	e074      	b.n	8006fd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1ce      	bne.n	8006e90 <HAL_SPI_Transmit+0x11c>
 8006ef2:	e04c      	b.n	8006f8e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <HAL_SPI_Transmit+0x18e>
 8006efc:	8afb      	ldrh	r3, [r7, #22]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d140      	bne.n	8006f84 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	330c      	adds	r3, #12
 8006f0c:	7812      	ldrb	r2, [r2, #0]
 8006f0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f28:	e02c      	b.n	8006f84 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f003 0302 	and.w	r3, r3, #2
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d113      	bne.n	8006f60 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	330c      	adds	r3, #12
 8006f42:	7812      	ldrb	r2, [r2, #0]
 8006f44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	3b01      	subs	r3, #1
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f5e:	e011      	b.n	8006f84 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f60:	f7fc fa24 	bl	80033ac <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d803      	bhi.n	8006f78 <HAL_SPI_Transmit+0x204>
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f76:	d102      	bne.n	8006f7e <HAL_SPI_Transmit+0x20a>
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d102      	bne.n	8006f84 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f82:	e026      	b.n	8006fd2 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f88:	b29b      	uxth	r3, r3
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d1cd      	bne.n	8006f2a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 fbb8 	bl	8007708 <SPI_EndRxTxTransaction>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2220      	movs	r2, #32
 8006fa2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006fac:	2300      	movs	r3, #0
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	613b      	str	r3, [r7, #16]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	613b      	str	r3, [r7, #16]
 8006fc0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d002      	beq.n	8006fd0 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	77fb      	strb	r3, [r7, #31]
 8006fce:	e000      	b.n	8006fd2 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fd0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fe2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b088      	sub	sp, #32
 8006ff0:	af02      	add	r7, sp, #8
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	603b      	str	r3, [r7, #0]
 8006ff8:	4613      	mov	r3, r2
 8006ffa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007008:	d112      	bne.n	8007030 <HAL_SPI_Receive+0x44>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d10e      	bne.n	8007030 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2204      	movs	r2, #4
 8007016:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800701a:	88fa      	ldrh	r2, [r7, #6]
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	4613      	mov	r3, r2
 8007022:	68ba      	ldr	r2, [r7, #8]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f000 f8f1 	bl	800720e <HAL_SPI_TransmitReceive>
 800702c:	4603      	mov	r3, r0
 800702e:	e0ea      	b.n	8007206 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_SPI_Receive+0x52>
 800703a:	2302      	movs	r3, #2
 800703c:	e0e3      	b.n	8007206 <HAL_SPI_Receive+0x21a>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007046:	f7fc f9b1 	bl	80033ac <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d002      	beq.n	800705e <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007058:	2302      	movs	r3, #2
 800705a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800705c:	e0ca      	b.n	80071f4 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d002      	beq.n	800706a <HAL_SPI_Receive+0x7e>
 8007064:	88fb      	ldrh	r3, [r7, #6]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d102      	bne.n	8007070 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800706e:	e0c1      	b.n	80071f4 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2204      	movs	r2, #4
 8007074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2200      	movs	r2, #0
 800707c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	88fa      	ldrh	r2, [r7, #6]
 8007088:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	88fa      	ldrh	r2, [r7, #6]
 800708e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2200      	movs	r2, #0
 800709a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2200      	movs	r2, #0
 80070a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070b6:	d10f      	bne.n	80070d8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d007      	beq.n	80070f6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d162      	bne.n	80071c4 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070fe:	e02e      	b.n	800715e <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b01      	cmp	r3, #1
 800710c:	d115      	bne.n	800713a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f103 020c 	add.w	r2, r3, #12
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711a:	7812      	ldrb	r2, [r2, #0]
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800712e:	b29b      	uxth	r3, r3
 8007130:	3b01      	subs	r3, #1
 8007132:	b29a      	uxth	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007138:	e011      	b.n	800715e <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800713a:	f7fc f937 	bl	80033ac <HAL_GetTick>
 800713e:	4602      	mov	r2, r0
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	1ad3      	subs	r3, r2, r3
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d803      	bhi.n	8007152 <HAL_SPI_Receive+0x166>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007150:	d102      	bne.n	8007158 <HAL_SPI_Receive+0x16c>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d102      	bne.n	800715e <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800715c:	e04a      	b.n	80071f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1cb      	bne.n	8007100 <HAL_SPI_Receive+0x114>
 8007168:	e031      	b.n	80071ce <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d113      	bne.n	80071a0 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007182:	b292      	uxth	r2, r2
 8007184:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800718a:	1c9a      	adds	r2, r3, #2
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800719e:	e011      	b.n	80071c4 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071a0:	f7fc f904 	bl	80033ac <HAL_GetTick>
 80071a4:	4602      	mov	r2, r0
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	1ad3      	subs	r3, r2, r3
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d803      	bhi.n	80071b8 <HAL_SPI_Receive+0x1cc>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d102      	bne.n	80071be <HAL_SPI_Receive+0x1d2>
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071c2:	e017      	b.n	80071f4 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d1cd      	bne.n	800716a <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ce:	693a      	ldr	r2, [r7, #16]
 80071d0:	6839      	ldr	r1, [r7, #0]
 80071d2:	68f8      	ldr	r0, [r7, #12]
 80071d4:	f000 fa46 	bl	8007664 <SPI_EndRxTransaction>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2220      	movs	r2, #32
 80071e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d002      	beq.n	80071f2 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	75fb      	strb	r3, [r7, #23]
 80071f0:	e000      	b.n	80071f4 <HAL_SPI_Receive+0x208>
  }

error :
 80071f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007204:	7dfb      	ldrb	r3, [r7, #23]
}
 8007206:	4618      	mov	r0, r3
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b08c      	sub	sp, #48	; 0x30
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
 800721a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800721c:	2301      	movs	r3, #1
 800721e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x26>
 8007230:	2302      	movs	r3, #2
 8007232:	e18a      	b.n	800754a <HAL_SPI_TransmitReceive+0x33c>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800723c:	f7fc f8b6 	bl	80033ac <HAL_GetTick>
 8007240:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007252:	887b      	ldrh	r3, [r7, #2]
 8007254:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007256:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800725a:	2b01      	cmp	r3, #1
 800725c:	d00f      	beq.n	800727e <HAL_SPI_TransmitReceive+0x70>
 800725e:	69fb      	ldr	r3, [r7, #28]
 8007260:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007264:	d107      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d103      	bne.n	8007276 <HAL_SPI_TransmitReceive+0x68>
 800726e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007272:	2b04      	cmp	r3, #4
 8007274:	d003      	beq.n	800727e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007276:	2302      	movs	r3, #2
 8007278:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800727c:	e15b      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x82>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_SPI_TransmitReceive+0x82>
 800728a:	887b      	ldrh	r3, [r7, #2]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d103      	bne.n	8007298 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007296:	e14e      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d003      	beq.n	80072ac <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2205      	movs	r2, #5
 80072a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2200      	movs	r2, #0
 80072b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	687a      	ldr	r2, [r7, #4]
 80072b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	887a      	ldrh	r2, [r7, #2]
 80072bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	887a      	ldrh	r2, [r7, #2]
 80072c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68ba      	ldr	r2, [r7, #8]
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	887a      	ldrh	r2, [r7, #2]
 80072ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	887a      	ldrh	r2, [r7, #2]
 80072d4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2200      	movs	r2, #0
 80072da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	2200      	movs	r2, #0
 80072e0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072ec:	2b40      	cmp	r3, #64	; 0x40
 80072ee:	d007      	beq.n	8007300 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007308:	d178      	bne.n	80073fc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d002      	beq.n	8007318 <HAL_SPI_TransmitReceive+0x10a>
 8007312:	8b7b      	ldrh	r3, [r7, #26]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d166      	bne.n	80073e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	881a      	ldrh	r2, [r3, #0]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007328:	1c9a      	adds	r2, r3, #2
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b29a      	uxth	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800733c:	e053      	b.n	80073e6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 0302 	and.w	r3, r3, #2
 8007348:	2b02      	cmp	r3, #2
 800734a:	d11b      	bne.n	8007384 <HAL_SPI_TransmitReceive+0x176>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007350:	b29b      	uxth	r3, r3
 8007352:	2b00      	cmp	r3, #0
 8007354:	d016      	beq.n	8007384 <HAL_SPI_TransmitReceive+0x176>
 8007356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d113      	bne.n	8007384 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007360:	881a      	ldrh	r2, [r3, #0]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800736c:	1c9a      	adds	r2, r3, #2
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007376:	b29b      	uxth	r3, r3
 8007378:	3b01      	subs	r3, #1
 800737a:	b29a      	uxth	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b01      	cmp	r3, #1
 8007390:	d119      	bne.n	80073c6 <HAL_SPI_TransmitReceive+0x1b8>
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007396:	b29b      	uxth	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d014      	beq.n	80073c6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68da      	ldr	r2, [r3, #12]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	b292      	uxth	r2, r2
 80073a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ae:	1c9a      	adds	r2, r3, #2
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c2:	2301      	movs	r3, #1
 80073c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073c6:	f7fb fff1 	bl	80033ac <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d807      	bhi.n	80073e6 <HAL_SPI_TransmitReceive+0x1d8>
 80073d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073dc:	d003      	beq.n	80073e6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073de:	2303      	movs	r3, #3
 80073e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073e4:	e0a7      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1a6      	bne.n	800733e <HAL_SPI_TransmitReceive+0x130>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1a1      	bne.n	800733e <HAL_SPI_TransmitReceive+0x130>
 80073fa:	e07c      	b.n	80074f6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <HAL_SPI_TransmitReceive+0x1fc>
 8007404:	8b7b      	ldrh	r3, [r7, #26]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d16b      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	330c      	adds	r3, #12
 8007414:	7812      	ldrb	r2, [r2, #0]
 8007416:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741c:	1c5a      	adds	r2, r3, #1
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007426:	b29b      	uxth	r3, r3
 8007428:	3b01      	subs	r3, #1
 800742a:	b29a      	uxth	r2, r3
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007430:	e057      	b.n	80074e2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	f003 0302 	and.w	r3, r3, #2
 800743c:	2b02      	cmp	r3, #2
 800743e:	d11c      	bne.n	800747a <HAL_SPI_TransmitReceive+0x26c>
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d017      	beq.n	800747a <HAL_SPI_TransmitReceive+0x26c>
 800744a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744c:	2b01      	cmp	r3, #1
 800744e:	d114      	bne.n	800747a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	330c      	adds	r3, #12
 800745a:	7812      	ldrb	r2, [r2, #0]
 800745c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007462:	1c5a      	adds	r2, r3, #1
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800746c:	b29b      	uxth	r3, r3
 800746e:	3b01      	subs	r3, #1
 8007470:	b29a      	uxth	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007476:	2300      	movs	r3, #0
 8007478:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b01      	cmp	r3, #1
 8007486:	d119      	bne.n	80074bc <HAL_SPI_TransmitReceive+0x2ae>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748c:	b29b      	uxth	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d014      	beq.n	80074bc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749c:	b2d2      	uxtb	r2, r2
 800749e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	1c5a      	adds	r2, r3, #1
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	3b01      	subs	r3, #1
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074b8:	2301      	movs	r3, #1
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074bc:	f7fb ff76 	bl	80033ac <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d803      	bhi.n	80074d4 <HAL_SPI_TransmitReceive+0x2c6>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d2:	d102      	bne.n	80074da <HAL_SPI_TransmitReceive+0x2cc>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074da:	2303      	movs	r3, #3
 80074dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074e0:	e029      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1a2      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x224>
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d19d      	bne.n	8007432 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f000 f904 	bl	8007708 <SPI_EndRxTxTransaction>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d006      	beq.n	8007514 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007512:	e010      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2b00      	cmp	r3, #0
 800751a:	d10b      	bne.n	8007534 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800751c:	2300      	movs	r3, #0
 800751e:	617b      	str	r3, [r7, #20]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	617b      	str	r3, [r7, #20]
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	e000      	b.n	8007536 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007534:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007546:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800754a:	4618      	mov	r0, r3
 800754c:	3730      	adds	r7, #48	; 0x30
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	603b      	str	r3, [r7, #0]
 8007560:	4613      	mov	r3, r2
 8007562:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007564:	f7fb ff22 	bl	80033ac <HAL_GetTick>
 8007568:	4602      	mov	r2, r0
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	1a9b      	subs	r3, r3, r2
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007574:	f7fb ff1a 	bl	80033ac <HAL_GetTick>
 8007578:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800757a:	4b39      	ldr	r3, [pc, #228]	; (8007660 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	015b      	lsls	r3, r3, #5
 8007580:	0d1b      	lsrs	r3, r3, #20
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800758a:	e054      	b.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007592:	d050      	beq.n	8007636 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007594:	f7fb ff0a 	bl	80033ac <HAL_GetTick>
 8007598:	4602      	mov	r2, r0
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	1ad3      	subs	r3, r2, r3
 800759e:	69fa      	ldr	r2, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d902      	bls.n	80075aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d13d      	bne.n	8007626 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	685a      	ldr	r2, [r3, #4]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075c2:	d111      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075cc:	d004      	beq.n	80075d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075d6:	d107      	bne.n	80075e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f0:	d10f      	bne.n	8007612 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007600:	601a      	str	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681a      	ldr	r2, [r3, #0]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007610:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e017      	b.n	8007656 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800762c:	2300      	movs	r3, #0
 800762e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3b01      	subs	r3, #1
 8007634:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4013      	ands	r3, r2
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	429a      	cmp	r2, r3
 8007644:	bf0c      	ite	eq
 8007646:	2301      	moveq	r3, #1
 8007648:	2300      	movne	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	461a      	mov	r2, r3
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	429a      	cmp	r2, r3
 8007652:	d19b      	bne.n	800758c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007654:	2300      	movs	r3, #0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	20000084 	.word	0x20000084

08007664 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af02      	add	r7, sp, #8
 800766a:	60f8      	str	r0, [r7, #12]
 800766c:	60b9      	str	r1, [r7, #8]
 800766e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007678:	d111      	bne.n	800769e <SPI_EndRxTransaction+0x3a>
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007682:	d004      	beq.n	800768e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800768c:	d107      	bne.n	800769e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800769c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076a6:	d117      	bne.n	80076d8 <SPI_EndRxTransaction+0x74>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d112      	bne.n	80076d8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2200      	movs	r2, #0
 80076ba:	2101      	movs	r1, #1
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff ff49 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d01a      	beq.n	80076fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e013      	b.n	8007700 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	9300      	str	r3, [sp, #0]
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	2200      	movs	r2, #0
 80076e0:	2180      	movs	r1, #128	; 0x80
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f7ff ff36 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d007      	beq.n	80076fe <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	f043 0220 	orr.w	r2, r3, #32
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e000      	b.n	8007700 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b086      	sub	sp, #24
 800770c:	af02      	add	r7, sp, #8
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	9300      	str	r3, [sp, #0]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	2180      	movs	r1, #128	; 0x80
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f7ff ff18 	bl	8007554 <SPI_WaitFlagStateUntilTimeout>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d007      	beq.n	800773a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800772e:	f043 0220 	orr.w	r2, r3, #32
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007736:	2303      	movs	r3, #3
 8007738:	e000      	b.n	800773c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800773a:	2300      	movs	r3, #0
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e03f      	b.n	80077d6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fb fcde 	bl	800312c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2224      	movs	r2, #36	; 0x24
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	68da      	ldr	r2, [r3, #12]
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fcc9 	bl	8008120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	691a      	ldr	r2, [r3, #16]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800779c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	695a      	ldr	r2, [r3, #20]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2200      	movs	r2, #0
 80077c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b08a      	sub	sp, #40	; 0x28
 80077e2:	af02      	add	r7, sp, #8
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	60b9      	str	r1, [r7, #8]
 80077e8:	603b      	str	r3, [r7, #0]
 80077ea:	4613      	mov	r3, r2
 80077ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b20      	cmp	r3, #32
 80077fc:	d17c      	bne.n	80078f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_UART_Transmit+0x2c>
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e075      	b.n	80078fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_UART_Transmit+0x3e>
 8007818:	2302      	movs	r3, #2
 800781a:	e06e      	b.n	80078fa <HAL_UART_Transmit+0x11c>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2221      	movs	r2, #33	; 0x21
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007832:	f7fb fdbb 	bl	80033ac <HAL_GetTick>
 8007836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	88fa      	ldrh	r2, [r7, #6]
 800783c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	88fa      	ldrh	r2, [r7, #6]
 8007842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784c:	d108      	bne.n	8007860 <HAL_UART_Transmit+0x82>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	691b      	ldr	r3, [r3, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d104      	bne.n	8007860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007856:	2300      	movs	r3, #0
 8007858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	61bb      	str	r3, [r7, #24]
 800785e:	e003      	b.n	8007868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007864:	2300      	movs	r3, #0
 8007866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007870:	e02a      	b.n	80078c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	9300      	str	r3, [sp, #0]
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2200      	movs	r2, #0
 800787a:	2180      	movs	r1, #128	; 0x80
 800787c:	68f8      	ldr	r0, [r7, #12]
 800787e:	f000 fa7c 	bl	8007d7a <UART_WaitOnFlagUntilTimeout>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e036      	b.n	80078fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10b      	bne.n	80078aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	881b      	ldrh	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	3302      	adds	r3, #2
 80078a6:	61bb      	str	r3, [r7, #24]
 80078a8:	e007      	b.n	80078ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	781a      	ldrb	r2, [r3, #0]
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078be:	b29b      	uxth	r3, r3
 80078c0:	3b01      	subs	r3, #1
 80078c2:	b29a      	uxth	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1cf      	bne.n	8007872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2200      	movs	r2, #0
 80078da:	2140      	movs	r1, #64	; 0x40
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 fa4c 	bl	8007d7a <UART_WaitOnFlagUntilTimeout>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80078e8:	2303      	movs	r3, #3
 80078ea:	e006      	b.n	80078fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80078f4:	2300      	movs	r3, #0
 80078f6:	e000      	b.n	80078fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80078f8:	2302      	movs	r3, #2
  }
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3720      	adds	r7, #32
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007902:	b480      	push	{r7}
 8007904:	b085      	sub	sp, #20
 8007906:	af00      	add	r7, sp, #0
 8007908:	60f8      	str	r0, [r7, #12]
 800790a:	60b9      	str	r1, [r7, #8]
 800790c:	4613      	mov	r3, r2
 800790e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b20      	cmp	r3, #32
 800791a:	d130      	bne.n	800797e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d002      	beq.n	8007928 <HAL_UART_Transmit_IT+0x26>
 8007922:	88fb      	ldrh	r3, [r7, #6]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e029      	b.n	8007980 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_UART_Transmit_IT+0x38>
 8007936:	2302      	movs	r3, #2
 8007938:	e022      	b.n	8007980 <HAL_UART_Transmit_IT+0x7e>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	88fa      	ldrh	r2, [r7, #6]
 800794c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	88fa      	ldrh	r2, [r7, #6]
 8007952:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	2221      	movs	r2, #33	; 0x21
 800795e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	68da      	ldr	r2, [r3, #12]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007978:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800797a:	2300      	movs	r3, #0
 800797c:	e000      	b.n	8007980 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800797e:	2302      	movs	r3, #2
  }
}
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr

0800798a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800798a:	b580      	push	{r7, lr}
 800798c:	b084      	sub	sp, #16
 800798e:	af00      	add	r7, sp, #0
 8007990:	60f8      	str	r0, [r7, #12]
 8007992:	60b9      	str	r1, [r7, #8]
 8007994:	4613      	mov	r3, r2
 8007996:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d11d      	bne.n	80079e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_UART_Receive_IT+0x26>
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e016      	b.n	80079e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d101      	bne.n	80079c2 <HAL_UART_Receive_IT+0x38>
 80079be:	2302      	movs	r3, #2
 80079c0:	e00f      	b.n	80079e2 <HAL_UART_Receive_IT+0x58>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2201      	movs	r2, #1
 80079c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 80079d0:	88fb      	ldrh	r3, [r7, #6]
 80079d2:	461a      	mov	r2, r3
 80079d4:	68b9      	ldr	r1, [r7, #8]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	f000 fa19 	bl	8007e0e <UART_Start_Receive_IT>
 80079dc:	4603      	mov	r3, r0
 80079de:	e000      	b.n	80079e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079e0:	2302      	movs	r3, #2
  }
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3710      	adds	r7, #16
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	; 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10d      	bne.n	8007a3e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d008      	beq.n	8007a3e <HAL_UART_IRQHandler+0x52>
 8007a2c:	6a3b      	ldr	r3, [r7, #32]
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 fac9 	bl	8007fce <UART_Receive_IT>
      return;
 8007a3c:	e17b      	b.n	8007d36 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a3e:	69bb      	ldr	r3, [r7, #24]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	f000 80b1 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x1bc>
 8007a46:	69fb      	ldr	r3, [r7, #28]
 8007a48:	f003 0301 	and.w	r3, r3, #1
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d105      	bne.n	8007a5c <HAL_UART_IRQHandler+0x70>
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	f000 80a6 	beq.w	8007ba8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5e:	f003 0301 	and.w	r3, r3, #1
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00a      	beq.n	8007a7c <HAL_UART_IRQHandler+0x90>
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d005      	beq.n	8007a7c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a74:	f043 0201 	orr.w	r2, r3, #1
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_UART_IRQHandler+0xb0>
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d005      	beq.n	8007a9c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a94:	f043 0202 	orr.w	r2, r3, #2
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00a      	beq.n	8007abc <HAL_UART_IRQHandler+0xd0>
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	f043 0204 	orr.w	r2, r3, #4
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <HAL_UART_IRQHandler+0xfa>
 8007ac6:	6a3b      	ldr	r3, [r7, #32]
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d104      	bne.n	8007ada <HAL_UART_IRQHandler+0xee>
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d005      	beq.n	8007ae6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ade:	f043 0208 	orr.w	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f000 811e 	beq.w	8007d2c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	f003 0320 	and.w	r3, r3, #32
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <HAL_UART_IRQHandler+0x11e>
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	f003 0320 	and.w	r3, r3, #32
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fa62 	bl	8007fce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695b      	ldr	r3, [r3, #20]
 8007b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf14      	ite	ne
 8007b18:	2301      	movne	r3, #1
 8007b1a:	2300      	moveq	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	f003 0308 	and.w	r3, r3, #8
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d102      	bne.n	8007b32 <HAL_UART_IRQHandler+0x146>
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d031      	beq.n	8007b96 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f9a4 	bl	8007e80 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d023      	beq.n	8007b8e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b54:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d013      	beq.n	8007b86 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	4a76      	ldr	r2, [pc, #472]	; (8007d3c <HAL_UART_IRQHandler+0x350>)
 8007b64:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f7fb fd94 	bl	8003698 <HAL_DMA_Abort_IT>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d016      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b80:	4610      	mov	r0, r2
 8007b82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b84:	e00e      	b.n	8007ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 f8e3 	bl	8007d52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8c:	e00a      	b.n	8007ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8df 	bl	8007d52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	e006      	b.n	8007ba4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f8db 	bl	8007d52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ba2:	e0c3      	b.n	8007d2c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	bf00      	nop
    return;
 8007ba6:	e0c1      	b.n	8007d2c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	f040 80a1 	bne.w	8007cf4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 809b 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	f000 8095 	beq.w	8007cf4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bca:	2300      	movs	r3, #0
 8007bcc:	60fb      	str	r3, [r7, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d04e      	beq.n	8007c8c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007bf8:	8a3b      	ldrh	r3, [r7, #16]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8098 	beq.w	8007d30 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c04:	8a3a      	ldrh	r2, [r7, #16]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	f080 8092 	bcs.w	8007d30 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	8a3a      	ldrh	r2, [r7, #16]
 8007c10:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	2b20      	cmp	r3, #32
 8007c1a:	d02b      	beq.n	8007c74 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	68da      	ldr	r2, [r3, #12]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c2a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695a      	ldr	r2, [r3, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f022 0201 	bic.w	r2, r2, #1
 8007c3a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695a      	ldr	r2, [r3, #20]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c4a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f022 0210 	bic.w	r2, r2, #16
 8007c68:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fb fcd7 	bl	8003622 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	1ad3      	subs	r3, r2, r3
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f86d 	bl	8007d64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007c8a:	e051      	b.n	8007d30 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d047      	beq.n	8007d34 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8007ca4:	8a7b      	ldrh	r3, [r7, #18]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d044      	beq.n	8007d34 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cb8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	695a      	ldr	r2, [r3, #20]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f022 0201 	bic.w	r2, r2, #1
 8007cc8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	68da      	ldr	r2, [r3, #12]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f022 0210 	bic.w	r2, r2, #16
 8007ce6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ce8:	8a7b      	ldrh	r3, [r7, #18]
 8007cea:	4619      	mov	r1, r3
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f839 	bl	8007d64 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007cf2:	e01f      	b.n	8007d34 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d008      	beq.n	8007d10 <HAL_UART_IRQHandler+0x324>
 8007cfe:	6a3b      	ldr	r3, [r7, #32]
 8007d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d003      	beq.n	8007d10 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f8f9 	bl	8007f00 <UART_Transmit_IT>
    return;
 8007d0e:	e012      	b.n	8007d36 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00d      	beq.n	8007d36 <HAL_UART_IRQHandler+0x34a>
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d008      	beq.n	8007d36 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 f93a 	bl	8007f9e <UART_EndTransmit_IT>
    return;
 8007d2a:	e004      	b.n	8007d36 <HAL_UART_IRQHandler+0x34a>
    return;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <HAL_UART_IRQHandler+0x34a>
      return;
 8007d34:	bf00      	nop
  }
}
 8007d36:	3728      	adds	r7, #40	; 0x28
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}
 8007d3c:	08007ed9 	.word	0x08007ed9

08007d40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bc80      	pop	{r7}
 8007d50:	4770      	bx	lr

08007d52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d52:	b480      	push	{r7}
 8007d54:	b083      	sub	sp, #12
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d5a:	bf00      	nop
 8007d5c:	370c      	adds	r7, #12
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	460b      	mov	r3, r1
 8007d6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	603b      	str	r3, [r7, #0]
 8007d86:	4613      	mov	r3, r2
 8007d88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d8a:	e02c      	b.n	8007de6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d92:	d028      	beq.n	8007de6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007d94:	69bb      	ldr	r3, [r7, #24]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d007      	beq.n	8007daa <UART_WaitOnFlagUntilTimeout+0x30>
 8007d9a:	f7fb fb07 	bl	80033ac <HAL_GetTick>
 8007d9e:	4602      	mov	r2, r0
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	1ad3      	subs	r3, r2, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d21d      	bcs.n	8007de6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68da      	ldr	r2, [r3, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007db8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2220      	movs	r2, #32
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e00f      	b.n	8007e06 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4013      	ands	r3, r2
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	bf0c      	ite	eq
 8007df6:	2301      	moveq	r3, #1
 8007df8:	2300      	movne	r3, #0
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	79fb      	ldrb	r3, [r7, #7]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d0c3      	beq.n	8007d8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007e04:	2300      	movs	r3, #0
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b085      	sub	sp, #20
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	60f8      	str	r0, [r7, #12]
 8007e16:	60b9      	str	r1, [r7, #8]
 8007e18:	4613      	mov	r3, r2
 8007e1a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	88fa      	ldrh	r2, [r7, #6]
 8007e26:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2200      	movs	r2, #0
 8007e32:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2222      	movs	r2, #34	; 0x22
 8007e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e52:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	695a      	ldr	r2, [r3, #20]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f042 0201 	orr.w	r2, r2, #1
 8007e62:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0220 	orr.w	r2, r2, #32
 8007e72:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bc80      	pop	{r7}
 8007e7e:	4770      	bx	lr

08007e80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007e96:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	695a      	ldr	r2, [r3, #20]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 0201 	bic.w	r2, r2, #1
 8007ea6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d107      	bne.n	8007ec0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68da      	ldr	r2, [r3, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f022 0210 	bic.w	r2, r2, #16
 8007ebe:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2220      	movs	r2, #32
 8007ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ece:	bf00      	nop
 8007ed0:	370c      	adds	r7, #12
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bc80      	pop	{r7}
 8007ed6:	4770      	bx	lr

08007ed8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ef2:	68f8      	ldr	r0, [r7, #12]
 8007ef4:	f7ff ff2d 	bl	8007d52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007ef8:	bf00      	nop
 8007efa:	3710      	adds	r7, #16
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f0e:	b2db      	uxtb	r3, r3
 8007f10:	2b21      	cmp	r3, #33	; 0x21
 8007f12:	d13e      	bne.n	8007f92 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f1c:	d114      	bne.n	8007f48 <UART_Transmit_IT+0x48>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d110      	bne.n	8007f48 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	461a      	mov	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f3a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6a1b      	ldr	r3, [r3, #32]
 8007f40:	1c9a      	adds	r2, r3, #2
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	621a      	str	r2, [r3, #32]
 8007f46:	e008      	b.n	8007f5a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6a1b      	ldr	r3, [r3, #32]
 8007f4c:	1c59      	adds	r1, r3, #1
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6211      	str	r1, [r2, #32]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	4619      	mov	r1, r3
 8007f68:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10f      	bne.n	8007f8e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68da      	ldr	r2, [r3, #12]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f7c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f8c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	e000      	b.n	8007f94 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f92:	2302      	movs	r3, #2
  }
}
 8007f94:	4618      	mov	r0, r3
 8007f96:	3714      	adds	r7, #20
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bc80      	pop	{r7}
 8007f9c:	4770      	bx	lr

08007f9e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b082      	sub	sp, #8
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68da      	ldr	r2, [r3, #12]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2220      	movs	r2, #32
 8007fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f7ff febe 	bl	8007d40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b086      	sub	sp, #24
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b22      	cmp	r3, #34	; 0x22
 8007fe0:	f040 8099 	bne.w	8008116 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fec:	d117      	bne.n	800801e <UART_Receive_IT+0x50>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d113      	bne.n	800801e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ffe:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	b29b      	uxth	r3, r3
 8008008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800800c:	b29a      	uxth	r2, r3
 800800e:	693b      	ldr	r3, [r7, #16]
 8008010:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	629a      	str	r2, [r3, #40]	; 0x28
 800801c:	e026      	b.n	800806c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008022:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8008024:	2300      	movs	r3, #0
 8008026:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008030:	d007      	beq.n	8008042 <UART_Receive_IT+0x74>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d10a      	bne.n	8008050 <UART_Receive_IT+0x82>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d106      	bne.n	8008050 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	701a      	strb	r2, [r3, #0]
 800804e:	e008      	b.n	8008062 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805c:	b2da      	uxtb	r2, r3
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008066:	1c5a      	adds	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008070:	b29b      	uxth	r3, r3
 8008072:	3b01      	subs	r3, #1
 8008074:	b29b      	uxth	r3, r3
 8008076:	687a      	ldr	r2, [r7, #4]
 8008078:	4619      	mov	r1, r3
 800807a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800807c:	2b00      	cmp	r3, #0
 800807e:	d148      	bne.n	8008112 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68da      	ldr	r2, [r3, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f022 0220 	bic.w	r2, r2, #32
 800808e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68da      	ldr	r2, [r3, #12]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800809e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	695a      	ldr	r2, [r3, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f022 0201 	bic.w	r2, r2, #1
 80080ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d123      	bne.n	8008108 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2200      	movs	r2, #0
 80080c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f022 0210 	bic.w	r2, r2, #16
 80080d4:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0310 	and.w	r3, r3, #16
 80080e0:	2b10      	cmp	r3, #16
 80080e2:	d10a      	bne.n	80080fa <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff fe2f 	bl	8007d64 <HAL_UARTEx_RxEventCallback>
 8008106:	e002      	b.n	800810e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fa fb6b 	bl	80027e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800810e:	2300      	movs	r3, #0
 8008110:	e002      	b.n	8008118 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	e000      	b.n	8008118 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8008116:	2302      	movs	r3, #2
  }
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	68da      	ldr	r2, [r3, #12]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	689a      	ldr	r2, [r3, #8]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	431a      	orrs	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800815a:	f023 030c 	bic.w	r3, r3, #12
 800815e:	687a      	ldr	r2, [r7, #4]
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	68b9      	ldr	r1, [r7, #8]
 8008164:	430b      	orrs	r3, r1
 8008166:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2c      	ldr	r2, [pc, #176]	; (8008234 <UART_SetConfig+0x114>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d103      	bne.n	8008190 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008188:	f7fe fd3e 	bl	8006c08 <HAL_RCC_GetPCLK2Freq>
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	e002      	b.n	8008196 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8008190:	f7fe fd26 	bl	8006be0 <HAL_RCC_GetPCLK1Freq>
 8008194:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008196:	68fa      	ldr	r2, [r7, #12]
 8008198:	4613      	mov	r3, r2
 800819a:	009b      	lsls	r3, r3, #2
 800819c:	4413      	add	r3, r2
 800819e:	009a      	lsls	r2, r3, #2
 80081a0:	441a      	add	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ac:	4a22      	ldr	r2, [pc, #136]	; (8008238 <UART_SetConfig+0x118>)
 80081ae:	fba2 2303 	umull	r2, r3, r2, r3
 80081b2:	095b      	lsrs	r3, r3, #5
 80081b4:	0119      	lsls	r1, r3, #4
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009a      	lsls	r2, r3, #2
 80081c0:	441a      	add	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	009b      	lsls	r3, r3, #2
 80081c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80081cc:	4b1a      	ldr	r3, [pc, #104]	; (8008238 <UART_SetConfig+0x118>)
 80081ce:	fba3 0302 	umull	r0, r3, r3, r2
 80081d2:	095b      	lsrs	r3, r3, #5
 80081d4:	2064      	movs	r0, #100	; 0x64
 80081d6:	fb00 f303 	mul.w	r3, r0, r3
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	011b      	lsls	r3, r3, #4
 80081de:	3332      	adds	r3, #50	; 0x32
 80081e0:	4a15      	ldr	r2, [pc, #84]	; (8008238 <UART_SetConfig+0x118>)
 80081e2:	fba2 2303 	umull	r2, r3, r2, r3
 80081e6:	095b      	lsrs	r3, r3, #5
 80081e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081ec:	4419      	add	r1, r3
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4613      	mov	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	4413      	add	r3, r2
 80081f6:	009a      	lsls	r2, r3, #2
 80081f8:	441a      	add	r2, r3
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	685b      	ldr	r3, [r3, #4]
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	fbb2 f2f3 	udiv	r2, r2, r3
 8008204:	4b0c      	ldr	r3, [pc, #48]	; (8008238 <UART_SetConfig+0x118>)
 8008206:	fba3 0302 	umull	r0, r3, r3, r2
 800820a:	095b      	lsrs	r3, r3, #5
 800820c:	2064      	movs	r0, #100	; 0x64
 800820e:	fb00 f303 	mul.w	r3, r0, r3
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	011b      	lsls	r3, r3, #4
 8008216:	3332      	adds	r3, #50	; 0x32
 8008218:	4a07      	ldr	r2, [pc, #28]	; (8008238 <UART_SetConfig+0x118>)
 800821a:	fba2 2303 	umull	r2, r3, r2, r3
 800821e:	095b      	lsrs	r3, r3, #5
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	440a      	add	r2, r1
 800822a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800822c:	bf00      	nop
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}
 8008234:	40013800 	.word	0x40013800
 8008238:	51eb851f 	.word	0x51eb851f

0800823c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800823c:	b580      	push	{r7, lr}
 800823e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008240:	4904      	ldr	r1, [pc, #16]	; (8008254 <MX_FATFS_Init+0x18>)
 8008242:	4805      	ldr	r0, [pc, #20]	; (8008258 <MX_FATFS_Init+0x1c>)
 8008244:	f002 fcbe 	bl	800abc4 <FATFS_LinkDriver>
 8008248:	4603      	mov	r3, r0
 800824a:	461a      	mov	r2, r3
 800824c:	4b03      	ldr	r3, [pc, #12]	; (800825c <MX_FATFS_Init+0x20>)
 800824e:	701a      	strb	r2, [r3, #0]
	  }


  }*/
  /* USER CODE END Init */
}
 8008250:	bf00      	nop
 8008252:	bd80      	pop	{r7, pc}
 8008254:	20000798 	.word	0x20000798
 8008258:	20000090 	.word	0x20000090
 800825c:	20000794 	.word	0x20000794

08008260 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
			minute << 5 |
			second >> 1;
  return time;
  */
  /* USER CODE END get_fattime */
}
 8008264:	bf00      	nop
 8008266:	4618      	mov	r0, r3
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
	...

08008270 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	if (!SPISD_DetectarSD(mainSD)) {
 800827a:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <USER_initialize+0x3c>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fd02 	bl	8001c88 <SPISD_DetectarSD>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d106      	bne.n	8008298 <USER_initialize+0x28>
		Stat = STA_NOINIT;
 800828a:	4b09      	ldr	r3, [pc, #36]	; (80082b0 <USER_initialize+0x40>)
 800828c:	2201      	movs	r2, #1
 800828e:	701a      	strb	r2, [r3, #0]
		return Stat;
 8008290:	4b07      	ldr	r3, [pc, #28]	; (80082b0 <USER_initialize+0x40>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	e005      	b.n	80082a4 <USER_initialize+0x34>
	} else {
		Stat = 0;
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <USER_initialize+0x40>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
		return Stat;
 800829e:	4b04      	ldr	r3, [pc, #16]	; (80082b0 <USER_initialize+0x40>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	b2db      	uxtb	r3, r3
	}

  /* USER CODE END INIT */
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	20000068 	.word	0x20000068
 80082b0:	2000008d 	.word	0x2000008d

080082b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	4603      	mov	r3, r0
 80082bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	//Stat = STA_NOINIT;
	//return Stat;
	return 0;
 80082be:	2300      	movs	r3, #0
  /* USER CODE END STATUS */
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bc80      	pop	{r7}
 80082c8:	4770      	bx	lr
	...

080082cc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b086      	sub	sp, #24
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	60b9      	str	r1, [r7, #8]
 80082d4:	607a      	str	r2, [r7, #4]
 80082d6:	603b      	str	r3, [r7, #0]
 80082d8:	4603      	mov	r3, r0
 80082da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	for (int i = 0; i < 512; i++) {
 80082dc:	2300      	movs	r3, #0
 80082de:	617b      	str	r3, [r7, #20]
 80082e0:	e007      	b.n	80082f2 <USER_read+0x26>
		buff[i] = 0xFF;
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	4413      	add	r3, r2
 80082e8:	22ff      	movs	r2, #255	; 0xff
 80082ea:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 512; i++) {
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	3301      	adds	r3, #1
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082f8:	dbf3      	blt.n	80082e2 <USER_read+0x16>
	}
	if (SPISD_LeerSector(mainSD, sector, buff)) {
 80082fa:	4b08      	ldr	r3, [pc, #32]	; (800831c <USER_read+0x50>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	6879      	ldr	r1, [r7, #4]
 8008302:	4618      	mov	r0, r3
 8008304:	f7f9 fbbe 	bl	8001a84 <SPISD_LeerSector>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <USER_read+0x46>

		return RES_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	e000      	b.n	8008314 <USER_read+0x48>
	}
	return RES_ERROR;
 8008312:	2301      	movs	r3, #1
  /* USER CODE END READ */
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	20000068 	.word	0x20000068

08008320 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	60b9      	str	r1, [r7, #8]
 8008328:	607a      	str	r2, [r7, #4]
 800832a:	603b      	str	r3, [r7, #0]
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
	/* USER CODE HERE */
	if (SPISD_EscribirSector(mainSD, sector, buff)) {
 8008330:	4b09      	ldr	r3, [pc, #36]	; (8008358 <USER_write+0x38>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	6879      	ldr	r1, [r7, #4]
 8008338:	4618      	mov	r0, r3
 800833a:	f7f9 fa87 	bl	800184c <SPISD_EscribirSector>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d004      	beq.n	800834e <USER_write+0x2e>
		HAL_Delay(100);
 8008344:	2064      	movs	r0, #100	; 0x64
 8008346:	f7fb f83b 	bl	80033c0 <HAL_Delay>
		return RES_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	e000      	b.n	8008350 <USER_write+0x30>
	}
	return RES_ERROR;
 800834e:	2301      	movs	r3, #1

  /* USER CODE END WRITE */
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}
 8008358:	20000068 	.word	0x20000068

0800835c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	4603      	mov	r3, r0
 8008364:	603a      	str	r2, [r7, #0]
 8008366:	71fb      	strb	r3, [r7, #7]
 8008368:	460b      	mov	r3, r1
 800836a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	DRESULT res = RES_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	73fb      	strb	r3, [r7, #15]
	return res;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008372:	4618      	mov	r0, r3
 8008374:	3714      	adds	r7, #20
 8008376:	46bd      	mov	sp, r7
 8008378:	bc80      	pop	{r7}
 800837a:	4770      	bx	lr

0800837c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	4603      	mov	r3, r0
 8008384:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008386:	79fb      	ldrb	r3, [r7, #7]
 8008388:	4a08      	ldr	r2, [pc, #32]	; (80083ac <disk_status+0x30>)
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	79fa      	ldrb	r2, [r7, #7]
 8008394:	4905      	ldr	r1, [pc, #20]	; (80083ac <disk_status+0x30>)
 8008396:	440a      	add	r2, r1
 8008398:	7a12      	ldrb	r2, [r2, #8]
 800839a:	4610      	mov	r0, r2
 800839c:	4798      	blx	r3
 800839e:	4603      	mov	r3, r0
 80083a0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	20000c18 	.word	0x20000c18

080083b0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	4603      	mov	r3, r0
 80083b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80083ba:	2300      	movs	r3, #0
 80083bc:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	4a0d      	ldr	r2, [pc, #52]	; (80083f8 <disk_initialize+0x48>)
 80083c2:	5cd3      	ldrb	r3, [r2, r3]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d111      	bne.n	80083ec <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	4a0b      	ldr	r2, [pc, #44]	; (80083f8 <disk_initialize+0x48>)
 80083cc:	2101      	movs	r1, #1
 80083ce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80083d0:	79fb      	ldrb	r3, [r7, #7]
 80083d2:	4a09      	ldr	r2, [pc, #36]	; (80083f8 <disk_initialize+0x48>)
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	79fa      	ldrb	r2, [r7, #7]
 80083de:	4906      	ldr	r1, [pc, #24]	; (80083f8 <disk_initialize+0x48>)
 80083e0:	440a      	add	r2, r1
 80083e2:	7a12      	ldrb	r2, [r2, #8]
 80083e4:	4610      	mov	r0, r2
 80083e6:	4798      	blx	r3
 80083e8:	4603      	mov	r3, r0
 80083ea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80083ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3710      	adds	r7, #16
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000c18 	.word	0x20000c18

080083fc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80083fc:	b590      	push	{r4, r7, lr}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	607a      	str	r2, [r7, #4]
 8008406:	603b      	str	r3, [r7, #0]
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	4a0a      	ldr	r2, [pc, #40]	; (8008438 <disk_read+0x3c>)
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	689c      	ldr	r4, [r3, #8]
 8008418:	7bfb      	ldrb	r3, [r7, #15]
 800841a:	4a07      	ldr	r2, [pc, #28]	; (8008438 <disk_read+0x3c>)
 800841c:	4413      	add	r3, r2
 800841e:	7a18      	ldrb	r0, [r3, #8]
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	47a0      	blx	r4
 8008428:	4603      	mov	r3, r0
 800842a:	75fb      	strb	r3, [r7, #23]
  return res;
 800842c:	7dfb      	ldrb	r3, [r7, #23]
}
 800842e:	4618      	mov	r0, r3
 8008430:	371c      	adds	r7, #28
 8008432:	46bd      	mov	sp, r7
 8008434:	bd90      	pop	{r4, r7, pc}
 8008436:	bf00      	nop
 8008438:	20000c18 	.word	0x20000c18

0800843c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60b9      	str	r1, [r7, #8]
 8008444:	607a      	str	r2, [r7, #4]
 8008446:	603b      	str	r3, [r7, #0]
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800844c:	7bfb      	ldrb	r3, [r7, #15]
 800844e:	4a0a      	ldr	r2, [pc, #40]	; (8008478 <disk_write+0x3c>)
 8008450:	009b      	lsls	r3, r3, #2
 8008452:	4413      	add	r3, r2
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	68dc      	ldr	r4, [r3, #12]
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4a07      	ldr	r2, [pc, #28]	; (8008478 <disk_write+0x3c>)
 800845c:	4413      	add	r3, r2
 800845e:	7a18      	ldrb	r0, [r3, #8]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	68b9      	ldr	r1, [r7, #8]
 8008466:	47a0      	blx	r4
 8008468:	4603      	mov	r3, r0
 800846a:	75fb      	strb	r3, [r7, #23]
  return res;
 800846c:	7dfb      	ldrb	r3, [r7, #23]
}
 800846e:	4618      	mov	r0, r3
 8008470:	371c      	adds	r7, #28
 8008472:	46bd      	mov	sp, r7
 8008474:	bd90      	pop	{r4, r7, pc}
 8008476:	bf00      	nop
 8008478:	20000c18 	.word	0x20000c18

0800847c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	603a      	str	r2, [r7, #0]
 8008486:	71fb      	strb	r3, [r7, #7]
 8008488:	460b      	mov	r3, r1
 800848a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800848c:	79fb      	ldrb	r3, [r7, #7]
 800848e:	4a09      	ldr	r2, [pc, #36]	; (80084b4 <disk_ioctl+0x38>)
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	4413      	add	r3, r2
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	79fa      	ldrb	r2, [r7, #7]
 800849a:	4906      	ldr	r1, [pc, #24]	; (80084b4 <disk_ioctl+0x38>)
 800849c:	440a      	add	r2, r1
 800849e:	7a10      	ldrb	r0, [r2, #8]
 80084a0:	79b9      	ldrb	r1, [r7, #6]
 80084a2:	683a      	ldr	r2, [r7, #0]
 80084a4:	4798      	blx	r3
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
  return res;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	20000c18 	.word	0x20000c18

080084b8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80084b8:	b480      	push	{r7}
 80084ba:	b087      	sub	sp, #28
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 80084cc:	e007      	b.n	80084de <mem_cpy+0x26>
		*d++ = *s++;
 80084ce:	693a      	ldr	r2, [r7, #16]
 80084d0:	1c53      	adds	r3, r2, #1
 80084d2:	613b      	str	r3, [r7, #16]
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	1c59      	adds	r1, r3, #1
 80084d8:	6179      	str	r1, [r7, #20]
 80084da:	7812      	ldrb	r2, [r2, #0]
 80084dc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1e5a      	subs	r2, r3, #1
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1f2      	bne.n	80084ce <mem_cpy+0x16>
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	371c      	adds	r7, #28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bc80      	pop	{r7}
 80084f2:	4770      	bx	lr

080084f4 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80084f4:	b480      	push	{r7}
 80084f6:	b087      	sub	sp, #28
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	60b9      	str	r1, [r7, #8]
 80084fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8008504:	e005      	b.n	8008512 <mem_set+0x1e>
		*d++ = (BYTE)val;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	1c5a      	adds	r2, r3, #1
 800850a:	617a      	str	r2, [r7, #20]
 800850c:	68ba      	ldr	r2, [r7, #8]
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	1e5a      	subs	r2, r3, #1
 8008516:	607a      	str	r2, [r7, #4]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1f4      	bne.n	8008506 <mem_set+0x12>
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	371c      	adds	r7, #28
 8008522:	46bd      	mov	sp, r7
 8008524:	bc80      	pop	{r7}
 8008526:	4770      	bx	lr

08008528 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8008528:	b480      	push	{r7}
 800852a:	b089      	sub	sp, #36	; 0x24
 800852c:	af00      	add	r7, sp, #0
 800852e:	60f8      	str	r0, [r7, #12]
 8008530:	60b9      	str	r1, [r7, #8]
 8008532:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	61fb      	str	r3, [r7, #28]
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8008540:	bf00      	nop
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	1e5a      	subs	r2, r3, #1
 8008546:	607a      	str	r2, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00d      	beq.n	8008568 <mem_cmp+0x40>
 800854c:	69fb      	ldr	r3, [r7, #28]
 800854e:	1c5a      	adds	r2, r3, #1
 8008550:	61fa      	str	r2, [r7, #28]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	4619      	mov	r1, r3
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	1c5a      	adds	r2, r3, #1
 800855a:	61ba      	str	r2, [r7, #24]
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	1acb      	subs	r3, r1, r3
 8008560:	617b      	str	r3, [r7, #20]
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d0ec      	beq.n	8008542 <mem_cmp+0x1a>
	return r;
 8008568:	697b      	ldr	r3, [r7, #20]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3724      	adds	r7, #36	; 0x24
 800856e:	46bd      	mov	sp, r7
 8008570:	bc80      	pop	{r7}
 8008572:	4770      	bx	lr

08008574 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
 800857c:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800857e:	e002      	b.n	8008586 <chk_chr+0x12>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	3301      	adds	r3, #1
 8008584:	607b      	str	r3, [r7, #4]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <chk_chr+0x26>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	461a      	mov	r2, r3
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	4293      	cmp	r3, r2
 8008598:	d1f2      	bne.n	8008580 <chk_chr+0xc>
	return *str;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	781b      	ldrb	r3, [r3, #0]
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr

080085a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80085b2:	2300      	movs	r3, #0
 80085b4:	60bb      	str	r3, [r7, #8]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	60fb      	str	r3, [r7, #12]
 80085ba:	e038      	b.n	800862e <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 80085bc:	492f      	ldr	r1, [pc, #188]	; (800867c <chk_lock+0xd4>)
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4613      	mov	r3, r2
 80085c2:	005b      	lsls	r3, r3, #1
 80085c4:	4413      	add	r3, r2
 80085c6:	009b      	lsls	r3, r3, #2
 80085c8:	440b      	add	r3, r1
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d029      	beq.n	8008624 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80085d0:	492a      	ldr	r1, [pc, #168]	; (800867c <chk_lock+0xd4>)
 80085d2:	68fa      	ldr	r2, [r7, #12]
 80085d4:	4613      	mov	r3, r2
 80085d6:	005b      	lsls	r3, r3, #1
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	440b      	add	r3, r1
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d11e      	bne.n	8008628 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 80085ea:	4924      	ldr	r1, [pc, #144]	; (800867c <chk_lock+0xd4>)
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	4613      	mov	r3, r2
 80085f0:	005b      	lsls	r3, r3, #1
 80085f2:	4413      	add	r3, r2
 80085f4:	009b      	lsls	r3, r3, #2
 80085f6:	440b      	add	r3, r1
 80085f8:	3304      	adds	r3, #4
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8008602:	429a      	cmp	r2, r3
 8008604:	d110      	bne.n	8008628 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008606:	491d      	ldr	r1, [pc, #116]	; (800867c <chk_lock+0xd4>)
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	4613      	mov	r3, r2
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	4413      	add	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	440b      	add	r3, r1
 8008614:	3308      	adds	r3, #8
 8008616:	881a      	ldrh	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
				Files[i].clu == dp->sclust &&
 800861e:	429a      	cmp	r2, r3
 8008620:	d102      	bne.n	8008628 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8008622:	e007      	b.n	8008634 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8008624:	2301      	movs	r3, #1
 8008626:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b01      	cmp	r3, #1
 8008632:	d9c3      	bls.n	80085bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b02      	cmp	r3, #2
 8008638:	d109      	bne.n	800864e <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <chk_lock+0x9e>
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b02      	cmp	r3, #2
 8008644:	d101      	bne.n	800864a <chk_lock+0xa2>
 8008646:	2300      	movs	r3, #0
 8008648:	e013      	b.n	8008672 <chk_lock+0xca>
 800864a:	2312      	movs	r3, #18
 800864c:	e011      	b.n	8008672 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d10b      	bne.n	800866c <chk_lock+0xc4>
 8008654:	4909      	ldr	r1, [pc, #36]	; (800867c <chk_lock+0xd4>)
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4613      	mov	r3, r2
 800865a:	005b      	lsls	r3, r3, #1
 800865c:	4413      	add	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	440b      	add	r3, r1
 8008662:	330a      	adds	r3, #10
 8008664:	881b      	ldrh	r3, [r3, #0]
 8008666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800866a:	d101      	bne.n	8008670 <chk_lock+0xc8>
 800866c:	2310      	movs	r3, #16
 800866e:	e000      	b.n	8008672 <chk_lock+0xca>
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	bc80      	pop	{r7}
 800867a:	4770      	bx	lr
 800867c:	20000c00 	.word	0x20000c00

08008680 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008686:	2300      	movs	r3, #0
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	e002      	b.n	8008692 <enq_lock+0x12>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3301      	adds	r3, #1
 8008690:	607b      	str	r3, [r7, #4]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2b01      	cmp	r3, #1
 8008696:	d809      	bhi.n	80086ac <enq_lock+0x2c>
 8008698:	490a      	ldr	r1, [pc, #40]	; (80086c4 <enq_lock+0x44>)
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4613      	mov	r3, r2
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1ef      	bne.n	800868c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b02      	cmp	r3, #2
 80086b0:	bf14      	ite	ne
 80086b2:	2301      	movne	r3, #1
 80086b4:	2300      	moveq	r3, #0
 80086b6:	b2db      	uxtb	r3, r3
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	bc80      	pop	{r7}
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	20000c00 	.word	0x20000c00

080086c8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80086d2:	2300      	movs	r3, #0
 80086d4:	60fb      	str	r3, [r7, #12]
 80086d6:	e02b      	b.n	8008730 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 80086d8:	4955      	ldr	r1, [pc, #340]	; (8008830 <inc_lock+0x168>)
 80086da:	68fa      	ldr	r2, [r7, #12]
 80086dc:	4613      	mov	r3, r2
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	440b      	add	r3, r1
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d11b      	bne.n	800872a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80086f2:	494f      	ldr	r1, [pc, #316]	; (8008830 <inc_lock+0x168>)
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4613      	mov	r3, r2
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	4413      	add	r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	440b      	add	r3, r1
 8008700:	3304      	adds	r3, #4
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
		if (Files[i].fs == dp->fs &&
 800870a:	429a      	cmp	r2, r3
 800870c:	d10d      	bne.n	800872a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 800870e:	4948      	ldr	r1, [pc, #288]	; (8008830 <inc_lock+0x168>)
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	4613      	mov	r3, r2
 8008714:	005b      	lsls	r3, r3, #1
 8008716:	4413      	add	r3, r2
 8008718:	009b      	lsls	r3, r3, #2
 800871a:	440b      	add	r3, r1
 800871c:	3308      	adds	r3, #8
 800871e:	881a      	ldrh	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
			Files[i].clu == dp->sclust &&
 8008726:	429a      	cmp	r2, r3
 8008728:	d006      	beq.n	8008738 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	60fb      	str	r3, [r7, #12]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d9d0      	bls.n	80086d8 <inc_lock+0x10>
 8008736:	e000      	b.n	800873a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8008738:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b02      	cmp	r3, #2
 800873e:	d145      	bne.n	80087cc <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
 8008744:	e002      	b.n	800874c <inc_lock+0x84>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d809      	bhi.n	8008766 <inc_lock+0x9e>
 8008752:	4937      	ldr	r1, [pc, #220]	; (8008830 <inc_lock+0x168>)
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4613      	mov	r3, r2
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	4413      	add	r3, r2
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	440b      	add	r3, r1
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d1ef      	bne.n	8008746 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d101      	bne.n	8008770 <inc_lock+0xa8>
 800876c:	2300      	movs	r3, #0
 800876e:	e05a      	b.n	8008826 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
 8008776:	482e      	ldr	r0, [pc, #184]	; (8008830 <inc_lock+0x168>)
 8008778:	68fa      	ldr	r2, [r7, #12]
 800877a:	4613      	mov	r3, r2
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	4403      	add	r3, r0
 8008784:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 1208 	ldr.w	r1, [r3, #520]	; 0x208
 800878c:	4828      	ldr	r0, [pc, #160]	; (8008830 <inc_lock+0x168>)
 800878e:	68fa      	ldr	r2, [r7, #12]
 8008790:	4613      	mov	r3, r2
 8008792:	005b      	lsls	r3, r3, #1
 8008794:	4413      	add	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4403      	add	r3, r0
 800879a:	3304      	adds	r3, #4
 800879c:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8b3 0206 	ldrh.w	r0, [r3, #518]	; 0x206
 80087a4:	4922      	ldr	r1, [pc, #136]	; (8008830 <inc_lock+0x168>)
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4613      	mov	r3, r2
 80087aa:	005b      	lsls	r3, r3, #1
 80087ac:	4413      	add	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	440b      	add	r3, r1
 80087b2:	3308      	adds	r3, #8
 80087b4:	4602      	mov	r2, r0
 80087b6:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 80087b8:	491d      	ldr	r1, [pc, #116]	; (8008830 <inc_lock+0x168>)
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	4613      	mov	r3, r2
 80087be:	005b      	lsls	r3, r3, #1
 80087c0:	4413      	add	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	440b      	add	r3, r1
 80087c6:	330a      	adds	r3, #10
 80087c8:	2200      	movs	r2, #0
 80087ca:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00c      	beq.n	80087ec <inc_lock+0x124>
 80087d2:	4917      	ldr	r1, [pc, #92]	; (8008830 <inc_lock+0x168>)
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4613      	mov	r3, r2
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	440b      	add	r3, r1
 80087e0:	330a      	adds	r3, #10
 80087e2:	881b      	ldrh	r3, [r3, #0]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d001      	beq.n	80087ec <inc_lock+0x124>
 80087e8:	2300      	movs	r3, #0
 80087ea:	e01c      	b.n	8008826 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d10b      	bne.n	800880a <inc_lock+0x142>
 80087f2:	490f      	ldr	r1, [pc, #60]	; (8008830 <inc_lock+0x168>)
 80087f4:	68fa      	ldr	r2, [r7, #12]
 80087f6:	4613      	mov	r3, r2
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	4413      	add	r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	330a      	adds	r3, #10
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	3301      	adds	r3, #1
 8008806:	b299      	uxth	r1, r3
 8008808:	e001      	b.n	800880e <inc_lock+0x146>
 800880a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <inc_lock+0x168>)
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4613      	mov	r3, r2
 8008814:	005b      	lsls	r3, r3, #1
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	4403      	add	r3, r0
 800881c:	330a      	adds	r3, #10
 800881e:	460a      	mov	r2, r1
 8008820:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	3301      	adds	r3, #1
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	bc80      	pop	{r7}
 800882e:	4770      	bx	lr
 8008830:	20000c00 	.word	0x20000c00

08008834 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	3b01      	subs	r3, #1
 8008840:	607b      	str	r3, [r7, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d82e      	bhi.n	80088a6 <dec_lock+0x72>
		n = Files[i].ctr;
 8008848:	491b      	ldr	r1, [pc, #108]	; (80088b8 <dec_lock+0x84>)
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	4613      	mov	r3, r2
 800884e:	005b      	lsls	r3, r3, #1
 8008850:	4413      	add	r3, r2
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	440b      	add	r3, r1
 8008856:	330a      	adds	r3, #10
 8008858:	881b      	ldrh	r3, [r3, #0]
 800885a:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800885c:	89fb      	ldrh	r3, [r7, #14]
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	d101      	bne.n	8008868 <dec_lock+0x34>
 8008864:	2300      	movs	r3, #0
 8008866:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8008868:	89fb      	ldrh	r3, [r7, #14]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d002      	beq.n	8008874 <dec_lock+0x40>
 800886e:	89fb      	ldrh	r3, [r7, #14]
 8008870:	3b01      	subs	r3, #1
 8008872:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008874:	4910      	ldr	r1, [pc, #64]	; (80088b8 <dec_lock+0x84>)
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	005b      	lsls	r3, r3, #1
 800887c:	4413      	add	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	330a      	adds	r3, #10
 8008884:	89fa      	ldrh	r2, [r7, #14]
 8008886:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008888:	89fb      	ldrh	r3, [r7, #14]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d108      	bne.n	80088a0 <dec_lock+0x6c>
 800888e:	490a      	ldr	r1, [pc, #40]	; (80088b8 <dec_lock+0x84>)
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4613      	mov	r3, r2
 8008894:	005b      	lsls	r3, r3, #1
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	440b      	add	r3, r1
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	737b      	strb	r3, [r7, #13]
 80088a4:	e001      	b.n	80088aa <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80088a6:	2302      	movs	r3, #2
 80088a8:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80088aa:	7b7b      	ldrb	r3, [r7, #13]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bc80      	pop	{r7}
 80088b4:	4770      	bx	lr
 80088b6:	bf00      	nop
 80088b8:	20000c00 	.word	0x20000c00

080088bc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	e016      	b.n	80088f8 <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80088ca:	4910      	ldr	r1, [pc, #64]	; (800890c <clear_lock+0x50>)
 80088cc:	68fa      	ldr	r2, [r7, #12]
 80088ce:	4613      	mov	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	440b      	add	r3, r1
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d108      	bne.n	80088f2 <clear_lock+0x36>
 80088e0:	490a      	ldr	r1, [pc, #40]	; (800890c <clear_lock+0x50>)
 80088e2:	68fa      	ldr	r2, [r7, #12]
 80088e4:	4613      	mov	r3, r2
 80088e6:	005b      	lsls	r3, r3, #1
 80088e8:	4413      	add	r3, r2
 80088ea:	009b      	lsls	r3, r3, #2
 80088ec:	440b      	add	r3, r1
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	d9e5      	bls.n	80088ca <clear_lock+0xe>
	}
}
 80088fe:	bf00      	nop
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20000c00 	.word	0x20000c00

08008910 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8008918:	2300      	movs	r3, #0
 800891a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8008922:	2b00      	cmp	r3, #0
 8008924:	d038      	beq.n	8008998 <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800892c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008934:	6879      	ldr	r1, [r7, #4]
 8008936:	2301      	movs	r3, #1
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	f7ff fd7f 	bl	800843c <disk_write>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <sync_window+0x3a>
			res = FR_DISK_ERR;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
 8008948:	e026      	b.n	8008998 <sync_window+0x88>
		} else {
			fs->wflag = 0;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	1ad2      	subs	r2, r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008962:	429a      	cmp	r2, r3
 8008964:	d218      	bcs.n	8008998 <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 800896c:	613b      	str	r3, [r7, #16]
 800896e:	e010      	b.n	8008992 <sync_window+0x82>
					wsect += fs->fsize;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008976:	697a      	ldr	r2, [r7, #20]
 8008978:	4413      	add	r3, r2
 800897a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008982:	6879      	ldr	r1, [r7, #4]
 8008984:	2301      	movs	r3, #1
 8008986:	697a      	ldr	r2, [r7, #20]
 8008988:	f7ff fd58 	bl	800843c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	3b01      	subs	r3, #1
 8008990:	613b      	str	r3, [r7, #16]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	2b01      	cmp	r3, #1
 8008996:	d8eb      	bhi.n	8008970 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d01b      	beq.n	80089f4 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f7ff ffa7 	bl	8008910 <sync_window>
 80089c2:	4603      	mov	r3, r0
 80089c4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80089c6:	7bfb      	ldrb	r3, [r7, #15]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d113      	bne.n	80089f4 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 80089d2:	6879      	ldr	r1, [r7, #4]
 80089d4:	2301      	movs	r3, #1
 80089d6:	683a      	ldr	r2, [r7, #0]
 80089d8:	f7ff fd10 	bl	80083fc <disk_read>
 80089dc:	4603      	mov	r3, r0
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d004      	beq.n	80089ec <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80089e2:	f04f 33ff 	mov.w	r3, #4294967295
 80089e6:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	683a      	ldr	r2, [r7, #0]
 80089f0:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
		}
	}
	return res;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7ff ff82 	bl	8008910 <sync_window>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f040 809b 	bne.w	8008b4e <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	f040 8088 	bne.w	8008b34 <sync_fs+0x136>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	f040 8082 	bne.w	8008b34 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f7ff fd5b 	bl	80084f4 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2255      	movs	r2, #85	; 0x55
 8008a42:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	22aa      	movs	r2, #170	; 0xaa
 8008a4a:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2252      	movs	r2, #82	; 0x52
 8008a52:	701a      	strb	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2252      	movs	r2, #82	; 0x52
 8008a58:	705a      	strb	r2, [r3, #1]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2261      	movs	r2, #97	; 0x61
 8008a5e:	709a      	strb	r2, [r3, #2]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2241      	movs	r2, #65	; 0x41
 8008a64:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2272      	movs	r2, #114	; 0x72
 8008a6a:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2272      	movs	r2, #114	; 0x72
 8008a72:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2241      	movs	r2, #65	; 0x41
 8008a7a:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2261      	movs	r2, #97	; 0x61
 8008a82:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	0a1b      	lsrs	r3, r3, #8
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008aae:	0c1b      	lsrs	r3, r3, #16
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008abe:	0e1b      	lsrs	r3, r3, #24
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008ace:	b2da      	uxtb	r2, r3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008adc:	b29b      	uxth	r3, r3
 8008ade:	0a1b      	lsrs	r3, r3, #8
 8008ae0:	b29b      	uxth	r3, r3
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008af0:	0c1b      	lsrs	r3, r3, #16
 8008af2:	b2da      	uxtb	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008b00:	0e1b      	lsrs	r3, r3, #24
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008b10:	1c5a      	adds	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 8008b1e:	6879      	ldr	r1, [r7, #4]
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8008b26:	2301      	movs	r3, #1
 8008b28:	f7ff fc88 	bl	800843c <disk_write>
			fs->fsi_flag = 0;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7ff fc9c 	bl	800847c <disk_ioctl>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <sync_fs+0x150>
			res = FR_DISK_ERR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}

08008b58 <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	3b02      	subs	r3, #2
 8008b66:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008b6e:	3b02      	subs	r3, #2
 8008b70:	683a      	ldr	r2, [r7, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d301      	bcc.n	8008b7a <clust2sect+0x22>
 8008b76:	2300      	movs	r3, #0
 8008b78:	e00a      	b.n	8008b90 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8008b80:	461a      	mov	r2, r3
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	fb03 f202 	mul.w	r2, r3, r2
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 8008b8e:	4413      	add	r3, r2
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bc80      	pop	{r7}
 8008b98:	4770      	bx	lr

08008b9a <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
 8008ba2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d905      	bls.n	8008bb6 <get_fat+0x1c>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008bb0:	683a      	ldr	r2, [r7, #0]
 8008bb2:	429a      	cmp	r2, r3
 8008bb4:	d302      	bcc.n	8008bbc <get_fat+0x22>
		val = 1;	/* Internal error */
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
 8008bba:	e0a3      	b.n	8008d04 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8008bbc:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008bc8:	2b03      	cmp	r3, #3
 8008bca:	d068      	beq.n	8008c9e <get_fat+0x104>
 8008bcc:	2b03      	cmp	r3, #3
 8008bce:	f300 808f 	bgt.w	8008cf0 <get_fat+0x156>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d002      	beq.n	8008bdc <get_fat+0x42>
 8008bd6:	2b02      	cmp	r3, #2
 8008bd8:	d040      	beq.n	8008c5c <get_fat+0xc2>
 8008bda:	e089      	b.n	8008cf0 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	60fb      	str	r3, [r7, #12]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	085b      	lsrs	r3, r3, #1
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	0a5b      	lsrs	r3, r3, #9
 8008bf4:	4413      	add	r3, r2
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff fed2 	bl	80089a2 <move_window>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d178      	bne.n	8008cf6 <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	1c5a      	adds	r2, r3, #1
 8008c08:	60fa      	str	r2, [r7, #12]
 8008c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	5cd3      	ldrb	r3, [r2, r3]
 8008c12:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	0a5b      	lsrs	r3, r3, #9
 8008c1e:	4413      	add	r3, r2
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff febd 	bl	80089a2 <move_window>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d165      	bne.n	8008cfa <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	5cd3      	ldrb	r3, [r2, r3]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	f003 0301 	and.w	r3, r3, #1
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <get_fat+0xb8>
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	091b      	lsrs	r3, r3, #4
 8008c50:	e002      	b.n	8008c58 <get_fat+0xbe>
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c58:	617b      	str	r3, [r7, #20]
			break;
 8008c5a:	e053      	b.n	8008d04 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	0a1b      	lsrs	r3, r3, #8
 8008c66:	4413      	add	r3, r2
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f7ff fe99 	bl	80089a2 <move_window>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d143      	bne.n	8008cfe <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	005b      	lsls	r3, r3, #1
 8008c7a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	4413      	add	r3, r2
 8008c82:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	3301      	adds	r3, #1
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	021b      	lsls	r3, r3, #8
 8008c8c:	b21a      	sxth	r2, r3
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	781b      	ldrb	r3, [r3, #0]
 8008c92:	b21b      	sxth	r3, r3
 8008c94:	4313      	orrs	r3, r2
 8008c96:	b21b      	sxth	r3, r3
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	617b      	str	r3, [r7, #20]
			break;
 8008c9c:	e032      	b.n	8008d04 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	09db      	lsrs	r3, r3, #7
 8008ca8:	4413      	add	r3, r2
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff fe78 	bl	80089a2 <move_window>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d124      	bne.n	8008d02 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	009b      	lsls	r3, r3, #2
 8008cbc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	3303      	adds	r3, #3
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	061a      	lsls	r2, r3, #24
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	3302      	adds	r3, #2
 8008cd2:	781b      	ldrb	r3, [r3, #0]
 8008cd4:	041b      	lsls	r3, r3, #16
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	3201      	adds	r2, #1
 8008cdc:	7812      	ldrb	r2, [r2, #0]
 8008cde:	0212      	lsls	r2, r2, #8
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	7812      	ldrb	r2, [r2, #0]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008cec:	617b      	str	r3, [r7, #20]
			break;
 8008cee:	e009      	b.n	8008d04 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	617b      	str	r3, [r7, #20]
 8008cf4:	e006      	b.n	8008d04 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cf6:	bf00      	nop
 8008cf8:	e004      	b.n	8008d04 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8008d02:	bf00      	nop
		}
	}

	return val;
 8008d04:	697b      	ldr	r3, [r7, #20]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3718      	adds	r7, #24
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b088      	sub	sp, #32
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	60f8      	str	r0, [r7, #12]
 8008d16:	60b9      	str	r1, [r7, #8]
 8008d18:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d905      	bls.n	8008d2c <put_fat+0x1e>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d302      	bcc.n	8008d32 <put_fat+0x24>
		res = FR_INT_ERR;
 8008d2c:	2302      	movs	r3, #2
 8008d2e:	77fb      	strb	r3, [r7, #31]
 8008d30:	e0f6      	b.n	8008f20 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	f000 809e 	beq.w	8008e7a <put_fat+0x16c>
 8008d3e:	2b03      	cmp	r3, #3
 8008d40:	f300 80e4 	bgt.w	8008f0c <put_fat+0x1fe>
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d002      	beq.n	8008d4e <put_fat+0x40>
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d06f      	beq.n	8008e2c <put_fat+0x11e>
 8008d4c:	e0de      	b.n	8008f0c <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	617b      	str	r3, [r7, #20]
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	085b      	lsrs	r3, r3, #1
 8008d56:	697a      	ldr	r2, [r7, #20]
 8008d58:	4413      	add	r3, r2
 8008d5a:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	0a5b      	lsrs	r3, r3, #9
 8008d66:	4413      	add	r3, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f7ff fe19 	bl	80089a2 <move_window>
 8008d70:	4603      	mov	r3, r0
 8008d72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008d74:	7ffb      	ldrb	r3, [r7, #31]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f040 80cb 	bne.w	8008f12 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	1c5a      	adds	r2, r3, #1
 8008d80:	617a      	str	r2, [r7, #20]
 8008d82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d86:	68fa      	ldr	r2, [r7, #12]
 8008d88:	4413      	add	r3, r2
 8008d8a:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	f003 0301 	and.w	r3, r3, #1
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00d      	beq.n	8008db2 <put_fat+0xa4>
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	b25b      	sxtb	r3, r3
 8008d9c:	f003 030f 	and.w	r3, r3, #15
 8008da0:	b25a      	sxtb	r2, r3
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	011b      	lsls	r3, r3, #4
 8008da8:	b25b      	sxtb	r3, r3
 8008daa:	4313      	orrs	r3, r2
 8008dac:	b25b      	sxtb	r3, r3
 8008dae:	b2db      	uxtb	r3, r3
 8008db0:	e001      	b.n	8008db6 <put_fat+0xa8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	69ba      	ldr	r2, [r7, #24]
 8008db8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	0a5b      	lsrs	r3, r3, #9
 8008dcc:	4413      	add	r3, r2
 8008dce:	4619      	mov	r1, r3
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f7ff fde6 	bl	80089a2 <move_window>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008dda:	7ffb      	ldrb	r3, [r7, #31]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f040 809a 	bne.w	8008f16 <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	4413      	add	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	f003 0301 	and.w	r3, r3, #1
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d003      	beq.n	8008e00 <put_fat+0xf2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	091b      	lsrs	r3, r3, #4
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	e00e      	b.n	8008e1e <put_fat+0x110>
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	b25b      	sxtb	r3, r3
 8008e06:	f023 030f 	bic.w	r3, r3, #15
 8008e0a:	b25a      	sxtb	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b25b      	sxtb	r3, r3
 8008e12:	f003 030f 	and.w	r3, r3, #15
 8008e16:	b25b      	sxtb	r3, r3
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	b25b      	sxtb	r3, r3
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	69ba      	ldr	r2, [r7, #24]
 8008e20:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008e2a:	e079      	b.n	8008f20 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	0a1b      	lsrs	r3, r3, #8
 8008e36:	4413      	add	r3, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fdb1 	bl	80089a2 <move_window>
 8008e40:	4603      	mov	r3, r0
 8008e42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e44:	7ffb      	ldrb	r3, [r7, #31]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d167      	bne.n	8008f1a <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	005b      	lsls	r3, r3, #1
 8008e4e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8008e52:	68fa      	ldr	r2, [r7, #12]
 8008e54:	4413      	add	r3, r2
 8008e56:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	b2da      	uxtb	r2, r3
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	701a      	strb	r2, [r3, #0]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	0a1b      	lsrs	r3, r3, #8
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	b2d2      	uxtb	r2, r2
 8008e6e:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008e78:	e052      	b.n	8008f20 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	09db      	lsrs	r3, r3, #7
 8008e84:	4413      	add	r3, r2
 8008e86:	4619      	mov	r1, r3
 8008e88:	68f8      	ldr	r0, [r7, #12]
 8008e8a:	f7ff fd8a 	bl	80089a2 <move_window>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8008e92:	7ffb      	ldrb	r3, [r7, #31]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d142      	bne.n	8008f1e <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	3303      	adds	r3, #3
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	061a      	lsls	r2, r3, #24
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	3302      	adds	r3, #2
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	3201      	adds	r2, #1
 8008ebc:	7812      	ldrb	r2, [r2, #0]
 8008ebe:	0212      	lsls	r2, r2, #8
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	7812      	ldrb	r2, [r2, #0]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	b2da      	uxtb	r2, r3
 8008ed6:	69bb      	ldr	r3, [r7, #24]
 8008ed8:	701a      	strb	r2, [r3, #0]
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	b29b      	uxth	r3, r3
 8008ede:	0a1b      	lsrs	r3, r3, #8
 8008ee0:	b29a      	uxth	r2, r3
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	b2d2      	uxtb	r2, r2
 8008ee8:	701a      	strb	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	0c1a      	lsrs	r2, r3, #16
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	0e1a      	lsrs	r2, r3, #24
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	3303      	adds	r3, #3
 8008efe:	b2d2      	uxtb	r2, r2
 8008f00:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2201      	movs	r2, #1
 8008f06:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
			break;
 8008f0a:	e009      	b.n	8008f20 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 8008f0c:	2302      	movs	r3, #2
 8008f0e:	77fb      	strb	r3, [r7, #31]
 8008f10:	e006      	b.n	8008f20 <put_fat+0x212>
			if (res != FR_OK) break;
 8008f12:	bf00      	nop
 8008f14:	e004      	b.n	8008f20 <put_fat+0x212>
			if (res != FR_OK) break;
 8008f16:	bf00      	nop
 8008f18:	e002      	b.n	8008f20 <put_fat+0x212>
			if (res != FR_OK) break;
 8008f1a:	bf00      	nop
 8008f1c:	e000      	b.n	8008f20 <put_fat+0x212>
			if (res != FR_OK) break;
 8008f1e:	bf00      	nop
		}
	}

	return res;
 8008f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b084      	sub	sp, #16
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
 8008f32:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d905      	bls.n	8008f46 <remove_chain+0x1c>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008f40:	683a      	ldr	r2, [r7, #0]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d302      	bcc.n	8008f4c <remove_chain+0x22>
		res = FR_INT_ERR;
 8008f46:	2302      	movs	r3, #2
 8008f48:	73fb      	strb	r3, [r7, #15]
 8008f4a:	e043      	b.n	8008fd4 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008f50:	e036      	b.n	8008fc0 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f7ff fe20 	bl	8008b9a <get_fat>
 8008f5a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d035      	beq.n	8008fce <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d102      	bne.n	8008f6e <remove_chain+0x44>
 8008f68:	2302      	movs	r3, #2
 8008f6a:	73fb      	strb	r3, [r7, #15]
 8008f6c:	e032      	b.n	8008fd4 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d102      	bne.n	8008f7c <remove_chain+0x52>
 8008f76:	2301      	movs	r3, #1
 8008f78:	73fb      	strb	r3, [r7, #15]
 8008f7a:	e02b      	b.n	8008fd4 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f7ff fec4 	bl	8008d0e <put_fat>
 8008f86:	4603      	mov	r3, r0
 8008f88:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8008f8a:	7bfb      	ldrb	r3, [r7, #15]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d120      	bne.n	8008fd2 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f9a:	d00f      	beq.n	8008fbc <remove_chain+0x92>
				fs->free_clust++;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
				fs->fsi_flag |= 1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 8008fb0:	f043 0301 	orr.w	r3, r3, #1
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008fc6:	683a      	ldr	r2, [r7, #0]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d3c2      	bcc.n	8008f52 <remove_chain+0x28>
 8008fcc:	e002      	b.n	8008fd4 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8008fce:	bf00      	nop
 8008fd0:	e000      	b.n	8008fd4 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8008fd2:	bf00      	nop
		}
	}

	return res;
 8008fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b086      	sub	sp, #24
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10f      	bne.n	800900e <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8008ff4:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d005      	beq.n	8009008 <create_chain+0x2a>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009002:	693a      	ldr	r2, [r7, #16]
 8009004:	429a      	cmp	r2, r3
 8009006:	d31c      	bcc.n	8009042 <create_chain+0x64>
 8009008:	2301      	movs	r3, #1
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	e019      	b.n	8009042 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 800900e:	6839      	ldr	r1, [r7, #0]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fdc2 	bl	8008b9a <get_fat>
 8009016:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8009018:	68bb      	ldr	r3, [r7, #8]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d801      	bhi.n	8009022 <create_chain+0x44>
 800901e:	2301      	movs	r3, #1
 8009020:	e076      	b.n	8009110 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009028:	d101      	bne.n	800902e <create_chain+0x50>
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	e070      	b.n	8009110 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	429a      	cmp	r2, r3
 8009038:	d201      	bcs.n	800903e <create_chain+0x60>
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	e068      	b.n	8009110 <create_chain+0x132>
		scl = clst;
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8009042:	693b      	ldr	r3, [r7, #16]
 8009044:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	3301      	adds	r3, #1
 800904a:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009052:	697a      	ldr	r2, [r7, #20]
 8009054:	429a      	cmp	r2, r3
 8009056:	d307      	bcc.n	8009068 <create_chain+0x8a>
			ncl = 2;
 8009058:	2302      	movs	r3, #2
 800905a:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	429a      	cmp	r2, r3
 8009062:	d901      	bls.n	8009068 <create_chain+0x8a>
 8009064:	2300      	movs	r3, #0
 8009066:	e053      	b.n	8009110 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8009068:	6979      	ldr	r1, [r7, #20]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f7ff fd95 	bl	8008b9a <get_fat>
 8009070:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00e      	beq.n	8009096 <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800907e:	d002      	beq.n	8009086 <create_chain+0xa8>
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <create_chain+0xac>
			return cs;
 8009086:	68bb      	ldr	r3, [r7, #8]
 8009088:	e042      	b.n	8009110 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	429a      	cmp	r2, r3
 8009090:	d1d9      	bne.n	8009046 <create_chain+0x68>
 8009092:	2300      	movs	r3, #0
 8009094:	e03c      	b.n	8009110 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 8009096:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8009098:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 800909c:	6979      	ldr	r1, [r7, #20]
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f7ff fe35 	bl	8008d0e <put_fat>
 80090a4:	4603      	mov	r3, r0
 80090a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80090a8:	7bfb      	ldrb	r3, [r7, #15]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <create_chain+0xe4>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d006      	beq.n	80090c2 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80090b4:	697a      	ldr	r2, [r7, #20]
 80090b6:	6839      	ldr	r1, [r7, #0]
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f7ff fe28 	bl	8008d0e <put_fat>
 80090be:	4603      	mov	r3, r0
 80090c0:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80090c2:	7bfb      	ldrb	r3, [r7, #15]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d11a      	bne.n	80090fe <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090da:	d018      	beq.n	800910e <create_chain+0x130>
			fs->free_clust--;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80090e2:	1e5a      	subs	r2, r3, #1
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fs->fsi_flag |= 1;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3205 	ldrb.w	r3, [r3, #517]	; 0x205
 80090f0:	f043 0301 	orr.w	r3, r3, #1
 80090f4:	b2da      	uxtb	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
 80090fc:	e007      	b.n	800910e <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80090fe:	7bfb      	ldrb	r3, [r7, #15]
 8009100:	2b01      	cmp	r3, #1
 8009102:	d102      	bne.n	800910a <create_chain+0x12c>
 8009104:	f04f 33ff 	mov.w	r3, #4294967295
 8009108:	e000      	b.n	800910c <create_chain+0x12e>
 800910a:	2301      	movs	r3, #1
 800910c:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 800910e:	697b      	ldr	r3, [r7, #20]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}

08009118 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8009118:	b480      	push	{r7}
 800911a:	b087      	sub	sp, #28
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8009128:	3304      	adds	r3, #4
 800912a:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	0a5b      	lsrs	r3, r3, #9
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009136:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800913a:	fbb3 f3f2 	udiv	r3, r3, r2
 800913e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	613a      	str	r2, [r7, #16]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d101      	bne.n	8009154 <clmt_clust+0x3c>
 8009150:	2300      	movs	r3, #0
 8009152:	e010      	b.n	8009176 <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	429a      	cmp	r2, r3
 800915a:	d307      	bcc.n	800916c <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 800915c:	697a      	ldr	r2, [r7, #20]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	617b      	str	r3, [r7, #20]
 8009164:	693b      	ldr	r3, [r7, #16]
 8009166:	3304      	adds	r3, #4
 8009168:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800916a:	e7e9      	b.n	8009140 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 800916c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4413      	add	r3, r2
}
 8009176:	4618      	mov	r0, r3
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr

08009180 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	b29a      	uxth	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800919a:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d007      	beq.n	80091b2 <dir_sdi+0x32>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091ac:	697a      	ldr	r2, [r7, #20]
 80091ae:	429a      	cmp	r2, r3
 80091b0:	d301      	bcc.n	80091b6 <dir_sdi+0x36>
		return FR_INT_ERR;
 80091b2:	2302      	movs	r3, #2
 80091b4:	e074      	b.n	80092a0 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10c      	bne.n	80091d6 <dir_sdi+0x56>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80091c6:	2b03      	cmp	r3, #3
 80091c8:	d105      	bne.n	80091d6 <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091d0:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80091d4:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d111      	bne.n	8009200 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091e2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 80091e6:	461a      	mov	r2, r3
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d301      	bcc.n	80091f2 <dir_sdi+0x72>
			return FR_INT_ERR;
 80091ee:	2302      	movs	r3, #2
 80091f0:	e056      	b.n	80092a0 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80091f8:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 80091fc:	613b      	str	r3, [r7, #16]
 80091fe:	e032      	b.n	8009266 <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009206:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800920e:	e01e      	b.n	800924e <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009216:	6979      	ldr	r1, [r7, #20]
 8009218:	4618      	mov	r0, r3
 800921a:	f7ff fcbe 	bl	8008b9a <get_fat>
 800921e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009226:	d101      	bne.n	800922c <dir_sdi+0xac>
 8009228:	2301      	movs	r3, #1
 800922a:	e039      	b.n	80092a0 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	2b01      	cmp	r3, #1
 8009230:	d907      	bls.n	8009242 <dir_sdi+0xc2>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009238:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800923c:	697a      	ldr	r2, [r7, #20]
 800923e:	429a      	cmp	r2, r3
 8009240:	d301      	bcc.n	8009246 <dir_sdi+0xc6>
				return FR_INT_ERR;
 8009242:	2302      	movs	r3, #2
 8009244:	e02c      	b.n	80092a0 <dir_sdi+0x120>
			idx -= ic;
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 800924e:	683a      	ldr	r2, [r7, #0]
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	429a      	cmp	r2, r3
 8009254:	d2dc      	bcs.n	8009210 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800925c:	6979      	ldr	r1, [r7, #20]
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff fc7a 	bl	8008b58 <clust2sect>
 8009264:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	697a      	ldr	r2, [r7, #20]
 800926a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	if (!sect) return FR_INT_ERR;
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d101      	bne.n	8009278 <dir_sdi+0xf8>
 8009274:	2302      	movs	r3, #2
 8009276:	e013      	b.n	80092a0 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	091a      	lsrs	r2, r3, #4
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	441a      	add	r2, r3
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800928c:	461a      	mov	r2, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	f003 030f 	and.w	r3, r3, #15
 8009294:	015b      	lsls	r3, r3, #5
 8009296:	441a      	add	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3718      	adds	r7, #24
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80092a8:	b590      	push	{r4, r7, lr}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80092b8:	3301      	adds	r3, #1
 80092ba:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	b29b      	uxth	r3, r3
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d004      	beq.n	80092ce <dir_next+0x26>
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d101      	bne.n	80092d2 <dir_next+0x2a>
		return FR_NO_FILE;
 80092ce:	2304      	movs	r3, #4
 80092d0:	e0dd      	b.n	800948e <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f003 030f 	and.w	r3, r3, #15
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f040 80c6 	bne.w	800946a <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80092e4:	1c5a      	adds	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

		if (!dp->clust) {		/* Static table */
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d10b      	bne.n	800930e <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80092fc:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009300:	461a      	mov	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	4293      	cmp	r3, r2
 8009306:	f0c0 80b0 	bcc.w	800946a <dir_next+0x1c2>
				return FR_NO_FILE;
 800930a:	2304      	movs	r3, #4
 800930c:	e0bf      	b.n	800948e <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	091b      	lsrs	r3, r3, #4
 8009312:	687a      	ldr	r2, [r7, #4]
 8009314:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 8009318:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800931c:	3a01      	subs	r2, #1
 800931e:	4013      	ands	r3, r2
 8009320:	2b00      	cmp	r3, #0
 8009322:	f040 80a2 	bne.w	800946a <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009332:	4619      	mov	r1, r3
 8009334:	4610      	mov	r0, r2
 8009336:	f7ff fc30 	bl	8008b9a <get_fat>
 800933a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b01      	cmp	r3, #1
 8009340:	d801      	bhi.n	8009346 <dir_next+0x9e>
 8009342:	2302      	movs	r3, #2
 8009344:	e0a3      	b.n	800948e <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800934c:	d101      	bne.n	8009352 <dir_next+0xaa>
 800934e:	2301      	movs	r3, #1
 8009350:	e09d      	b.n	800948e <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009358:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	429a      	cmp	r2, r3
 8009360:	d374      	bcc.n	800944c <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d101      	bne.n	800936c <dir_next+0xc4>
 8009368:	2304      	movs	r3, #4
 800936a:	e090      	b.n	800948e <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7ff fe2f 	bl	8008fde <create_chain>
 8009380:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d101      	bne.n	800938c <dir_next+0xe4>
 8009388:	2307      	movs	r3, #7
 800938a:	e080      	b.n	800948e <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <dir_next+0xee>
 8009392:	2302      	movs	r3, #2
 8009394:	e07b      	b.n	800948e <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939c:	d101      	bne.n	80093a2 <dir_next+0xfa>
 800939e:	2301      	movs	r3, #1
 80093a0:	e075      	b.n	800948e <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7ff fab1 	bl	8008910 <sync_window>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d001      	beq.n	80093b8 <dir_next+0x110>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e06a      	b.n	800948e <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c2:	2100      	movs	r1, #0
 80093c4:	4618      	mov	r0, r3
 80093c6:	f7ff f895 	bl	80084f4 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
 80093d6:	6979      	ldr	r1, [r7, #20]
 80093d8:	4610      	mov	r0, r2
 80093da:	f7ff fbbd 	bl	8008b58 <clust2sect>
 80093de:	4603      	mov	r3, r0
 80093e0:	f8c4 322c 	str.w	r3, [r4, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80093e4:	2300      	movs	r3, #0
 80093e6:	613b      	str	r3, [r7, #16]
 80093e8:	e01b      	b.n	8009422 <dir_next+0x17a>
						dp->fs->wflag = 1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093f0:	2201      	movs	r2, #1
 80093f2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7ff fa87 	bl	8008910 <sync_window>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <dir_next+0x164>
 8009408:	2301      	movs	r3, #1
 800940a:	e040      	b.n	800948e <dir_next+0x1e6>
						dp->fs->winsect++;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009412:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 8009416:	3201      	adds	r2, #1
 8009418:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800941c:	693b      	ldr	r3, [r7, #16]
 800941e:	3301      	adds	r3, #1
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009428:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800942c:	461a      	mov	r2, r3
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	4293      	cmp	r3, r2
 8009432:	d3da      	bcc.n	80093ea <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800943a:	f8d3 122c 	ldr.w	r1, [r3, #556]	; 0x22c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	1a8a      	subs	r2, r1, r2
 8009448:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	697a      	ldr	r2, [r7, #20]
 8009450:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800945a:	6979      	ldr	r1, [r7, #20]
 800945c:	4618      	mov	r0, r3
 800945e:	f7ff fb7b 	bl	8008b58 <clust2sect>
 8009462:	4602      	mov	r2, r0
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	b29a      	uxth	r2, r3
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800947a:	461a      	mov	r2, r3
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	015b      	lsls	r3, r3, #5
 8009484:	441a      	add	r2, r3
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

	return FR_OK;
 800948c:	2300      	movs	r3, #0
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	bd90      	pop	{r4, r7, pc}

08009496 <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8009496:	b580      	push	{r7, lr}
 8009498:	b084      	sub	sp, #16
 800949a:	af00      	add	r7, sp, #0
 800949c:	6078      	str	r0, [r7, #4]
 800949e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 80094a0:	2100      	movs	r1, #0
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f7ff fe6c 	bl	8009180 <dir_sdi>
 80094a8:	4603      	mov	r3, r0
 80094aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d131      	bne.n	8009516 <dir_alloc+0x80>
		n = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7ff fa6c 	bl	80089a2 <move_window>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80094ce:	7bfb      	ldrb	r3, [r7, #15]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d11f      	bne.n	8009514 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	2be5      	cmp	r3, #229	; 0xe5
 80094de:	d005      	beq.n	80094ec <dir_alloc+0x56>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d107      	bne.n	80094fc <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3301      	adds	r3, #1
 80094f0:	60bb      	str	r3, [r7, #8]
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d102      	bne.n	8009500 <dir_alloc+0x6a>
 80094fa:	e00c      	b.n	8009516 <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80094fc:	2300      	movs	r3, #0
 80094fe:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8009500:	2101      	movs	r1, #1
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fed0 	bl	80092a8 <dir_next>
 8009508:	4603      	mov	r3, r0
 800950a:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 800950c:	7bfb      	ldrb	r3, [r7, #15]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0d1      	beq.n	80094b6 <dir_alloc+0x20>
 8009512:	e000      	b.n	8009516 <dir_alloc+0x80>
			if (res != FR_OK) break;
 8009514:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009516:	7bfb      	ldrb	r3, [r7, #15]
 8009518:	2b04      	cmp	r3, #4
 800951a:	d101      	bne.n	8009520 <dir_alloc+0x8a>
 800951c:	2307      	movs	r3, #7
 800951e:	73fb      	strb	r3, [r7, #15]
	return res;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 800952a:	b480      	push	{r7}
 800952c:	b085      	sub	sp, #20
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
 8009532:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	331b      	adds	r3, #27
 8009538:	781b      	ldrb	r3, [r3, #0]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	b21a      	sxth	r2, r3
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	331a      	adds	r3, #26
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	b21b      	sxth	r3, r3
 8009546:	4313      	orrs	r3, r2
 8009548:	b21b      	sxth	r3, r3
 800954a:	b29b      	uxth	r3, r3
 800954c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009554:	2b03      	cmp	r3, #3
 8009556:	d10f      	bne.n	8009578 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	3315      	adds	r3, #21
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	021b      	lsls	r3, r3, #8
 8009560:	b21a      	sxth	r2, r3
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	3314      	adds	r3, #20
 8009566:	781b      	ldrb	r3, [r3, #0]
 8009568:	b21b      	sxth	r3, r3
 800956a:	4313      	orrs	r3, r2
 800956c:	b21b      	sxth	r3, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	041b      	lsls	r3, r3, #16
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

	return cl;
 8009578:	68fb      	ldr	r3, [r7, #12]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3714      	adds	r7, #20
 800957e:	46bd      	mov	sp, r7
 8009580:	bc80      	pop	{r7}
 8009582:	4770      	bx	lr

08009584 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	331a      	adds	r3, #26
 8009592:	683a      	ldr	r2, [r7, #0]
 8009594:	b2d2      	uxtb	r2, r2
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	683b      	ldr	r3, [r7, #0]
 800959a:	b29b      	uxth	r3, r3
 800959c:	0a1b      	lsrs	r3, r3, #8
 800959e:	b29a      	uxth	r2, r3
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	331b      	adds	r3, #27
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	0c1a      	lsrs	r2, r3, #16
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	3314      	adds	r3, #20
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	0c1b      	lsrs	r3, r3, #16
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b29a      	uxth	r2, r3
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	3315      	adds	r3, #21
 80095c2:	b2d2      	uxtb	r2, r2
 80095c4:	701a      	strb	r2, [r3, #0]
}
 80095c6:	bf00      	nop
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bc80      	pop	{r7}
 80095ce:	4770      	bx	lr

080095d0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b086      	sub	sp, #24
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80095d8:	2100      	movs	r1, #0
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f7ff fdd0 	bl	8009180 <dir_sdi>
 80095e0:	4603      	mov	r3, r0
 80095e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d001      	beq.n	80095ee <dir_find+0x1e>
 80095ea:	7dfb      	ldrb	r3, [r7, #23]
 80095ec:	e03b      	b.n	8009666 <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f7ff f9d0 	bl	80089a2 <move_window>
 8009602:	4603      	mov	r3, r0
 8009604:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009606:	7dfb      	ldrb	r3, [r7, #23]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d128      	bne.n	800965e <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009612:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d102      	bne.n	8009626 <dir_find+0x56>
 8009620:	2304      	movs	r3, #4
 8009622:	75fb      	strb	r3, [r7, #23]
 8009624:	e01e      	b.n	8009664 <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	330b      	adds	r3, #11
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	f003 0308 	and.w	r3, r3, #8
 8009630:	2b00      	cmp	r3, #0
 8009632:	d10a      	bne.n	800964a <dir_find+0x7a>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800963a:	220b      	movs	r2, #11
 800963c:	4619      	mov	r1, r3
 800963e:	6938      	ldr	r0, [r7, #16]
 8009640:	f7fe ff72 	bl	8008528 <mem_cmp>
 8009644:	4603      	mov	r3, r0
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00b      	beq.n	8009662 <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800964a:	2100      	movs	r1, #0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fe2b 	bl	80092a8 <dir_next>
 8009652:	4603      	mov	r3, r0
 8009654:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009656:	7dfb      	ldrb	r3, [r7, #23]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d0c8      	beq.n	80095ee <dir_find+0x1e>
 800965c:	e002      	b.n	8009664 <dir_find+0x94>
		if (res != FR_OK) break;
 800965e:	bf00      	nop
 8009660:	e000      	b.n	8009664 <dir_find+0x94>
			break;
 8009662:	bf00      	nop

	return res;
 8009664:	7dfb      	ldrb	r3, [r7, #23]
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800966e:	b580      	push	{r7, lr}
 8009670:	b084      	sub	sp, #16
 8009672:	af00      	add	r7, sp, #0
 8009674:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009676:	2101      	movs	r1, #1
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7ff ff0c 	bl	8009496 <dir_alloc>
 800967e:	4603      	mov	r3, r0
 8009680:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8009682:	7bfb      	ldrb	r3, [r7, #15]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d126      	bne.n	80096d6 <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7ff f983 	bl	80089a2 <move_window>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d117      	bne.n	80096d6 <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ac:	2220      	movs	r2, #32
 80096ae:	2100      	movs	r1, #0
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7fe ff1f 	bl	80084f4 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80096c2:	220b      	movs	r2, #11
 80096c4:	4619      	mov	r1, r3
 80096c6:	f7fe fef7 	bl	80084b8 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
		}
	}

	return res;
 80096d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}

080096e0 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	e002      	b.n	80096f8 <create_name+0x18>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	3301      	adds	r3, #1
 80096f6:	60fb      	str	r3, [r7, #12]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	2b2f      	cmp	r3, #47	; 0x2f
 80096fe:	d0f8      	beq.n	80096f2 <create_name+0x12>
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	781b      	ldrb	r3, [r3, #0]
 8009704:	2b5c      	cmp	r3, #92	; 0x5c
 8009706:	d0f4      	beq.n	80096f2 <create_name+0x12>
	sfn = dp->fn;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800970e:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009710:	220b      	movs	r2, #11
 8009712:	2120      	movs	r1, #32
 8009714:	68b8      	ldr	r0, [r7, #8]
 8009716:	f7fe feed 	bl	80084f4 <mem_set>
	si = i = b = 0; ni = 8;
 800971a:	2300      	movs	r3, #0
 800971c:	77fb      	strb	r3, [r7, #31]
 800971e:	2300      	movs	r3, #0
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	2308      	movs	r3, #8
 8009728:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	1c5a      	adds	r2, r3, #1
 800972e:	617a      	str	r2, [r7, #20]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4413      	add	r3, r2
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8009738:	7fbb      	ldrb	r3, [r7, #30]
 800973a:	2b20      	cmp	r3, #32
 800973c:	d953      	bls.n	80097e6 <create_name+0x106>
 800973e:	7fbb      	ldrb	r3, [r7, #30]
 8009740:	2b2f      	cmp	r3, #47	; 0x2f
 8009742:	d050      	beq.n	80097e6 <create_name+0x106>
 8009744:	7fbb      	ldrb	r3, [r7, #30]
 8009746:	2b5c      	cmp	r3, #92	; 0x5c
 8009748:	d04d      	beq.n	80097e6 <create_name+0x106>
		if (c == '.' || i >= ni) {
 800974a:	7fbb      	ldrb	r3, [r7, #30]
 800974c:	2b2e      	cmp	r3, #46	; 0x2e
 800974e:	d003      	beq.n	8009758 <create_name+0x78>
 8009750:	693a      	ldr	r2, [r7, #16]
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	429a      	cmp	r2, r3
 8009756:	d30f      	bcc.n	8009778 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	2b08      	cmp	r3, #8
 800975c:	d102      	bne.n	8009764 <create_name+0x84>
 800975e:	7fbb      	ldrb	r3, [r7, #30]
 8009760:	2b2e      	cmp	r3, #46	; 0x2e
 8009762:	d001      	beq.n	8009768 <create_name+0x88>
 8009764:	2306      	movs	r3, #6
 8009766:	e073      	b.n	8009850 <create_name+0x170>
			i = 8; ni = 11;
 8009768:	2308      	movs	r3, #8
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	230b      	movs	r3, #11
 800976e:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8009770:	7ffb      	ldrb	r3, [r7, #31]
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	77fb      	strb	r3, [r7, #31]
 8009776:	e035      	b.n	80097e4 <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009778:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800977c:	2b00      	cmp	r3, #0
 800977e:	da08      	bge.n	8009792 <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8009780:	7ffb      	ldrb	r3, [r7, #31]
 8009782:	f043 0303 	orr.w	r3, r3, #3
 8009786:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009788:	7fbb      	ldrb	r3, [r7, #30]
 800978a:	3b80      	subs	r3, #128	; 0x80
 800978c:	4a32      	ldr	r2, [pc, #200]	; (8009858 <create_name+0x178>)
 800978e:	5cd3      	ldrb	r3, [r2, r3]
 8009790:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8009792:	7fbb      	ldrb	r3, [r7, #30]
 8009794:	4619      	mov	r1, r3
 8009796:	4831      	ldr	r0, [pc, #196]	; (800985c <create_name+0x17c>)
 8009798:	f7fe feec 	bl	8008574 <chk_chr>
 800979c:	4603      	mov	r3, r0
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d001      	beq.n	80097a6 <create_name+0xc6>
				return FR_INVALID_NAME;
 80097a2:	2306      	movs	r3, #6
 80097a4:	e054      	b.n	8009850 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 80097a6:	7fbb      	ldrb	r3, [r7, #30]
 80097a8:	2b40      	cmp	r3, #64	; 0x40
 80097aa:	d907      	bls.n	80097bc <create_name+0xdc>
 80097ac:	7fbb      	ldrb	r3, [r7, #30]
 80097ae:	2b5a      	cmp	r3, #90	; 0x5a
 80097b0:	d804      	bhi.n	80097bc <create_name+0xdc>
				b |= 2;
 80097b2:	7ffb      	ldrb	r3, [r7, #31]
 80097b4:	f043 0302 	orr.w	r3, r3, #2
 80097b8:	77fb      	strb	r3, [r7, #31]
 80097ba:	e00c      	b.n	80097d6 <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 80097bc:	7fbb      	ldrb	r3, [r7, #30]
 80097be:	2b60      	cmp	r3, #96	; 0x60
 80097c0:	d909      	bls.n	80097d6 <create_name+0xf6>
 80097c2:	7fbb      	ldrb	r3, [r7, #30]
 80097c4:	2b7a      	cmp	r3, #122	; 0x7a
 80097c6:	d806      	bhi.n	80097d6 <create_name+0xf6>
					b |= 1; c -= 0x20;
 80097c8:	7ffb      	ldrb	r3, [r7, #31]
 80097ca:	f043 0301 	orr.w	r3, r3, #1
 80097ce:	77fb      	strb	r3, [r7, #31]
 80097d0:	7fbb      	ldrb	r3, [r7, #30]
 80097d2:	3b20      	subs	r3, #32
 80097d4:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	613a      	str	r2, [r7, #16]
 80097dc:	68ba      	ldr	r2, [r7, #8]
 80097de:	4413      	add	r3, r2
 80097e0:	7fba      	ldrb	r2, [r7, #30]
 80097e2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80097e4:	e7a1      	b.n	800972a <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	441a      	add	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80097f0:	7fbb      	ldrb	r3, [r7, #30]
 80097f2:	2b20      	cmp	r3, #32
 80097f4:	d801      	bhi.n	80097fa <create_name+0x11a>
 80097f6:	2304      	movs	r3, #4
 80097f8:	e000      	b.n	80097fc <create_name+0x11c>
 80097fa:	2300      	movs	r3, #0
 80097fc:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d101      	bne.n	8009808 <create_name+0x128>
 8009804:	2306      	movs	r3, #6
 8009806:	e023      	b.n	8009850 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	2be5      	cmp	r3, #229	; 0xe5
 800980e:	d102      	bne.n	8009816 <create_name+0x136>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2205      	movs	r2, #5
 8009814:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8009816:	69bb      	ldr	r3, [r7, #24]
 8009818:	2b08      	cmp	r3, #8
 800981a:	d102      	bne.n	8009822 <create_name+0x142>
 800981c:	7ffb      	ldrb	r3, [r7, #31]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8009822:	7ffb      	ldrb	r3, [r7, #31]
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b01      	cmp	r3, #1
 800982a:	d103      	bne.n	8009834 <create_name+0x154>
 800982c:	7fbb      	ldrb	r3, [r7, #30]
 800982e:	f043 0310 	orr.w	r3, r3, #16
 8009832:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8009834:	7ffb      	ldrb	r3, [r7, #31]
 8009836:	f003 030c 	and.w	r3, r3, #12
 800983a:	2b04      	cmp	r3, #4
 800983c:	d103      	bne.n	8009846 <create_name+0x166>
 800983e:	7fbb      	ldrb	r3, [r7, #30]
 8009840:	f043 0308 	orr.w	r3, r3, #8
 8009844:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	330b      	adds	r3, #11
 800984a:	7fba      	ldrb	r2, [r7, #30]
 800984c:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800984e:	2300      	movs	r3, #0
#endif
}
 8009850:	4618      	mov	r0, r3
 8009852:	3720      	adds	r7, #32
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}
 8009858:	0800e7c0 	.word	0x0800e7c0
 800985c:	0800bb50 	.word	0x0800bb50

08009860 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b084      	sub	sp, #16
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	2b2f      	cmp	r3, #47	; 0x2f
 8009870:	d003      	beq.n	800987a <follow_path+0x1a>
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	2b5c      	cmp	r3, #92	; 0x5c
 8009878:	d102      	bne.n	8009880 <follow_path+0x20>
		path++;
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	3301      	adds	r3, #1
 800987e:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	2b1f      	cmp	r3, #31
 800988e:	d80a      	bhi.n	80098a6 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8009890:	2100      	movs	r1, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f7ff fc74 	bl	8009180 <dir_sdi>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80098a4:	e045      	b.n	8009932 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80098a6:	463b      	mov	r3, r7
 80098a8:	4619      	mov	r1, r3
 80098aa:	6878      	ldr	r0, [r7, #4]
 80098ac:	f7ff ff18 	bl	80096e0 <create_name>
 80098b0:	4603      	mov	r3, r0
 80098b2:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80098b4:	7bfb      	ldrb	r3, [r7, #15]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d136      	bne.n	8009928 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f7ff fe88 	bl	80095d0 <dir_find>
 80098c0:	4603      	mov	r3, r0
 80098c2:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80098ca:	7adb      	ldrb	r3, [r3, #11]
 80098cc:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d00a      	beq.n	80098ea <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b04      	cmp	r3, #4
 80098d8:	d128      	bne.n	800992c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80098da:	7bbb      	ldrb	r3, [r7, #14]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d123      	bne.n	800992c <follow_path+0xcc>
 80098e4:	2305      	movs	r3, #5
 80098e6:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 80098e8:	e020      	b.n	800992c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	f003 0304 	and.w	r3, r3, #4
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d11d      	bne.n	8009930 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098fa:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	330b      	adds	r3, #11
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	f003 0310 	and.w	r3, r3, #16
 8009906:	2b00      	cmp	r3, #0
 8009908:	d102      	bne.n	8009910 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800990a:	2305      	movs	r3, #5
 800990c:	73fb      	strb	r3, [r7, #15]
 800990e:	e010      	b.n	8009932 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009916:	68b9      	ldr	r1, [r7, #8]
 8009918:	4618      	mov	r0, r3
 800991a:	f7ff fe06 	bl	800952a <ld_clust>
 800991e:	4602      	mov	r2, r0
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009926:	e7be      	b.n	80098a6 <follow_path+0x46>
			if (res != FR_OK) break;
 8009928:	bf00      	nop
 800992a:	e002      	b.n	8009932 <follow_path+0xd2>
				break;
 800992c:	bf00      	nop
 800992e:	e000      	b.n	8009932 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009930:	bf00      	nop
		}
	}

	return res;
 8009932:	7bfb      	ldrb	r3, [r7, #15]
}
 8009934:	4618      	mov	r0, r3
 8009936:	3710      	adds	r7, #16
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8009944:	f04f 33ff 	mov.w	r3, #4294967295
 8009948:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d031      	beq.n	80099b6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	617b      	str	r3, [r7, #20]
 8009958:	e002      	b.n	8009960 <get_ldnumber+0x24>
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	3301      	adds	r3, #1
 800995e:	617b      	str	r3, [r7, #20]
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	2b20      	cmp	r3, #32
 8009966:	d903      	bls.n	8009970 <get_ldnumber+0x34>
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b3a      	cmp	r3, #58	; 0x3a
 800996e:	d1f4      	bne.n	800995a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b3a      	cmp	r3, #58	; 0x3a
 8009976:	d11c      	bne.n	80099b2 <get_ldnumber+0x76>
			tp = *path;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1c5a      	adds	r2, r3, #1
 8009982:	60fa      	str	r2, [r7, #12]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	3b30      	subs	r3, #48	; 0x30
 8009988:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	2b09      	cmp	r3, #9
 800998e:	d80e      	bhi.n	80099ae <get_ldnumber+0x72>
 8009990:	68fa      	ldr	r2, [r7, #12]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	429a      	cmp	r2, r3
 8009996:	d10a      	bne.n	80099ae <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d107      	bne.n	80099ae <get_ldnumber+0x72>
					vol = (int)i;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	3301      	adds	r3, #1
 80099a6:	617b      	str	r3, [r7, #20]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	e002      	b.n	80099b8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80099b2:	2300      	movs	r3, #0
 80099b4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80099b6:	693b      	ldr	r3, [r7, #16]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	371c      	adds	r7, #28
 80099bc:	46bd      	mov	sp, r7
 80099be:	bc80      	pop	{r7}
 80099c0:	4770      	bx	lr
	...

080099c4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f04f 32ff 	mov.w	r2, #4294967295
 80099dc:	f8c3 222c 	str.w	r2, [r3, #556]	; 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80099e0:	6839      	ldr	r1, [r7, #0]
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f7fe ffdd 	bl	80089a2 <move_window>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d001      	beq.n	80099f2 <check_fs+0x2e>
		return 3;
 80099ee:	2303      	movs	r3, #3
 80099f0:	e04a      	b.n	8009a88 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80099f8:	3301      	adds	r3, #1
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	021b      	lsls	r3, r3, #8
 80099fe:	b21a      	sxth	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009a06:	b21b      	sxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <check_fs+0xcc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d001      	beq.n	8009a16 <check_fs+0x52>
		return 2;
 8009a12:	2302      	movs	r3, #2
 8009a14:	e038      	b.n	8009a88 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	3336      	adds	r3, #54	; 0x36
 8009a1a:	3303      	adds	r3, #3
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	061a      	lsls	r2, r3, #24
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	3336      	adds	r3, #54	; 0x36
 8009a24:	3302      	adds	r3, #2
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	041b      	lsls	r3, r3, #16
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	3236      	adds	r2, #54	; 0x36
 8009a30:	3201      	adds	r2, #1
 8009a32:	7812      	ldrb	r2, [r2, #0]
 8009a34:	0212      	lsls	r2, r2, #8
 8009a36:	4313      	orrs	r3, r2
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a44:	4a13      	ldr	r2, [pc, #76]	; (8009a94 <check_fs+0xd0>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d101      	bne.n	8009a4e <check_fs+0x8a>
		return 0;
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	e01c      	b.n	8009a88 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	3352      	adds	r3, #82	; 0x52
 8009a52:	3303      	adds	r3, #3
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	061a      	lsls	r2, r3, #24
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	3352      	adds	r3, #82	; 0x52
 8009a5c:	3302      	adds	r3, #2
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	041b      	lsls	r3, r3, #16
 8009a62:	4313      	orrs	r3, r2
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	3252      	adds	r2, #82	; 0x52
 8009a68:	3201      	adds	r2, #1
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	0212      	lsls	r2, r2, #8
 8009a6e:	4313      	orrs	r3, r2
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009a7c:	4a05      	ldr	r2, [pc, #20]	; (8009a94 <check_fs+0xd0>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d101      	bne.n	8009a86 <check_fs+0xc2>
		return 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e000      	b.n	8009a88 <check_fs+0xc4>

	return 1;
 8009a86:	2301      	movs	r3, #1
}
 8009a88:	4618      	mov	r0, r3
 8009a8a:	3708      	adds	r7, #8
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	ffffaa55 	.word	0xffffaa55
 8009a94:	00544146 	.word	0x00544146

08009a98 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b096      	sub	sp, #88	; 0x58
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	60f8      	str	r0, [r7, #12]
 8009aa0:	60b9      	str	r1, [r7, #8]
 8009aa2:	4613      	mov	r3, r2
 8009aa4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009aac:	68b8      	ldr	r0, [r7, #8]
 8009aae:	f7ff ff45 	bl	800993c <get_ldnumber>
 8009ab2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da01      	bge.n	8009abe <find_volume+0x26>
 8009aba:	230b      	movs	r3, #11
 8009abc:	e2a8      	b.n	800a010 <find_volume+0x578>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8009abe:	4a9d      	ldr	r2, [pc, #628]	; (8009d34 <find_volume+0x29c>)
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ac6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d101      	bne.n	8009ad2 <find_volume+0x3a>
 8009ace:	230c      	movs	r3, #12
 8009ad0:	e29e      	b.n	800a010 <find_volume+0x578>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ad6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8009ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ada:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d01b      	beq.n	8009b1a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fc47 	bl	800837c <disk_status>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10c      	bne.n	8009b1a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8009b00:	79fb      	ldrb	r3, [r7, #7]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d007      	beq.n	8009b16 <find_volume+0x7e>
 8009b06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d001      	beq.n	8009b16 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8009b12:	230a      	movs	r3, #10
 8009b14:	e27c      	b.n	800a010 <find_volume+0x578>
			return FR_OK;				/* The file system object is valid */
 8009b16:	2300      	movs	r3, #0
 8009b18:	e27a      	b.n	800a010 <find_volume+0x578>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8009b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	b2da      	uxtb	r2, r3
 8009b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b28:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fe fc3c 	bl	80083b0 <disk_initialize>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8009b3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b42:	f003 0301 	and.w	r3, r3, #1
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d001      	beq.n	8009b4e <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8009b4a:	2303      	movs	r3, #3
 8009b4c:	e260      	b.n	800a010 <find_volume+0x578>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8009b4e:	79fb      	ldrb	r3, [r7, #7]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d007      	beq.n	8009b64 <find_volume+0xcc>
 8009b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009b58:	f003 0304 	and.w	r3, r3, #4
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8009b60:	230a      	movs	r3, #10
 8009b62:	e255      	b.n	800a010 <find_volume+0x578>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8009b64:	2300      	movs	r3, #0
 8009b66:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8009b68:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009b6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009b6c:	f7ff ff2a 	bl	80099c4 <check_fs>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8009b76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009b7a:	2b01      	cmp	r3, #1
 8009b7c:	d153      	bne.n	8009c26 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009b7e:	2300      	movs	r3, #0
 8009b80:	643b      	str	r3, [r7, #64]	; 0x40
 8009b82:	e028      	b.n	8009bd6 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8009b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8009b8e:	4413      	add	r3, r2
 8009b90:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8009b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b94:	3304      	adds	r3, #4
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d012      	beq.n	8009bc2 <find_volume+0x12a>
 8009b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9e:	330b      	adds	r3, #11
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	061a      	lsls	r2, r3, #24
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	330a      	adds	r3, #10
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	041b      	lsls	r3, r3, #16
 8009bac:	4313      	orrs	r3, r2
 8009bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bb0:	3209      	adds	r2, #9
 8009bb2:	7812      	ldrb	r2, [r2, #0]
 8009bb4:	0212      	lsls	r2, r2, #8
 8009bb6:	4313      	orrs	r3, r2
 8009bb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bba:	3208      	adds	r2, #8
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	e000      	b.n	8009bc4 <find_volume+0x12c>
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	3358      	adds	r3, #88	; 0x58
 8009bca:	443b      	add	r3, r7
 8009bcc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8009bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd2:	3301      	adds	r3, #1
 8009bd4:	643b      	str	r3, [r7, #64]	; 0x40
 8009bd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bd8:	2b03      	cmp	r3, #3
 8009bda:	d9d3      	bls.n	8009b84 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8009bdc:	2300      	movs	r3, #0
 8009bde:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8009be0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d002      	beq.n	8009bec <find_volume+0x154>
 8009be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009be8:	3b01      	subs	r3, #1
 8009bea:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8009bec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	3358      	adds	r3, #88	; 0x58
 8009bf2:	443b      	add	r3, r7
 8009bf4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8009bf8:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8009bfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <find_volume+0x174>
 8009c00:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009c02:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009c04:	f7ff fede 	bl	80099c4 <check_fs>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	e000      	b.n	8009c0e <find_volume+0x176>
 8009c0c:	2302      	movs	r3, #2
 8009c0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8009c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d005      	beq.n	8009c26 <find_volume+0x18e>
 8009c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	643b      	str	r3, [r7, #64]	; 0x40
 8009c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c22:	2b03      	cmp	r3, #3
 8009c24:	d9e2      	bls.n	8009bec <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8009c26:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d101      	bne.n	8009c32 <find_volume+0x19a>
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e1ee      	b.n	800a010 <find_volume+0x578>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8009c32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <find_volume+0x1a6>
 8009c3a:	230d      	movs	r3, #13
 8009c3c:	e1e8      	b.n	800a010 <find_volume+0x578>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c40:	7b1b      	ldrb	r3, [r3, #12]
 8009c42:	021b      	lsls	r3, r3, #8
 8009c44:	b21a      	sxth	r2, r3
 8009c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c48:	7adb      	ldrb	r3, [r3, #11]
 8009c4a:	b21b      	sxth	r3, r3
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c54:	d001      	beq.n	8009c5a <find_volume+0x1c2>
		return FR_NO_FILESYSTEM;
 8009c56:	230d      	movs	r3, #13
 8009c58:	e1da      	b.n	800a010 <find_volume+0x578>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8009c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c5c:	7ddb      	ldrb	r3, [r3, #23]
 8009c5e:	021b      	lsls	r3, r3, #8
 8009c60:	b21a      	sxth	r2, r3
 8009c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c64:	7d9b      	ldrb	r3, [r3, #22]
 8009c66:	b21b      	sxth	r3, r3
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	b21b      	sxth	r3, r3
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8009c70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d112      	bne.n	8009c9c <find_volume+0x204>
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8009c7c:	061a      	lsls	r2, r3, #24
 8009c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c80:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8009c84:	041b      	lsls	r3, r3, #16
 8009c86:	4313      	orrs	r3, r2
 8009c88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c8a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8009c8e:	0212      	lsls	r2, r2, #8
 8009c90:	4313      	orrs	r3, r2
 8009c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c94:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8009c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009ca0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8009ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca6:	7c1a      	ldrb	r2, [r3, #16]
 8009ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009caa:	f883 2203 	strb.w	r2, [r3, #515]	; 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8009cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cb0:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009cb4:	2b01      	cmp	r3, #1
 8009cb6:	d006      	beq.n	8009cc6 <find_volume+0x22e>
 8009cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cba:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009cbe:	2b02      	cmp	r3, #2
 8009cc0:	d001      	beq.n	8009cc6 <find_volume+0x22e>
		return FR_NO_FILESYSTEM;
 8009cc2:	230d      	movs	r3, #13
 8009cc4:	e1a4      	b.n	800a010 <find_volume+0x578>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8009cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cc8:	f893 3203 	ldrb.w	r3, [r3, #515]	; 0x203
 8009ccc:	461a      	mov	r2, r3
 8009cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd0:	fb02 f303 	mul.w	r3, r2, r3
 8009cd4:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8009cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cd8:	7b5a      	ldrb	r2, [r3, #13]
 8009cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cdc:	f883 2202 	strb.w	r2, [r3, #514]	; 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8009ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce2:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00a      	beq.n	8009d00 <find_volume+0x268>
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009cf0:	461a      	mov	r2, r3
 8009cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cf4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	4013      	ands	r3, r2
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <find_volume+0x26c>
		return FR_NO_FILESYSTEM;
 8009d00:	230d      	movs	r3, #13
 8009d02:	e185      	b.n	800a010 <find_volume+0x578>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8009d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d06:	7c9b      	ldrb	r3, [r3, #18]
 8009d08:	021b      	lsls	r3, r3, #8
 8009d0a:	b21a      	sxth	r2, r3
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	7c5b      	ldrb	r3, [r3, #17]
 8009d10:	b21b      	sxth	r3, r3
 8009d12:	4313      	orrs	r3, r2
 8009d14:	b21b      	sxth	r3, r3
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d1a:	f8a3 2208 	strh.w	r2, [r3, #520]	; 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8009d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d20:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009d24:	f003 030f 	and.w	r3, r3, #15
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d004      	beq.n	8009d38 <find_volume+0x2a0>
		return FR_NO_FILESYSTEM;
 8009d2e:	230d      	movs	r3, #13
 8009d30:	e16e      	b.n	800a010 <find_volume+0x578>
 8009d32:	bf00      	nop
 8009d34:	20000bf8 	.word	0x20000bf8

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8009d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3a:	7d1b      	ldrb	r3, [r3, #20]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	b21a      	sxth	r2, r3
 8009d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d42:	7cdb      	ldrb	r3, [r3, #19]
 8009d44:	b21b      	sxth	r3, r3
 8009d46:	4313      	orrs	r3, r2
 8009d48:	b21b      	sxth	r3, r3
 8009d4a:	b29b      	uxth	r3, r3
 8009d4c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8009d4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d112      	bne.n	8009d7a <find_volume+0x2e2>
 8009d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d56:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009d5a:	061a      	lsls	r2, r3, #24
 8009d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009d62:	041b      	lsls	r3, r3, #16
 8009d64:	4313      	orrs	r3, r2
 8009d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d68:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8009d6c:	0212      	lsls	r2, r2, #8
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d72:	f892 2020 	ldrb.w	r2, [r2, #32]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8009d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7c:	7bdb      	ldrb	r3, [r3, #15]
 8009d7e:	021b      	lsls	r3, r3, #8
 8009d80:	b21a      	sxth	r2, r3
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	7b9b      	ldrb	r3, [r3, #14]
 8009d86:	b21b      	sxth	r3, r3
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b21b      	sxth	r3, r3
 8009d8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8009d8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d101      	bne.n	8009d98 <find_volume+0x300>
 8009d94:	230d      	movs	r3, #13
 8009d96:	e13b      	b.n	800a010 <find_volume+0x578>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8009d98:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	4413      	add	r3, r2
 8009d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009da0:	f8b2 2208 	ldrh.w	r2, [r2, #520]	; 0x208
 8009da4:	0912      	lsrs	r2, r2, #4
 8009da6:	b292      	uxth	r2, r2
 8009da8:	4413      	add	r3, r2
 8009daa:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8009dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d201      	bcs.n	8009db8 <find_volume+0x320>
 8009db4:	230d      	movs	r3, #13
 8009db6:	e12b      	b.n	800a010 <find_volume+0x578>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8009db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009dc0:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 8009dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dc8:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <find_volume+0x33c>
 8009dd0:	230d      	movs	r3, #13
 8009dd2:	e11d      	b.n	800a010 <find_volume+0x578>
	fmt = FS_FAT12;
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d902      	bls.n	8009dea <find_volume+0x352>
 8009de4:	2302      	movs	r3, #2
 8009de6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d902      	bls.n	8009dfa <find_volume+0x362>
 8009df4:	2303      	movs	r3, #3
 8009df6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	1c9a      	adds	r2, r3, #2
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8009e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8009e0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e10:	441a      	add	r2, r3
 8009e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e14:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8009e18:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1c:	441a      	add	r2, r3
 8009e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e20:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
	if (fmt == FS_FAT32) {
 8009e24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e28:	2b03      	cmp	r3, #3
 8009e2a:	d121      	bne.n	8009e70 <find_volume+0x3d8>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d001      	beq.n	8009e3a <find_volume+0x3a2>
 8009e36:	230d      	movs	r3, #13
 8009e38:	e0ea      	b.n	800a010 <find_volume+0x578>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8009e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e3c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009e40:	061a      	lsls	r2, r3, #24
 8009e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e44:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8009e48:	041b      	lsls	r3, r3, #16
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e4e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8009e52:	0212      	lsls	r2, r2, #8
 8009e54:	4313      	orrs	r3, r2
 8009e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009e58:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e60:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8009e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e66:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8009e6e:	e025      	b.n	8009ebc <find_volume+0x424>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8009e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e72:	f8b3 3208 	ldrh.w	r3, [r3, #520]	; 0x208
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d101      	bne.n	8009e7e <find_volume+0x3e6>
 8009e7a:	230d      	movs	r3, #13
 8009e7c:	e0c8      	b.n	800a010 <find_volume+0x578>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 8009e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009e86:	441a      	add	r2, r3
 8009e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e8a:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009e8e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009e92:	2b02      	cmp	r3, #2
 8009e94:	d104      	bne.n	8009ea0 <find_volume+0x408>
 8009e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009e9c:	005b      	lsls	r3, r3, #1
 8009e9e:	e00c      	b.n	8009eba <find_volume+0x422>
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ea2:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	085a      	lsrs	r2, r3, #1
 8009eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009eb4:	f003 0301 	and.w	r3, r3, #1
 8009eb8:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8009eba:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8009ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ec4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8009ec8:	0a5b      	lsrs	r3, r3, #9
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d201      	bcs.n	8009ed2 <find_volume+0x43a>
		return FR_NO_FILESYSTEM;
 8009ece:	230d      	movs	r3, #13
 8009ed0:	e09e      	b.n	800a010 <find_volume+0x578>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8009ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ed8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
 8009edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ede:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ee4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8009ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eea:	2280      	movs	r2, #128	; 0x80
 8009eec:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8009ef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8009ef4:	2b03      	cmp	r3, #3
 8009ef6:	d177      	bne.n	8009fe8 <find_volume+0x550>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8009ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009efe:	021b      	lsls	r3, r3, #8
 8009f00:	b21a      	sxth	r2, r3
 8009f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009f08:	b21b      	sxth	r3, r3
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	b21b      	sxth	r3, r3
 8009f0e:	2b01      	cmp	r3, #1
 8009f10:	d16a      	bne.n	8009fe8 <find_volume+0x550>
		&& move_window(fs, bsect + 1) == FR_OK)
 8009f12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f14:	3301      	adds	r3, #1
 8009f16:	4619      	mov	r1, r3
 8009f18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009f1a:	f7fe fd42 	bl	80089a2 <move_window>
 8009f1e:	4603      	mov	r3, r0
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d161      	bne.n	8009fe8 <find_volume+0x550>
	{
		fs->fsi_flag = 0;
 8009f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 2205 	strb.w	r2, [r3, #517]	; 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8009f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2e:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8009f32:	021b      	lsls	r3, r3, #8
 8009f34:	b21a      	sxth	r2, r3
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8009f3c:	b21b      	sxth	r3, r3
 8009f3e:	4313      	orrs	r3, r2
 8009f40:	b21b      	sxth	r3, r3
 8009f42:	4a35      	ldr	r2, [pc, #212]	; (800a018 <find_volume+0x580>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d14f      	bne.n	8009fe8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	78db      	ldrb	r3, [r3, #3]
 8009f4c:	061a      	lsls	r2, r3, #24
 8009f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f50:	789b      	ldrb	r3, [r3, #2]
 8009f52:	041b      	lsls	r3, r3, #16
 8009f54:	4313      	orrs	r3, r2
 8009f56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f58:	7852      	ldrb	r2, [r2, #1]
 8009f5a:	0212      	lsls	r2, r2, #8
 8009f5c:	4313      	orrs	r3, r2
 8009f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f60:	7812      	ldrb	r2, [r2, #0]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	4a2d      	ldr	r2, [pc, #180]	; (800a01c <find_volume+0x584>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d13e      	bne.n	8009fe8 <find_volume+0x550>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8009f70:	061a      	lsls	r2, r3, #24
 8009f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f74:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8009f78:	041b      	lsls	r3, r3, #16
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f7e:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8009f82:	0212      	lsls	r2, r2, #8
 8009f84:	4313      	orrs	r3, r2
 8009f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009f88:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8009f8c:	4313      	orrs	r3, r2
 8009f8e:	4a24      	ldr	r2, [pc, #144]	; (800a020 <find_volume+0x588>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d129      	bne.n	8009fe8 <find_volume+0x550>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8009f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f96:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8009f9a:	061a      	lsls	r2, r3, #24
 8009f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9e:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8009fa2:	041b      	lsls	r3, r3, #16
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fa8:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8009fac:	0212      	lsls	r2, r2, #8
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fb2:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8009fb6:	431a      	orrs	r2, r3
 8009fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fba:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8009fc4:	061a      	lsls	r2, r3, #24
 8009fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc8:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8009fcc:	041b      	lsls	r3, r3, #16
 8009fce:	4313      	orrs	r3, r2
 8009fd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fd2:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8009fd6:	0212      	lsls	r2, r2, #8
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009fdc:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8009fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8009fee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 8009ff2:	4b0c      	ldr	r3, [pc, #48]	; (800a024 <find_volume+0x58c>)
 8009ff4:	881b      	ldrh	r3, [r3, #0]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	b29a      	uxth	r2, r3
 8009ffa:	4b0a      	ldr	r3, [pc, #40]	; (800a024 <find_volume+0x58c>)
 8009ffc:	801a      	strh	r2, [r3, #0]
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <find_volume+0x58c>)
 800a000:	881a      	ldrh	r2, [r3, #0]
 800a002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a004:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 800a008:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a00a:	f7fe fc57 	bl	80088bc <clear_lock>
#endif

	return FR_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3758      	adds	r7, #88	; 0x58
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	ffffaa55 	.word	0xffffaa55
 800a01c:	41615252 	.word	0x41615252
 800a020:	61417272 	.word	0x61417272
 800a024:	20000bfc 	.word	0x20000bfc

0800a028 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800a028:	b580      	push	{r7, lr}
 800a02a:	b084      	sub	sp, #16
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d022      	beq.n	800a080 <validate+0x58>
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a040:	2b00      	cmp	r3, #0
 800a042:	d01d      	beq.n	800a080 <validate+0x58>
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a04a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d016      	beq.n	800a080 <validate+0x58>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a058:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8b3 3204 	ldrh.w	r3, [r3, #516]	; 0x204
 800a062:	429a      	cmp	r2, r3
 800a064:	d10c      	bne.n	800a080 <validate+0x58>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a06c:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a070:	4618      	mov	r0, r3
 800a072:	f7fe f983 	bl	800837c <disk_status>
 800a076:	4603      	mov	r3, r0
 800a078:	f003 0301 	and.w	r3, r3, #1
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d001      	beq.n	800a084 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800a080:	2309      	movs	r3, #9
 800a082:	e000      	b.n	800a086 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}
	...

0800a090 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b088      	sub	sp, #32
 800a094:	af00      	add	r7, sp, #0
 800a096:	60f8      	str	r0, [r7, #12]
 800a098:	60b9      	str	r1, [r7, #8]
 800a09a:	4613      	mov	r3, r2
 800a09c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800a0a2:	f107 0310 	add.w	r3, r7, #16
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff fc48 	bl	800993c <get_ldnumber>
 800a0ac:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	da01      	bge.n	800a0b8 <f_mount+0x28>
 800a0b4:	230b      	movs	r3, #11
 800a0b6:	e02d      	b.n	800a114 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a0b8:	4a18      	ldr	r2, [pc, #96]	; (800a11c <f_mount+0x8c>)
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0c0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d006      	beq.n	800a0d6 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 800a0c8:	69b8      	ldr	r0, [r7, #24]
 800a0ca:	f7fe fbf7 	bl	80088bc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}

	if (fs) {
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d003      	beq.n	800a0e4 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2200      	movs	r2, #0
 800a0e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	490d      	ldr	r1, [pc, #52]	; (800a11c <f_mount+0x8c>)
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <f_mount+0x6a>
 800a0f4:	79fb      	ldrb	r3, [r7, #7]
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d001      	beq.n	800a0fe <f_mount+0x6e>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	e00a      	b.n	800a114 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800a0fe:	f107 0108 	add.w	r1, r7, #8
 800a102:	f107 030c 	add.w	r3, r7, #12
 800a106:	2200      	movs	r2, #0
 800a108:	4618      	mov	r0, r3
 800a10a:	f7ff fcc5 	bl	8009a98 <find_volume>
 800a10e:	4603      	mov	r3, r0
 800a110:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a112:	7dfb      	ldrb	r3, [r7, #23]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3720      	adds	r7, #32
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	20000bf8 	.word	0x20000bf8

0800a120 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	f5ad 7d14 	sub.w	sp, sp, #592	; 0x250
 800a126:	af00      	add	r7, sp, #0
 800a128:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a12c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a130:	6018      	str	r0, [r3, #0]
 800a132:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a136:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800a13a:	6019      	str	r1, [r3, #0]
 800a13c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a140:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a144:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800a146:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a14a:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d101      	bne.n	800a158 <f_open+0x38>
 800a154:	2309      	movs	r3, #9
 800a156:	e257      	b.n	800a608 <f_open+0x4e8>
	fp->fs = 0;			/* Clear file object */
 800a158:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a15c:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800a168:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a16c:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a170:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800a174:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800a178:	7812      	ldrb	r2, [r2, #0]
 800a17a:	f002 021f 	and.w	r2, r2, #31
 800a17e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800a180:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a184:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a188:	781b      	ldrb	r3, [r3, #0]
 800a18a:	f023 0301 	bic.w	r3, r3, #1
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	f107 0320 	add.w	r3, r7, #32
 800a198:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800a19c:	4618      	mov	r0, r3
 800a19e:	f7ff fc7b 	bl	8009a98 <find_volume>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800a1a8:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f040 8229 	bne.w	800a604 <f_open+0x4e4>
		INIT_BUF(dj);
 800a1b2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a1b6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a1ba:	f107 0214 	add.w	r2, r7, #20
 800a1be:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800a1c2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a1c6:	f5a3 7312 	sub.w	r3, r3, #584	; 0x248
 800a1ca:	681a      	ldr	r2, [r3, #0]
 800a1cc:	f107 0320 	add.w	r3, r7, #32
 800a1d0:	4611      	mov	r1, r2
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	f7ff fb44 	bl	8009860 <follow_path>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
		dir = dj.dir;
 800a1de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a1e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a1e6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a1ea:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a1ee:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d11d      	bne.n	800a232 <f_open+0x112>
			if (!dir)	/* Default directory itself */
 800a1f6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d103      	bne.n	800a206 <f_open+0xe6>
				res = FR_INVALID_NAME;
 800a1fe:	2306      	movs	r3, #6
 800a200:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800a204:	e015      	b.n	800a232 <f_open+0x112>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a206:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a20a:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a20e:	781b      	ldrb	r3, [r3, #0]
 800a210:	f023 0301 	bic.w	r3, r3, #1
 800a214:	2b00      	cmp	r3, #0
 800a216:	bf14      	ite	ne
 800a218:	2301      	movne	r3, #1
 800a21a:	2300      	moveq	r3, #0
 800a21c:	b2db      	uxtb	r3, r3
 800a21e:	461a      	mov	r2, r3
 800a220:	f107 0320 	add.w	r3, r7, #32
 800a224:	4611      	mov	r1, r2
 800a226:	4618      	mov	r0, r3
 800a228:	f7fe f9be 	bl	80085a8 <chk_lock>
 800a22c:	4603      	mov	r3, r0
 800a22e:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a232:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a236:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f003 031c 	and.w	r3, r3, #28
 800a240:	2b00      	cmp	r3, #0
 800a242:	f000 80e6 	beq.w	800a412 <f_open+0x2f2>
			if (res != FR_OK) {					/* No file, create new */
 800a246:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d027      	beq.n	800a29e <f_open+0x17e>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 800a24e:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a252:	2b04      	cmp	r3, #4
 800a254:	d10e      	bne.n	800a274 <f_open+0x154>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a256:	f7fe fa13 	bl	8008680 <enq_lock>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d006      	beq.n	800a26e <f_open+0x14e>
 800a260:	f107 0320 	add.w	r3, r7, #32
 800a264:	4618      	mov	r0, r3
 800a266:	f7ff fa02 	bl	800966e <dir_register>
 800a26a:	4603      	mov	r3, r0
 800a26c:	e000      	b.n	800a270 <f_open+0x150>
 800a26e:	2312      	movs	r3, #18
 800a270:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a274:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a278:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a27c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800a280:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800a284:	7812      	ldrb	r2, [r2, #0]
 800a286:	f042 0208 	orr.w	r2, r2, #8
 800a28a:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 800a28c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a290:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a294:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a298:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 800a29c:	e017      	b.n	800a2ce <f_open+0x1ae>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a29e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a2a2:	330b      	adds	r3, #11
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	f003 0311 	and.w	r3, r3, #17
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <f_open+0x196>
					res = FR_DENIED;
 800a2ae:	2307      	movs	r3, #7
 800a2b0:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800a2b4:	e00b      	b.n	800a2ce <f_open+0x1ae>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800a2b6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a2ba:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	f003 0304 	and.w	r3, r3, #4
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <f_open+0x1ae>
						res = FR_EXIST;
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a2ce:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f040 80c1 	bne.w	800a45a <f_open+0x33a>
 800a2d8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a2dc:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	f003 0308 	and.w	r3, r3, #8
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	f000 80b7 	beq.w	800a45a <f_open+0x33a>
				dw = GET_FATTIME();				/* Created time */
 800a2ec:	f7fd ffb8 	bl	8008260 <get_fattime>
 800a2f0:	f8c7 0244 	str.w	r0, [r7, #580]	; 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 800a2f4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a2f8:	330e      	adds	r3, #14
 800a2fa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a306:	b29b      	uxth	r3, r3
 800a308:	0a1b      	lsrs	r3, r3, #8
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a310:	330f      	adds	r3, #15
 800a312:	b2d2      	uxtb	r2, r2
 800a314:	701a      	strb	r2, [r3, #0]
 800a316:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a31a:	0c1a      	lsrs	r2, r3, #16
 800a31c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a320:	3310      	adds	r3, #16
 800a322:	b2d2      	uxtb	r2, r2
 800a324:	701a      	strb	r2, [r3, #0]
 800a326:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800a32a:	0e1a      	lsrs	r2, r3, #24
 800a32c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a330:	3311      	adds	r3, #17
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 800a336:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a33a:	330b      	adds	r3, #11
 800a33c:	2200      	movs	r2, #0
 800a33e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 800a340:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a344:	331c      	adds	r3, #28
 800a346:	2200      	movs	r2, #0
 800a348:	701a      	strb	r2, [r3, #0]
 800a34a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a34e:	331d      	adds	r3, #29
 800a350:	2200      	movs	r2, #0
 800a352:	701a      	strb	r2, [r3, #0]
 800a354:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a358:	331e      	adds	r3, #30
 800a35a:	2200      	movs	r2, #0
 800a35c:	701a      	strb	r2, [r3, #0]
 800a35e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a362:	331f      	adds	r3, #31
 800a364:	2200      	movs	r2, #0
 800a366:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800a368:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a36c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a370:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a374:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff f8d6 	bl	800952a <ld_clust>
 800a37e:	f8c7 0240 	str.w	r0, [r7, #576]	; 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 800a382:	2100      	movs	r1, #0
 800a384:	f8d7 0248 	ldr.w	r0, [r7, #584]	; 0x248
 800a388:	f7ff f8fc 	bl	8009584 <st_clust>
				dj.fs->wflag = 1;
 800a38c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a390:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a394:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a398:	2201      	movs	r2, #1
 800a39a:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 800a39e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d059      	beq.n	800a45a <f_open+0x33a>
					dw = dj.fs->winsect;
 800a3a6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a3aa:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a3ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3b2:	f8d3 322c 	ldr.w	r3, [r3, #556]	; 0x22c
 800a3b6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					res = remove_chain(dj.fs, cl);
 800a3ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a3be:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a3c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3c6:	f8d7 1240 	ldr.w	r1, [r7, #576]	; 0x240
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fdad 	bl	8008f2a <remove_chain>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
					if (res == FR_OK) {
 800a3d6:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d13d      	bne.n	800a45a <f_open+0x33a>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 800a3de:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a3e2:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a3e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a3ea:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 800a3ee:	3a01      	subs	r2, #1
 800a3f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
						res = move_window(dj.fs, dw);
 800a3f4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a3f8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a3fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a400:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800a404:	4618      	mov	r0, r3
 800a406:	f7fe facc 	bl	80089a2 <move_window>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800a410:	e023      	b.n	800a45a <f_open+0x33a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 800a412:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a416:	2b00      	cmp	r3, #0
 800a418:	d11f      	bne.n	800a45a <f_open+0x33a>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800a41a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a41e:	330b      	adds	r3, #11
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 0310 	and.w	r3, r3, #16
 800a426:	2b00      	cmp	r3, #0
 800a428:	d003      	beq.n	800a432 <f_open+0x312>
					res = FR_NO_FILE;
 800a42a:	2304      	movs	r3, #4
 800a42c:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
 800a430:	e013      	b.n	800a45a <f_open+0x33a>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 800a432:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a436:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a43a:	781b      	ldrb	r3, [r3, #0]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d00a      	beq.n	800a45a <f_open+0x33a>
 800a444:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a448:	330b      	adds	r3, #11
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b00      	cmp	r3, #0
 800a452:	d002      	beq.n	800a45a <f_open+0x33a>
						res = FR_DENIED;
 800a454:	2307      	movs	r3, #7
 800a456:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800a45a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d153      	bne.n	800a50a <f_open+0x3ea>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a462:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a466:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a46a:	781b      	ldrb	r3, [r3, #0]
 800a46c:	f003 0308 	and.w	r3, r3, #8
 800a470:	2b00      	cmp	r3, #0
 800a472:	d00b      	beq.n	800a48c <f_open+0x36c>
				mode |= FA__WRITTEN;
 800a474:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a478:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a47c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800a480:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800a484:	7812      	ldrb	r2, [r2, #0]
 800a486:	f042 0220 	orr.w	r2, r2, #32
 800a48a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 800a48c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a490:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a494:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a498:	f8d3 222c 	ldr.w	r2, [r3, #556]	; 0x22c
 800a49c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a4a0:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
			fp->dir_ptr = dir;
 800a4aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a4ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800a4b8:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a4bc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a4c0:	f2a3 2349 	subw	r3, r3, #585	; 0x249
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	f023 0301 	bic.w	r3, r3, #1
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	bf14      	ite	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	2300      	moveq	r3, #0
 800a4d2:	b2db      	uxtb	r3, r3
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f107 0320 	add.w	r3, r7, #32
 800a4da:	4611      	mov	r1, r2
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe f8f3 	bl	80086c8 <inc_lock>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a4e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 800a4f2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a4f6:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800a500:	2b00      	cmp	r3, #0
 800a502:	d102      	bne.n	800a50a <f_open+0x3ea>
 800a504:	2302      	movs	r3, #2
 800a506:	f887 324f 	strb.w	r3, [r7, #591]	; 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800a50a:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d178      	bne.n	800a604 <f_open+0x4e4>
			fp->flag = mode;					/* File access mode */
 800a512:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a516:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f507 7214 	add.w	r2, r7, #592	; 0x250
 800a520:	f2a2 2249 	subw	r2, r2, #585	; 0x249
 800a524:	7812      	ldrb	r2, [r2, #0]
 800a526:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			fp->err = 0;						/* Clear error flag */
 800a52a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a52e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	2200      	movs	r2, #0
 800a536:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 800a53a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a53e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a542:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a546:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe ffed 	bl	800952a <ld_clust>
 800a550:	4602      	mov	r2, r0
 800a552:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a556:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800a560:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a564:	331f      	adds	r3, #31
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	061a      	lsls	r2, r3, #24
 800a56a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 800a56e:	331e      	adds	r3, #30
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	041b      	lsls	r3, r3, #16
 800a574:	4313      	orrs	r3, r2
 800a576:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800a57a:	321d      	adds	r2, #29
 800a57c:	7812      	ldrb	r2, [r2, #0]
 800a57e:	0212      	lsls	r2, r2, #8
 800a580:	4313      	orrs	r3, r2
 800a582:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 800a586:	321c      	adds	r2, #28
 800a588:	7812      	ldrb	r2, [r2, #0]
 800a58a:	431a      	orrs	r2, r3
 800a58c:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a590:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
			fp->fptr = 0;						/* File pointer */
 800a59a:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a59e:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
			fp->dsect = 0;
 800a5aa:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5ae:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800a5ba:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5be:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	f8c3 2224 	str.w	r2, [r3, #548]	; 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800a5ca:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5ce:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800a5d2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a5d6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5da:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			fp->id = fp->fs->id;
 800a5e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5e8:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	; 0x206
 800a5f6:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800a5fa:	f5a3 7311 	sub.w	r3, r3, #580	; 0x244
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f8a3 2204 	strh.w	r2, [r3, #516]	; 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 800a604:	f897 324f 	ldrb.w	r3, [r7, #591]	; 0x24f
}
 800a608:	4618      	mov	r0, r3
 800a60a:	f507 7714 	add.w	r7, r7, #592	; 0x250
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b08a      	sub	sp, #40	; 0x28
 800a616:	af00      	add	r7, sp, #0
 800a618:	60f8      	str	r0, [r7, #12]
 800a61a:	60b9      	str	r1, [r7, #8]
 800a61c:	607a      	str	r2, [r7, #4]
 800a61e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	2200      	movs	r2, #0
 800a628:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f7ff fcfc 	bl	800a028 <validate>
 800a630:	4603      	mov	r3, r0
 800a632:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800a634:	7dfb      	ldrb	r3, [r7, #23]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <f_write+0x2c>
 800a63a:	7dfb      	ldrb	r3, [r7, #23]
 800a63c:	e192      	b.n	800a964 <f_write+0x352>
	if (fp->err)							/* Check error */
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 800a64e:	e189      	b.n	800a964 <f_write+0x352>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800a65e:	2307      	movs	r3, #7
 800a660:	e180      	b.n	800a964 <f_write+0x352>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	441a      	add	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a672:	429a      	cmp	r2, r3
 800a674:	f080 8158 	bcs.w	800a928 <f_write+0x316>
 800a678:	2300      	movs	r3, #0
 800a67a:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 800a67c:	e154      	b.n	800a928 <f_write+0x316>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a688:	2b00      	cmp	r3, #0
 800a68a:	f040 8114 	bne.w	800a8b6 <f_write+0x2a4>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a694:	0a5b      	lsrs	r3, r3, #9
 800a696:	b2da      	uxtb	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a69e:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	4013      	ands	r3, r2
 800a6a8:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800a6aa:	7dbb      	ldrb	r3, [r7, #22]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d151      	bne.n	800a754 <f_write+0x142>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d10f      	bne.n	800a6da <f_write+0xc8>
					clst = fp->sclust;		/* Follow from the origin */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a6c0:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 800a6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d121      	bne.n	800a70c <f_write+0xfa>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe fc84 	bl	8008fde <create_chain>
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a6d8:	e018      	b.n	800a70c <f_write+0xfa>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	68f8      	ldr	r0, [r7, #12]
 800a6ee:	f7fe fd13 	bl	8009118 <clmt_clust>
 800a6f2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f4:	e00a      	b.n	800a70c <f_write+0xfa>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a702:	4619      	mov	r1, r3
 800a704:	4610      	mov	r0, r2
 800a706:	f7fe fc6a 	bl	8008fde <create_chain>
 800a70a:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a70e:	2b00      	cmp	r3, #0
 800a710:	f000 810f 	beq.w	800a932 <f_write+0x320>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	2b01      	cmp	r3, #1
 800a718:	d105      	bne.n	800a726 <f_write+0x114>
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2202      	movs	r2, #2
 800a71e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a722:	2302      	movs	r3, #2
 800a724:	e11e      	b.n	800a964 <f_write+0x352>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a72c:	d105      	bne.n	800a73a <f_write+0x128>
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	2201      	movs	r2, #1
 800a732:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a736:	2301      	movs	r3, #1
 800a738:	e114      	b.n	800a964 <f_write+0x352>
				fp->clust = clst;			/* Update current cluster */
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d103      	bne.n	800a754 <f_write+0x142>
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a750:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a75a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d01d      	beq.n	800a79e <f_write+0x18c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a768:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a76c:	68f9      	ldr	r1, [r7, #12]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a774:	2301      	movs	r3, #1
 800a776:	f7fd fe61 	bl	800843c <disk_write>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d005      	beq.n	800a78c <f_write+0x17a>
					ABORT(fp->fs, FR_DISK_ERR);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2201      	movs	r2, #1
 800a784:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a788:	2301      	movs	r3, #1
 800a78a:	e0eb      	b.n	800a964 <f_write+0x352>
				fp->flag &= ~FA__DIRTY;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a792:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a796:	b2da      	uxtb	r2, r3
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	4610      	mov	r0, r2
 800a7ae:	f7fe f9d3 	bl	8008b58 <clust2sect>
 800a7b2:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d105      	bne.n	800a7c6 <f_write+0x1b4>
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2202      	movs	r2, #2
 800a7be:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e0ce      	b.n	800a964 <f_write+0x352>
			sect += csect;
 800a7c6:	7dbb      	ldrb	r3, [r7, #22]
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	0a5b      	lsrs	r3, r3, #9
 800a7d2:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d048      	beq.n	800a86c <f_write+0x25a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800a7da:	7dba      	ldrb	r2, [r7, #22]
 800a7dc:	69fb      	ldr	r3, [r7, #28]
 800a7de:	4413      	add	r3, r2
 800a7e0:	68fa      	ldr	r2, [r7, #12]
 800a7e2:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800a7e6:	f892 2202 	ldrb.w	r2, [r2, #514]	; 0x202
 800a7ea:	4293      	cmp	r3, r2
 800a7ec:	d908      	bls.n	800a800 <f_write+0x1ee>
					cc = fp->fs->csize - csect;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a7f4:	f893 3202 	ldrb.w	r3, [r3, #514]	; 0x202
 800a7f8:	461a      	mov	r2, r3
 800a7fa:	7dbb      	ldrb	r3, [r7, #22]
 800a7fc:	1ad3      	subs	r3, r2, r3
 800a7fe:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a806:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	693a      	ldr	r2, [r7, #16]
 800a80e:	69b9      	ldr	r1, [r7, #24]
 800a810:	f7fd fe14 	bl	800843c <disk_write>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d005      	beq.n	800a826 <f_write+0x214>
					ABORT(fp->fs, FR_DISK_ERR);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2201      	movs	r2, #1
 800a81e:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a822:	2301      	movs	r3, #1
 800a824:	e09e      	b.n	800a964 <f_write+0x352>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	69fa      	ldr	r2, [r7, #28]
 800a832:	429a      	cmp	r2, r3
 800a834:	d916      	bls.n	800a864 <f_write+0x252>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 800a836:	68f8      	ldr	r0, [r7, #12]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	025b      	lsls	r3, r3, #9
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	4413      	add	r3, r2
 800a848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a84c:	4619      	mov	r1, r3
 800a84e:	f7fd fe33 	bl	80084b8 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a858:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	025b      	lsls	r3, r3, #9
 800a868:	623b      	str	r3, [r7, #32]
				continue;
 800a86a:	e047      	b.n	800a8fc <f_write+0x2ea>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800a872:	693a      	ldr	r2, [r7, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	d01a      	beq.n	800a8ae <f_write+0x29c>
				if (fp->fptr < fp->fsize &&
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a884:	429a      	cmp	r2, r3
 800a886:	d212      	bcs.n	800a8ae <f_write+0x29c>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a88e:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	2301      	movs	r3, #1
 800a896:	693a      	ldr	r2, [r7, #16]
 800a898:	f7fd fdb0 	bl	80083fc <disk_read>
 800a89c:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d005      	beq.n	800a8ae <f_write+0x29c>
						ABORT(fp->fs, FR_DISK_ERR);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2201      	movs	r2, #1
 800a8a6:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	e05a      	b.n	800a964 <f_write+0x352>
			}
#endif
			fp->dsect = sect;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	693a      	ldr	r2, [r7, #16]
 800a8b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a8bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8c0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800a8c4:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 800a8c6:	6a3a      	ldr	r2, [r7, #32]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d901      	bls.n	800a8d2 <f_write+0x2c0>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 800a8d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	6a3a      	ldr	r2, [r7, #32]
 800a8e2:	69b9      	ldr	r1, [r7, #24]
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f7fd fde7 	bl	80084b8 <mem_cpy>
		fp->flag |= FA__DIRTY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a8f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f4:	b2da      	uxtb	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 800a8fc:	69ba      	ldr	r2, [r7, #24]
 800a8fe:	6a3b      	ldr	r3, [r7, #32]
 800a900:	4413      	add	r3, r2
 800a902:	61bb      	str	r3, [r7, #24]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	441a      	add	r2, r3
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	6a3b      	ldr	r3, [r7, #32]
 800a91a:	441a      	add	r2, r3
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	601a      	str	r2, [r3, #0]
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	f47f aea7 	bne.w	800a67e <f_write+0x6c>
 800a930:	e000      	b.n	800a934 <f_write+0x322>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800a932:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800a940:	429a      	cmp	r2, r3
 800a942:	d905      	bls.n	800a950 <f_write+0x33e>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a956:	f043 0320 	orr.w	r3, r3, #32
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206

	LEAVE_FF(fp->fs, FR_OK);
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3728      	adds	r7, #40	; 0x28
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b086      	sub	sp, #24
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800a974:	6878      	ldr	r0, [r7, #4]
 800a976:	f7ff fb57 	bl	800a028 <validate>
 800a97a:	4603      	mov	r3, r0
 800a97c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a97e:	7dfb      	ldrb	r3, [r7, #23]
 800a980:	2b00      	cmp	r3, #0
 800a982:	f040 80a8 	bne.w	800aad6 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a98c:	f003 0320 	and.w	r3, r3, #32
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80a0 	beq.w	800aad6 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d019      	beq.n	800a9d8 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a9aa:	f893 0201 	ldrb.w	r0, [r3, #513]	; 0x201
 800a9ae:	6879      	ldr	r1, [r7, #4]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	f7fd fd40 	bl	800843c <disk_write>
 800a9bc:	4603      	mov	r3, r0
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	e088      	b.n	800aad8 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800a9cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d0:	b2da      	uxtb	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800a9e4:	4619      	mov	r1, r3
 800a9e6:	4610      	mov	r0, r2
 800a9e8:	f7fd ffdb 	bl	80089a2 <move_window>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 800a9f0:	7dfb      	ldrb	r3, [r7, #23]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d16f      	bne.n	800aad6 <f_sync+0x16a>
				dir = fp->dir_ptr;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800a9fc:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 800a9fe:	693b      	ldr	r3, [r7, #16]
 800aa00:	330b      	adds	r3, #11
 800aa02:	781a      	ldrb	r2, [r3, #0]
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	330b      	adds	r3, #11
 800aa08:	f042 0220 	orr.w	r2, r2, #32
 800aa0c:	b2d2      	uxtb	r2, r2
 800aa0e:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	331c      	adds	r3, #28
 800aa1a:	b2d2      	uxtb	r2, r2
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	0a1b      	lsrs	r3, r3, #8
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	331d      	adds	r3, #29
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa38:	0c1a      	lsrs	r2, r3, #16
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	331e      	adds	r3, #30
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800aa48:	0e1a      	lsrs	r2, r3, #24
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	331f      	adds	r3, #31
 800aa4e:	b2d2      	uxtb	r2, r2
 800aa50:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800aa58:	4619      	mov	r1, r3
 800aa5a:	6938      	ldr	r0, [r7, #16]
 800aa5c:	f7fe fd92 	bl	8009584 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 800aa60:	f7fd fbfe 	bl	8008260 <get_fattime>
 800aa64:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3316      	adds	r3, #22
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	b2d2      	uxtb	r2, r2
 800aa6e:	701a      	strb	r2, [r3, #0]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	b29b      	uxth	r3, r3
 800aa74:	0a1b      	lsrs	r3, r3, #8
 800aa76:	b29a      	uxth	r2, r3
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	3317      	adds	r3, #23
 800aa7c:	b2d2      	uxtb	r2, r2
 800aa7e:	701a      	strb	r2, [r3, #0]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	0c1a      	lsrs	r2, r3, #16
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3318      	adds	r3, #24
 800aa88:	b2d2      	uxtb	r2, r2
 800aa8a:	701a      	strb	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	0e1a      	lsrs	r2, r3, #24
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	3319      	adds	r3, #25
 800aa94:	b2d2      	uxtb	r2, r2
 800aa96:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	3312      	adds	r3, #18
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	701a      	strb	r2, [r3, #0]
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	3313      	adds	r3, #19
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	f893 3206 	ldrb.w	r3, [r3, #518]	; 0x206
 800aaae:	f023 0320 	bic.w	r3, r3, #32
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
				fp->fs->wflag = 1;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aac0:	2201      	movs	r2, #1
 800aac2:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				res = sync_fs(fp->fs);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fd ff96 	bl	80089fe <sync_fs>
 800aad2:	4603      	mov	r3, r0
 800aad4:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 800aad6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad8:	4618      	mov	r0, r3
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f7ff ff3f 	bl	800a96c <f_sync>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d116      	bne.n	800ab26 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff fa95 	bl	800a028 <validate>
 800aafe:	4603      	mov	r3, r0
 800ab00:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ab02:	7bfb      	ldrb	r3, [r7, #15]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10e      	bne.n	800ab26 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 3228 	ldr.w	r3, [r3, #552]	; 0x228
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f7fd fe90 	bl	8008834 <dec_lock>
 800ab14:	4603      	mov	r3, r0
 800ab16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ab18:	7bfb      	ldrb	r3, [r7, #15]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d103      	bne.n	800ab26 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	2200      	movs	r2, #0
 800ab22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ab26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b087      	sub	sp, #28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ab3e:	2301      	movs	r3, #1
 800ab40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800ab46:	4b1e      	ldr	r3, [pc, #120]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab48:	7a5b      	ldrb	r3, [r3, #9]
 800ab4a:	b2db      	uxtb	r3, r3
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d831      	bhi.n	800abb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ab50:	4b1b      	ldr	r3, [pc, #108]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab52:	7a5b      	ldrb	r3, [r3, #9]
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	461a      	mov	r2, r3
 800ab58:	4b19      	ldr	r3, [pc, #100]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800ab5e:	4b18      	ldr	r3, [pc, #96]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab60:	7a5b      	ldrb	r3, [r3, #9]
 800ab62:	b2db      	uxtb	r3, r3
 800ab64:	4a16      	ldr	r2, [pc, #88]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	4413      	add	r3, r2
 800ab6a:	68fa      	ldr	r2, [r7, #12]
 800ab6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800ab6e:	4b14      	ldr	r3, [pc, #80]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab70:	7a5b      	ldrb	r3, [r3, #9]
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab78:	4413      	add	r3, r2
 800ab7a:	79fa      	ldrb	r2, [r7, #7]
 800ab7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ab7e:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab80:	7a5b      	ldrb	r3, [r3, #9]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	1c5a      	adds	r2, r3, #1
 800ab86:	b2d1      	uxtb	r1, r2
 800ab88:	4a0d      	ldr	r2, [pc, #52]	; (800abc0 <FATFS_LinkDriverEx+0x90>)
 800ab8a:	7251      	strb	r1, [r2, #9]
 800ab8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ab8e:	7dbb      	ldrb	r3, [r7, #22]
 800ab90:	3330      	adds	r3, #48	; 0x30
 800ab92:	b2da      	uxtb	r2, r3
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	3301      	adds	r3, #1
 800ab9c:	223a      	movs	r2, #58	; 0x3a
 800ab9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	3302      	adds	r3, #2
 800aba4:	222f      	movs	r2, #47	; 0x2f
 800aba6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	3303      	adds	r3, #3
 800abac:	2200      	movs	r2, #0
 800abae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800abb0:	2300      	movs	r3, #0
 800abb2:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 800abb4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	bc80      	pop	{r7}
 800abbe:	4770      	bx	lr
 800abc0:	20000c18 	.word	0x20000c18

0800abc4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b082      	sub	sp, #8
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800abce:	2200      	movs	r2, #0
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7ff ffac 	bl	800ab30 <FATFS_LinkDriverEx>
 800abd8:	4603      	mov	r3, r0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3708      	adds	r7, #8
 800abde:	46bd      	mov	sp, r7
 800abe0:	bd80      	pop	{r7, pc}
	...

0800abe4 <__errno>:
 800abe4:	4b01      	ldr	r3, [pc, #4]	; (800abec <__errno+0x8>)
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	200000a4 	.word	0x200000a4

0800abf0 <__libc_init_array>:
 800abf0:	b570      	push	{r4, r5, r6, lr}
 800abf2:	2600      	movs	r6, #0
 800abf4:	4d0c      	ldr	r5, [pc, #48]	; (800ac28 <__libc_init_array+0x38>)
 800abf6:	4c0d      	ldr	r4, [pc, #52]	; (800ac2c <__libc_init_array+0x3c>)
 800abf8:	1b64      	subs	r4, r4, r5
 800abfa:	10a4      	asrs	r4, r4, #2
 800abfc:	42a6      	cmp	r6, r4
 800abfe:	d109      	bne.n	800ac14 <__libc_init_array+0x24>
 800ac00:	f000 ff5a 	bl	800bab8 <_init>
 800ac04:	2600      	movs	r6, #0
 800ac06:	4d0a      	ldr	r5, [pc, #40]	; (800ac30 <__libc_init_array+0x40>)
 800ac08:	4c0a      	ldr	r4, [pc, #40]	; (800ac34 <__libc_init_array+0x44>)
 800ac0a:	1b64      	subs	r4, r4, r5
 800ac0c:	10a4      	asrs	r4, r4, #2
 800ac0e:	42a6      	cmp	r6, r4
 800ac10:	d105      	bne.n	800ac1e <__libc_init_array+0x2e>
 800ac12:	bd70      	pop	{r4, r5, r6, pc}
 800ac14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac18:	4798      	blx	r3
 800ac1a:	3601      	adds	r6, #1
 800ac1c:	e7ee      	b.n	800abfc <__libc_init_array+0xc>
 800ac1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac22:	4798      	blx	r3
 800ac24:	3601      	adds	r6, #1
 800ac26:	e7f2      	b.n	800ac0e <__libc_init_array+0x1e>
 800ac28:	0800e874 	.word	0x0800e874
 800ac2c:	0800e874 	.word	0x0800e874
 800ac30:	0800e874 	.word	0x0800e874
 800ac34:	0800e878 	.word	0x0800e878

0800ac38 <memset>:
 800ac38:	4603      	mov	r3, r0
 800ac3a:	4402      	add	r2, r0
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d100      	bne.n	800ac42 <memset+0xa>
 800ac40:	4770      	bx	lr
 800ac42:	f803 1b01 	strb.w	r1, [r3], #1
 800ac46:	e7f9      	b.n	800ac3c <memset+0x4>

0800ac48 <siprintf>:
 800ac48:	b40e      	push	{r1, r2, r3}
 800ac4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac4e:	b500      	push	{lr}
 800ac50:	b09c      	sub	sp, #112	; 0x70
 800ac52:	ab1d      	add	r3, sp, #116	; 0x74
 800ac54:	9002      	str	r0, [sp, #8]
 800ac56:	9006      	str	r0, [sp, #24]
 800ac58:	9107      	str	r1, [sp, #28]
 800ac5a:	9104      	str	r1, [sp, #16]
 800ac5c:	4808      	ldr	r0, [pc, #32]	; (800ac80 <siprintf+0x38>)
 800ac5e:	4909      	ldr	r1, [pc, #36]	; (800ac84 <siprintf+0x3c>)
 800ac60:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac64:	9105      	str	r1, [sp, #20]
 800ac66:	6800      	ldr	r0, [r0, #0]
 800ac68:	a902      	add	r1, sp, #8
 800ac6a:	9301      	str	r3, [sp, #4]
 800ac6c:	f000 f868 	bl	800ad40 <_svfiprintf_r>
 800ac70:	2200      	movs	r2, #0
 800ac72:	9b02      	ldr	r3, [sp, #8]
 800ac74:	701a      	strb	r2, [r3, #0]
 800ac76:	b01c      	add	sp, #112	; 0x70
 800ac78:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac7c:	b003      	add	sp, #12
 800ac7e:	4770      	bx	lr
 800ac80:	200000a4 	.word	0x200000a4
 800ac84:	ffff0208 	.word	0xffff0208

0800ac88 <__ssputs_r>:
 800ac88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac8c:	688e      	ldr	r6, [r1, #8]
 800ac8e:	4682      	mov	sl, r0
 800ac90:	429e      	cmp	r6, r3
 800ac92:	460c      	mov	r4, r1
 800ac94:	4690      	mov	r8, r2
 800ac96:	461f      	mov	r7, r3
 800ac98:	d838      	bhi.n	800ad0c <__ssputs_r+0x84>
 800ac9a:	898a      	ldrh	r2, [r1, #12]
 800ac9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800aca0:	d032      	beq.n	800ad08 <__ssputs_r+0x80>
 800aca2:	6825      	ldr	r5, [r4, #0]
 800aca4:	6909      	ldr	r1, [r1, #16]
 800aca6:	3301      	adds	r3, #1
 800aca8:	eba5 0901 	sub.w	r9, r5, r1
 800acac:	6965      	ldr	r5, [r4, #20]
 800acae:	444b      	add	r3, r9
 800acb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acb8:	106d      	asrs	r5, r5, #1
 800acba:	429d      	cmp	r5, r3
 800acbc:	bf38      	it	cc
 800acbe:	461d      	movcc	r5, r3
 800acc0:	0553      	lsls	r3, r2, #21
 800acc2:	d531      	bpl.n	800ad28 <__ssputs_r+0xa0>
 800acc4:	4629      	mov	r1, r5
 800acc6:	f000 fb6f 	bl	800b3a8 <_malloc_r>
 800acca:	4606      	mov	r6, r0
 800accc:	b950      	cbnz	r0, 800ace4 <__ssputs_r+0x5c>
 800acce:	230c      	movs	r3, #12
 800acd0:	f04f 30ff 	mov.w	r0, #4294967295
 800acd4:	f8ca 3000 	str.w	r3, [sl]
 800acd8:	89a3      	ldrh	r3, [r4, #12]
 800acda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acde:	81a3      	strh	r3, [r4, #12]
 800ace0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ace4:	464a      	mov	r2, r9
 800ace6:	6921      	ldr	r1, [r4, #16]
 800ace8:	f000 face 	bl	800b288 <memcpy>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	6126      	str	r6, [r4, #16]
 800acfa:	444e      	add	r6, r9
 800acfc:	6026      	str	r6, [r4, #0]
 800acfe:	463e      	mov	r6, r7
 800ad00:	6165      	str	r5, [r4, #20]
 800ad02:	eba5 0509 	sub.w	r5, r5, r9
 800ad06:	60a5      	str	r5, [r4, #8]
 800ad08:	42be      	cmp	r6, r7
 800ad0a:	d900      	bls.n	800ad0e <__ssputs_r+0x86>
 800ad0c:	463e      	mov	r6, r7
 800ad0e:	4632      	mov	r2, r6
 800ad10:	4641      	mov	r1, r8
 800ad12:	6820      	ldr	r0, [r4, #0]
 800ad14:	f000 fac6 	bl	800b2a4 <memmove>
 800ad18:	68a3      	ldr	r3, [r4, #8]
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	1b9b      	subs	r3, r3, r6
 800ad1e:	60a3      	str	r3, [r4, #8]
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	4433      	add	r3, r6
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	e7db      	b.n	800ace0 <__ssputs_r+0x58>
 800ad28:	462a      	mov	r2, r5
 800ad2a:	f000 fbb1 	bl	800b490 <_realloc_r>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	2800      	cmp	r0, #0
 800ad32:	d1e1      	bne.n	800acf8 <__ssputs_r+0x70>
 800ad34:	4650      	mov	r0, sl
 800ad36:	6921      	ldr	r1, [r4, #16]
 800ad38:	f000 face 	bl	800b2d8 <_free_r>
 800ad3c:	e7c7      	b.n	800acce <__ssputs_r+0x46>
	...

0800ad40 <_svfiprintf_r>:
 800ad40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad44:	4698      	mov	r8, r3
 800ad46:	898b      	ldrh	r3, [r1, #12]
 800ad48:	4607      	mov	r7, r0
 800ad4a:	061b      	lsls	r3, r3, #24
 800ad4c:	460d      	mov	r5, r1
 800ad4e:	4614      	mov	r4, r2
 800ad50:	b09d      	sub	sp, #116	; 0x74
 800ad52:	d50e      	bpl.n	800ad72 <_svfiprintf_r+0x32>
 800ad54:	690b      	ldr	r3, [r1, #16]
 800ad56:	b963      	cbnz	r3, 800ad72 <_svfiprintf_r+0x32>
 800ad58:	2140      	movs	r1, #64	; 0x40
 800ad5a:	f000 fb25 	bl	800b3a8 <_malloc_r>
 800ad5e:	6028      	str	r0, [r5, #0]
 800ad60:	6128      	str	r0, [r5, #16]
 800ad62:	b920      	cbnz	r0, 800ad6e <_svfiprintf_r+0x2e>
 800ad64:	230c      	movs	r3, #12
 800ad66:	603b      	str	r3, [r7, #0]
 800ad68:	f04f 30ff 	mov.w	r0, #4294967295
 800ad6c:	e0d1      	b.n	800af12 <_svfiprintf_r+0x1d2>
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	616b      	str	r3, [r5, #20]
 800ad72:	2300      	movs	r3, #0
 800ad74:	9309      	str	r3, [sp, #36]	; 0x24
 800ad76:	2320      	movs	r3, #32
 800ad78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad7c:	2330      	movs	r3, #48	; 0x30
 800ad7e:	f04f 0901 	mov.w	r9, #1
 800ad82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad86:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af2c <_svfiprintf_r+0x1ec>
 800ad8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad8e:	4623      	mov	r3, r4
 800ad90:	469a      	mov	sl, r3
 800ad92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad96:	b10a      	cbz	r2, 800ad9c <_svfiprintf_r+0x5c>
 800ad98:	2a25      	cmp	r2, #37	; 0x25
 800ad9a:	d1f9      	bne.n	800ad90 <_svfiprintf_r+0x50>
 800ad9c:	ebba 0b04 	subs.w	fp, sl, r4
 800ada0:	d00b      	beq.n	800adba <_svfiprintf_r+0x7a>
 800ada2:	465b      	mov	r3, fp
 800ada4:	4622      	mov	r2, r4
 800ada6:	4629      	mov	r1, r5
 800ada8:	4638      	mov	r0, r7
 800adaa:	f7ff ff6d 	bl	800ac88 <__ssputs_r>
 800adae:	3001      	adds	r0, #1
 800adb0:	f000 80aa 	beq.w	800af08 <_svfiprintf_r+0x1c8>
 800adb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adb6:	445a      	add	r2, fp
 800adb8:	9209      	str	r2, [sp, #36]	; 0x24
 800adba:	f89a 3000 	ldrb.w	r3, [sl]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 80a2 	beq.w	800af08 <_svfiprintf_r+0x1c8>
 800adc4:	2300      	movs	r3, #0
 800adc6:	f04f 32ff 	mov.w	r2, #4294967295
 800adca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adce:	f10a 0a01 	add.w	sl, sl, #1
 800add2:	9304      	str	r3, [sp, #16]
 800add4:	9307      	str	r3, [sp, #28]
 800add6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adda:	931a      	str	r3, [sp, #104]	; 0x68
 800addc:	4654      	mov	r4, sl
 800adde:	2205      	movs	r2, #5
 800ade0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ade4:	4851      	ldr	r0, [pc, #324]	; (800af2c <_svfiprintf_r+0x1ec>)
 800ade6:	f000 fa41 	bl	800b26c <memchr>
 800adea:	9a04      	ldr	r2, [sp, #16]
 800adec:	b9d8      	cbnz	r0, 800ae26 <_svfiprintf_r+0xe6>
 800adee:	06d0      	lsls	r0, r2, #27
 800adf0:	bf44      	itt	mi
 800adf2:	2320      	movmi	r3, #32
 800adf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adf8:	0711      	lsls	r1, r2, #28
 800adfa:	bf44      	itt	mi
 800adfc:	232b      	movmi	r3, #43	; 0x2b
 800adfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b2a      	cmp	r3, #42	; 0x2a
 800ae08:	d015      	beq.n	800ae36 <_svfiprintf_r+0xf6>
 800ae0a:	4654      	mov	r4, sl
 800ae0c:	2000      	movs	r0, #0
 800ae0e:	f04f 0c0a 	mov.w	ip, #10
 800ae12:	9a07      	ldr	r2, [sp, #28]
 800ae14:	4621      	mov	r1, r4
 800ae16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae1a:	3b30      	subs	r3, #48	; 0x30
 800ae1c:	2b09      	cmp	r3, #9
 800ae1e:	d94e      	bls.n	800aebe <_svfiprintf_r+0x17e>
 800ae20:	b1b0      	cbz	r0, 800ae50 <_svfiprintf_r+0x110>
 800ae22:	9207      	str	r2, [sp, #28]
 800ae24:	e014      	b.n	800ae50 <_svfiprintf_r+0x110>
 800ae26:	eba0 0308 	sub.w	r3, r0, r8
 800ae2a:	fa09 f303 	lsl.w	r3, r9, r3
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	46a2      	mov	sl, r4
 800ae32:	9304      	str	r3, [sp, #16]
 800ae34:	e7d2      	b.n	800addc <_svfiprintf_r+0x9c>
 800ae36:	9b03      	ldr	r3, [sp, #12]
 800ae38:	1d19      	adds	r1, r3, #4
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	9103      	str	r1, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	bfbb      	ittet	lt
 800ae42:	425b      	neglt	r3, r3
 800ae44:	f042 0202 	orrlt.w	r2, r2, #2
 800ae48:	9307      	strge	r3, [sp, #28]
 800ae4a:	9307      	strlt	r3, [sp, #28]
 800ae4c:	bfb8      	it	lt
 800ae4e:	9204      	strlt	r2, [sp, #16]
 800ae50:	7823      	ldrb	r3, [r4, #0]
 800ae52:	2b2e      	cmp	r3, #46	; 0x2e
 800ae54:	d10c      	bne.n	800ae70 <_svfiprintf_r+0x130>
 800ae56:	7863      	ldrb	r3, [r4, #1]
 800ae58:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5a:	d135      	bne.n	800aec8 <_svfiprintf_r+0x188>
 800ae5c:	9b03      	ldr	r3, [sp, #12]
 800ae5e:	3402      	adds	r4, #2
 800ae60:	1d1a      	adds	r2, r3, #4
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	9203      	str	r2, [sp, #12]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	bfb8      	it	lt
 800ae6a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae6e:	9305      	str	r3, [sp, #20]
 800ae70:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800af30 <_svfiprintf_r+0x1f0>
 800ae74:	2203      	movs	r2, #3
 800ae76:	4650      	mov	r0, sl
 800ae78:	7821      	ldrb	r1, [r4, #0]
 800ae7a:	f000 f9f7 	bl	800b26c <memchr>
 800ae7e:	b140      	cbz	r0, 800ae92 <_svfiprintf_r+0x152>
 800ae80:	2340      	movs	r3, #64	; 0x40
 800ae82:	eba0 000a 	sub.w	r0, r0, sl
 800ae86:	fa03 f000 	lsl.w	r0, r3, r0
 800ae8a:	9b04      	ldr	r3, [sp, #16]
 800ae8c:	3401      	adds	r4, #1
 800ae8e:	4303      	orrs	r3, r0
 800ae90:	9304      	str	r3, [sp, #16]
 800ae92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae96:	2206      	movs	r2, #6
 800ae98:	4826      	ldr	r0, [pc, #152]	; (800af34 <_svfiprintf_r+0x1f4>)
 800ae9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae9e:	f000 f9e5 	bl	800b26c <memchr>
 800aea2:	2800      	cmp	r0, #0
 800aea4:	d038      	beq.n	800af18 <_svfiprintf_r+0x1d8>
 800aea6:	4b24      	ldr	r3, [pc, #144]	; (800af38 <_svfiprintf_r+0x1f8>)
 800aea8:	bb1b      	cbnz	r3, 800aef2 <_svfiprintf_r+0x1b2>
 800aeaa:	9b03      	ldr	r3, [sp, #12]
 800aeac:	3307      	adds	r3, #7
 800aeae:	f023 0307 	bic.w	r3, r3, #7
 800aeb2:	3308      	adds	r3, #8
 800aeb4:	9303      	str	r3, [sp, #12]
 800aeb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeb8:	4433      	add	r3, r6
 800aeba:	9309      	str	r3, [sp, #36]	; 0x24
 800aebc:	e767      	b.n	800ad8e <_svfiprintf_r+0x4e>
 800aebe:	460c      	mov	r4, r1
 800aec0:	2001      	movs	r0, #1
 800aec2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec6:	e7a5      	b.n	800ae14 <_svfiprintf_r+0xd4>
 800aec8:	2300      	movs	r3, #0
 800aeca:	f04f 0c0a 	mov.w	ip, #10
 800aece:	4619      	mov	r1, r3
 800aed0:	3401      	adds	r4, #1
 800aed2:	9305      	str	r3, [sp, #20]
 800aed4:	4620      	mov	r0, r4
 800aed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeda:	3a30      	subs	r2, #48	; 0x30
 800aedc:	2a09      	cmp	r2, #9
 800aede:	d903      	bls.n	800aee8 <_svfiprintf_r+0x1a8>
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d0c5      	beq.n	800ae70 <_svfiprintf_r+0x130>
 800aee4:	9105      	str	r1, [sp, #20]
 800aee6:	e7c3      	b.n	800ae70 <_svfiprintf_r+0x130>
 800aee8:	4604      	mov	r4, r0
 800aeea:	2301      	movs	r3, #1
 800aeec:	fb0c 2101 	mla	r1, ip, r1, r2
 800aef0:	e7f0      	b.n	800aed4 <_svfiprintf_r+0x194>
 800aef2:	ab03      	add	r3, sp, #12
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	462a      	mov	r2, r5
 800aef8:	4638      	mov	r0, r7
 800aefa:	4b10      	ldr	r3, [pc, #64]	; (800af3c <_svfiprintf_r+0x1fc>)
 800aefc:	a904      	add	r1, sp, #16
 800aefe:	f3af 8000 	nop.w
 800af02:	1c42      	adds	r2, r0, #1
 800af04:	4606      	mov	r6, r0
 800af06:	d1d6      	bne.n	800aeb6 <_svfiprintf_r+0x176>
 800af08:	89ab      	ldrh	r3, [r5, #12]
 800af0a:	065b      	lsls	r3, r3, #25
 800af0c:	f53f af2c 	bmi.w	800ad68 <_svfiprintf_r+0x28>
 800af10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af12:	b01d      	add	sp, #116	; 0x74
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	ab03      	add	r3, sp, #12
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	462a      	mov	r2, r5
 800af1e:	4638      	mov	r0, r7
 800af20:	4b06      	ldr	r3, [pc, #24]	; (800af3c <_svfiprintf_r+0x1fc>)
 800af22:	a904      	add	r1, sp, #16
 800af24:	f000 f87c 	bl	800b020 <_printf_i>
 800af28:	e7eb      	b.n	800af02 <_svfiprintf_r+0x1c2>
 800af2a:	bf00      	nop
 800af2c:	0800e840 	.word	0x0800e840
 800af30:	0800e846 	.word	0x0800e846
 800af34:	0800e84a 	.word	0x0800e84a
 800af38:	00000000 	.word	0x00000000
 800af3c:	0800ac89 	.word	0x0800ac89

0800af40 <_printf_common>:
 800af40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af44:	4616      	mov	r6, r2
 800af46:	4699      	mov	r9, r3
 800af48:	688a      	ldr	r2, [r1, #8]
 800af4a:	690b      	ldr	r3, [r1, #16]
 800af4c:	4607      	mov	r7, r0
 800af4e:	4293      	cmp	r3, r2
 800af50:	bfb8      	it	lt
 800af52:	4613      	movlt	r3, r2
 800af54:	6033      	str	r3, [r6, #0]
 800af56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800af5a:	460c      	mov	r4, r1
 800af5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800af60:	b10a      	cbz	r2, 800af66 <_printf_common+0x26>
 800af62:	3301      	adds	r3, #1
 800af64:	6033      	str	r3, [r6, #0]
 800af66:	6823      	ldr	r3, [r4, #0]
 800af68:	0699      	lsls	r1, r3, #26
 800af6a:	bf42      	ittt	mi
 800af6c:	6833      	ldrmi	r3, [r6, #0]
 800af6e:	3302      	addmi	r3, #2
 800af70:	6033      	strmi	r3, [r6, #0]
 800af72:	6825      	ldr	r5, [r4, #0]
 800af74:	f015 0506 	ands.w	r5, r5, #6
 800af78:	d106      	bne.n	800af88 <_printf_common+0x48>
 800af7a:	f104 0a19 	add.w	sl, r4, #25
 800af7e:	68e3      	ldr	r3, [r4, #12]
 800af80:	6832      	ldr	r2, [r6, #0]
 800af82:	1a9b      	subs	r3, r3, r2
 800af84:	42ab      	cmp	r3, r5
 800af86:	dc28      	bgt.n	800afda <_printf_common+0x9a>
 800af88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800af8c:	1e13      	subs	r3, r2, #0
 800af8e:	6822      	ldr	r2, [r4, #0]
 800af90:	bf18      	it	ne
 800af92:	2301      	movne	r3, #1
 800af94:	0692      	lsls	r2, r2, #26
 800af96:	d42d      	bmi.n	800aff4 <_printf_common+0xb4>
 800af98:	4649      	mov	r1, r9
 800af9a:	4638      	mov	r0, r7
 800af9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800afa0:	47c0      	blx	r8
 800afa2:	3001      	adds	r0, #1
 800afa4:	d020      	beq.n	800afe8 <_printf_common+0xa8>
 800afa6:	6823      	ldr	r3, [r4, #0]
 800afa8:	68e5      	ldr	r5, [r4, #12]
 800afaa:	f003 0306 	and.w	r3, r3, #6
 800afae:	2b04      	cmp	r3, #4
 800afb0:	bf18      	it	ne
 800afb2:	2500      	movne	r5, #0
 800afb4:	6832      	ldr	r2, [r6, #0]
 800afb6:	f04f 0600 	mov.w	r6, #0
 800afba:	68a3      	ldr	r3, [r4, #8]
 800afbc:	bf08      	it	eq
 800afbe:	1aad      	subeq	r5, r5, r2
 800afc0:	6922      	ldr	r2, [r4, #16]
 800afc2:	bf08      	it	eq
 800afc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800afc8:	4293      	cmp	r3, r2
 800afca:	bfc4      	itt	gt
 800afcc:	1a9b      	subgt	r3, r3, r2
 800afce:	18ed      	addgt	r5, r5, r3
 800afd0:	341a      	adds	r4, #26
 800afd2:	42b5      	cmp	r5, r6
 800afd4:	d11a      	bne.n	800b00c <_printf_common+0xcc>
 800afd6:	2000      	movs	r0, #0
 800afd8:	e008      	b.n	800afec <_printf_common+0xac>
 800afda:	2301      	movs	r3, #1
 800afdc:	4652      	mov	r2, sl
 800afde:	4649      	mov	r1, r9
 800afe0:	4638      	mov	r0, r7
 800afe2:	47c0      	blx	r8
 800afe4:	3001      	adds	r0, #1
 800afe6:	d103      	bne.n	800aff0 <_printf_common+0xb0>
 800afe8:	f04f 30ff 	mov.w	r0, #4294967295
 800afec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aff0:	3501      	adds	r5, #1
 800aff2:	e7c4      	b.n	800af7e <_printf_common+0x3e>
 800aff4:	2030      	movs	r0, #48	; 0x30
 800aff6:	18e1      	adds	r1, r4, r3
 800aff8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b002:	4422      	add	r2, r4
 800b004:	3302      	adds	r3, #2
 800b006:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b00a:	e7c5      	b.n	800af98 <_printf_common+0x58>
 800b00c:	2301      	movs	r3, #1
 800b00e:	4622      	mov	r2, r4
 800b010:	4649      	mov	r1, r9
 800b012:	4638      	mov	r0, r7
 800b014:	47c0      	blx	r8
 800b016:	3001      	adds	r0, #1
 800b018:	d0e6      	beq.n	800afe8 <_printf_common+0xa8>
 800b01a:	3601      	adds	r6, #1
 800b01c:	e7d9      	b.n	800afd2 <_printf_common+0x92>
	...

0800b020 <_printf_i>:
 800b020:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b024:	7e0f      	ldrb	r7, [r1, #24]
 800b026:	4691      	mov	r9, r2
 800b028:	2f78      	cmp	r7, #120	; 0x78
 800b02a:	4680      	mov	r8, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	469a      	mov	sl, r3
 800b030:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b032:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b036:	d807      	bhi.n	800b048 <_printf_i+0x28>
 800b038:	2f62      	cmp	r7, #98	; 0x62
 800b03a:	d80a      	bhi.n	800b052 <_printf_i+0x32>
 800b03c:	2f00      	cmp	r7, #0
 800b03e:	f000 80d9 	beq.w	800b1f4 <_printf_i+0x1d4>
 800b042:	2f58      	cmp	r7, #88	; 0x58
 800b044:	f000 80a4 	beq.w	800b190 <_printf_i+0x170>
 800b048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b04c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b050:	e03a      	b.n	800b0c8 <_printf_i+0xa8>
 800b052:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b056:	2b15      	cmp	r3, #21
 800b058:	d8f6      	bhi.n	800b048 <_printf_i+0x28>
 800b05a:	a101      	add	r1, pc, #4	; (adr r1, 800b060 <_printf_i+0x40>)
 800b05c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b060:	0800b0b9 	.word	0x0800b0b9
 800b064:	0800b0cd 	.word	0x0800b0cd
 800b068:	0800b049 	.word	0x0800b049
 800b06c:	0800b049 	.word	0x0800b049
 800b070:	0800b049 	.word	0x0800b049
 800b074:	0800b049 	.word	0x0800b049
 800b078:	0800b0cd 	.word	0x0800b0cd
 800b07c:	0800b049 	.word	0x0800b049
 800b080:	0800b049 	.word	0x0800b049
 800b084:	0800b049 	.word	0x0800b049
 800b088:	0800b049 	.word	0x0800b049
 800b08c:	0800b1db 	.word	0x0800b1db
 800b090:	0800b0fd 	.word	0x0800b0fd
 800b094:	0800b1bd 	.word	0x0800b1bd
 800b098:	0800b049 	.word	0x0800b049
 800b09c:	0800b049 	.word	0x0800b049
 800b0a0:	0800b1fd 	.word	0x0800b1fd
 800b0a4:	0800b049 	.word	0x0800b049
 800b0a8:	0800b0fd 	.word	0x0800b0fd
 800b0ac:	0800b049 	.word	0x0800b049
 800b0b0:	0800b049 	.word	0x0800b049
 800b0b4:	0800b1c5 	.word	0x0800b1c5
 800b0b8:	682b      	ldr	r3, [r5, #0]
 800b0ba:	1d1a      	adds	r2, r3, #4
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	602a      	str	r2, [r5, #0]
 800b0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e0a4      	b.n	800b216 <_printf_i+0x1f6>
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	6829      	ldr	r1, [r5, #0]
 800b0d0:	0606      	lsls	r6, r0, #24
 800b0d2:	f101 0304 	add.w	r3, r1, #4
 800b0d6:	d50a      	bpl.n	800b0ee <_printf_i+0xce>
 800b0d8:	680e      	ldr	r6, [r1, #0]
 800b0da:	602b      	str	r3, [r5, #0]
 800b0dc:	2e00      	cmp	r6, #0
 800b0de:	da03      	bge.n	800b0e8 <_printf_i+0xc8>
 800b0e0:	232d      	movs	r3, #45	; 0x2d
 800b0e2:	4276      	negs	r6, r6
 800b0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0e8:	230a      	movs	r3, #10
 800b0ea:	485e      	ldr	r0, [pc, #376]	; (800b264 <_printf_i+0x244>)
 800b0ec:	e019      	b.n	800b122 <_printf_i+0x102>
 800b0ee:	680e      	ldr	r6, [r1, #0]
 800b0f0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b0f4:	602b      	str	r3, [r5, #0]
 800b0f6:	bf18      	it	ne
 800b0f8:	b236      	sxthne	r6, r6
 800b0fa:	e7ef      	b.n	800b0dc <_printf_i+0xbc>
 800b0fc:	682b      	ldr	r3, [r5, #0]
 800b0fe:	6820      	ldr	r0, [r4, #0]
 800b100:	1d19      	adds	r1, r3, #4
 800b102:	6029      	str	r1, [r5, #0]
 800b104:	0601      	lsls	r1, r0, #24
 800b106:	d501      	bpl.n	800b10c <_printf_i+0xec>
 800b108:	681e      	ldr	r6, [r3, #0]
 800b10a:	e002      	b.n	800b112 <_printf_i+0xf2>
 800b10c:	0646      	lsls	r6, r0, #25
 800b10e:	d5fb      	bpl.n	800b108 <_printf_i+0xe8>
 800b110:	881e      	ldrh	r6, [r3, #0]
 800b112:	2f6f      	cmp	r7, #111	; 0x6f
 800b114:	bf0c      	ite	eq
 800b116:	2308      	moveq	r3, #8
 800b118:	230a      	movne	r3, #10
 800b11a:	4852      	ldr	r0, [pc, #328]	; (800b264 <_printf_i+0x244>)
 800b11c:	2100      	movs	r1, #0
 800b11e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b122:	6865      	ldr	r5, [r4, #4]
 800b124:	2d00      	cmp	r5, #0
 800b126:	bfa8      	it	ge
 800b128:	6821      	ldrge	r1, [r4, #0]
 800b12a:	60a5      	str	r5, [r4, #8]
 800b12c:	bfa4      	itt	ge
 800b12e:	f021 0104 	bicge.w	r1, r1, #4
 800b132:	6021      	strge	r1, [r4, #0]
 800b134:	b90e      	cbnz	r6, 800b13a <_printf_i+0x11a>
 800b136:	2d00      	cmp	r5, #0
 800b138:	d04d      	beq.n	800b1d6 <_printf_i+0x1b6>
 800b13a:	4615      	mov	r5, r2
 800b13c:	fbb6 f1f3 	udiv	r1, r6, r3
 800b140:	fb03 6711 	mls	r7, r3, r1, r6
 800b144:	5dc7      	ldrb	r7, [r0, r7]
 800b146:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b14a:	4637      	mov	r7, r6
 800b14c:	42bb      	cmp	r3, r7
 800b14e:	460e      	mov	r6, r1
 800b150:	d9f4      	bls.n	800b13c <_printf_i+0x11c>
 800b152:	2b08      	cmp	r3, #8
 800b154:	d10b      	bne.n	800b16e <_printf_i+0x14e>
 800b156:	6823      	ldr	r3, [r4, #0]
 800b158:	07de      	lsls	r6, r3, #31
 800b15a:	d508      	bpl.n	800b16e <_printf_i+0x14e>
 800b15c:	6923      	ldr	r3, [r4, #16]
 800b15e:	6861      	ldr	r1, [r4, #4]
 800b160:	4299      	cmp	r1, r3
 800b162:	bfde      	ittt	le
 800b164:	2330      	movle	r3, #48	; 0x30
 800b166:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b16a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b16e:	1b52      	subs	r2, r2, r5
 800b170:	6122      	str	r2, [r4, #16]
 800b172:	464b      	mov	r3, r9
 800b174:	4621      	mov	r1, r4
 800b176:	4640      	mov	r0, r8
 800b178:	f8cd a000 	str.w	sl, [sp]
 800b17c:	aa03      	add	r2, sp, #12
 800b17e:	f7ff fedf 	bl	800af40 <_printf_common>
 800b182:	3001      	adds	r0, #1
 800b184:	d14c      	bne.n	800b220 <_printf_i+0x200>
 800b186:	f04f 30ff 	mov.w	r0, #4294967295
 800b18a:	b004      	add	sp, #16
 800b18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b190:	4834      	ldr	r0, [pc, #208]	; (800b264 <_printf_i+0x244>)
 800b192:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b196:	6829      	ldr	r1, [r5, #0]
 800b198:	6823      	ldr	r3, [r4, #0]
 800b19a:	f851 6b04 	ldr.w	r6, [r1], #4
 800b19e:	6029      	str	r1, [r5, #0]
 800b1a0:	061d      	lsls	r5, r3, #24
 800b1a2:	d514      	bpl.n	800b1ce <_printf_i+0x1ae>
 800b1a4:	07df      	lsls	r7, r3, #31
 800b1a6:	bf44      	itt	mi
 800b1a8:	f043 0320 	orrmi.w	r3, r3, #32
 800b1ac:	6023      	strmi	r3, [r4, #0]
 800b1ae:	b91e      	cbnz	r6, 800b1b8 <_printf_i+0x198>
 800b1b0:	6823      	ldr	r3, [r4, #0]
 800b1b2:	f023 0320 	bic.w	r3, r3, #32
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	2310      	movs	r3, #16
 800b1ba:	e7af      	b.n	800b11c <_printf_i+0xfc>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	f043 0320 	orr.w	r3, r3, #32
 800b1c2:	6023      	str	r3, [r4, #0]
 800b1c4:	2378      	movs	r3, #120	; 0x78
 800b1c6:	4828      	ldr	r0, [pc, #160]	; (800b268 <_printf_i+0x248>)
 800b1c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b1cc:	e7e3      	b.n	800b196 <_printf_i+0x176>
 800b1ce:	0659      	lsls	r1, r3, #25
 800b1d0:	bf48      	it	mi
 800b1d2:	b2b6      	uxthmi	r6, r6
 800b1d4:	e7e6      	b.n	800b1a4 <_printf_i+0x184>
 800b1d6:	4615      	mov	r5, r2
 800b1d8:	e7bb      	b.n	800b152 <_printf_i+0x132>
 800b1da:	682b      	ldr	r3, [r5, #0]
 800b1dc:	6826      	ldr	r6, [r4, #0]
 800b1de:	1d18      	adds	r0, r3, #4
 800b1e0:	6961      	ldr	r1, [r4, #20]
 800b1e2:	6028      	str	r0, [r5, #0]
 800b1e4:	0635      	lsls	r5, r6, #24
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	d501      	bpl.n	800b1ee <_printf_i+0x1ce>
 800b1ea:	6019      	str	r1, [r3, #0]
 800b1ec:	e002      	b.n	800b1f4 <_printf_i+0x1d4>
 800b1ee:	0670      	lsls	r0, r6, #25
 800b1f0:	d5fb      	bpl.n	800b1ea <_printf_i+0x1ca>
 800b1f2:	8019      	strh	r1, [r3, #0]
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	4615      	mov	r5, r2
 800b1f8:	6123      	str	r3, [r4, #16]
 800b1fa:	e7ba      	b.n	800b172 <_printf_i+0x152>
 800b1fc:	682b      	ldr	r3, [r5, #0]
 800b1fe:	2100      	movs	r1, #0
 800b200:	1d1a      	adds	r2, r3, #4
 800b202:	602a      	str	r2, [r5, #0]
 800b204:	681d      	ldr	r5, [r3, #0]
 800b206:	6862      	ldr	r2, [r4, #4]
 800b208:	4628      	mov	r0, r5
 800b20a:	f000 f82f 	bl	800b26c <memchr>
 800b20e:	b108      	cbz	r0, 800b214 <_printf_i+0x1f4>
 800b210:	1b40      	subs	r0, r0, r5
 800b212:	6060      	str	r0, [r4, #4]
 800b214:	6863      	ldr	r3, [r4, #4]
 800b216:	6123      	str	r3, [r4, #16]
 800b218:	2300      	movs	r3, #0
 800b21a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b21e:	e7a8      	b.n	800b172 <_printf_i+0x152>
 800b220:	462a      	mov	r2, r5
 800b222:	4649      	mov	r1, r9
 800b224:	4640      	mov	r0, r8
 800b226:	6923      	ldr	r3, [r4, #16]
 800b228:	47d0      	blx	sl
 800b22a:	3001      	adds	r0, #1
 800b22c:	d0ab      	beq.n	800b186 <_printf_i+0x166>
 800b22e:	6823      	ldr	r3, [r4, #0]
 800b230:	079b      	lsls	r3, r3, #30
 800b232:	d413      	bmi.n	800b25c <_printf_i+0x23c>
 800b234:	68e0      	ldr	r0, [r4, #12]
 800b236:	9b03      	ldr	r3, [sp, #12]
 800b238:	4298      	cmp	r0, r3
 800b23a:	bfb8      	it	lt
 800b23c:	4618      	movlt	r0, r3
 800b23e:	e7a4      	b.n	800b18a <_printf_i+0x16a>
 800b240:	2301      	movs	r3, #1
 800b242:	4632      	mov	r2, r6
 800b244:	4649      	mov	r1, r9
 800b246:	4640      	mov	r0, r8
 800b248:	47d0      	blx	sl
 800b24a:	3001      	adds	r0, #1
 800b24c:	d09b      	beq.n	800b186 <_printf_i+0x166>
 800b24e:	3501      	adds	r5, #1
 800b250:	68e3      	ldr	r3, [r4, #12]
 800b252:	9903      	ldr	r1, [sp, #12]
 800b254:	1a5b      	subs	r3, r3, r1
 800b256:	42ab      	cmp	r3, r5
 800b258:	dcf2      	bgt.n	800b240 <_printf_i+0x220>
 800b25a:	e7eb      	b.n	800b234 <_printf_i+0x214>
 800b25c:	2500      	movs	r5, #0
 800b25e:	f104 0619 	add.w	r6, r4, #25
 800b262:	e7f5      	b.n	800b250 <_printf_i+0x230>
 800b264:	0800e851 	.word	0x0800e851
 800b268:	0800e862 	.word	0x0800e862

0800b26c <memchr>:
 800b26c:	4603      	mov	r3, r0
 800b26e:	b510      	push	{r4, lr}
 800b270:	b2c9      	uxtb	r1, r1
 800b272:	4402      	add	r2, r0
 800b274:	4293      	cmp	r3, r2
 800b276:	4618      	mov	r0, r3
 800b278:	d101      	bne.n	800b27e <memchr+0x12>
 800b27a:	2000      	movs	r0, #0
 800b27c:	e003      	b.n	800b286 <memchr+0x1a>
 800b27e:	7804      	ldrb	r4, [r0, #0]
 800b280:	3301      	adds	r3, #1
 800b282:	428c      	cmp	r4, r1
 800b284:	d1f6      	bne.n	800b274 <memchr+0x8>
 800b286:	bd10      	pop	{r4, pc}

0800b288 <memcpy>:
 800b288:	440a      	add	r2, r1
 800b28a:	4291      	cmp	r1, r2
 800b28c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b290:	d100      	bne.n	800b294 <memcpy+0xc>
 800b292:	4770      	bx	lr
 800b294:	b510      	push	{r4, lr}
 800b296:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b29a:	4291      	cmp	r1, r2
 800b29c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2a0:	d1f9      	bne.n	800b296 <memcpy+0xe>
 800b2a2:	bd10      	pop	{r4, pc}

0800b2a4 <memmove>:
 800b2a4:	4288      	cmp	r0, r1
 800b2a6:	b510      	push	{r4, lr}
 800b2a8:	eb01 0402 	add.w	r4, r1, r2
 800b2ac:	d902      	bls.n	800b2b4 <memmove+0x10>
 800b2ae:	4284      	cmp	r4, r0
 800b2b0:	4623      	mov	r3, r4
 800b2b2:	d807      	bhi.n	800b2c4 <memmove+0x20>
 800b2b4:	1e43      	subs	r3, r0, #1
 800b2b6:	42a1      	cmp	r1, r4
 800b2b8:	d008      	beq.n	800b2cc <memmove+0x28>
 800b2ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2be:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2c2:	e7f8      	b.n	800b2b6 <memmove+0x12>
 800b2c4:	4601      	mov	r1, r0
 800b2c6:	4402      	add	r2, r0
 800b2c8:	428a      	cmp	r2, r1
 800b2ca:	d100      	bne.n	800b2ce <memmove+0x2a>
 800b2cc:	bd10      	pop	{r4, pc}
 800b2ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2d6:	e7f7      	b.n	800b2c8 <memmove+0x24>

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d040      	beq.n	800b362 <_free_r+0x8a>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f000 f910 	bl	800b510 <__malloc_lock>
 800b2f0:	4a1c      	ldr	r2, [pc, #112]	; (800b364 <_free_r+0x8c>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x2c>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 b90c 	b.w	800b51c <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x1e>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x4c>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x42>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1850      	adds	r0, r2, r1
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x6c>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	4401      	add	r1, r0
 800b330:	1850      	adds	r0, r2, r1
 800b332:	4283      	cmp	r3, r0
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x22>
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	4401      	add	r1, r0
 800b33e:	6011      	str	r1, [r2, #0]
 800b340:	6053      	str	r3, [r2, #4]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x22>
 800b344:	d902      	bls.n	800b34c <_free_r+0x74>
 800b346:	230c      	movs	r3, #12
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x22>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf01      	itttt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	1809      	addeq	r1, r1, r0
 800b35a:	6021      	streq	r1, [r4, #0]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	6054      	str	r4, [r2, #4]
 800b360:	e7cb      	b.n	800b2fa <_free_r+0x22>
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20000c24 	.word	0x20000c24

0800b368 <sbrk_aligned>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	4e0e      	ldr	r6, [pc, #56]	; (800b3a4 <sbrk_aligned+0x3c>)
 800b36c:	460c      	mov	r4, r1
 800b36e:	6831      	ldr	r1, [r6, #0]
 800b370:	4605      	mov	r5, r0
 800b372:	b911      	cbnz	r1, 800b37a <sbrk_aligned+0x12>
 800b374:	f000 f8bc 	bl	800b4f0 <_sbrk_r>
 800b378:	6030      	str	r0, [r6, #0]
 800b37a:	4621      	mov	r1, r4
 800b37c:	4628      	mov	r0, r5
 800b37e:	f000 f8b7 	bl	800b4f0 <_sbrk_r>
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	d00a      	beq.n	800b39c <sbrk_aligned+0x34>
 800b386:	1cc4      	adds	r4, r0, #3
 800b388:	f024 0403 	bic.w	r4, r4, #3
 800b38c:	42a0      	cmp	r0, r4
 800b38e:	d007      	beq.n	800b3a0 <sbrk_aligned+0x38>
 800b390:	1a21      	subs	r1, r4, r0
 800b392:	4628      	mov	r0, r5
 800b394:	f000 f8ac 	bl	800b4f0 <_sbrk_r>
 800b398:	3001      	adds	r0, #1
 800b39a:	d101      	bne.n	800b3a0 <sbrk_aligned+0x38>
 800b39c:	f04f 34ff 	mov.w	r4, #4294967295
 800b3a0:	4620      	mov	r0, r4
 800b3a2:	bd70      	pop	{r4, r5, r6, pc}
 800b3a4:	20000c28 	.word	0x20000c28

0800b3a8 <_malloc_r>:
 800b3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ac:	1ccd      	adds	r5, r1, #3
 800b3ae:	f025 0503 	bic.w	r5, r5, #3
 800b3b2:	3508      	adds	r5, #8
 800b3b4:	2d0c      	cmp	r5, #12
 800b3b6:	bf38      	it	cc
 800b3b8:	250c      	movcc	r5, #12
 800b3ba:	2d00      	cmp	r5, #0
 800b3bc:	4607      	mov	r7, r0
 800b3be:	db01      	blt.n	800b3c4 <_malloc_r+0x1c>
 800b3c0:	42a9      	cmp	r1, r5
 800b3c2:	d905      	bls.n	800b3d0 <_malloc_r+0x28>
 800b3c4:	230c      	movs	r3, #12
 800b3c6:	2600      	movs	r6, #0
 800b3c8:	603b      	str	r3, [r7, #0]
 800b3ca:	4630      	mov	r0, r6
 800b3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d0:	4e2e      	ldr	r6, [pc, #184]	; (800b48c <_malloc_r+0xe4>)
 800b3d2:	f000 f89d 	bl	800b510 <__malloc_lock>
 800b3d6:	6833      	ldr	r3, [r6, #0]
 800b3d8:	461c      	mov	r4, r3
 800b3da:	bb34      	cbnz	r4, 800b42a <_malloc_r+0x82>
 800b3dc:	4629      	mov	r1, r5
 800b3de:	4638      	mov	r0, r7
 800b3e0:	f7ff ffc2 	bl	800b368 <sbrk_aligned>
 800b3e4:	1c43      	adds	r3, r0, #1
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	d14d      	bne.n	800b486 <_malloc_r+0xde>
 800b3ea:	6834      	ldr	r4, [r6, #0]
 800b3ec:	4626      	mov	r6, r4
 800b3ee:	2e00      	cmp	r6, #0
 800b3f0:	d140      	bne.n	800b474 <_malloc_r+0xcc>
 800b3f2:	6823      	ldr	r3, [r4, #0]
 800b3f4:	4631      	mov	r1, r6
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	eb04 0803 	add.w	r8, r4, r3
 800b3fc:	f000 f878 	bl	800b4f0 <_sbrk_r>
 800b400:	4580      	cmp	r8, r0
 800b402:	d13a      	bne.n	800b47a <_malloc_r+0xd2>
 800b404:	6821      	ldr	r1, [r4, #0]
 800b406:	3503      	adds	r5, #3
 800b408:	1a6d      	subs	r5, r5, r1
 800b40a:	f025 0503 	bic.w	r5, r5, #3
 800b40e:	3508      	adds	r5, #8
 800b410:	2d0c      	cmp	r5, #12
 800b412:	bf38      	it	cc
 800b414:	250c      	movcc	r5, #12
 800b416:	4638      	mov	r0, r7
 800b418:	4629      	mov	r1, r5
 800b41a:	f7ff ffa5 	bl	800b368 <sbrk_aligned>
 800b41e:	3001      	adds	r0, #1
 800b420:	d02b      	beq.n	800b47a <_malloc_r+0xd2>
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	442b      	add	r3, r5
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	e00e      	b.n	800b448 <_malloc_r+0xa0>
 800b42a:	6822      	ldr	r2, [r4, #0]
 800b42c:	1b52      	subs	r2, r2, r5
 800b42e:	d41e      	bmi.n	800b46e <_malloc_r+0xc6>
 800b430:	2a0b      	cmp	r2, #11
 800b432:	d916      	bls.n	800b462 <_malloc_r+0xba>
 800b434:	1961      	adds	r1, r4, r5
 800b436:	42a3      	cmp	r3, r4
 800b438:	6025      	str	r5, [r4, #0]
 800b43a:	bf18      	it	ne
 800b43c:	6059      	strne	r1, [r3, #4]
 800b43e:	6863      	ldr	r3, [r4, #4]
 800b440:	bf08      	it	eq
 800b442:	6031      	streq	r1, [r6, #0]
 800b444:	5162      	str	r2, [r4, r5]
 800b446:	604b      	str	r3, [r1, #4]
 800b448:	4638      	mov	r0, r7
 800b44a:	f104 060b 	add.w	r6, r4, #11
 800b44e:	f000 f865 	bl	800b51c <__malloc_unlock>
 800b452:	f026 0607 	bic.w	r6, r6, #7
 800b456:	1d23      	adds	r3, r4, #4
 800b458:	1af2      	subs	r2, r6, r3
 800b45a:	d0b6      	beq.n	800b3ca <_malloc_r+0x22>
 800b45c:	1b9b      	subs	r3, r3, r6
 800b45e:	50a3      	str	r3, [r4, r2]
 800b460:	e7b3      	b.n	800b3ca <_malloc_r+0x22>
 800b462:	6862      	ldr	r2, [r4, #4]
 800b464:	42a3      	cmp	r3, r4
 800b466:	bf0c      	ite	eq
 800b468:	6032      	streq	r2, [r6, #0]
 800b46a:	605a      	strne	r2, [r3, #4]
 800b46c:	e7ec      	b.n	800b448 <_malloc_r+0xa0>
 800b46e:	4623      	mov	r3, r4
 800b470:	6864      	ldr	r4, [r4, #4]
 800b472:	e7b2      	b.n	800b3da <_malloc_r+0x32>
 800b474:	4634      	mov	r4, r6
 800b476:	6876      	ldr	r6, [r6, #4]
 800b478:	e7b9      	b.n	800b3ee <_malloc_r+0x46>
 800b47a:	230c      	movs	r3, #12
 800b47c:	4638      	mov	r0, r7
 800b47e:	603b      	str	r3, [r7, #0]
 800b480:	f000 f84c 	bl	800b51c <__malloc_unlock>
 800b484:	e7a1      	b.n	800b3ca <_malloc_r+0x22>
 800b486:	6025      	str	r5, [r4, #0]
 800b488:	e7de      	b.n	800b448 <_malloc_r+0xa0>
 800b48a:	bf00      	nop
 800b48c:	20000c24 	.word	0x20000c24

0800b490 <_realloc_r>:
 800b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b494:	4680      	mov	r8, r0
 800b496:	4614      	mov	r4, r2
 800b498:	460e      	mov	r6, r1
 800b49a:	b921      	cbnz	r1, 800b4a6 <_realloc_r+0x16>
 800b49c:	4611      	mov	r1, r2
 800b49e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4a2:	f7ff bf81 	b.w	800b3a8 <_malloc_r>
 800b4a6:	b92a      	cbnz	r2, 800b4b4 <_realloc_r+0x24>
 800b4a8:	f7ff ff16 	bl	800b2d8 <_free_r>
 800b4ac:	4625      	mov	r5, r4
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4b4:	f000 f838 	bl	800b528 <_malloc_usable_size_r>
 800b4b8:	4284      	cmp	r4, r0
 800b4ba:	4607      	mov	r7, r0
 800b4bc:	d802      	bhi.n	800b4c4 <_realloc_r+0x34>
 800b4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b4c2:	d812      	bhi.n	800b4ea <_realloc_r+0x5a>
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	4640      	mov	r0, r8
 800b4c8:	f7ff ff6e 	bl	800b3a8 <_malloc_r>
 800b4cc:	4605      	mov	r5, r0
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d0ed      	beq.n	800b4ae <_realloc_r+0x1e>
 800b4d2:	42bc      	cmp	r4, r7
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	4631      	mov	r1, r6
 800b4d8:	bf28      	it	cs
 800b4da:	463a      	movcs	r2, r7
 800b4dc:	f7ff fed4 	bl	800b288 <memcpy>
 800b4e0:	4631      	mov	r1, r6
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	f7ff fef8 	bl	800b2d8 <_free_r>
 800b4e8:	e7e1      	b.n	800b4ae <_realloc_r+0x1e>
 800b4ea:	4635      	mov	r5, r6
 800b4ec:	e7df      	b.n	800b4ae <_realloc_r+0x1e>
	...

0800b4f0 <_sbrk_r>:
 800b4f0:	b538      	push	{r3, r4, r5, lr}
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	4d05      	ldr	r5, [pc, #20]	; (800b50c <_sbrk_r+0x1c>)
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	4608      	mov	r0, r1
 800b4fa:	602b      	str	r3, [r5, #0]
 800b4fc:	f7f7 feae 	bl	800325c <_sbrk>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_sbrk_r+0x1a>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_sbrk_r+0x1a>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	20000c2c 	.word	0x20000c2c

0800b510 <__malloc_lock>:
 800b510:	4801      	ldr	r0, [pc, #4]	; (800b518 <__malloc_lock+0x8>)
 800b512:	f000 b811 	b.w	800b538 <__retarget_lock_acquire_recursive>
 800b516:	bf00      	nop
 800b518:	20000c30 	.word	0x20000c30

0800b51c <__malloc_unlock>:
 800b51c:	4801      	ldr	r0, [pc, #4]	; (800b524 <__malloc_unlock+0x8>)
 800b51e:	f000 b80c 	b.w	800b53a <__retarget_lock_release_recursive>
 800b522:	bf00      	nop
 800b524:	20000c30 	.word	0x20000c30

0800b528 <_malloc_usable_size_r>:
 800b528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b52c:	1f18      	subs	r0, r3, #4
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfbc      	itt	lt
 800b532:	580b      	ldrlt	r3, [r1, r0]
 800b534:	18c0      	addlt	r0, r0, r3
 800b536:	4770      	bx	lr

0800b538 <__retarget_lock_acquire_recursive>:
 800b538:	4770      	bx	lr

0800b53a <__retarget_lock_release_recursive>:
 800b53a:	4770      	bx	lr

0800b53c <log>:
 800b53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b53e:	4604      	mov	r4, r0
 800b540:	460d      	mov	r5, r1
 800b542:	f000 f851 	bl	800b5e8 <__ieee754_log>
 800b546:	4622      	mov	r2, r4
 800b548:	4606      	mov	r6, r0
 800b54a:	460f      	mov	r7, r1
 800b54c:	462b      	mov	r3, r5
 800b54e:	4620      	mov	r0, r4
 800b550:	4629      	mov	r1, r5
 800b552:	f7f5 fa5b 	bl	8000a0c <__aeabi_dcmpun>
 800b556:	b998      	cbnz	r0, 800b580 <log+0x44>
 800b558:	2200      	movs	r2, #0
 800b55a:	2300      	movs	r3, #0
 800b55c:	4620      	mov	r0, r4
 800b55e:	4629      	mov	r1, r5
 800b560:	f7f5 fa4a 	bl	80009f8 <__aeabi_dcmpgt>
 800b564:	b960      	cbnz	r0, 800b580 <log+0x44>
 800b566:	2200      	movs	r2, #0
 800b568:	2300      	movs	r3, #0
 800b56a:	4620      	mov	r0, r4
 800b56c:	4629      	mov	r1, r5
 800b56e:	f7f5 fa1b 	bl	80009a8 <__aeabi_dcmpeq>
 800b572:	b140      	cbz	r0, 800b586 <log+0x4a>
 800b574:	f7ff fb36 	bl	800abe4 <__errno>
 800b578:	2322      	movs	r3, #34	; 0x22
 800b57a:	2600      	movs	r6, #0
 800b57c:	4f06      	ldr	r7, [pc, #24]	; (800b598 <log+0x5c>)
 800b57e:	6003      	str	r3, [r0, #0]
 800b580:	4630      	mov	r0, r6
 800b582:	4639      	mov	r1, r7
 800b584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b586:	f7ff fb2d 	bl	800abe4 <__errno>
 800b58a:	2321      	movs	r3, #33	; 0x21
 800b58c:	6003      	str	r3, [r0, #0]
 800b58e:	4803      	ldr	r0, [pc, #12]	; (800b59c <log+0x60>)
 800b590:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b594:	f000 ba8a 	b.w	800baac <nan>
 800b598:	fff00000 	.word	0xfff00000
 800b59c:	0800e845 	.word	0x0800e845

0800b5a0 <sqrt>:
 800b5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5a2:	4606      	mov	r6, r0
 800b5a4:	460f      	mov	r7, r1
 800b5a6:	f000 f9d1 	bl	800b94c <__ieee754_sqrt>
 800b5aa:	4632      	mov	r2, r6
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	460d      	mov	r5, r1
 800b5b0:	463b      	mov	r3, r7
 800b5b2:	4630      	mov	r0, r6
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	f7f5 fa29 	bl	8000a0c <__aeabi_dcmpun>
 800b5ba:	b990      	cbnz	r0, 800b5e2 <sqrt+0x42>
 800b5bc:	2200      	movs	r2, #0
 800b5be:	2300      	movs	r3, #0
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	4639      	mov	r1, r7
 800b5c4:	f7f5 f9fa 	bl	80009bc <__aeabi_dcmplt>
 800b5c8:	b158      	cbz	r0, 800b5e2 <sqrt+0x42>
 800b5ca:	f7ff fb0b 	bl	800abe4 <__errno>
 800b5ce:	2321      	movs	r3, #33	; 0x21
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	6003      	str	r3, [r0, #0]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	4610      	mov	r0, r2
 800b5d8:	4619      	mov	r1, r3
 800b5da:	f7f5 f8a7 	bl	800072c <__aeabi_ddiv>
 800b5de:	4604      	mov	r4, r0
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b5e8 <__ieee754_log>:
 800b5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	da24      	bge.n	800b644 <__ieee754_log+0x5c>
 800b5fa:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b5fe:	4304      	orrs	r4, r0
 800b600:	d108      	bne.n	800b614 <__ieee754_log+0x2c>
 800b602:	2200      	movs	r2, #0
 800b604:	2300      	movs	r3, #0
 800b606:	2000      	movs	r0, #0
 800b608:	49cb      	ldr	r1, [pc, #812]	; (800b938 <__ieee754_log+0x350>)
 800b60a:	f7f5 f88f 	bl	800072c <__aeabi_ddiv>
 800b60e:	b007      	add	sp, #28
 800b610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b614:	2900      	cmp	r1, #0
 800b616:	da04      	bge.n	800b622 <__ieee754_log+0x3a>
 800b618:	f7f4 fda6 	bl	8000168 <__aeabi_dsub>
 800b61c:	2200      	movs	r2, #0
 800b61e:	2300      	movs	r3, #0
 800b620:	e7f3      	b.n	800b60a <__ieee754_log+0x22>
 800b622:	2200      	movs	r2, #0
 800b624:	4bc5      	ldr	r3, [pc, #788]	; (800b93c <__ieee754_log+0x354>)
 800b626:	f7f4 ff57 	bl	80004d8 <__aeabi_dmul>
 800b62a:	f06f 0635 	mvn.w	r6, #53	; 0x35
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	460d      	mov	r5, r1
 800b634:	49c2      	ldr	r1, [pc, #776]	; (800b940 <__ieee754_log+0x358>)
 800b636:	428d      	cmp	r5, r1
 800b638:	dd06      	ble.n	800b648 <__ieee754_log+0x60>
 800b63a:	4610      	mov	r0, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	f7f4 fd95 	bl	800016c <__adddf3>
 800b642:	e7e4      	b.n	800b60e <__ieee754_log+0x26>
 800b644:	2600      	movs	r6, #0
 800b646:	e7f5      	b.n	800b634 <__ieee754_log+0x4c>
 800b648:	152c      	asrs	r4, r5, #20
 800b64a:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800b64e:	f505 2115 	add.w	r1, r5, #610304	; 0x95000
 800b652:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b656:	f601 7164 	addw	r1, r1, #3940	; 0xf64
 800b65a:	4426      	add	r6, r4
 800b65c:	f401 1480 	and.w	r4, r1, #1048576	; 0x100000
 800b660:	f084 517f 	eor.w	r1, r4, #1069547520	; 0x3fc00000
 800b664:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 800b668:	ea41 0305 	orr.w	r3, r1, r5
 800b66c:	4610      	mov	r0, r2
 800b66e:	4619      	mov	r1, r3
 800b670:	2200      	movs	r2, #0
 800b672:	4bb4      	ldr	r3, [pc, #720]	; (800b944 <__ieee754_log+0x35c>)
 800b674:	f7f4 fd78 	bl	8000168 <__aeabi_dsub>
 800b678:	1cab      	adds	r3, r5, #2
 800b67a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b67e:	2b02      	cmp	r3, #2
 800b680:	4682      	mov	sl, r0
 800b682:	468b      	mov	fp, r1
 800b684:	f04f 0200 	mov.w	r2, #0
 800b688:	eb06 5414 	add.w	r4, r6, r4, lsr #20
 800b68c:	dc53      	bgt.n	800b736 <__ieee754_log+0x14e>
 800b68e:	2300      	movs	r3, #0
 800b690:	f7f5 f98a 	bl	80009a8 <__aeabi_dcmpeq>
 800b694:	b1d0      	cbz	r0, 800b6cc <__ieee754_log+0xe4>
 800b696:	2c00      	cmp	r4, #0
 800b698:	f000 8122 	beq.w	800b8e0 <__ieee754_log+0x2f8>
 800b69c:	4620      	mov	r0, r4
 800b69e:	f7f4 feb1 	bl	8000404 <__aeabi_i2d>
 800b6a2:	a391      	add	r3, pc, #580	; (adr r3, 800b8e8 <__ieee754_log+0x300>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	4606      	mov	r6, r0
 800b6aa:	460f      	mov	r7, r1
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	a38f      	add	r3, pc, #572	; (adr r3, 800b8f0 <__ieee754_log+0x308>)
 800b6b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	460d      	mov	r5, r1
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	4639      	mov	r1, r7
 800b6be:	f7f4 ff0b 	bl	80004d8 <__aeabi_dmul>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4620      	mov	r0, r4
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	e7b8      	b.n	800b63e <__ieee754_log+0x56>
 800b6cc:	a38a      	add	r3, pc, #552	; (adr r3, 800b8f8 <__ieee754_log+0x310>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	4650      	mov	r0, sl
 800b6d4:	4659      	mov	r1, fp
 800b6d6:	f7f4 feff 	bl	80004d8 <__aeabi_dmul>
 800b6da:	4602      	mov	r2, r0
 800b6dc:	460b      	mov	r3, r1
 800b6de:	2000      	movs	r0, #0
 800b6e0:	4999      	ldr	r1, [pc, #612]	; (800b948 <__ieee754_log+0x360>)
 800b6e2:	f7f4 fd41 	bl	8000168 <__aeabi_dsub>
 800b6e6:	4652      	mov	r2, sl
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	460f      	mov	r7, r1
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	4650      	mov	r0, sl
 800b6f0:	4659      	mov	r1, fp
 800b6f2:	f7f4 fef1 	bl	80004d8 <__aeabi_dmul>
 800b6f6:	4602      	mov	r2, r0
 800b6f8:	460b      	mov	r3, r1
 800b6fa:	4630      	mov	r0, r6
 800b6fc:	4639      	mov	r1, r7
 800b6fe:	f7f4 feeb 	bl	80004d8 <__aeabi_dmul>
 800b702:	4606      	mov	r6, r0
 800b704:	460f      	mov	r7, r1
 800b706:	b914      	cbnz	r4, 800b70e <__ieee754_log+0x126>
 800b708:	4632      	mov	r2, r6
 800b70a:	463b      	mov	r3, r7
 800b70c:	e0a2      	b.n	800b854 <__ieee754_log+0x26c>
 800b70e:	4620      	mov	r0, r4
 800b710:	f7f4 fe78 	bl	8000404 <__aeabi_i2d>
 800b714:	a374      	add	r3, pc, #464	; (adr r3, 800b8e8 <__ieee754_log+0x300>)
 800b716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71a:	4680      	mov	r8, r0
 800b71c:	4689      	mov	r9, r1
 800b71e:	f7f4 fedb 	bl	80004d8 <__aeabi_dmul>
 800b722:	a373      	add	r3, pc, #460	; (adr r3, 800b8f0 <__ieee754_log+0x308>)
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	4604      	mov	r4, r0
 800b72a:	460d      	mov	r5, r1
 800b72c:	4640      	mov	r0, r8
 800b72e:	4649      	mov	r1, r9
 800b730:	f7f4 fed2 	bl	80004d8 <__aeabi_dmul>
 800b734:	e0a7      	b.n	800b886 <__ieee754_log+0x29e>
 800b736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b73a:	f7f4 fd17 	bl	800016c <__adddf3>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4650      	mov	r0, sl
 800b744:	4659      	mov	r1, fp
 800b746:	f7f4 fff1 	bl	800072c <__aeabi_ddiv>
 800b74a:	e9cd 0100 	strd	r0, r1, [sp]
 800b74e:	4620      	mov	r0, r4
 800b750:	f7f4 fe58 	bl	8000404 <__aeabi_i2d>
 800b754:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b75c:	4610      	mov	r0, r2
 800b75e:	4619      	mov	r1, r3
 800b760:	f7f4 feba 	bl	80004d8 <__aeabi_dmul>
 800b764:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800b768:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800b76c:	4602      	mov	r2, r0
 800b76e:	9305      	str	r3, [sp, #20]
 800b770:	460b      	mov	r3, r1
 800b772:	4606      	mov	r6, r0
 800b774:	460f      	mov	r7, r1
 800b776:	f7f4 feaf 	bl	80004d8 <__aeabi_dmul>
 800b77a:	a361      	add	r3, pc, #388	; (adr r3, 800b900 <__ieee754_log+0x318>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	4680      	mov	r8, r0
 800b782:	4689      	mov	r9, r1
 800b784:	f7f4 fea8 	bl	80004d8 <__aeabi_dmul>
 800b788:	a35f      	add	r3, pc, #380	; (adr r3, 800b908 <__ieee754_log+0x320>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 fced 	bl	800016c <__adddf3>
 800b792:	4642      	mov	r2, r8
 800b794:	464b      	mov	r3, r9
 800b796:	f7f4 fe9f 	bl	80004d8 <__aeabi_dmul>
 800b79a:	a35d      	add	r3, pc, #372	; (adr r3, 800b910 <__ieee754_log+0x328>)
 800b79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a0:	f7f4 fce4 	bl	800016c <__adddf3>
 800b7a4:	4642      	mov	r2, r8
 800b7a6:	464b      	mov	r3, r9
 800b7a8:	f7f4 fe96 	bl	80004d8 <__aeabi_dmul>
 800b7ac:	a35a      	add	r3, pc, #360	; (adr r3, 800b918 <__ieee754_log+0x330>)
 800b7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b2:	f7f4 fcdb 	bl	800016c <__adddf3>
 800b7b6:	4632      	mov	r2, r6
 800b7b8:	463b      	mov	r3, r7
 800b7ba:	f7f4 fe8d 	bl	80004d8 <__aeabi_dmul>
 800b7be:	a358      	add	r3, pc, #352	; (adr r3, 800b920 <__ieee754_log+0x338>)
 800b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	460f      	mov	r7, r1
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	4649      	mov	r1, r9
 800b7cc:	f7f4 fe84 	bl	80004d8 <__aeabi_dmul>
 800b7d0:	a355      	add	r3, pc, #340	; (adr r3, 800b928 <__ieee754_log+0x340>)
 800b7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d6:	f7f4 fcc9 	bl	800016c <__adddf3>
 800b7da:	4642      	mov	r2, r8
 800b7dc:	464b      	mov	r3, r9
 800b7de:	f7f4 fe7b 	bl	80004d8 <__aeabi_dmul>
 800b7e2:	a353      	add	r3, pc, #332	; (adr r3, 800b930 <__ieee754_log+0x348>)
 800b7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e8:	f7f4 fcc0 	bl	800016c <__adddf3>
 800b7ec:	4642      	mov	r2, r8
 800b7ee:	464b      	mov	r3, r9
 800b7f0:	f7f4 fe72 	bl	80004d8 <__aeabi_dmul>
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	4639      	mov	r1, r7
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	f7f4 fcb6 	bl	800016c <__adddf3>
 800b800:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800b804:	9b05      	ldr	r3, [sp, #20]
 800b806:	3551      	adds	r5, #81	; 0x51
 800b808:	431d      	orrs	r5, r3
 800b80a:	2d00      	cmp	r5, #0
 800b80c:	4680      	mov	r8, r0
 800b80e:	4689      	mov	r9, r1
 800b810:	dd48      	ble.n	800b8a4 <__ieee754_log+0x2bc>
 800b812:	2200      	movs	r2, #0
 800b814:	4b4c      	ldr	r3, [pc, #304]	; (800b948 <__ieee754_log+0x360>)
 800b816:	4650      	mov	r0, sl
 800b818:	4659      	mov	r1, fp
 800b81a:	f7f4 fe5d 	bl	80004d8 <__aeabi_dmul>
 800b81e:	4652      	mov	r2, sl
 800b820:	465b      	mov	r3, fp
 800b822:	f7f4 fe59 	bl	80004d8 <__aeabi_dmul>
 800b826:	4602      	mov	r2, r0
 800b828:	460b      	mov	r3, r1
 800b82a:	4606      	mov	r6, r0
 800b82c:	460f      	mov	r7, r1
 800b82e:	4640      	mov	r0, r8
 800b830:	4649      	mov	r1, r9
 800b832:	f7f4 fc9b 	bl	800016c <__adddf3>
 800b836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b83a:	f7f4 fe4d 	bl	80004d8 <__aeabi_dmul>
 800b83e:	4680      	mov	r8, r0
 800b840:	4689      	mov	r9, r1
 800b842:	b964      	cbnz	r4, 800b85e <__ieee754_log+0x276>
 800b844:	4602      	mov	r2, r0
 800b846:	460b      	mov	r3, r1
 800b848:	4630      	mov	r0, r6
 800b84a:	4639      	mov	r1, r7
 800b84c:	f7f4 fc8c 	bl	8000168 <__aeabi_dsub>
 800b850:	4602      	mov	r2, r0
 800b852:	460b      	mov	r3, r1
 800b854:	4650      	mov	r0, sl
 800b856:	4659      	mov	r1, fp
 800b858:	f7f4 fc86 	bl	8000168 <__aeabi_dsub>
 800b85c:	e6d7      	b.n	800b60e <__ieee754_log+0x26>
 800b85e:	a322      	add	r3, pc, #136	; (adr r3, 800b8e8 <__ieee754_log+0x300>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b868:	f7f4 fe36 	bl	80004d8 <__aeabi_dmul>
 800b86c:	a320      	add	r3, pc, #128	; (adr r3, 800b8f0 <__ieee754_log+0x308>)
 800b86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b872:	4604      	mov	r4, r0
 800b874:	460d      	mov	r5, r1
 800b876:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b87a:	f7f4 fe2d 	bl	80004d8 <__aeabi_dmul>
 800b87e:	4642      	mov	r2, r8
 800b880:	464b      	mov	r3, r9
 800b882:	f7f4 fc73 	bl	800016c <__adddf3>
 800b886:	4602      	mov	r2, r0
 800b888:	460b      	mov	r3, r1
 800b88a:	4630      	mov	r0, r6
 800b88c:	4639      	mov	r1, r7
 800b88e:	f7f4 fc6b 	bl	8000168 <__aeabi_dsub>
 800b892:	4652      	mov	r2, sl
 800b894:	465b      	mov	r3, fp
 800b896:	f7f4 fc67 	bl	8000168 <__aeabi_dsub>
 800b89a:	4602      	mov	r2, r0
 800b89c:	460b      	mov	r3, r1
 800b89e:	4620      	mov	r0, r4
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	e7d9      	b.n	800b858 <__ieee754_log+0x270>
 800b8a4:	4602      	mov	r2, r0
 800b8a6:	460b      	mov	r3, r1
 800b8a8:	4650      	mov	r0, sl
 800b8aa:	4659      	mov	r1, fp
 800b8ac:	f7f4 fc5c 	bl	8000168 <__aeabi_dsub>
 800b8b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8b4:	f7f4 fe10 	bl	80004d8 <__aeabi_dmul>
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	460f      	mov	r7, r1
 800b8bc:	2c00      	cmp	r4, #0
 800b8be:	f43f af23 	beq.w	800b708 <__ieee754_log+0x120>
 800b8c2:	a309      	add	r3, pc, #36	; (adr r3, 800b8e8 <__ieee754_log+0x300>)
 800b8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8cc:	f7f4 fe04 	bl	80004d8 <__aeabi_dmul>
 800b8d0:	a307      	add	r3, pc, #28	; (adr r3, 800b8f0 <__ieee754_log+0x308>)
 800b8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8de:	e727      	b.n	800b730 <__ieee754_log+0x148>
 800b8e0:	2000      	movs	r0, #0
 800b8e2:	2100      	movs	r1, #0
 800b8e4:	e693      	b.n	800b60e <__ieee754_log+0x26>
 800b8e6:	bf00      	nop
 800b8e8:	fee00000 	.word	0xfee00000
 800b8ec:	3fe62e42 	.word	0x3fe62e42
 800b8f0:	35793c76 	.word	0x35793c76
 800b8f4:	3dea39ef 	.word	0x3dea39ef
 800b8f8:	55555555 	.word	0x55555555
 800b8fc:	3fd55555 	.word	0x3fd55555
 800b900:	df3e5244 	.word	0xdf3e5244
 800b904:	3fc2f112 	.word	0x3fc2f112
 800b908:	96cb03de 	.word	0x96cb03de
 800b90c:	3fc74664 	.word	0x3fc74664
 800b910:	94229359 	.word	0x94229359
 800b914:	3fd24924 	.word	0x3fd24924
 800b918:	55555593 	.word	0x55555593
 800b91c:	3fe55555 	.word	0x3fe55555
 800b920:	d078c69f 	.word	0xd078c69f
 800b924:	3fc39a09 	.word	0x3fc39a09
 800b928:	1d8e78af 	.word	0x1d8e78af
 800b92c:	3fcc71c5 	.word	0x3fcc71c5
 800b930:	9997fa04 	.word	0x9997fa04
 800b934:	3fd99999 	.word	0x3fd99999
 800b938:	c3500000 	.word	0xc3500000
 800b93c:	43500000 	.word	0x43500000
 800b940:	7fefffff 	.word	0x7fefffff
 800b944:	3ff00000 	.word	0x3ff00000
 800b948:	3fe00000 	.word	0x3fe00000

0800b94c <__ieee754_sqrt>:
 800b94c:	f8df c158 	ldr.w	ip, [pc, #344]	; 800baa8 <__ieee754_sqrt+0x15c>
 800b950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b954:	ea3c 0c01 	bics.w	ip, ip, r1
 800b958:	4606      	mov	r6, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	460c      	mov	r4, r1
 800b95e:	460a      	mov	r2, r1
 800b960:	4607      	mov	r7, r0
 800b962:	4603      	mov	r3, r0
 800b964:	d10f      	bne.n	800b986 <__ieee754_sqrt+0x3a>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	f7f4 fdb5 	bl	80004d8 <__aeabi_dmul>
 800b96e:	4602      	mov	r2, r0
 800b970:	460b      	mov	r3, r1
 800b972:	4630      	mov	r0, r6
 800b974:	4629      	mov	r1, r5
 800b976:	f7f4 fbf9 	bl	800016c <__adddf3>
 800b97a:	4606      	mov	r6, r0
 800b97c:	460d      	mov	r5, r1
 800b97e:	4630      	mov	r0, r6
 800b980:	4629      	mov	r1, r5
 800b982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b986:	2900      	cmp	r1, #0
 800b988:	dc0e      	bgt.n	800b9a8 <__ieee754_sqrt+0x5c>
 800b98a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800b98e:	ea5c 0707 	orrs.w	r7, ip, r7
 800b992:	d0f4      	beq.n	800b97e <__ieee754_sqrt+0x32>
 800b994:	b141      	cbz	r1, 800b9a8 <__ieee754_sqrt+0x5c>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
 800b99a:	f7f4 fbe5 	bl	8000168 <__aeabi_dsub>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	460b      	mov	r3, r1
 800b9a2:	f7f4 fec3 	bl	800072c <__aeabi_ddiv>
 800b9a6:	e7e8      	b.n	800b97a <__ieee754_sqrt+0x2e>
 800b9a8:	1521      	asrs	r1, r4, #20
 800b9aa:	d075      	beq.n	800ba98 <__ieee754_sqrt+0x14c>
 800b9ac:	07cc      	lsls	r4, r1, #31
 800b9ae:	f04f 0400 	mov.w	r4, #0
 800b9b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800b9b6:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800b9ba:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800b9be:	bf5e      	ittt	pl
 800b9c0:	0fd9      	lsrpl	r1, r3, #31
 800b9c2:	005b      	lslpl	r3, r3, #1
 800b9c4:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 800b9c8:	0fd9      	lsrs	r1, r3, #31
 800b9ca:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800b9ce:	2516      	movs	r5, #22
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9d6:	107f      	asrs	r7, r7, #1
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	1846      	adds	r6, r0, r1
 800b9dc:	4296      	cmp	r6, r2
 800b9de:	bfde      	ittt	le
 800b9e0:	1b92      	suble	r2, r2, r6
 800b9e2:	1870      	addle	r0, r6, r1
 800b9e4:	1864      	addle	r4, r4, r1
 800b9e6:	0052      	lsls	r2, r2, #1
 800b9e8:	3d01      	subs	r5, #1
 800b9ea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800b9ee:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b9f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9f6:	d1f0      	bne.n	800b9da <__ieee754_sqrt+0x8e>
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	f04f 0e20 	mov.w	lr, #32
 800b9fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ba02:	4282      	cmp	r2, r0
 800ba04:	eb06 0c05 	add.w	ip, r6, r5
 800ba08:	dc02      	bgt.n	800ba10 <__ieee754_sqrt+0xc4>
 800ba0a:	d113      	bne.n	800ba34 <__ieee754_sqrt+0xe8>
 800ba0c:	459c      	cmp	ip, r3
 800ba0e:	d811      	bhi.n	800ba34 <__ieee754_sqrt+0xe8>
 800ba10:	f1bc 0f00 	cmp.w	ip, #0
 800ba14:	eb0c 0506 	add.w	r5, ip, r6
 800ba18:	da43      	bge.n	800baa2 <__ieee754_sqrt+0x156>
 800ba1a:	2d00      	cmp	r5, #0
 800ba1c:	db41      	blt.n	800baa2 <__ieee754_sqrt+0x156>
 800ba1e:	f100 0801 	add.w	r8, r0, #1
 800ba22:	1a12      	subs	r2, r2, r0
 800ba24:	4640      	mov	r0, r8
 800ba26:	459c      	cmp	ip, r3
 800ba28:	bf88      	it	hi
 800ba2a:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800ba2e:	eba3 030c 	sub.w	r3, r3, ip
 800ba32:	4431      	add	r1, r6
 800ba34:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800ba38:	f1be 0e01 	subs.w	lr, lr, #1
 800ba3c:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800ba40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ba44:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800ba48:	d1db      	bne.n	800ba02 <__ieee754_sqrt+0xb6>
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	d006      	beq.n	800ba5c <__ieee754_sqrt+0x110>
 800ba4e:	1c48      	adds	r0, r1, #1
 800ba50:	bf0b      	itete	eq
 800ba52:	4671      	moveq	r1, lr
 800ba54:	3101      	addne	r1, #1
 800ba56:	3401      	addeq	r4, #1
 800ba58:	f021 0101 	bicne.w	r1, r1, #1
 800ba5c:	1063      	asrs	r3, r4, #1
 800ba5e:	0849      	lsrs	r1, r1, #1
 800ba60:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ba64:	07e2      	lsls	r2, r4, #31
 800ba66:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ba6a:	bf48      	it	mi
 800ba6c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800ba70:	460e      	mov	r6, r1
 800ba72:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800ba76:	e782      	b.n	800b97e <__ieee754_sqrt+0x32>
 800ba78:	0ada      	lsrs	r2, r3, #11
 800ba7a:	3815      	subs	r0, #21
 800ba7c:	055b      	lsls	r3, r3, #21
 800ba7e:	2a00      	cmp	r2, #0
 800ba80:	d0fa      	beq.n	800ba78 <__ieee754_sqrt+0x12c>
 800ba82:	02d5      	lsls	r5, r2, #11
 800ba84:	d50a      	bpl.n	800ba9c <__ieee754_sqrt+0x150>
 800ba86:	f1c1 0420 	rsb	r4, r1, #32
 800ba8a:	fa23 f404 	lsr.w	r4, r3, r4
 800ba8e:	1e4d      	subs	r5, r1, #1
 800ba90:	408b      	lsls	r3, r1
 800ba92:	4322      	orrs	r2, r4
 800ba94:	1b41      	subs	r1, r0, r5
 800ba96:	e789      	b.n	800b9ac <__ieee754_sqrt+0x60>
 800ba98:	4608      	mov	r0, r1
 800ba9a:	e7f0      	b.n	800ba7e <__ieee754_sqrt+0x132>
 800ba9c:	0052      	lsls	r2, r2, #1
 800ba9e:	3101      	adds	r1, #1
 800baa0:	e7ef      	b.n	800ba82 <__ieee754_sqrt+0x136>
 800baa2:	4680      	mov	r8, r0
 800baa4:	e7bd      	b.n	800ba22 <__ieee754_sqrt+0xd6>
 800baa6:	bf00      	nop
 800baa8:	7ff00000 	.word	0x7ff00000

0800baac <nan>:
 800baac:	2000      	movs	r0, #0
 800baae:	4901      	ldr	r1, [pc, #4]	; (800bab4 <nan+0x8>)
 800bab0:	4770      	bx	lr
 800bab2:	bf00      	nop
 800bab4:	7ff80000 	.word	0x7ff80000

0800bab8 <_init>:
 800bab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baba:	bf00      	nop
 800babc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800babe:	bc08      	pop	{r3}
 800bac0:	469e      	mov	lr, r3
 800bac2:	4770      	bx	lr

0800bac4 <_fini>:
 800bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac6:	bf00      	nop
 800bac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baca:	bc08      	pop	{r3}
 800bacc:	469e      	mov	lr, r3
 800bace:	4770      	bx	lr
