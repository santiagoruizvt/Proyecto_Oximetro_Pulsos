
Oxy_Pulse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a20  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c70  08004b2c  08004b2c  00014b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800779c  0800779c  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  0800779c  0800779c  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800779c  0800779c  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077a0  080077a0  000177a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080077a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  20000028  080077cc  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  080077cc  00020598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000db73  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdc  00000000  00000000  0002dbc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  0002fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb8  00000000  00000000  000307e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017645  00000000  00000000  000313a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e09c  00000000  00000000  000489e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d0e  00000000  00000000  00056a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dc78f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032d8  00000000  00000000  000dc7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b14 	.word	0x08004b14

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	08004b14 	.word	0x08004b14

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 ff35 	bl	8000fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f887 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f987 	bl	800046c <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f8c9 	bl	80002f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000162:	f000 f8f5 	bl	8000350 <MX_I2C2_Init>
  MX_SPI2_Init();
 8000166:	f000 f921 	bl	80003ac <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800016a:	f000 f955 	bl	8000418 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 800016e:	f000 fac3 	bl	80006f8 <SSD1306_Init>

  SSD1306_GotoXY(40, 0);
 8000172:	2100      	movs	r1, #0
 8000174:	2028      	movs	r0, #40	; 0x28
 8000176:	f000 fc27 	bl	80009c8 <SSD1306_GotoXY>
  SSD1306_Puts("OXY",&Font_16x26,1);
 800017a:	2201      	movs	r2, #1
 800017c:	492e      	ldr	r1, [pc, #184]	; (8000238 <main+0xec>)
 800017e:	482f      	ldr	r0, [pc, #188]	; (800023c <main+0xf0>)
 8000180:	f000 fcb8 	bl	8000af4 <SSD1306_Puts>
  SSD1306_GotoXY(25, 24);
 8000184:	2118      	movs	r1, #24
 8000186:	2019      	movs	r0, #25
 8000188:	f000 fc1e 	bl	80009c8 <SSD1306_GotoXY>
  SSD1306_Puts("PULSE",&Font_16x26,1);
 800018c:	2201      	movs	r2, #1
 800018e:	492a      	ldr	r1, [pc, #168]	; (8000238 <main+0xec>)
 8000190:	482b      	ldr	r0, [pc, #172]	; (8000240 <main+0xf4>)
 8000192:	f000 fcaf 	bl	8000af4 <SSD1306_Puts>
  SSD1306_GotoXY(10, 50);
 8000196:	2132      	movs	r1, #50	; 0x32
 8000198:	200a      	movs	r0, #10
 800019a:	f000 fc15 	bl	80009c8 <SSD1306_GotoXY>
  SSD1306_Puts("...Iniciando...",&Font_7x10,1);
 800019e:	2201      	movs	r2, #1
 80001a0:	4928      	ldr	r1, [pc, #160]	; (8000244 <main+0xf8>)
 80001a2:	4829      	ldr	r0, [pc, #164]	; (8000248 <main+0xfc>)
 80001a4:	f000 fca6 	bl	8000af4 <SSD1306_Puts>
  SSD1306_UpdateScreen();
 80001a8:	f000 fb6a 	bl	8000880 <SSD1306_UpdateScreen>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(estado){
 80001ac:	4b27      	ldr	r3, [pc, #156]	; (800024c <main+0x100>)
 80001ae:	781b      	ldrb	r3, [r3, #0]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d002      	beq.n	80001ba <main+0x6e>
 80001b4:	2b01      	cmp	r3, #1
 80001b6:	d014      	beq.n	80001e2 <main+0x96>
 80001b8:	e7f8      	b.n	80001ac <main+0x60>
	  case INICIANDO:
		  SSD1306_ScrollRight(0x06, 0x07);
 80001ba:	2107      	movs	r1, #7
 80001bc:	2006      	movs	r0, #6
 80001be:	f000 f9f4 	bl	80005aa <SSD1306_ScrollRight>
		  if(!contador)
 80001c2:	4b23      	ldr	r3, [pc, #140]	; (8000250 <main+0x104>)
 80001c4:	881b      	ldrh	r3, [r3, #0]
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d133      	bne.n	8000232 <main+0xe6>
		  {
			  estado=PREPARADO;
 80001ca:	4b20      	ldr	r3, [pc, #128]	; (800024c <main+0x100>)
 80001cc:	2201      	movs	r2, #1
 80001ce:	701a      	strb	r2, [r3, #0]
			  contador=DEMORA;
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <main+0x104>)
 80001d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80001d6:	801a      	strh	r2, [r3, #0]
			  SSD1306_Stopscroll();
 80001d8:	f000 fa1d 	bl	8000616 <SSD1306_Stopscroll>
			  SSD1306_Clear();		  }
 80001dc:	f000 fcaf 	bl	8000b3e <SSD1306_Clear>
		  break;
 80001e0:	e027      	b.n	8000232 <main+0xe6>
	  case PREPARADO:
		  SSD1306_DrawBitmap(0, 0, LOGO, 128, 64, 1);
 80001e2:	2301      	movs	r3, #1
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2340      	movs	r3, #64	; 0x40
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2380      	movs	r3, #128	; 0x80
 80001ec:	4a19      	ldr	r2, [pc, #100]	; (8000254 <main+0x108>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	2000      	movs	r0, #0
 80001f2:	f000 fa19 	bl	8000628 <SSD1306_DrawBitmap>
		  SSD1306_GotoXY(70, 0);
 80001f6:	2100      	movs	r1, #0
 80001f8:	2046      	movs	r0, #70	; 0x46
 80001fa:	f000 fbe5 	bl	80009c8 <SSD1306_GotoXY>
		  SSD1306_Puts("'OK'",&Font_11x18,1);
 80001fe:	2201      	movs	r2, #1
 8000200:	4915      	ldr	r1, [pc, #84]	; (8000258 <main+0x10c>)
 8000202:	4816      	ldr	r0, [pc, #88]	; (800025c <main+0x110>)
 8000204:	f000 fc76 	bl	8000af4 <SSD1306_Puts>
		  SSD1306_GotoXY(80, 27);
 8000208:	211b      	movs	r1, #27
 800020a:	2050      	movs	r0, #80	; 0x50
 800020c:	f000 fbdc 	bl	80009c8 <SSD1306_GotoXY>
		  SSD1306_Puts("para",&Font_7x10,1);
 8000210:	2201      	movs	r2, #1
 8000212:	490c      	ldr	r1, [pc, #48]	; (8000244 <main+0xf8>)
 8000214:	4812      	ldr	r0, [pc, #72]	; (8000260 <main+0x114>)
 8000216:	f000 fc6d 	bl	8000af4 <SSD1306_Puts>
		  SSD1306_GotoXY(70, 50);
 800021a:	2132      	movs	r1, #50	; 0x32
 800021c:	2046      	movs	r0, #70	; 0x46
 800021e:	f000 fbd3 	bl	80009c8 <SSD1306_GotoXY>
		  SSD1306_Puts("iniciar",&Font_7x10,1);
 8000222:	2201      	movs	r2, #1
 8000224:	4907      	ldr	r1, [pc, #28]	; (8000244 <main+0xf8>)
 8000226:	480f      	ldr	r0, [pc, #60]	; (8000264 <main+0x118>)
 8000228:	f000 fc64 	bl	8000af4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800022c:	f000 fb28 	bl	8000880 <SSD1306_UpdateScreen>
		  break;
 8000230:	e000      	b.n	8000234 <main+0xe8>
		  break;
 8000232:	bf00      	nop
	  switch(estado){
 8000234:	e7ba      	b.n	80001ac <main+0x60>
 8000236:	bf00      	nop
 8000238:	20000010 	.word	0x20000010
 800023c:	08004b2c 	.word	0x08004b2c
 8000240:	08004b30 	.word	0x08004b30
 8000244:	20000000 	.word	0x20000000
 8000248:	08004b38 	.word	0x08004b38
 800024c:	20000044 	.word	0x20000044
 8000250:	20000018 	.word	0x20000018
 8000254:	08007384 	.word	0x08007384
 8000258:	20000008 	.word	0x20000008
 800025c:	08004b48 	.word	0x08004b48
 8000260:	08004b50 	.word	0x08004b50
 8000264:	08004b58 	.word	0x08004b58

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b090      	sub	sp, #64	; 0x40
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 fc44 	bl	8004b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800028a:	2301      	movs	r3, #1
 800028c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800028e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000292:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029c:	2302      	movs	r3, #2
 800029e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002a6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ac:	f107 0318 	add.w	r3, r7, #24
 80002b0:	4618      	mov	r0, r3
 80002b2:	f003 fb69 	bl	8003988 <HAL_RCC_OscConfig>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002bc:	f000 f970 	bl	80005a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c0:	230f      	movs	r3, #15
 80002c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002c4:	2302      	movs	r3, #2
 80002c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d2:	2300      	movs	r3, #0
 80002d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	2102      	movs	r1, #2
 80002da:	4618      	mov	r0, r3
 80002dc:	f003 fdd4 	bl	8003e88 <HAL_RCC_ClockConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002e6:	f000 f95b 	bl	80005a0 <Error_Handler>
  }
}
 80002ea:	bf00      	nop
 80002ec:	3740      	adds	r7, #64	; 0x40
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002f8:	4b12      	ldr	r3, [pc, #72]	; (8000344 <MX_I2C1_Init+0x50>)
 80002fa:	4a13      	ldr	r2, [pc, #76]	; (8000348 <MX_I2C1_Init+0x54>)
 80002fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <MX_I2C1_Init+0x50>)
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <MX_I2C1_Init+0x58>)
 8000302:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_I2C1_Init+0x50>)
 8000306:	2200      	movs	r2, #0
 8000308:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <MX_I2C1_Init+0x50>)
 800030c:	2200      	movs	r2, #0
 800030e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000310:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_I2C1_Init+0x50>)
 8000312:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000316:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000318:	4b0a      	ldr	r3, [pc, #40]	; (8000344 <MX_I2C1_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_I2C1_Init+0x50>)
 8000320:	2200      	movs	r2, #0
 8000322:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <MX_I2C1_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_I2C1_Init+0x50>)
 800032c:	2200      	movs	r2, #0
 800032e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000330:	4804      	ldr	r0, [pc, #16]	; (8000344 <MX_I2C1_Init+0x50>)
 8000332:	f001 f9fb 	bl	800172c <HAL_I2C_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800033c:	f000 f930 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000340:	bf00      	nop
 8000342:	bd80      	pop	{r7, pc}
 8000344:	200004a8 	.word	0x200004a8
 8000348:	40005400 	.word	0x40005400
 800034c:	000186a0 	.word	0x000186a0

08000350 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000354:	4b12      	ldr	r3, [pc, #72]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000356:	4a13      	ldr	r2, [pc, #76]	; (80003a4 <MX_I2C2_Init+0x54>)
 8000358:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800035a:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_I2C2_Init+0x50>)
 800035c:	4a12      	ldr	r2, [pc, #72]	; (80003a8 <MX_I2C2_Init+0x58>)
 800035e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000360:	4b0f      	ldr	r3, [pc, #60]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800036c:	4b0c      	ldr	r3, [pc, #48]	; (80003a0 <MX_I2C2_Init+0x50>)
 800036e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000372:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000374:	4b0a      	ldr	r3, [pc, #40]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000376:	2200      	movs	r2, #0
 8000378:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800037a:	4b09      	ldr	r3, [pc, #36]	; (80003a0 <MX_I2C2_Init+0x50>)
 800037c:	2200      	movs	r2, #0
 800037e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000380:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000382:	2200      	movs	r2, #0
 8000384:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000386:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <MX_I2C2_Init+0x50>)
 8000388:	2200      	movs	r2, #0
 800038a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800038c:	4804      	ldr	r0, [pc, #16]	; (80003a0 <MX_I2C2_Init+0x50>)
 800038e:	f001 f9cd 	bl	800172c <HAL_I2C_Init>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000398:	f000 f902 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	200004fc 	.word	0x200004fc
 80003a4:	40005800 	.word	0x40005800
 80003a8:	00061a80 	.word	0x00061a80

080003ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80003b0:	4b17      	ldr	r3, [pc, #92]	; (8000410 <MX_SPI2_Init+0x64>)
 80003b2:	4a18      	ldr	r2, [pc, #96]	; (8000414 <MX_SPI2_Init+0x68>)
 80003b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80003b6:	4b16      	ldr	r3, [pc, #88]	; (8000410 <MX_SPI2_Init+0x64>)
 80003b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80003be:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_SPI2_Init+0x64>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80003c4:	4b12      	ldr	r3, [pc, #72]	; (8000410 <MX_SPI2_Init+0x64>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_SPI2_Init+0x64>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_SPI2_Init+0x64>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_SPI2_Init+0x64>)
 80003d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003dc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80003de:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_SPI2_Init+0x64>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80003e4:	4b0a      	ldr	r3, [pc, #40]	; (8000410 <MX_SPI2_Init+0x64>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ea:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_SPI2_Init+0x64>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <MX_SPI2_Init+0x64>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80003f6:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_SPI2_Init+0x64>)
 80003f8:	220a      	movs	r2, #10
 80003fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80003fc:	4804      	ldr	r0, [pc, #16]	; (8000410 <MX_SPI2_Init+0x64>)
 80003fe:	f003 fedd 	bl	80041bc <HAL_SPI_Init>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000408:	f000 f8ca 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000450 	.word	0x20000450
 8000414:	40003800 	.word	0x40003800

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b11      	ldr	r3, [pc, #68]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 800041e:	4a12      	ldr	r2, [pc, #72]	; (8000468 <MX_USART2_UART_Init+0x50>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000422:	4b10      	ldr	r3, [pc, #64]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 8000424:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b0e      	ldr	r3, [pc, #56]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0b      	ldr	r3, [pc, #44]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b09      	ldr	r3, [pc, #36]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b08      	ldr	r3, [pc, #32]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b06      	ldr	r3, [pc, #24]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800044e:	4805      	ldr	r0, [pc, #20]	; (8000464 <MX_USART2_UART_Init+0x4c>)
 8000450:	f003 ff38 	bl	80042c4 <HAL_UART_Init>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800045a:	f000 f8a1 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800045e:	bf00      	nop
 8000460:	bd80      	pop	{r7, pc}
 8000462:	bf00      	nop
 8000464:	20000550 	.word	0x20000550
 8000468:	40004400 	.word	0x40004400

0800046c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b35      	ldr	r3, [pc, #212]	; (8000558 <MX_GPIO_Init+0xec>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a34      	ldr	r2, [pc, #208]	; (8000558 <MX_GPIO_Init+0xec>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b32      	ldr	r3, [pc, #200]	; (8000558 <MX_GPIO_Init+0xec>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000498:	4b2f      	ldr	r3, [pc, #188]	; (8000558 <MX_GPIO_Init+0xec>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a2e      	ldr	r2, [pc, #184]	; (8000558 <MX_GPIO_Init+0xec>)
 800049e:	f043 0320 	orr.w	r3, r3, #32
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b2c      	ldr	r3, [pc, #176]	; (8000558 <MX_GPIO_Init+0xec>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0320 	and.w	r3, r3, #32
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	4b29      	ldr	r3, [pc, #164]	; (8000558 <MX_GPIO_Init+0xec>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a28      	ldr	r2, [pc, #160]	; (8000558 <MX_GPIO_Init+0xec>)
 80004b6:	f043 0304 	orr.w	r3, r3, #4
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b26      	ldr	r3, [pc, #152]	; (8000558 <MX_GPIO_Init+0xec>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0304 	and.w	r3, r3, #4
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4b23      	ldr	r3, [pc, #140]	; (8000558 <MX_GPIO_Init+0xec>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a22      	ldr	r2, [pc, #136]	; (8000558 <MX_GPIO_Init+0xec>)
 80004ce:	f043 0308 	orr.w	r3, r3, #8
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b20      	ldr	r3, [pc, #128]	; (8000558 <MX_GPIO_Init+0xec>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0308 	and.w	r3, r3, #8
 80004dc:	603b      	str	r3, [r7, #0]
 80004de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e6:	481d      	ldr	r0, [pc, #116]	; (800055c <MX_GPIO_Init+0xf0>)
 80004e8:	f001 f908 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CSS_GPIO_Port, SPI2_CSS_Pin, GPIO_PIN_RESET);
 80004ec:	2200      	movs	r2, #0
 80004ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004f2:	481b      	ldr	r0, [pc, #108]	; (8000560 <MX_GPIO_Init+0xf4>)
 80004f4:	f001 f902 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80004f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	2301      	movs	r3, #1
 8000500:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000502:	2300      	movs	r3, #0
 8000504:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	2302      	movs	r3, #2
 8000508:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	4619      	mov	r1, r3
 8000510:	4812      	ldr	r0, [pc, #72]	; (800055c <MX_GPIO_Init+0xf0>)
 8000512:	f000 ff6f 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PULSADOR_Pin */
  GPIO_InitStruct.Pin = PULSADOR_Pin;
 8000516:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800051a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000520:	2300      	movs	r3, #0
 8000522:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PULSADOR_GPIO_Port, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	480c      	ldr	r0, [pc, #48]	; (800055c <MX_GPIO_Init+0xf0>)
 800052c:	f000 ff62 	bl	80013f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CSS_Pin */
  GPIO_InitStruct.Pin = SPI2_CSS_Pin;
 8000530:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000536:	2301      	movs	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053e:	2302      	movs	r3, #2
 8000540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI2_CSS_GPIO_Port, &GPIO_InitStruct);
 8000542:	f107 0310 	add.w	r3, r7, #16
 8000546:	4619      	mov	r1, r3
 8000548:	4805      	ldr	r0, [pc, #20]	; (8000560 <MX_GPIO_Init+0xf4>)
 800054a:	f000 ff53 	bl	80013f4 <HAL_GPIO_Init>

}
 800054e:	bf00      	nop
 8000550:	3720      	adds	r7, #32
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40021000 	.word	0x40021000
 800055c:	40011000 	.word	0x40011000
 8000560:	40010c00 	.word	0x40010c00

08000564 <HAL_IncTick>:

/* USER CODE BEGIN 4 */
void HAL_IncTick(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <HAL_IncTick+0x30>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	461a      	mov	r2, r3
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <HAL_IncTick+0x34>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	4413      	add	r3, r2
 8000574:	4a08      	ldr	r2, [pc, #32]	; (8000598 <HAL_IncTick+0x34>)
 8000576:	6013      	str	r3, [r2, #0]

  if(contador)
 8000578:	4b08      	ldr	r3, [pc, #32]	; (800059c <HAL_IncTick+0x38>)
 800057a:	881b      	ldrh	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d005      	beq.n	800058c <HAL_IncTick+0x28>
  contador--;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x38>)
 8000582:	881b      	ldrh	r3, [r3, #0]
 8000584:	3b01      	subs	r3, #1
 8000586:	b29a      	uxth	r2, r3
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <HAL_IncTick+0x38>)
 800058a:	801a      	strh	r2, [r3, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	20000024 	.word	0x20000024
 8000598:	20000594 	.word	0x20000594
 800059c:	20000018 	.word	0x20000018

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	e7fe      	b.n	80005a8 <Error_Handler+0x8>

080005aa <SSD1306_ScrollRight>:
#define SSD1306_NORMALDISPLAY       0xA6
#define SSD1306_INVERTDISPLAY       0xA7


void SSD1306_ScrollRight(uint8_t start_row, uint8_t end_row)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	b082      	sub	sp, #8
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	4603      	mov	r3, r0
 80005b2:	460a      	mov	r2, r1
 80005b4:	71fb      	strb	r3, [r7, #7]
 80005b6:	4613      	mov	r3, r2
 80005b8:	71bb      	strb	r3, [r7, #6]
  SSD1306_WRITECOMMAND (SSD1306_RIGHT_HORIZONTAL_SCROLL);  // send 0x26
 80005ba:	2226      	movs	r2, #38	; 0x26
 80005bc:	2100      	movs	r1, #0
 80005be:	2078      	movs	r0, #120	; 0x78
 80005c0:	f000 fb22 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (0x00);  // send dummy
 80005c4:	2200      	movs	r2, #0
 80005c6:	2100      	movs	r1, #0
 80005c8:	2078      	movs	r0, #120	; 0x78
 80005ca:	f000 fb1d 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(start_row);  // start page address
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	461a      	mov	r2, r3
 80005d2:	2100      	movs	r1, #0
 80005d4:	2078      	movs	r0, #120	; 0x78
 80005d6:	f000 fb17 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);  // time interval 5 frames
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2078      	movs	r0, #120	; 0x78
 80005e0:	f000 fb12 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(end_row);  // end page address
 80005e4:	79bb      	ldrb	r3, [r7, #6]
 80005e6:	461a      	mov	r2, r3
 80005e8:	2100      	movs	r1, #0
 80005ea:	2078      	movs	r0, #120	; 0x78
 80005ec:	f000 fb0c 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0X00);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2100      	movs	r1, #0
 80005f4:	2078      	movs	r0, #120	; 0x78
 80005f6:	f000 fb07 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND(0XFF);
 80005fa:	22ff      	movs	r2, #255	; 0xff
 80005fc:	2100      	movs	r1, #0
 80005fe:	2078      	movs	r0, #120	; 0x78
 8000600:	f000 fb02 	bl	8000c08 <ssd1306_I2C_Write>
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL); // start scroll
 8000604:	222f      	movs	r2, #47	; 0x2f
 8000606:	2100      	movs	r1, #0
 8000608:	2078      	movs	r0, #120	; 0x78
 800060a:	f000 fafd 	bl	8000c08 <ssd1306_I2C_Write>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <SSD1306_Stopscroll>:
  SSD1306_WRITECOMMAND (SSD1306_ACTIVATE_SCROLL);
}


void SSD1306_Stopscroll(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800061a:	222e      	movs	r2, #46	; 0x2e
 800061c:	2100      	movs	r1, #0
 800061e:	2078      	movs	r0, #120	; 0x78
 8000620:	f000 faf2 	bl	8000c08 <ssd1306_I2C_Write>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}

08000628 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b086      	sub	sp, #24
 800062c:	af00      	add	r7, sp, #0
 800062e:	60ba      	str	r2, [r7, #8]
 8000630:	461a      	mov	r2, r3
 8000632:	4603      	mov	r3, r0
 8000634:	81fb      	strh	r3, [r7, #14]
 8000636:	460b      	mov	r3, r1
 8000638:	81bb      	strh	r3, [r7, #12]
 800063a:	4613      	mov	r3, r2
 800063c:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800063e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000642:	3307      	adds	r3, #7
 8000644:	2b00      	cmp	r3, #0
 8000646:	da00      	bge.n	800064a <SSD1306_DrawBitmap+0x22>
 8000648:	3307      	adds	r3, #7
 800064a:	10db      	asrs	r3, r3, #3
 800064c:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8000652:	2300      	movs	r3, #0
 8000654:	82bb      	strh	r3, [r7, #20]
 8000656:	e044      	b.n	80006e2 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8000658:	2300      	movs	r3, #0
 800065a:	827b      	strh	r3, [r7, #18]
 800065c:	e02f      	b.n	80006be <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800065e:	8a7b      	ldrh	r3, [r7, #18]
 8000660:	f003 0307 	and.w	r3, r3, #7
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	75fb      	strb	r3, [r7, #23]
 800066e:	e012      	b.n	8000696 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000670:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000674:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000678:	fb02 f203 	mul.w	r2, r2, r3
 800067c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000680:	2b00      	cmp	r3, #0
 8000682:	da00      	bge.n	8000686 <SSD1306_DrawBitmap+0x5e>
 8000684:	3307      	adds	r3, #7
 8000686:	10db      	asrs	r3, r3, #3
 8000688:	b21b      	sxth	r3, r3
 800068a:	4413      	add	r3, r2
 800068c:	461a      	mov	r2, r3
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	4413      	add	r3, r2
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8000696:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800069a:	2b00      	cmp	r3, #0
 800069c:	da09      	bge.n	80006b2 <SSD1306_DrawBitmap+0x8a>
 800069e:	89fa      	ldrh	r2, [r7, #14]
 80006a0:	8a7b      	ldrh	r3, [r7, #18]
 80006a2:	4413      	add	r3, r2
 80006a4:	b29b      	uxth	r3, r3
 80006a6:	89b9      	ldrh	r1, [r7, #12]
 80006a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80006aa:	b2d2      	uxtb	r2, r2
 80006ac:	4618      	mov	r0, r3
 80006ae:	f000 f92d 	bl	800090c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 80006b2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	3301      	adds	r3, #1
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	827b      	strh	r3, [r7, #18]
 80006be:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80006c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	dbc9      	blt.n	800065e <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80006ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	3301      	adds	r3, #1
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	82bb      	strh	r3, [r7, #20]
 80006d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80006da:	b29b      	uxth	r3, r3
 80006dc:	3301      	adds	r3, #1
 80006de:	b29b      	uxth	r3, r3
 80006e0:	81bb      	strh	r3, [r7, #12]
 80006e2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80006e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80006ea:	429a      	cmp	r2, r3
 80006ec:	dbb4      	blt.n	8000658 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80006fe:	f000 fa27 	bl	8000b50 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000702:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000706:	2201      	movs	r2, #1
 8000708:	2178      	movs	r1, #120	; 0x78
 800070a:	485b      	ldr	r0, [pc, #364]	; (8000878 <SSD1306_Init+0x180>)
 800070c:	f001 fa50 	bl	8001bb0 <HAL_I2C_IsDeviceReady>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000716:	2300      	movs	r3, #0
 8000718:	e0a9      	b.n	800086e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800071a:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800071e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000720:	e002      	b.n	8000728 <SSD1306_Init+0x30>
		p--;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	3b01      	subs	r3, #1
 8000726:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f9      	bne.n	8000722 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800072e:	22ae      	movs	r2, #174	; 0xae
 8000730:	2100      	movs	r1, #0
 8000732:	2078      	movs	r0, #120	; 0x78
 8000734:	f000 fa68 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	2078      	movs	r0, #120	; 0x78
 800073e:	f000 fa63 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000742:	2210      	movs	r2, #16
 8000744:	2100      	movs	r1, #0
 8000746:	2078      	movs	r0, #120	; 0x78
 8000748:	f000 fa5e 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800074c:	22b0      	movs	r2, #176	; 0xb0
 800074e:	2100      	movs	r1, #0
 8000750:	2078      	movs	r0, #120	; 0x78
 8000752:	f000 fa59 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000756:	22c8      	movs	r2, #200	; 0xc8
 8000758:	2100      	movs	r1, #0
 800075a:	2078      	movs	r0, #120	; 0x78
 800075c:	f000 fa54 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2078      	movs	r0, #120	; 0x78
 8000766:	f000 fa4f 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800076a:	2210      	movs	r2, #16
 800076c:	2100      	movs	r1, #0
 800076e:	2078      	movs	r0, #120	; 0x78
 8000770:	f000 fa4a 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000774:	2240      	movs	r2, #64	; 0x40
 8000776:	2100      	movs	r1, #0
 8000778:	2078      	movs	r0, #120	; 0x78
 800077a:	f000 fa45 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800077e:	2281      	movs	r2, #129	; 0x81
 8000780:	2100      	movs	r1, #0
 8000782:	2078      	movs	r0, #120	; 0x78
 8000784:	f000 fa40 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000788:	22ff      	movs	r2, #255	; 0xff
 800078a:	2100      	movs	r1, #0
 800078c:	2078      	movs	r0, #120	; 0x78
 800078e:	f000 fa3b 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000792:	22a1      	movs	r2, #161	; 0xa1
 8000794:	2100      	movs	r1, #0
 8000796:	2078      	movs	r0, #120	; 0x78
 8000798:	f000 fa36 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800079c:	22a6      	movs	r2, #166	; 0xa6
 800079e:	2100      	movs	r1, #0
 80007a0:	2078      	movs	r0, #120	; 0x78
 80007a2:	f000 fa31 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80007a6:	22a8      	movs	r2, #168	; 0xa8
 80007a8:	2100      	movs	r1, #0
 80007aa:	2078      	movs	r0, #120	; 0x78
 80007ac:	f000 fa2c 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80007b0:	223f      	movs	r2, #63	; 0x3f
 80007b2:	2100      	movs	r1, #0
 80007b4:	2078      	movs	r0, #120	; 0x78
 80007b6:	f000 fa27 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007ba:	22a4      	movs	r2, #164	; 0xa4
 80007bc:	2100      	movs	r1, #0
 80007be:	2078      	movs	r0, #120	; 0x78
 80007c0:	f000 fa22 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80007c4:	22d3      	movs	r2, #211	; 0xd3
 80007c6:	2100      	movs	r1, #0
 80007c8:	2078      	movs	r0, #120	; 0x78
 80007ca:	f000 fa1d 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2078      	movs	r0, #120	; 0x78
 80007d4:	f000 fa18 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80007d8:	22d5      	movs	r2, #213	; 0xd5
 80007da:	2100      	movs	r1, #0
 80007dc:	2078      	movs	r0, #120	; 0x78
 80007de:	f000 fa13 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80007e2:	22f0      	movs	r2, #240	; 0xf0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2078      	movs	r0, #120	; 0x78
 80007e8:	f000 fa0e 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80007ec:	22d9      	movs	r2, #217	; 0xd9
 80007ee:	2100      	movs	r1, #0
 80007f0:	2078      	movs	r0, #120	; 0x78
 80007f2:	f000 fa09 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80007f6:	2222      	movs	r2, #34	; 0x22
 80007f8:	2100      	movs	r1, #0
 80007fa:	2078      	movs	r0, #120	; 0x78
 80007fc:	f000 fa04 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000800:	22da      	movs	r2, #218	; 0xda
 8000802:	2100      	movs	r1, #0
 8000804:	2078      	movs	r0, #120	; 0x78
 8000806:	f000 f9ff 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800080a:	2212      	movs	r2, #18
 800080c:	2100      	movs	r1, #0
 800080e:	2078      	movs	r0, #120	; 0x78
 8000810:	f000 f9fa 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000814:	22db      	movs	r2, #219	; 0xdb
 8000816:	2100      	movs	r1, #0
 8000818:	2078      	movs	r0, #120	; 0x78
 800081a:	f000 f9f5 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	2078      	movs	r0, #120	; 0x78
 8000824:	f000 f9f0 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000828:	228d      	movs	r2, #141	; 0x8d
 800082a:	2100      	movs	r1, #0
 800082c:	2078      	movs	r0, #120	; 0x78
 800082e:	f000 f9eb 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000832:	2214      	movs	r2, #20
 8000834:	2100      	movs	r1, #0
 8000836:	2078      	movs	r0, #120	; 0x78
 8000838:	f000 f9e6 	bl	8000c08 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800083c:	22af      	movs	r2, #175	; 0xaf
 800083e:	2100      	movs	r1, #0
 8000840:	2078      	movs	r0, #120	; 0x78
 8000842:	f000 f9e1 	bl	8000c08 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000846:	222e      	movs	r2, #46	; 0x2e
 8000848:	2100      	movs	r1, #0
 800084a:	2078      	movs	r0, #120	; 0x78
 800084c:	f000 f9dc 	bl	8000c08 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000850:	2000      	movs	r0, #0
 8000852:	f000 f843 	bl	80008dc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000856:	f000 f813 	bl	8000880 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <SSD1306_Init+0x184>)
 800085c:	2200      	movs	r2, #0
 800085e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <SSD1306_Init+0x184>)
 8000862:	2200      	movs	r2, #0
 8000864:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000866:	4b05      	ldr	r3, [pc, #20]	; (800087c <SSD1306_Init+0x184>)
 8000868:	2201      	movs	r2, #1
 800086a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800086c:	2301      	movs	r3, #1
}
 800086e:	4618      	mov	r0, r3
 8000870:	3708      	adds	r7, #8
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	200004fc 	.word	0x200004fc
 800087c:	20000448 	.word	0x20000448

08000880 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000886:	2300      	movs	r3, #0
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	e01d      	b.n	80008c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	3b50      	subs	r3, #80	; 0x50
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	2100      	movs	r1, #0
 8000896:	2078      	movs	r0, #120	; 0x78
 8000898:	f000 f9b6 	bl	8000c08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800089c:	2200      	movs	r2, #0
 800089e:	2100      	movs	r1, #0
 80008a0:	2078      	movs	r0, #120	; 0x78
 80008a2:	f000 f9b1 	bl	8000c08 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80008a6:	2210      	movs	r2, #16
 80008a8:	2100      	movs	r1, #0
 80008aa:	2078      	movs	r0, #120	; 0x78
 80008ac:	f000 f9ac 	bl	8000c08 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	01db      	lsls	r3, r3, #7
 80008b4:	4a08      	ldr	r2, [pc, #32]	; (80008d8 <SSD1306_UpdateScreen+0x58>)
 80008b6:	441a      	add	r2, r3
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	2140      	movs	r1, #64	; 0x40
 80008bc:	2078      	movs	r0, #120	; 0x78
 80008be:	f000 f95b 	bl	8000b78 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3301      	adds	r3, #1
 80008c6:	71fb      	strb	r3, [r7, #7]
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b07      	cmp	r3, #7
 80008cc:	d9de      	bls.n	800088c <SSD1306_UpdateScreen+0xc>
	}
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000048 	.word	0x20000048

080008dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d101      	bne.n	80008f0 <SSD1306_Fill+0x14>
 80008ec:	2300      	movs	r3, #0
 80008ee:	e000      	b.n	80008f2 <SSD1306_Fill+0x16>
 80008f0:	23ff      	movs	r3, #255	; 0xff
 80008f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008f6:	4619      	mov	r1, r3
 80008f8:	4803      	ldr	r0, [pc, #12]	; (8000908 <SSD1306_Fill+0x2c>)
 80008fa:	f004 f903 	bl	8004b04 <memset>
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000048 	.word	0x20000048

0800090c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
 8000916:	460b      	mov	r3, r1
 8000918:	80bb      	strh	r3, [r7, #4]
 800091a:	4613      	mov	r3, r2
 800091c:	70fb      	strb	r3, [r7, #3]
	if (
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	2b7f      	cmp	r3, #127	; 0x7f
 8000922:	d848      	bhi.n	80009b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000924:	88bb      	ldrh	r3, [r7, #4]
 8000926:	2b3f      	cmp	r3, #63	; 0x3f
 8000928:	d845      	bhi.n	80009b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <SSD1306_DrawPixel+0xb4>)
 800092c:	791b      	ldrb	r3, [r3, #4]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d006      	beq.n	8000940 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000932:	78fb      	ldrb	r3, [r7, #3]
 8000934:	2b00      	cmp	r3, #0
 8000936:	bf0c      	ite	eq
 8000938:	2301      	moveq	r3, #1
 800093a:	2300      	movne	r3, #0
 800093c:	b2db      	uxtb	r3, r3
 800093e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d11a      	bne.n	800097c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	88bb      	ldrh	r3, [r7, #4]
 800094a:	08db      	lsrs	r3, r3, #3
 800094c:	b298      	uxth	r0, r3
 800094e:	4603      	mov	r3, r0
 8000950:	01db      	lsls	r3, r3, #7
 8000952:	4413      	add	r3, r2
 8000954:	4a1b      	ldr	r2, [pc, #108]	; (80009c4 <SSD1306_DrawPixel+0xb8>)
 8000956:	5cd3      	ldrb	r3, [r2, r3]
 8000958:	b25a      	sxtb	r2, r3
 800095a:	88bb      	ldrh	r3, [r7, #4]
 800095c:	f003 0307 	and.w	r3, r3, #7
 8000960:	2101      	movs	r1, #1
 8000962:	fa01 f303 	lsl.w	r3, r1, r3
 8000966:	b25b      	sxtb	r3, r3
 8000968:	4313      	orrs	r3, r2
 800096a:	b259      	sxtb	r1, r3
 800096c:	88fa      	ldrh	r2, [r7, #6]
 800096e:	4603      	mov	r3, r0
 8000970:	01db      	lsls	r3, r3, #7
 8000972:	4413      	add	r3, r2
 8000974:	b2c9      	uxtb	r1, r1
 8000976:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <SSD1306_DrawPixel+0xb8>)
 8000978:	54d1      	strb	r1, [r2, r3]
 800097a:	e01d      	b.n	80009b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800097c:	88fa      	ldrh	r2, [r7, #6]
 800097e:	88bb      	ldrh	r3, [r7, #4]
 8000980:	08db      	lsrs	r3, r3, #3
 8000982:	b298      	uxth	r0, r3
 8000984:	4603      	mov	r3, r0
 8000986:	01db      	lsls	r3, r3, #7
 8000988:	4413      	add	r3, r2
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <SSD1306_DrawPixel+0xb8>)
 800098c:	5cd3      	ldrb	r3, [r2, r3]
 800098e:	b25a      	sxtb	r2, r3
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	f003 0307 	and.w	r3, r3, #7
 8000996:	2101      	movs	r1, #1
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	b25b      	sxtb	r3, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	b25b      	sxtb	r3, r3
 80009a2:	4013      	ands	r3, r2
 80009a4:	b259      	sxtb	r1, r3
 80009a6:	88fa      	ldrh	r2, [r7, #6]
 80009a8:	4603      	mov	r3, r0
 80009aa:	01db      	lsls	r3, r3, #7
 80009ac:	4413      	add	r3, r2
 80009ae:	b2c9      	uxtb	r1, r1
 80009b0:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <SSD1306_DrawPixel+0xb8>)
 80009b2:	54d1      	strb	r1, [r2, r3]
 80009b4:	e000      	b.n	80009b8 <SSD1306_DrawPixel+0xac>
		return;
 80009b6:	bf00      	nop
	}
}
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	20000448 	.word	0x20000448
 80009c4:	20000048 	.word	0x20000048

080009c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	4603      	mov	r3, r0
 80009d0:	460a      	mov	r2, r1
 80009d2:	80fb      	strh	r3, [r7, #6]
 80009d4:	4613      	mov	r3, r2
 80009d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80009d8:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <SSD1306_GotoXY+0x28>)
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80009de:	4a04      	ldr	r2, [pc, #16]	; (80009f0 <SSD1306_GotoXY+0x28>)
 80009e0:	88bb      	ldrh	r3, [r7, #4]
 80009e2:	8053      	strh	r3, [r2, #2]
}
 80009e4:	bf00      	nop
 80009e6:	370c      	adds	r7, #12
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bc80      	pop	{r7}
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	20000448 	.word	0x20000448

080009f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a04:	4b3a      	ldr	r3, [pc, #232]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	4413      	add	r3, r2
	if (
 8000a10:	2b7f      	cmp	r3, #127	; 0x7f
 8000a12:	dc07      	bgt.n	8000a24 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a16:	885b      	ldrh	r3, [r3, #2]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	785b      	ldrb	r3, [r3, #1]
 8000a1e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000a20:	2b3f      	cmp	r3, #63	; 0x3f
 8000a22:	dd01      	ble.n	8000a28 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	e05e      	b.n	8000ae6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000a28:	2300      	movs	r3, #0
 8000a2a:	617b      	str	r3, [r7, #20]
 8000a2c:	e04b      	b.n	8000ac6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000a2e:	683b      	ldr	r3, [r7, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	3b20      	subs	r3, #32
 8000a36:	6839      	ldr	r1, [r7, #0]
 8000a38:	7849      	ldrb	r1, [r1, #1]
 8000a3a:	fb01 f303 	mul.w	r3, r1, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	440b      	add	r3, r1
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	4413      	add	r3, r2
 8000a48:	881b      	ldrh	r3, [r3, #0]
 8000a4a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	e030      	b.n	8000ab4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	693b      	ldr	r3, [r7, #16]
 8000a56:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d010      	beq.n	8000a84 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a64:	881a      	ldrh	r2, [r3, #0]
 8000a66:	693b      	ldr	r3, [r7, #16]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b298      	uxth	r0, r3
 8000a6e:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a70:	885a      	ldrh	r2, [r3, #2]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	4413      	add	r3, r2
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	79ba      	ldrb	r2, [r7, #6]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f7ff ff45 	bl	800090c <SSD1306_DrawPixel>
 8000a82:	e014      	b.n	8000aae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a86:	881a      	ldrh	r2, [r3, #0]
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	b298      	uxth	r0, r3
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000a92:	885a      	ldrh	r2, [r3, #2]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	4413      	add	r3, r2
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2301      	moveq	r3, #1
 8000aa4:	2300      	movne	r3, #0
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	f7ff ff2f 	bl	800090c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	613b      	str	r3, [r7, #16]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461a      	mov	r2, r3
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d3c8      	bcc.n	8000a52 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	785b      	ldrb	r3, [r3, #1]
 8000aca:	461a      	mov	r2, r3
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d3ad      	bcc.n	8000a2e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000ad4:	881a      	ldrh	r2, [r3, #0]
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b29b      	uxth	r3, r3
 8000adc:	4413      	add	r3, r2
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <SSD1306_Putc+0xfc>)
 8000ae2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000448 	.word	0x20000448

08000af4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	4613      	mov	r3, r2
 8000b00:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000b02:	e012      	b.n	8000b2a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	79fa      	ldrb	r2, [r7, #7]
 8000b0a:	68b9      	ldr	r1, [r7, #8]
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff71 	bl	80009f4 <SSD1306_Putc>
 8000b12:	4603      	mov	r3, r0
 8000b14:	461a      	mov	r2, r3
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	d002      	beq.n	8000b24 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	e008      	b.n	8000b36 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1e8      	bne.n	8000b04 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	781b      	ldrb	r3, [r3, #0]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f7ff feca 	bl	80008dc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000b48:	f7ff fe9a 	bl	8000880 <SSD1306_UpdateScreen>
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000b56:	4b07      	ldr	r3, [pc, #28]	; (8000b74 <ssd1306_I2C_Init+0x24>)
 8000b58:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b5a:	e002      	b.n	8000b62 <ssd1306_I2C_Init+0x12>
		p--;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d1f9      	bne.n	8000b5c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000b68:	bf00      	nop
 8000b6a:	bf00      	nop
 8000b6c:	370c      	adds	r7, #12
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	0003d090 	.word	0x0003d090

08000b78 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b0c7      	sub	sp, #284	; 0x11c
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	4604      	mov	r4, r0
 8000b80:	4608      	mov	r0, r1
 8000b82:	4639      	mov	r1, r7
 8000b84:	600a      	str	r2, [r1, #0]
 8000b86:	4619      	mov	r1, r3
 8000b88:	1dfb      	adds	r3, r7, #7
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	701a      	strb	r2, [r3, #0]
 8000b8e:	1dbb      	adds	r3, r7, #6
 8000b90:	4602      	mov	r2, r0
 8000b92:	701a      	strb	r2, [r3, #0]
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	460a      	mov	r2, r1
 8000b98:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	1dba      	adds	r2, r7, #6
 8000ba0:	7812      	ldrb	r2, [r2, #0]
 8000ba2:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000baa:	e010      	b.n	8000bce <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8000bac:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bb0:	463a      	mov	r2, r7
 8000bb2:	6812      	ldr	r2, [r2, #0]
 8000bb4:	441a      	add	r2, r3
 8000bb6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bba:	3301      	adds	r3, #1
 8000bbc:	7811      	ldrb	r1, [r2, #0]
 8000bbe:	f107 020c 	add.w	r2, r7, #12
 8000bc2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000bc4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bc8:	3301      	adds	r3, #1
 8000bca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	1d3a      	adds	r2, r7, #4
 8000bd6:	8812      	ldrh	r2, [r2, #0]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8e7      	bhi.n	8000bac <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8000bdc:	1dfb      	adds	r3, r7, #7
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b299      	uxth	r1, r3
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	3301      	adds	r3, #1
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	f107 020c 	add.w	r2, r7, #12
 8000bee:	200a      	movs	r0, #10
 8000bf0:	9000      	str	r0, [sp, #0]
 8000bf2:	4804      	ldr	r0, [pc, #16]	; (8000c04 <ssd1306_I2C_WriteMulti+0x8c>)
 8000bf4:	f000 fede 	bl	80019b4 <HAL_I2C_Master_Transmit>
}
 8000bf8:	bf00      	nop
 8000bfa:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd90      	pop	{r4, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	200004fc 	.word	0x200004fc

08000c08 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af02      	add	r7, sp, #8
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
 8000c12:	460b      	mov	r3, r1
 8000c14:	71bb      	strb	r3, [r7, #6]
 8000c16:	4613      	mov	r3, r2
 8000c18:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000c1a:	79bb      	ldrb	r3, [r7, #6]
 8000c1c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000c1e:	797b      	ldrb	r3, [r7, #5]
 8000c20:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	b299      	uxth	r1, r3
 8000c26:	f107 020c 	add.w	r2, r7, #12
 8000c2a:	230a      	movs	r3, #10
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2302      	movs	r3, #2
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <ssd1306_I2C_Write+0x38>)
 8000c32:	f000 febf 	bl	80019b4 <HAL_I2C_Master_Transmit>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200004fc 	.word	0x200004fc

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <HAL_MspInit+0x60>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_MspInit+0x60>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a33      	ldr	r2, [pc, #204]	; (8000d90 <HAL_I2C_MspInit+0xe8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d12c      	bne.n	8000d22 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cc8:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000cce:	f043 0308 	orr.w	r3, r3, #8
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0308 	and.w	r3, r3, #8
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ce0:	23c0      	movs	r3, #192	; 0xc0
 8000ce2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ce4:	2312      	movs	r3, #18
 8000ce6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ce8:	2303      	movs	r3, #3
 8000cea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4829      	ldr	r0, [pc, #164]	; (8000d98 <HAL_I2C_MspInit+0xf0>)
 8000cf4:	f000 fb7e 	bl	80013f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000cf8:	4b26      	ldr	r3, [pc, #152]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000cfa:	69db      	ldr	r3, [r3, #28]
 8000cfc:	4a25      	ldr	r2, [pc, #148]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d02:	61d3      	str	r3, [r2, #28]
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2100      	movs	r1, #0
 8000d14:	201f      	movs	r0, #31
 8000d16:	f000 fa7a 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d1a:	201f      	movs	r0, #31
 8000d1c:	f000 fa93 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d20:	e031      	b.n	8000d86 <HAL_I2C_MspInit+0xde>
  else if(hi2c->Instance==I2C2)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a1d      	ldr	r2, [pc, #116]	; (8000d9c <HAL_I2C_MspInit+0xf4>)
 8000d28:	4293      	cmp	r3, r2
 8000d2a:	d12c      	bne.n	8000d86 <HAL_I2C_MspInit+0xde>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	4a18      	ldr	r2, [pc, #96]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d32:	f043 0308 	orr.w	r3, r3, #8
 8000d36:	6193      	str	r3, [r2, #24]
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d3a:	699b      	ldr	r3, [r3, #24]
 8000d3c:	f003 0308 	and.w	r3, r3, #8
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d44:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4a:	2312      	movs	r3, #18
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d52:	f107 0318 	add.w	r3, r7, #24
 8000d56:	4619      	mov	r1, r3
 8000d58:	480f      	ldr	r0, [pc, #60]	; (8000d98 <HAL_I2C_MspInit+0xf0>)
 8000d5a:	f000 fb4b 	bl	80013f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	4a0c      	ldr	r2, [pc, #48]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d68:	61d3      	str	r3, [r2, #28]
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <HAL_I2C_MspInit+0xec>)
 8000d6c:	69db      	ldr	r3, [r3, #28]
 8000d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	2021      	movs	r0, #33	; 0x21
 8000d7c:	f000 fa47 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000d80:	2021      	movs	r0, #33	; 0x21
 8000d82:	f000 fa60 	bl	8001246 <HAL_NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40005400 	.word	0x40005400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	40010c00 	.word	0x40010c00
 8000d9c:	40005800 	.word	0x40005800

08000da0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1c      	ldr	r2, [pc, #112]	; (8000e2c <HAL_SPI_MspInit+0x8c>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d131      	bne.n	8000e24 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dc0:	4b1b      	ldr	r3, [pc, #108]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000dc2:	69db      	ldr	r3, [r3, #28]
 8000dc4:	4a1a      	ldr	r2, [pc, #104]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dca:	61d3      	str	r3, [r2, #28]
 8000dcc:	4b18      	ldr	r3, [pc, #96]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000dce:	69db      	ldr	r3, [r3, #28]
 8000dd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd8:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	4a14      	ldr	r2, [pc, #80]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000dde:	f043 0308 	orr.w	r3, r3, #8
 8000de2:	6193      	str	r3, [r2, #24]
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_SPI_MspInit+0x90>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000df0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000df4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dfa:	2303      	movs	r3, #3
 8000dfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dfe:	f107 0310 	add.w	r3, r7, #16
 8000e02:	4619      	mov	r1, r3
 8000e04:	480b      	ldr	r0, [pc, #44]	; (8000e34 <HAL_SPI_MspInit+0x94>)
 8000e06:	f000 faf5 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e10:	2300      	movs	r3, #0
 8000e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e18:	f107 0310 	add.w	r3, r7, #16
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4805      	ldr	r0, [pc, #20]	; (8000e34 <HAL_SPI_MspInit+0x94>)
 8000e20:	f000 fae8 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e24:	bf00      	nop
 8000e26:	3720      	adds	r7, #32
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40003800 	.word	0x40003800
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40010c00 	.word	0x40010c00

08000e38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d137      	bne.n	8000ec8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e62:	61d3      	str	r3, [r2, #28]
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e9c:	f000 faaa 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000eb4:	f000 fa9e 	bl	80013f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2026      	movs	r0, #38	; 0x26
 8000ebe:	f000 f9a6 	bl	800120e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 f9bf 	bl	8001246 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800

08000edc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <NMI_Handler+0x4>

08000ee2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <MemManage_Handler+0x4>

08000eee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <BusFault_Handler+0x4>

08000ef4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef8:	e7fe      	b.n	8000ef8 <UsageFault_Handler+0x4>

08000efa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr

08000f06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr

08000f12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f12:	b480      	push	{r7}
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f22:	f7ff fb1f 	bl	8000564 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f30:	4802      	ldr	r0, [pc, #8]	; (8000f3c <I2C1_EV_IRQHandler+0x10>)
 8000f32:	f000 ff6b 	bl	8001e0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	200004a8 	.word	0x200004a8

08000f40 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <I2C2_EV_IRQHandler+0x10>)
 8000f46:	f000 ff61 	bl	8001e0c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	200004fc 	.word	0x200004fc

08000f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f58:	4802      	ldr	r0, [pc, #8]	; (8000f64 <USART2_IRQHandler+0x10>)
 8000f5a:	f003 fa01 	bl	8004360 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f5e:	bf00      	nop
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20000550 	.word	0x20000550

08000f68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f74:	480c      	ldr	r0, [pc, #48]	; (8000fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f76:	490d      	ldr	r1, [pc, #52]	; (8000fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f7c:	e002      	b.n	8000f84 <LoopCopyDataInit>

08000f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f82:	3304      	adds	r3, #4

08000f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f88:	d3f9      	bcc.n	8000f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f8c:	4c0a      	ldr	r4, [pc, #40]	; (8000fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f90:	e001      	b.n	8000f96 <LoopFillZerobss>

08000f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f94:	3204      	adds	r2, #4

08000f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f98:	d3fb      	bcc.n	8000f92 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f9a:	f7ff ffe5 	bl	8000f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f003 fd8d 	bl	8004abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fa2:	f7ff f8d3 	bl	800014c <main>
  bx lr
 8000fa6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fac:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000fb0:	080077a4 	.word	0x080077a4
  ldr r2, =_sbss
 8000fb4:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000fb8:	20000598 	.word	0x20000598

08000fbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fbc:	e7fe      	b.n	8000fbc <ADC1_2_IRQHandler>
	...

08000fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc4:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <HAL_Init+0x28>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a07      	ldr	r2, [pc, #28]	; (8000fe8 <HAL_Init+0x28>)
 8000fca:	f043 0310 	orr.w	r3, r3, #16
 8000fce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd0:	2003      	movs	r0, #3
 8000fd2:	f000 f911 	bl	80011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fd6:	200f      	movs	r0, #15
 8000fd8:	f000 f808 	bl	8000fec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fdc:	f7ff fe32 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff4:	4b12      	ldr	r3, [pc, #72]	; (8001040 <HAL_InitTick+0x54>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x58>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f929 	bl	8001262 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f8f1 	bl	800120e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	; (8001048 <HAL_InitTick+0x5c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000001c 	.word	0x2000001c
 8001044:	20000024 	.word	0x20000024
 8001048:	20000020 	.word	0x20000020

0800104c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  return uwTick;
 8001050:	4b02      	ldr	r3, [pc, #8]	; (800105c <HAL_GetTick+0x10>)
 8001052:	681b      	ldr	r3, [r3, #0]
}
 8001054:	4618      	mov	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	20000594 	.word	0x20000594

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4906      	ldr	r1, [pc, #24]	; (80010f8 <__NVIC_EnableIRQ+0x34>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	6039      	str	r1, [r7, #0]
 8001106:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001108:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110c:	2b00      	cmp	r3, #0
 800110e:	db0a      	blt.n	8001126 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	b2da      	uxtb	r2, r3
 8001114:	490c      	ldr	r1, [pc, #48]	; (8001148 <__NVIC_SetPriority+0x4c>)
 8001116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111a:	0112      	lsls	r2, r2, #4
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	440b      	add	r3, r1
 8001120:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001124:	e00a      	b.n	800113c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b2da      	uxtb	r2, r3
 800112a:	4908      	ldr	r1, [pc, #32]	; (800114c <__NVIC_SetPriority+0x50>)
 800112c:	79fb      	ldrb	r3, [r7, #7]
 800112e:	f003 030f 	and.w	r3, r3, #15
 8001132:	3b04      	subs	r3, #4
 8001134:	0112      	lsls	r2, r2, #4
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	440b      	add	r3, r1
 800113a:	761a      	strb	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	bc80      	pop	{r7}
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	e000e100 	.word	0xe000e100
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	; 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f1c3 0307 	rsb	r3, r3, #7
 800116a:	2b04      	cmp	r3, #4
 800116c:	bf28      	it	cs
 800116e:	2304      	movcs	r3, #4
 8001170:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3304      	adds	r3, #4
 8001176:	2b06      	cmp	r3, #6
 8001178:	d902      	bls.n	8001180 <NVIC_EncodePriority+0x30>
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	3b03      	subs	r3, #3
 800117e:	e000      	b.n	8001182 <NVIC_EncodePriority+0x32>
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43da      	mvns	r2, r3
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	401a      	ands	r2, r3
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001198:	f04f 31ff 	mov.w	r1, #4294967295
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa01 f303 	lsl.w	r3, r1, r3
 80011a2:	43d9      	mvns	r1, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a8:	4313      	orrs	r3, r2
         );
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c4:	d301      	bcc.n	80011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00f      	b.n	80011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ca:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <SysTick_Config+0x40>)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011d2:	210f      	movs	r1, #15
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f7ff ff90 	bl	80010fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011dc:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <SysTick_Config+0x40>)
 80011de:	2200      	movs	r2, #0
 80011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <SysTick_Config+0x40>)
 80011e4:	2207      	movs	r2, #7
 80011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e8:	2300      	movs	r3, #0
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	e000e010 	.word	0xe000e010

080011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff ff2d 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120e:	b580      	push	{r7, lr}
 8001210:	b086      	sub	sp, #24
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	60b9      	str	r1, [r7, #8]
 8001218:	607a      	str	r2, [r7, #4]
 800121a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001220:	f7ff ff42 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 8001224:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	68b9      	ldr	r1, [r7, #8]
 800122a:	6978      	ldr	r0, [r7, #20]
 800122c:	f7ff ff90 	bl	8001150 <NVIC_EncodePriority>
 8001230:	4602      	mov	r2, r0
 8001232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001236:	4611      	mov	r1, r2
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff5f 	bl	80010fc <__NVIC_SetPriority>
}
 800123e:	bf00      	nop
 8001240:	3718      	adds	r7, #24
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff35 	bl	80010c4 <__NVIC_EnableIRQ>
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff ffa2 	bl	80011b4 <SysTick_Config>
 8001270:	4603      	mov	r3, r0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800127a:	b480      	push	{r7}
 800127c:	b085      	sub	sp, #20
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800128c:	2b02      	cmp	r3, #2
 800128e:	d008      	beq.n	80012a2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2204      	movs	r2, #4
 8001294:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e020      	b.n	80012e4 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 020e 	bic.w	r2, r2, #14
 80012b0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 0201 	bic.w	r2, r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001302:	2b02      	cmp	r3, #2
 8001304:	d005      	beq.n	8001312 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2204      	movs	r2, #4
 800130a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	73fb      	strb	r3, [r7, #15]
 8001310:	e051      	b.n	80013b6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 020e 	bic.w	r2, r2, #14
 8001320:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a22      	ldr	r2, [pc, #136]	; (80013c0 <HAL_DMA_Abort_IT+0xd0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d029      	beq.n	8001390 <HAL_DMA_Abort_IT+0xa0>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a20      	ldr	r2, [pc, #128]	; (80013c4 <HAL_DMA_Abort_IT+0xd4>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d022      	beq.n	800138c <HAL_DMA_Abort_IT+0x9c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a1f      	ldr	r2, [pc, #124]	; (80013c8 <HAL_DMA_Abort_IT+0xd8>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d01a      	beq.n	8001386 <HAL_DMA_Abort_IT+0x96>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_DMA_Abort_IT+0xdc>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d012      	beq.n	8001380 <HAL_DMA_Abort_IT+0x90>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <HAL_DMA_Abort_IT+0xe0>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d00a      	beq.n	800137a <HAL_DMA_Abort_IT+0x8a>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1a      	ldr	r2, [pc, #104]	; (80013d4 <HAL_DMA_Abort_IT+0xe4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d102      	bne.n	8001374 <HAL_DMA_Abort_IT+0x84>
 800136e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001372:	e00e      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 8001374:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001378:	e00b      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 800137a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800137e:	e008      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 8001380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001384:	e005      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 8001386:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138a:	e002      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 800138c:	2310      	movs	r3, #16
 800138e:	e000      	b.n	8001392 <HAL_DMA_Abort_IT+0xa2>
 8001390:	2301      	movs	r3, #1
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_DMA_Abort_IT+0xe8>)
 8001394:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	4798      	blx	r3
    } 
  }
  return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40020008 	.word	0x40020008
 80013c4:	4002001c 	.word	0x4002001c
 80013c8:	40020030 	.word	0x40020030
 80013cc:	40020044 	.word	0x40020044
 80013d0:	40020058 	.word	0x40020058
 80013d4:	4002006c 	.word	0x4002006c
 80013d8:	40020000 	.word	0x40020000

080013dc <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	; 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e169      	b.n	80016dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8158 	bne.w	80016d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a9a      	ldr	r2, [pc, #616]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d05e      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001430:	4a98      	ldr	r2, [pc, #608]	; (8001694 <HAL_GPIO_Init+0x2a0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d875      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001436:	4a98      	ldr	r2, [pc, #608]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d058      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 800143c:	4a96      	ldr	r2, [pc, #600]	; (8001698 <HAL_GPIO_Init+0x2a4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d86f      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001442:	4a96      	ldr	r2, [pc, #600]	; (800169c <HAL_GPIO_Init+0x2a8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d052      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001448:	4a94      	ldr	r2, [pc, #592]	; (800169c <HAL_GPIO_Init+0x2a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d869      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800144e:	4a94      	ldr	r2, [pc, #592]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04c      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001454:	4a92      	ldr	r2, [pc, #584]	; (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d863      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800145a:	4a92      	ldr	r2, [pc, #584]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d046      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001460:	4a90      	ldr	r2, [pc, #576]	; (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d85d      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001466:	2b12      	cmp	r3, #18
 8001468:	d82a      	bhi.n	80014c0 <HAL_GPIO_Init+0xcc>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d859      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800146e:	a201      	add	r2, pc, #4	; (adr r2, 8001474 <HAL_GPIO_Init+0x80>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014db 	.word	0x080014db
 8001480:	0800151d 	.word	0x0800151d
 8001484:	08001523 	.word	0x08001523
 8001488:	08001523 	.word	0x08001523
 800148c:	08001523 	.word	0x08001523
 8001490:	08001523 	.word	0x08001523
 8001494:	08001523 	.word	0x08001523
 8001498:	08001523 	.word	0x08001523
 800149c:	08001523 	.word	0x08001523
 80014a0:	08001523 	.word	0x08001523
 80014a4:	08001523 	.word	0x08001523
 80014a8:	08001523 	.word	0x08001523
 80014ac:	08001523 	.word	0x08001523
 80014b0:	08001523 	.word	0x08001523
 80014b4:	08001523 	.word	0x08001523
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	4a79      	ldr	r2, [pc, #484]	; (80016a8 <HAL_GPIO_Init+0x2b4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e029      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e024      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01f      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e01a      	b.n	8001524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e013      	b.n	8001524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break;
 800150e:	e009      	b.n	8001524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break;
 800151a:	e003      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x130>
          break;
 8001522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	; 0xff
 8001528:	d801      	bhi.n	800152e <HAL_GPIO_Init+0x13a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_Init+0x13e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	; 0xff
 8001538:	d802      	bhi.n	8001540 <HAL_GPIO_Init+0x14c>
 800153a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x152>
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	3b08      	subs	r3, #8
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	210f      	movs	r1, #15
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80b1 	beq.w	80016d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001574:	4b4d      	ldr	r3, [pc, #308]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a4c      	ldr	r2, [pc, #304]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b4a      	ldr	r3, [pc, #296]	; (80016ac <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	4a48      	ldr	r2, [pc, #288]	; (80016b0 <HAL_GPIO_Init+0x2bc>)
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a40      	ldr	r2, [pc, #256]	; (80016b4 <HAL_GPIO_Init+0x2c0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3f      	ldr	r2, [pc, #252]	; (80016b8 <HAL_GPIO_Init+0x2c4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3e      	ldr	r2, [pc, #248]	; (80016bc <HAL_GPIO_Init+0x2c8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3d      	ldr	r2, [pc, #244]	; (80016c0 <HAL_GPIO_Init+0x2cc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1e0>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015e0:	2300      	movs	r3, #0
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f2:	492f      	ldr	r1, [pc, #188]	; (80016b0 <HAL_GPIO_Init+0x2bc>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	492c      	ldr	r1, [pc, #176]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	600b      	str	r3, [r1, #0]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800161a:	4b2a      	ldr	r3, [pc, #168]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4928      	ldr	r1, [pc, #160]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001634:	4b23      	ldr	r3, [pc, #140]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001636:	685a      	ldr	r2, [r3, #4]
 8001638:	4922      	ldr	r1, [pc, #136]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001642:	4b20      	ldr	r3, [pc, #128]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	491e      	ldr	r1, [pc, #120]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800165e:	689a      	ldr	r2, [r3, #8]
 8001660:	4918      	ldr	r1, [pc, #96]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800166a:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4914      	ldr	r1, [pc, #80]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d021      	beq.n	80016c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001684:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	490e      	ldr	r1, [pc, #56]	; (80016c4 <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	60cb      	str	r3, [r1, #12]
 8001690:	e021      	b.n	80016d6 <HAL_GPIO_Init+0x2e2>
 8001692:	bf00      	nop
 8001694:	10320000 	.word	0x10320000
 8001698:	10310000 	.word	0x10310000
 800169c:	10220000 	.word	0x10220000
 80016a0:	10210000 	.word	0x10210000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	10110000 	.word	0x10110000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4909      	ldr	r1, [pc, #36]	; (80016f8 <HAL_GPIO_Init+0x304>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f ae8e 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	372c      	adds	r7, #44	; 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e12b      	b.n	8001996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff faa8 	bl	8000ca8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	; 0x24
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800177e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800178e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001790:	f002 fcce 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8001794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a81      	ldr	r2, [pc, #516]	; (80019a0 <HAL_I2C_Init+0x274>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d807      	bhi.n	80017b0 <HAL_I2C_Init+0x84>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a80      	ldr	r2, [pc, #512]	; (80019a4 <HAL_I2C_Init+0x278>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf94      	ite	ls
 80017a8:	2301      	movls	r3, #1
 80017aa:	2300      	movhi	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e006      	b.n	80017be <HAL_I2C_Init+0x92>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a7d      	ldr	r2, [pc, #500]	; (80019a8 <HAL_I2C_Init+0x27c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	bf94      	ite	ls
 80017b8:	2301      	movls	r3, #1
 80017ba:	2300      	movhi	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0e7      	b.n	8001996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a78      	ldr	r2, [pc, #480]	; (80019ac <HAL_I2C_Init+0x280>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	; (80019a0 <HAL_I2C_Init+0x274>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d802      	bhi.n	8001800 <HAL_I2C_Init+0xd4>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	e009      	b.n	8001814 <HAL_I2C_Init+0xe8>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4a69      	ldr	r2, [pc, #420]	; (80019b0 <HAL_I2C_Init+0x284>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	3301      	adds	r3, #1
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	495c      	ldr	r1, [pc, #368]	; (80019a0 <HAL_I2C_Init+0x274>)
 8001830:	428b      	cmp	r3, r1
 8001832:	d819      	bhi.n	8001868 <HAL_I2C_Init+0x13c>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e59      	subs	r1, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001848:	400b      	ands	r3, r1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_I2C_Init+0x138>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e59      	subs	r1, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fbb1 f3f3 	udiv	r3, r1, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001862:	e051      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 8001864:	2304      	movs	r3, #4
 8001866:	e04f      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d111      	bne.n	8001894 <HAL_I2C_Init+0x168>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	e012      	b.n	80018ba <HAL_I2C_Init+0x18e>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	0099      	lsls	r1, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Init+0x196>
 80018be:	2301      	movs	r3, #1
 80018c0:	e022      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10e      	bne.n	80018e8 <HAL_I2C_Init+0x1bc>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1e58      	subs	r0, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	440b      	add	r3, r1
 80018d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018e6:	e00f      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	0099      	lsls	r1, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6809      	ldr	r1, [r1, #0]
 800190c:	4313      	orrs	r3, r2
 800190e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6911      	ldr	r1, [r2, #16]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68d2      	ldr	r2, [r2, #12]
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	430b      	orrs	r3, r1
 800194a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	000186a0 	.word	0x000186a0
 80019a4:	001e847f 	.word	0x001e847f
 80019a8:	003d08ff 	.word	0x003d08ff
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	10624dd3 	.word	0x10624dd3

080019b4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	461a      	mov	r2, r3
 80019c0:	460b      	mov	r3, r1
 80019c2:	817b      	strh	r3, [r7, #10]
 80019c4:	4613      	mov	r3, r2
 80019c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fb40 	bl	800104c <HAL_GetTick>
 80019cc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	f040 80e0 	bne.w	8001b9c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2319      	movs	r3, #25
 80019e2:	2201      	movs	r2, #1
 80019e4:	4970      	ldr	r1, [pc, #448]	; (8001ba8 <HAL_I2C_Master_Transmit+0x1f4>)
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f001 fdfc 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019f2:	2302      	movs	r3, #2
 80019f4:	e0d3      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d101      	bne.n	8001a04 <HAL_I2C_Master_Transmit+0x50>
 8001a00:	2302      	movs	r3, #2
 8001a02:	e0cc      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d007      	beq.n	8001a2a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f042 0201 	orr.w	r2, r2, #1
 8001a28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a38:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2221      	movs	r2, #33	; 0x21
 8001a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2210      	movs	r2, #16
 8001a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	893a      	ldrh	r2, [r7, #8]
 8001a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4a50      	ldr	r2, [pc, #320]	; (8001bac <HAL_I2C_Master_Transmit+0x1f8>)
 8001a6a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a6c:	8979      	ldrh	r1, [r7, #10]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	6a3a      	ldr	r2, [r7, #32]
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f001 fc8c 	bl	8003390 <I2C_MasterRequestWrite>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e08d      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	695b      	ldr	r3, [r3, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	613b      	str	r3, [r7, #16]
 8001a96:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a98:	e066      	b.n	8001b68 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	6a39      	ldr	r1, [r7, #32]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f001 fe76 	bl	8003790 <I2C_WaitOnTXEFlagUntilTimeout>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00d      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	d107      	bne.n	8001ac2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ac0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e06b      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aca:	781a      	ldrb	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aee:	3b01      	subs	r3, #1
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d11b      	bne.n	8001b3c <HAL_I2C_Master_Transmit+0x188>
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d017      	beq.n	8001b3c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b10:	781a      	ldrb	r2, [r3, #0]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1c:	1c5a      	adds	r2, r3, #1
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	3b01      	subs	r3, #1
 8001b36:	b29a      	uxth	r2, r3
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6a39      	ldr	r1, [r7, #32]
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f001 fe66 	bl	8003812 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b62:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e01a      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d194      	bne.n	8001a9a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	e000      	b.n	8001b9e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
  }
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	00100002 	.word	0x00100002
 8001bac:	ffff0000 	.word	0xffff0000

08001bb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08a      	sub	sp, #40	; 0x28
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001bc0:	f7ff fa44 	bl	800104c <HAL_GetTick>
 8001bc4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b20      	cmp	r3, #32
 8001bd4:	f040 8111 	bne.w	8001dfa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	9300      	str	r3, [sp, #0]
 8001bdc:	2319      	movs	r3, #25
 8001bde:	2201      	movs	r2, #1
 8001be0:	4988      	ldr	r1, [pc, #544]	; (8001e04 <HAL_I2C_IsDeviceReady+0x254>)
 8001be2:	68f8      	ldr	r0, [r7, #12]
 8001be4:	f001 fcfe 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	e104      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_I2C_IsDeviceReady+0x50>
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	e0fd      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d007      	beq.n	8001c26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f042 0201 	orr.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2224      	movs	r2, #36	; 0x24
 8001c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4a70      	ldr	r2, [pc, #448]	; (8001e08 <HAL_I2C_IsDeviceReady+0x258>)
 8001c48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f001 fcbc 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00d      	beq.n	8001c8e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c80:	d103      	bne.n	8001c8a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0b6      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001c9c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f9d5 	bl	800104c <HAL_GetTick>
 8001ca2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	bf0c      	ite	eq
 8001cb2:	2301      	moveq	r3, #1
 8001cb4:	2300      	movne	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc8:	bf0c      	ite	eq
 8001cca:	2301      	moveq	r3, #1
 8001ccc:	2300      	movne	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001cd2:	e025      	b.n	8001d20 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001cd4:	f7ff f9ba 	bl	800104c <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	683a      	ldr	r2, [r7, #0]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d302      	bcc.n	8001cea <HAL_I2C_IsDeviceReady+0x13a>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d103      	bne.n	8001cf2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	22a0      	movs	r2, #160	; 0xa0
 8001cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695b      	ldr	r3, [r3, #20]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2ba0      	cmp	r3, #160	; 0xa0
 8001d2a:	d005      	beq.n	8001d38 <HAL_I2C_IsDeviceReady+0x188>
 8001d2c:	7dfb      	ldrb	r3, [r7, #23]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_I2C_IsDeviceReady+0x188>
 8001d32:	7dbb      	ldrb	r3, [r7, #22]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0cd      	beq.n	8001cd4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d129      	bne.n	8001da2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2319      	movs	r3, #25
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4921      	ldr	r1, [pc, #132]	; (8001e04 <HAL_I2C_IsDeviceReady+0x254>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f001 fc30 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e036      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	e02c      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001db0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001dba:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	490f      	ldr	r1, [pc, #60]	; (8001e04 <HAL_I2C_IsDeviceReady+0x254>)
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f001 fc0c 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e012      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	f4ff af32 	bcc.w	8001c4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3720      	adds	r7, #32
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	00100002 	.word	0x00100002
 8001e08:	ffff0000 	.word	0xffff0000

08001e0c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e24:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e2c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e34:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d003      	beq.n	8001e44 <HAL_I2C_EV_IRQHandler+0x38>
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b40      	cmp	r3, #64	; 0x40
 8001e40:	f040 80c1 	bne.w	8001fc6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_I2C_EV_IRQHandler+0x6e>
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001e64:	d003      	beq.n	8001e6e <HAL_I2C_EV_IRQHandler+0x62>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001e6c:	d101      	bne.n	8001e72 <HAL_I2C_EV_IRQHandler+0x66>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <HAL_I2C_EV_IRQHandler+0x68>
 8001e72:	2300      	movs	r3, #0
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	f000 8132 	beq.w	80020de <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d00c      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0x92>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	0a5b      	lsrs	r3, r3, #9
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d006      	beq.n	8001e9e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fd5f 	bl	8003954 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fcc8 	bl	800282c <I2C_Master_SB>
 8001e9c:	e092      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	08db      	lsrs	r3, r3, #3
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d009      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0xb2>
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	0a5b      	lsrs	r3, r3, #9
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fd3d 	bl	8002936 <I2C_Master_ADD10>
 8001ebc:	e082      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	085b      	lsrs	r3, r3, #1
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0xd2>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	0a5b      	lsrs	r3, r3, #9
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 fd56 	bl	8002988 <I2C_Master_ADDR>
 8001edc:	e072      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d03b      	beq.n	8001f62 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ef4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ef8:	f000 80f3 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	09db      	lsrs	r3, r3, #7
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00f      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	0a9b      	lsrs	r3, r3, #10
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d009      	beq.n	8001f28 <HAL_I2C_EV_IRQHandler+0x11c>
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d103      	bne.n	8001f28 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f942 	bl	80021aa <I2C_MasterTransmit_TXE>
 8001f26:	e04d      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	089b      	lsrs	r3, r3, #2
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80d6 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	0a5b      	lsrs	r3, r3, #9
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f000 80cf 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001f44:	7bbb      	ldrb	r3, [r7, #14]
 8001f46:	2b21      	cmp	r3, #33	; 0x21
 8001f48:	d103      	bne.n	8001f52 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f9c9 	bl	80022e2 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f50:	e0c7      	b.n	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	2b40      	cmp	r3, #64	; 0x40
 8001f56:	f040 80c4 	bne.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fa37 	bl	80023ce <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f60:	e0bf      	b.n	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f70:	f000 80b7 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	099b      	lsrs	r3, r3, #6
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00f      	beq.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x194>
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x194>
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d103      	bne.n	8001fa0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 faac 	bl	80024f6 <I2C_MasterReceive_RXNE>
 8001f9e:	e011      	b.n	8001fc4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	089b      	lsrs	r3, r3, #2
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 809a 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	0a5b      	lsrs	r3, r3, #9
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8093 	beq.w	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 fb4b 	bl	8002658 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc2:	e08e      	b.n	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001fc4:	e08d      	b.n	80020e2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	61fb      	str	r3, [r7, #28]
 8001fd6:	e007      	b.n	8001fe8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	085b      	lsrs	r3, r3, #1
 8001fec:	f003 0301 	and.w	r3, r3, #1
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d012      	beq.n	800201a <HAL_I2C_EV_IRQHandler+0x20e>
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	0a5b      	lsrs	r3, r3, #9
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00c      	beq.n	800201a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002010:	69b9      	ldr	r1, [r7, #24]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 ff0f 	bl	8002e36 <I2C_Slave_ADDR>
 8002018:	e066      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	2b00      	cmp	r3, #0
 8002024:	d009      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x22e>
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	0a5b      	lsrs	r3, r3, #9
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 ff4a 	bl	8002ecc <I2C_Slave_STOPF>
 8002038:	e056      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800203a:	7bbb      	ldrb	r3, [r7, #14]
 800203c:	2b21      	cmp	r3, #33	; 0x21
 800203e:	d002      	beq.n	8002046 <HAL_I2C_EV_IRQHandler+0x23a>
 8002040:	7bbb      	ldrb	r3, [r7, #14]
 8002042:	2b29      	cmp	r3, #41	; 0x29
 8002044:	d125      	bne.n	8002092 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	09db      	lsrs	r3, r3, #7
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00f      	beq.n	8002072 <HAL_I2C_EV_IRQHandler+0x266>
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	0a9b      	lsrs	r3, r3, #10
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_I2C_EV_IRQHandler+0x266>
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	089b      	lsrs	r3, r3, #2
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fe27 	bl	8002cbe <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002070:	e039      	b.n	80020e6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b00      	cmp	r3, #0
 800207c:	d033      	beq.n	80020e6 <HAL_I2C_EV_IRQHandler+0x2da>
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	0a5b      	lsrs	r3, r3, #9
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d02d      	beq.n	80020e6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fe54 	bl	8002d38 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002090:	e029      	b.n	80020e6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	099b      	lsrs	r3, r3, #6
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00f      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x2b2>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	0a9b      	lsrs	r3, r3, #10
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d009      	beq.n	80020be <HAL_I2C_EV_IRQHandler+0x2b2>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d103      	bne.n	80020be <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fe5e 	bl	8002d78 <I2C_SlaveReceive_RXNE>
 80020bc:	e014      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	089b      	lsrs	r3, r3, #2
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00e      	beq.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	0a5b      	lsrs	r3, r3, #9
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d008      	beq.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 fe8c 	bl	8002df4 <I2C_SlaveReceive_BTF>
 80020dc:	e004      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80020de:	bf00      	nop
 80020e0:	e002      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020e2:	bf00      	nop
 80020e4:	e000      	b.n	80020e8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80020e6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80020e8:	3720      	adds	r7, #32
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002112:	b480      	push	{r7}
 8002114:	b083      	sub	sp, #12
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800211a:	bf00      	nop
 800211c:	370c      	adds	r7, #12
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr

08002124 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800212c:	bf00      	nop
 800212e:	370c      	adds	r7, #12
 8002130:	46bd      	mov	sp, r7
 8002132:	bc80      	pop	{r7}
 8002134:	4770      	bx	lr

08002136 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	460b      	mov	r3, r1
 8002140:	70fb      	strb	r3, [r7, #3]
 8002142:	4613      	mov	r3, r2
 8002144:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr

08002198 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr

080021aa <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021c0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d150      	bne.n	8002272 <I2C_MasterTransmit_TXE+0xc8>
 80021d0:	7bfb      	ldrb	r3, [r7, #15]
 80021d2:	2b21      	cmp	r3, #33	; 0x21
 80021d4:	d14d      	bne.n	8002272 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d01d      	beq.n	8002218 <I2C_MasterTransmit_TXE+0x6e>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d01a      	beq.n	8002218 <I2C_MasterTransmit_TXE+0x6e>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e8:	d016      	beq.n	8002218 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80021f8:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2211      	movs	r2, #17
 80021fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff ff6c 	bl	80020ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002216:	e060      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002226:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002236:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2220      	movs	r2, #32
 8002242:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d107      	bne.n	8002262 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f7ff ff81 	bl	8002162 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002260:	e03b      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800226a:	6878      	ldr	r0, [r7, #4]
 800226c:	f7ff ff3f 	bl	80020ee <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002270:	e033      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	2b21      	cmp	r3, #33	; 0x21
 8002276:	d005      	beq.n	8002284 <I2C_MasterTransmit_TXE+0xda>
 8002278:	7bbb      	ldrb	r3, [r7, #14]
 800227a:	2b40      	cmp	r3, #64	; 0x40
 800227c:	d12d      	bne.n	80022da <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800227e:	7bfb      	ldrb	r3, [r7, #15]
 8002280:	2b22      	cmp	r3, #34	; 0x22
 8002282:	d12a      	bne.n	80022da <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800229c:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800229e:	e01c      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b40      	cmp	r3, #64	; 0x40
 80022aa:	d103      	bne.n	80022b4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f000 f88e 	bl	80023ce <I2C_MemoryTransmit_TXE_BTF>
}
 80022b2:	e012      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	781a      	ldrb	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80022d8:	e7ff      	b.n	80022da <I2C_MasterTransmit_TXE+0x130>
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ee:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	2b21      	cmp	r3, #33	; 0x21
 80022fa:	d164      	bne.n	80023c6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d012      	beq.n	800232c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	781a      	ldrb	r2, [r3, #0]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	3b01      	subs	r3, #1
 8002324:	b29a      	uxth	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800232a:	e04c      	b.n	80023c6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2b08      	cmp	r3, #8
 8002330:	d01d      	beq.n	800236e <I2C_MasterTransmit_BTF+0x8c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2b20      	cmp	r3, #32
 8002336:	d01a      	beq.n	800236e <I2C_MasterTransmit_BTF+0x8c>
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800233e:	d016      	beq.n	800236e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800234e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2211      	movs	r2, #17
 8002354:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2220      	movs	r2, #32
 8002362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7ff fec1 	bl	80020ee <HAL_I2C_MasterTxCpltCallback>
}
 800236c:	e02b      	b.n	80023c6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800237c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238c:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b40      	cmp	r3, #64	; 0x40
 80023a6:	d107      	bne.n	80023b8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff fed6 	bl	8002162 <HAL_I2C_MemTxCpltCallback>
}
 80023b6:	e006      	b.n	80023c6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fe94 	bl	80020ee <HAL_I2C_MasterTxCpltCallback>
}
 80023c6:	bf00      	nop
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d11d      	bne.n	8002422 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d10b      	bne.n	8002406 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023fe:	1c9a      	adds	r2, r3, #2
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8002404:	e073      	b.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800240a:	b29b      	uxth	r3, r3
 800240c:	121b      	asrs	r3, r3, #8
 800240e:	b2da      	uxtb	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002420:	e065      	b.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002426:	2b01      	cmp	r3, #1
 8002428:	d10b      	bne.n	8002442 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800242e:	b2da      	uxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	1c5a      	adds	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002440:	e055      	b.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002446:	2b02      	cmp	r3, #2
 8002448:	d151      	bne.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b22      	cmp	r3, #34	; 0x22
 800244e:	d10d      	bne.n	800246c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800245e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	651a      	str	r2, [r3, #80]	; 0x50
}
 800246a:	e040      	b.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b21      	cmp	r3, #33	; 0x21
 800247a:	d112      	bne.n	80024a2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024a0:	e025      	b.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d120      	bne.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
 80024ac:	7bfb      	ldrb	r3, [r7, #15]
 80024ae:	2b21      	cmp	r3, #33	; 0x21
 80024b0:	d11d      	bne.n	80024ee <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024c0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f7ff fe3a 	bl	8002162 <HAL_I2C_MemTxCpltCallback>
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b22      	cmp	r3, #34	; 0x22
 8002508:	f040 80a2 	bne.w	8002650 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d921      	bls.n	800255e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252c:	1c5a      	adds	r2, r3, #1
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b03      	cmp	r3, #3
 8002548:	f040 8082 	bne.w	8002650 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	685a      	ldr	r2, [r3, #4]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800255a:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800255c:	e078      	b.n	8002650 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	2b02      	cmp	r3, #2
 8002564:	d074      	beq.n	8002650 <I2C_MasterReceive_RXNE+0x15a>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d002      	beq.n	8002572 <I2C_MasterReceive_RXNE+0x7c>
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d16e      	bne.n	8002650 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f001 f98e 	bl	8003894 <I2C_WaitOnSTOPRequestThroughIT>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d142      	bne.n	8002604 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800258c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685a      	ldr	r2, [r3, #4]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800259c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	691a      	ldr	r2, [r3, #16]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	1c5a      	adds	r2, r3, #1
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29a      	uxth	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2220      	movs	r2, #32
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d10a      	bne.n	80025ee <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fdc4 	bl	8002174 <HAL_I2C_MemRxCpltCallback>
}
 80025ec:	e030      	b.n	8002650 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2212      	movs	r2, #18
 80025fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff fd7f 	bl	8002100 <HAL_I2C_MasterRxCpltCallback>
}
 8002602:	e025      	b.n	8002650 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685a      	ldr	r2, [r3, #4]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002612:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691a      	ldr	r2, [r3, #16]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff fd9b 	bl	8002186 <HAL_I2C_ErrorCallback>
}
 8002650:	bf00      	nop
 8002652:	3710      	adds	r7, #16
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800266a:	b29b      	uxth	r3, r3
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800267e:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80026a6:	e0bd      	b.n	8002824 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d129      	bne.n	8002706 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026c0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d00a      	beq.n	80026de <I2C_MasterReceive_BTF+0x86>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d007      	beq.n	80026de <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691a      	ldr	r2, [r3, #16]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	b2d2      	uxtb	r2, r2
 80026ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	3b01      	subs	r3, #1
 80026fe:	b29a      	uxth	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002704:	e08e      	b.n	8002824 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d176      	bne.n	80027fe <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d002      	beq.n	800271c <I2C_MasterReceive_BTF+0xc4>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b10      	cmp	r3, #16
 800271a:	d108      	bne.n	800272e <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e019      	b.n	8002762 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d002      	beq.n	800273a <I2C_MasterReceive_BTF+0xe2>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b02      	cmp	r3, #2
 8002738:	d108      	bne.n	800274c <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e00a      	b.n	8002762 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2b10      	cmp	r3, #16
 8002750:	d007      	beq.n	8002762 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002760:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	b2d2      	uxtb	r2, r2
 800276e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800277e:	b29b      	uxth	r3, r3
 8002780:	3b01      	subs	r3, #1
 8002782:	b29a      	uxth	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279a:	1c5a      	adds	r2, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685a      	ldr	r2, [r3, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027bc:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	2b40      	cmp	r3, #64	; 0x40
 80027d0:	d10a      	bne.n	80027e8 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fcc7 	bl	8002174 <HAL_I2C_MemRxCpltCallback>
}
 80027e6:	e01d      	b.n	8002824 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2212      	movs	r2, #18
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fc82 	bl	8002100 <HAL_I2C_MasterRxCpltCallback>
}
 80027fc:	e012      	b.n	8002824 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281a:	b29b      	uxth	r3, r3
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800283a:	b2db      	uxtb	r3, r3
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d117      	bne.n	8002870 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002844:	2b00      	cmp	r3, #0
 8002846:	d109      	bne.n	800285c <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	b2db      	uxtb	r3, r3
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002858:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800285a:	e067      	b.n	800292c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	b2da      	uxtb	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	611a      	str	r2, [r3, #16]
}
 800286e:	e05d      	b.n	800292c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002878:	d133      	bne.n	80028e2 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b21      	cmp	r3, #33	; 0x21
 8002884:	d109      	bne.n	800289a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	b2db      	uxtb	r3, r3
 800288c:	461a      	mov	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002896:	611a      	str	r2, [r3, #16]
 8002898:	e008      	b.n	80028ac <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d004      	beq.n	80028be <I2C_Master_SB+0x92>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d032      	beq.n	800292c <I2C_Master_SB+0x100>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d02d      	beq.n	800292c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028de:	605a      	str	r2, [r3, #4]
}
 80028e0:	e024      	b.n	800292c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	11db      	asrs	r3, r3, #7
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 0306 	and.w	r3, r3, #6
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	f063 030f 	orn	r3, r3, #15
 80028fe:	b2da      	uxtb	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	611a      	str	r2, [r3, #16]
}
 8002906:	e011      	b.n	800292c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800290c:	2b01      	cmp	r3, #1
 800290e:	d10d      	bne.n	800292c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002914:	b29b      	uxth	r3, r3
 8002916:	11db      	asrs	r3, r3, #7
 8002918:	b2db      	uxtb	r3, r3
 800291a:	f003 0306 	and.w	r3, r3, #6
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f063 030e 	orn	r3, r3, #14
 8002924:	b2da      	uxtb	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	611a      	str	r2, [r3, #16]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr

08002936 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002942:	b2da      	uxtb	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <I2C_Master_ADD10+0x26>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d108      	bne.n	800296e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <I2C_Master_ADD10+0x48>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	685a      	ldr	r2, [r3, #4]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800297c:	605a      	str	r2, [r3, #4]
  }
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002988:	b480      	push	{r7}
 800298a:	b091      	sub	sp, #68	; 0x44
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b22      	cmp	r3, #34	; 0x22
 80029b0:	f040 8174 	bne.w	8002c9c <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <I2C_Master_ADDR+0x54>
 80029bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d10b      	bne.n	80029dc <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c4:	2300      	movs	r3, #0
 80029c6:	633b      	str	r3, [r7, #48]	; 0x30
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	633b      	str	r3, [r7, #48]	; 0x30
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	633b      	str	r3, [r7, #48]	; 0x30
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	e16b      	b.n	8002cb4 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d11d      	bne.n	8002a20 <I2C_Master_ADDR+0x98>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80029ec:	d118      	bne.n	8002a20 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a12:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	1c5a      	adds	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	651a      	str	r2, [r3, #80]	; 0x50
 8002a1e:	e149      	b.n	8002cb4 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d113      	bne.n	8002a52 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	695b      	ldr	r3, [r3, #20]
 8002a34:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e120      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	f040 808a 	bne.w	8002b72 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a64:	d137      	bne.n	8002ad6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a84:	d113      	bne.n	8002aae <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a94:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	e0f2      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	623b      	str	r3, [r7, #32]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	623b      	str	r3, [r7, #32]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	623b      	str	r3, [r7, #32]
 8002ac2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e0de      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d02e      	beq.n	8002b3a <I2C_Master_ADDR+0x1b2>
 8002adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	d02b      	beq.n	8002b3a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ae4:	2b12      	cmp	r3, #18
 8002ae6:	d102      	bne.n	8002aee <I2C_Master_ADDR+0x166>
 8002ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d125      	bne.n	8002b3a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	d00e      	beq.n	8002b12 <I2C_Master_ADDR+0x18a>
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d00b      	beq.n	8002b12 <I2C_Master_ADDR+0x18a>
 8002afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afc:	2b10      	cmp	r3, #16
 8002afe:	d008      	beq.n	8002b12 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e007      	b.n	8002b22 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b20:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	61fb      	str	r3, [r7, #28]
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	e0ac      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b48:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e090      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d158      	bne.n	8002c2e <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d021      	beq.n	8002bc6 <I2C_Master_ADDR+0x23e>
 8002b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d01e      	beq.n	8002bc6 <I2C_Master_ADDR+0x23e>
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	2b10      	cmp	r3, #16
 8002b8c:	d01b      	beq.n	8002bc6 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	699b      	ldr	r3, [r3, #24]
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	e012      	b.n	8002bec <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfa:	d14b      	bne.n	8002c94 <I2C_Master_ADDR+0x30c>
 8002bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c02:	d00b      	beq.n	8002c1c <I2C_Master_ADDR+0x294>
 8002c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d008      	beq.n	8002c1c <I2C_Master_ADDR+0x294>
 8002c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d005      	beq.n	8002c1c <I2C_Master_ADDR+0x294>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d002      	beq.n	8002c1c <I2C_Master_ADDR+0x294>
 8002c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c18:	2b20      	cmp	r3, #32
 8002c1a:	d13b      	bne.n	8002c94 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685a      	ldr	r2, [r3, #4]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c2a:	605a      	str	r2, [r3, #4]
 8002c2c:	e032      	b.n	8002c94 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c4c:	d117      	bne.n	8002c7e <I2C_Master_ADDR+0x2f6>
 8002c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c50:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c54:	d00b      	beq.n	8002c6e <I2C_Master_ADDR+0x2e6>
 8002c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d008      	beq.n	8002c6e <I2C_Master_ADDR+0x2e6>
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d005      	beq.n	8002c6e <I2C_Master_ADDR+0x2e6>
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	2b10      	cmp	r3, #16
 8002c66:	d002      	beq.n	8002c6e <I2C_Master_ADDR+0x2e6>
 8002c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	d107      	bne.n	8002c7e <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002c7c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	60fb      	str	r3, [r7, #12]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	60fb      	str	r3, [r7, #12]
 8002c92:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002c9a:	e00b      	b.n	8002cb4 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	60bb      	str	r3, [r7, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
}
 8002cb2:	e7ff      	b.n	8002cb4 <I2C_Master_ADDR+0x32c>
 8002cb4:	bf00      	nop
 8002cb6:	3744      	adds	r7, #68	; 0x44
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ccc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02b      	beq.n	8002d30 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	781a      	ldrb	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d114      	bne.n	8002d30 <I2C_SlaveTransmit_TXE+0x72>
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
 8002d08:	2b29      	cmp	r3, #41	; 0x29
 8002d0a:	d111      	bne.n	8002d30 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d1a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2221      	movs	r2, #33	; 0x21
 8002d20:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2228      	movs	r2, #40	; 0x28
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff f9f1 	bl	8002112 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002d30:	bf00      	nop
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d011      	beq.n	8002d6e <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	781a      	ldrb	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	1c5a      	adds	r2, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	3b01      	subs	r3, #1
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr

08002d78 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d02c      	beq.n	8002dec <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	1c5a      	adds	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	3b01      	subs	r3, #1
 8002db2:	b29a      	uxth	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d114      	bne.n	8002dec <I2C_SlaveReceive_RXNE+0x74>
 8002dc2:	7bfb      	ldrb	r3, [r7, #15]
 8002dc4:	2b2a      	cmp	r3, #42	; 0x2a
 8002dc6:	d111      	bne.n	8002dec <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2222      	movs	r2, #34	; 0x22
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2228      	movs	r2, #40	; 0x28
 8002de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff f99c 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002dec:	bf00      	nop
 8002dee:	3710      	adds	r7, #16
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d012      	beq.n	8002e2c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	3b01      	subs	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bc80      	pop	{r7}
 8002e34:	4770      	bx	lr

08002e36 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002e36:	b580      	push	{r7, lr}
 8002e38:	b084      	sub	sp, #16
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
 8002e3e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002e40:	2300      	movs	r3, #0
 8002e42:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e50:	2b28      	cmp	r3, #40	; 0x28
 8002e52:	d127      	bne.n	8002ea4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002e70:	2301      	movs	r3, #1
 8002e72:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	09db      	lsrs	r3, r3, #7
 8002e78:	f003 0301 	and.w	r3, r3, #1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d103      	bne.n	8002e88 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	81bb      	strh	r3, [r7, #12]
 8002e86:	e002      	b.n	8002e8e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002e96:	89ba      	ldrh	r2, [r7, #12]
 8002e98:	7bfb      	ldrb	r3, [r7, #15]
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff f94a 	bl	8002136 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ea2:	e00e      	b.n	8002ec2 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60bb      	str	r3, [r7, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	60bb      	str	r3, [r7, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eda:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002eea:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f18:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f28:	d172      	bne.n	8003010 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	2b22      	cmp	r3, #34	; 0x22
 8002f2e:	d002      	beq.n	8002f36 <I2C_Slave_STOPF+0x6a>
 8002f30:	7bfb      	ldrb	r3, [r7, #15]
 8002f32:	2b2a      	cmp	r3, #42	; 0x2a
 8002f34:	d135      	bne.n	8002fa2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d005      	beq.n	8002f5a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0204 	orr.w	r2, r3, #4
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f68:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fe fa34 	bl	80013dc <HAL_DMA_GetState>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d049      	beq.n	800300e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	4a69      	ldr	r2, [pc, #420]	; (8003124 <I2C_Slave_STOPF+0x258>)
 8002f80:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fe f9b2 	bl	80012f0 <HAL_DMA_Abort_IT>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d03d      	beq.n	800300e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f9c:	4610      	mov	r0, r2
 8002f9e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fa0:	e035      	b.n	800300e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fd4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe f9fe 	bl	80013dc <HAL_DMA_GetState>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d014      	beq.n	8003010 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	4a4e      	ldr	r2, [pc, #312]	; (8003124 <I2C_Slave_STOPF+0x258>)
 8002fec:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f7fe f97c 	bl	80012f0 <HAL_DMA_Abort_IT>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d008      	beq.n	8003010 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	687a      	ldr	r2, [r7, #4]
 8003006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003008:	4610      	mov	r0, r2
 800300a:	4798      	blx	r3
 800300c:	e000      	b.n	8003010 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800300e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d03e      	beq.n	8003098 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b04      	cmp	r3, #4
 8003026:	d112      	bne.n	800304e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	691a      	ldr	r2, [r3, #16]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	b2d2      	uxtb	r2, r2
 8003034:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d112      	bne.n	8003082 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	691a      	ldr	r2, [r3, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003078:	b29b      	uxth	r3, r3
 800307a:	3b01      	subs	r3, #1
 800307c:	b29a      	uxth	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f843 	bl	800312c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80030a6:	e039      	b.n	800311c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
 80030aa:	2b2a      	cmp	r3, #42	; 0x2a
 80030ac:	d109      	bne.n	80030c2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2228      	movs	r2, #40	; 0x28
 80030b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff f831 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b28      	cmp	r3, #40	; 0x28
 80030cc:	d111      	bne.n	80030f2 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a15      	ldr	r2, [pc, #84]	; (8003128 <I2C_Slave_STOPF+0x25c>)
 80030d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2200      	movs	r2, #0
 80030d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2220      	movs	r2, #32
 80030de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff f830 	bl	8002150 <HAL_I2C_ListenCpltCallback>
}
 80030f0:	e014      	b.n	800311c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	2b22      	cmp	r3, #34	; 0x22
 80030f8:	d002      	beq.n	8003100 <I2C_Slave_STOPF+0x234>
 80030fa:	7bfb      	ldrb	r3, [r7, #15]
 80030fc:	2b22      	cmp	r3, #34	; 0x22
 80030fe:	d10d      	bne.n	800311c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7ff f804 	bl	8002124 <HAL_I2C_SlaveRxCpltCallback>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	08003495 	.word	0x08003495
 8003128:	ffff0000 	.word	0xffff0000

0800312c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003142:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003144:	7bbb      	ldrb	r3, [r7, #14]
 8003146:	2b10      	cmp	r3, #16
 8003148:	d002      	beq.n	8003150 <I2C_ITError+0x24>
 800314a:	7bbb      	ldrb	r3, [r7, #14]
 800314c:	2b40      	cmp	r3, #64	; 0x40
 800314e:	d10a      	bne.n	8003166 <I2C_ITError+0x3a>
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b22      	cmp	r3, #34	; 0x22
 8003154:	d107      	bne.n	8003166 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003164:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800316c:	2b28      	cmp	r3, #40	; 0x28
 800316e:	d107      	bne.n	8003180 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2228      	movs	r2, #40	; 0x28
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800317e:	e015      	b.n	80031ac <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800318e:	d00a      	beq.n	80031a6 <I2C_ITError+0x7a>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b60      	cmp	r3, #96	; 0x60
 8003194:	d007      	beq.n	80031a6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ba:	d161      	bne.n	8003280 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ca:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d020      	beq.n	800321a <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4a6a      	ldr	r2, [pc, #424]	; (8003388 <I2C_ITError+0x25c>)
 80031de:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fe f883 	bl	80012f0 <HAL_DMA_Abort_IT>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 8089 	beq.w	8003304 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 0201 	bic.w	r2, r2, #1
 8003200:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2220      	movs	r2, #32
 8003206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003214:	4610      	mov	r0, r2
 8003216:	4798      	blx	r3
 8003218:	e074      	b.n	8003304 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800321e:	4a5a      	ldr	r2, [pc, #360]	; (8003388 <I2C_ITError+0x25c>)
 8003220:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe f862 	bl	80012f0 <HAL_DMA_Abort_IT>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d068      	beq.n	8003304 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d10b      	bne.n	8003258 <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f022 0201 	bic.w	r2, r2, #1
 8003266:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800327a:	4610      	mov	r0, r2
 800327c:	4798      	blx	r3
 800327e:	e041      	b.n	8003304 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b60      	cmp	r3, #96	; 0x60
 800328a:	d125      	bne.n	80032d8 <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d10b      	bne.n	80032c0 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7fe ff61 	bl	8002198 <HAL_I2C_AbortCpltCallback>
 80032d6:	e015      	b.n	8003304 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e2:	2b40      	cmp	r3, #64	; 0x40
 80032e4:	d10b      	bne.n	80032fe <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe ff41 	bl	8002186 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003308:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10e      	bne.n	8003332 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800332e:	2b00      	cmp	r3, #0
 8003330:	d007      	beq.n	8003342 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003340:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003348:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b04      	cmp	r3, #4
 8003354:	d113      	bne.n	800337e <I2C_ITError+0x252>
 8003356:	7bfb      	ldrb	r3, [r7, #15]
 8003358:	2b28      	cmp	r3, #40	; 0x28
 800335a:	d110      	bne.n	800337e <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a0b      	ldr	r2, [pc, #44]	; (800338c <I2C_ITError+0x260>)
 8003360:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7fe fee9 	bl	8002150 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	08003495 	.word	0x08003495
 800338c:	ffff0000 	.word	0xffff0000

08003390 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af02      	add	r7, sp, #8
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	607a      	str	r2, [r7, #4]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	460b      	mov	r3, r1
 800339e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d006      	beq.n	80033ba <I2C_MasterRequestWrite+0x2a>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d003      	beq.n	80033ba <I2C_MasterRequestWrite+0x2a>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033b8:	d108      	bne.n	80033cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]
 80033ca:	e00b      	b.n	80033e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	2b12      	cmp	r3, #18
 80033d2:	d107      	bne.n	80033e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 f8f7 	bl	80035e4 <I2C_WaitOnFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800340a:	d103      	bne.n	8003414 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003412:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e035      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003420:	d108      	bne.n	8003434 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003422:	897b      	ldrh	r3, [r7, #10]
 8003424:	b2db      	uxtb	r3, r3
 8003426:	461a      	mov	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003430:	611a      	str	r2, [r3, #16]
 8003432:	e01b      	b.n	800346c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003434:	897b      	ldrh	r3, [r7, #10]
 8003436:	11db      	asrs	r3, r3, #7
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0306 	and.w	r3, r3, #6
 800343e:	b2db      	uxtb	r3, r3
 8003440:	f063 030f 	orn	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	490e      	ldr	r1, [pc, #56]	; (800348c <I2C_MasterRequestWrite+0xfc>)
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 f91d 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003458:	4603      	mov	r3, r0
 800345a:	2b00      	cmp	r3, #0
 800345c:	d001      	beq.n	8003462 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e010      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003462:	897b      	ldrh	r3, [r7, #10]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	4907      	ldr	r1, [pc, #28]	; (8003490 <I2C_MasterRequestWrite+0x100>)
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f90d 	bl	8003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	00010008 	.word	0x00010008
 8003490:	00010002 	.word	0x00010002

08003494 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80034ae:	4b4b      	ldr	r3, [pc, #300]	; (80035dc <I2C_DMAAbort+0x148>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	08db      	lsrs	r3, r3, #3
 80034b4:	4a4a      	ldr	r2, [pc, #296]	; (80035e0 <I2C_DMAAbort+0x14c>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	0a1a      	lsrs	r2, r3, #8
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00da      	lsls	r2, r3, #3
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d2:	f043 0220 	orr.w	r2, r3, #32
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034da:	e00a      	b.n	80034f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	3b01      	subs	r3, #1
 80034e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034f0:	d0ea      	beq.n	80034c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fe:	2200      	movs	r2, #0
 8003500:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	2200      	movs	r2, #0
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003520:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003534:	2200      	movs	r2, #0
 8003536:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003544:	2200      	movs	r2, #0
 8003546:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b60      	cmp	r3, #96	; 0x60
 8003562:	d10e      	bne.n	8003582 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	2220      	movs	r2, #32
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	2200      	movs	r2, #0
 8003578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800357a:	6978      	ldr	r0, [r7, #20]
 800357c:	f7fe fe0c 	bl	8002198 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003580:	e027      	b.n	80035d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003582:	7cfb      	ldrb	r3, [r7, #19]
 8003584:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003588:	2b28      	cmp	r3, #40	; 0x28
 800358a:	d117      	bne.n	80035bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2228      	movs	r2, #40	; 0x28
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80035ba:	e007      	b.n	80035cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035cc:	6978      	ldr	r0, [r7, #20]
 80035ce:	f7fe fdda 	bl	8002186 <HAL_I2C_ErrorCallback>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	2000001c 	.word	0x2000001c
 80035e0:	14f8b589 	.word	0x14f8b589

080035e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	4613      	mov	r3, r2
 80035f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	e025      	b.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035fc:	d021      	beq.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fd fd25 	bl	800104c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d116      	bne.n	8003642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e023      	b.n	800368a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	0c1b      	lsrs	r3, r3, #16
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b01      	cmp	r3, #1
 800364a:	d10d      	bne.n	8003668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	43da      	mvns	r2, r3
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	4013      	ands	r3, r2
 8003658:	b29b      	uxth	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	bf0c      	ite	eq
 800365e:	2301      	moveq	r3, #1
 8003660:	2300      	movne	r3, #0
 8003662:	b2db      	uxtb	r3, r3
 8003664:	461a      	mov	r2, r3
 8003666:	e00c      	b.n	8003682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	43da      	mvns	r2, r3
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0b6      	beq.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b084      	sub	sp, #16
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
 800369e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036a0:	e051      	b.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	695b      	ldr	r3, [r3, #20]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b0:	d123      	bne.n	80036fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0204 	orr.w	r2, r3, #4
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e046      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d021      	beq.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003702:	f7fd fca3 	bl	800104c <HAL_GetTick>
 8003706:	4602      	mov	r2, r0
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	d302      	bcc.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2220      	movs	r2, #32
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e020      	b.n	8003788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d10c      	bne.n	800376a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	43da      	mvns	r2, r3
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	4013      	ands	r3, r2
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e00b      	b.n	8003782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d18d      	bne.n	80036a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800379c:	e02d      	b.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f8aa 	bl	80038f8 <I2C_IsAcknowledgeFailed>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e02d      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b4:	d021      	beq.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b6:	f7fd fc49 	bl	800104c <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	68ba      	ldr	r2, [r7, #8]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d302      	bcc.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d116      	bne.n	80037fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0220 	orr.w	r2, r3, #32
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e007      	b.n	800380a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d1ca      	bne.n	800379e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b084      	sub	sp, #16
 8003816:	af00      	add	r7, sp, #0
 8003818:	60f8      	str	r0, [r7, #12]
 800381a:	60b9      	str	r1, [r7, #8]
 800381c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800381e:	e02d      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f869 	bl	80038f8 <I2C_IsAcknowledgeFailed>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e02d      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003836:	d021      	beq.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003838:	f7fd fc08 	bl	800104c <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d302      	bcc.n	800384e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d116      	bne.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2220      	movs	r2, #32
 8003858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	f043 0220 	orr.w	r2, r3, #32
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e007      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f003 0304 	and.w	r3, r3, #4
 8003886:	2b04      	cmp	r3, #4
 8003888:	d1ca      	bne.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80038a0:	4b13      	ldr	r3, [pc, #76]	; (80038f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	08db      	lsrs	r3, r3, #3
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80038a8:	fba2 2303 	umull	r2, r3, r2, r3
 80038ac:	0a1a      	lsrs	r2, r3, #8
 80038ae:	4613      	mov	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d107      	bne.n	80038d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c6:	f043 0220 	orr.w	r2, r3, #32
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e008      	b.n	80038e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038e0:	d0e9      	beq.n	80038b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3714      	adds	r7, #20
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bc80      	pop	{r7}
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	2000001c 	.word	0x2000001c
 80038f4:	14f8b589 	.word	0x14f8b589

080038f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800390a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800390e:	d11b      	bne.n	8003948 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003918:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f043 0204 	orr.w	r2, r3, #4
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e000      	b.n	800394a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003948:	2300      	movs	r3, #0
}
 800394a:	4618      	mov	r0, r3
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	bc80      	pop	{r7}
 8003952:	4770      	bx	lr

08003954 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003964:	d103      	bne.n	800396e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800396c:	e007      	b.n	800397e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003976:	d102      	bne.n	800397e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2208      	movs	r2, #8
 800397c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d101      	bne.n	800399a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e26c      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 8087 	beq.w	8003ab6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039a8:	4b92      	ldr	r3, [pc, #584]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 030c 	and.w	r3, r3, #12
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d00c      	beq.n	80039ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039b4:	4b8f      	ldr	r3, [pc, #572]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 030c 	and.w	r3, r3, #12
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d112      	bne.n	80039e6 <HAL_RCC_OscConfig+0x5e>
 80039c0:	4b8c      	ldr	r3, [pc, #560]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039cc:	d10b      	bne.n	80039e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ce:	4b89      	ldr	r3, [pc, #548]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d06c      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d168      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e246      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ee:	d106      	bne.n	80039fe <HAL_RCC_OscConfig+0x76>
 80039f0:	4b80      	ldr	r3, [pc, #512]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a7f      	ldr	r2, [pc, #508]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fa:	6013      	str	r3, [r2, #0]
 80039fc:	e02e      	b.n	8003a5c <HAL_RCC_OscConfig+0xd4>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10c      	bne.n	8003a20 <HAL_RCC_OscConfig+0x98>
 8003a06:	4b7b      	ldr	r3, [pc, #492]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a7a      	ldr	r2, [pc, #488]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a10:	6013      	str	r3, [r2, #0]
 8003a12:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a77      	ldr	r2, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e01d      	b.n	8003a5c <HAL_RCC_OscConfig+0xd4>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a28:	d10c      	bne.n	8003a44 <HAL_RCC_OscConfig+0xbc>
 8003a2a:	4b72      	ldr	r3, [pc, #456]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a71      	ldr	r2, [pc, #452]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a34:	6013      	str	r3, [r2, #0]
 8003a36:	4b6f      	ldr	r3, [pc, #444]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a6e      	ldr	r2, [pc, #440]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	e00b      	b.n	8003a5c <HAL_RCC_OscConfig+0xd4>
 8003a44:	4b6b      	ldr	r3, [pc, #428]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4e:	6013      	str	r3, [r2, #0]
 8003a50:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a67      	ldr	r2, [pc, #412]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d013      	beq.n	8003a8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a64:	f7fd faf2 	bl	800104c <HAL_GetTick>
 8003a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6a:	e008      	b.n	8003a7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a6c:	f7fd faee 	bl	800104c <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	2b64      	cmp	r3, #100	; 0x64
 8003a78:	d901      	bls.n	8003a7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e1fa      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b5d      	ldr	r3, [pc, #372]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d0f0      	beq.n	8003a6c <HAL_RCC_OscConfig+0xe4>
 8003a8a:	e014      	b.n	8003ab6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fade 	bl	800104c <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fd fada 	bl	800104c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e1e6      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aa6:	4b53      	ldr	r3, [pc, #332]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x10c>
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d063      	beq.n	8003b8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac2:	4b4c      	ldr	r3, [pc, #304]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ace:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d11c      	bne.n	8003b14 <HAL_RCC_OscConfig+0x18c>
 8003ada:	4b46      	ldr	r3, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d116      	bne.n	8003b14 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae6:	4b43      	ldr	r3, [pc, #268]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_RCC_OscConfig+0x176>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d001      	beq.n	8003afe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e1ba      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afe:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4939      	ldr	r1, [pc, #228]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b12:	e03a      	b.n	8003b8a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b1c:	4b36      	ldr	r3, [pc, #216]	; (8003bf8 <HAL_RCC_OscConfig+0x270>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b22:	f7fd fa93 	bl	800104c <HAL_GetTick>
 8003b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b28:	e008      	b.n	8003b3c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2a:	f7fd fa8f 	bl	800104c <HAL_GetTick>
 8003b2e:	4602      	mov	r2, r0
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d901      	bls.n	8003b3c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e19b      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b3c:	4b2d      	ldr	r3, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0f0      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b48:	4b2a      	ldr	r3, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	4927      	ldr	r1, [pc, #156]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	600b      	str	r3, [r1, #0]
 8003b5c:	e015      	b.n	8003b8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b5e:	4b26      	ldr	r3, [pc, #152]	; (8003bf8 <HAL_RCC_OscConfig+0x270>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b64:	f7fd fa72 	bl	800104c <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b6c:	f7fd fa6e 	bl	800104c <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e17a      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d1f0      	bne.n	8003b6c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d03a      	beq.n	8003c0c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d019      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b9e:	4b17      	ldr	r3, [pc, #92]	; (8003bfc <HAL_RCC_OscConfig+0x274>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba4:	f7fd fa52 	bl	800104c <HAL_GetTick>
 8003ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bac:	f7fd fa4e 	bl	800104c <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e15a      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	; (8003bf4 <HAL_RCC_OscConfig+0x26c>)
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0302 	and.w	r3, r3, #2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d0f0      	beq.n	8003bac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bca:	2001      	movs	r0, #1
 8003bcc:	f000 fad8 	bl	8004180 <RCC_Delay>
 8003bd0:	e01c      	b.n	8003c0c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_RCC_OscConfig+0x274>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fa38 	bl	800104c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bde:	e00f      	b.n	8003c00 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fd fa34 	bl	800104c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d908      	bls.n	8003c00 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e140      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	42420000 	.word	0x42420000
 8003bfc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	4b9e      	ldr	r3, [pc, #632]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e9      	bne.n	8003be0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 80a6 	beq.w	8003d66 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c1e:	4b97      	ldr	r3, [pc, #604]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10d      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2a:	4b94      	ldr	r3, [pc, #592]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	4a93      	ldr	r2, [pc, #588]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c34:	61d3      	str	r3, [r2, #28]
 8003c36:	4b91      	ldr	r3, [pc, #580]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c3e:	60bb      	str	r3, [r7, #8]
 8003c40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c42:	2301      	movs	r3, #1
 8003c44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c46:	4b8e      	ldr	r3, [pc, #568]	; (8003e80 <HAL_RCC_OscConfig+0x4f8>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d118      	bne.n	8003c84 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c52:	4b8b      	ldr	r3, [pc, #556]	; (8003e80 <HAL_RCC_OscConfig+0x4f8>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a8a      	ldr	r2, [pc, #552]	; (8003e80 <HAL_RCC_OscConfig+0x4f8>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c5e:	f7fd f9f5 	bl	800104c <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c66:	f7fd f9f1 	bl	800104c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b64      	cmp	r3, #100	; 0x64
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e0fd      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c78:	4b81      	ldr	r3, [pc, #516]	; (8003e80 <HAL_RCC_OscConfig+0x4f8>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <HAL_RCC_OscConfig+0x312>
 8003c8c:	4b7b      	ldr	r3, [pc, #492]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	4a7a      	ldr	r2, [pc, #488]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	6213      	str	r3, [r2, #32]
 8003c98:	e02d      	b.n	8003cf6 <HAL_RCC_OscConfig+0x36e>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0x334>
 8003ca2:	4b76      	ldr	r3, [pc, #472]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	4a75      	ldr	r2, [pc, #468]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003ca8:	f023 0301 	bic.w	r3, r3, #1
 8003cac:	6213      	str	r3, [r2, #32]
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cb0:	6a1b      	ldr	r3, [r3, #32]
 8003cb2:	4a72      	ldr	r2, [pc, #456]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cb4:	f023 0304 	bic.w	r3, r3, #4
 8003cb8:	6213      	str	r3, [r2, #32]
 8003cba:	e01c      	b.n	8003cf6 <HAL_RCC_OscConfig+0x36e>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b05      	cmp	r3, #5
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCC_OscConfig+0x356>
 8003cc4:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cc6:	6a1b      	ldr	r3, [r3, #32]
 8003cc8:	4a6c      	ldr	r2, [pc, #432]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cca:	f043 0304 	orr.w	r3, r3, #4
 8003cce:	6213      	str	r3, [r2, #32]
 8003cd0:	4b6a      	ldr	r3, [pc, #424]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	4a69      	ldr	r2, [pc, #420]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cd6:	f043 0301 	orr.w	r3, r3, #1
 8003cda:	6213      	str	r3, [r2, #32]
 8003cdc:	e00b      	b.n	8003cf6 <HAL_RCC_OscConfig+0x36e>
 8003cde:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6213      	str	r3, [r2, #32]
 8003cea:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	4a63      	ldr	r2, [pc, #396]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003cf0:	f023 0304 	bic.w	r3, r3, #4
 8003cf4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d015      	beq.n	8003d2a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cfe:	f7fd f9a5 	bl	800104c <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d04:	e00a      	b.n	8003d1c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d06:	f7fd f9a1 	bl	800104c <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d901      	bls.n	8003d1c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e0ab      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1c:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003d1e:	6a1b      	ldr	r3, [r3, #32]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d0ee      	beq.n	8003d06 <HAL_RCC_OscConfig+0x37e>
 8003d28:	e014      	b.n	8003d54 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2a:	f7fd f98f 	bl	800104c <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d30:	e00a      	b.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d32:	f7fd f98b 	bl	800104c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e095      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d1ee      	bne.n	8003d32 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d54:	7dfb      	ldrb	r3, [r7, #23]
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5a:	4b48      	ldr	r3, [pc, #288]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	4a47      	ldr	r2, [pc, #284]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d64:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8081 	beq.w	8003e72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d70:	4b42      	ldr	r3, [pc, #264]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 030c 	and.w	r3, r3, #12
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d061      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d146      	bne.n	8003e12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_OscConfig+0x4fc>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8a:	f7fd f95f 	bl	800104c <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d92:	f7fd f95b 	bl	800104c <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e067      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da4:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d1f0      	bne.n	8003d92 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db8:	d108      	bne.n	8003dcc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dba:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	492d      	ldr	r1, [pc, #180]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a19      	ldr	r1, [r3, #32]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	4927      	ldr	r1, [pc, #156]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de4:	4b27      	ldr	r3, [pc, #156]	; (8003e84 <HAL_RCC_OscConfig+0x4fc>)
 8003de6:	2201      	movs	r2, #1
 8003de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dea:	f7fd f92f 	bl	800104c <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df2:	f7fd f92b 	bl	800104c <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e037      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d0f0      	beq.n	8003df2 <HAL_RCC_OscConfig+0x46a>
 8003e10:	e02f      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <HAL_RCC_OscConfig+0x4fc>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e18:	f7fd f918 	bl	800104c <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd f914 	bl	800104c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e020      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x498>
 8003e3e:	e018      	b.n	8003e72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d101      	bne.n	8003e4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e013      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <HAL_RCC_OscConfig+0x4f4>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d106      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d001      	beq.n	8003e72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e000      	b.n	8003e74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40007000 	.word	0x40007000
 8003e84:	42420060 	.word	0x42420060

08003e88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0d0      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e9c:	4b6a      	ldr	r3, [pc, #424]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0307 	and.w	r3, r3, #7
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d910      	bls.n	8003ecc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eaa:	4b67      	ldr	r3, [pc, #412]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 0207 	bic.w	r2, r3, #7
 8003eb2:	4965      	ldr	r1, [pc, #404]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d001      	beq.n	8003ecc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0b8      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d020      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d005      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee4:	4b59      	ldr	r3, [pc, #356]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003eea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003eee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d005      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003efc:	4b53      	ldr	r3, [pc, #332]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	4a52      	ldr	r2, [pc, #328]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003f06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f08:	4b50      	ldr	r3, [pc, #320]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	494d      	ldr	r1, [pc, #308]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d040      	beq.n	8003fa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d107      	bne.n	8003f3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2e:	4b47      	ldr	r3, [pc, #284]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d115      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e07f      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f46:	4b41      	ldr	r3, [pc, #260]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d109      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e073      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e06b      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f66:	4b39      	ldr	r3, [pc, #228]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f023 0203 	bic.w	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4936      	ldr	r1, [pc, #216]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f74:	4313      	orrs	r3, r2
 8003f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f78:	f7fd f868 	bl	800104c <HAL_GetTick>
 8003f7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f80:	f7fd f864 	bl	800104c <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e053      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f96:	4b2d      	ldr	r3, [pc, #180]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f003 020c 	and.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d1eb      	bne.n	8003f80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d210      	bcs.n	8003fd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 0207 	bic.w	r2, r3, #7
 8003fbe:	4922      	ldr	r1, [pc, #136]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc6:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d001      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e032      	b.n	800403e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe4:	4b19      	ldr	r3, [pc, #100]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	4916      	ldr	r1, [pc, #88]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d009      	beq.n	8004016 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004002:	4b12      	ldr	r3, [pc, #72]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	490e      	ldr	r1, [pc, #56]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 8004012:	4313      	orrs	r3, r2
 8004014:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004016:	f000 f821 	bl	800405c <HAL_RCC_GetSysClockFreq>
 800401a:	4602      	mov	r2, r0
 800401c:	4b0b      	ldr	r3, [pc, #44]	; (800404c <HAL_RCC_ClockConfig+0x1c4>)
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	490a      	ldr	r1, [pc, #40]	; (8004050 <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	5ccb      	ldrb	r3, [r1, r3]
 800402a:	fa22 f303 	lsr.w	r3, r2, r3
 800402e:	4a09      	ldr	r2, [pc, #36]	; (8004054 <HAL_RCC_ClockConfig+0x1cc>)
 8004030:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004032:	4b09      	ldr	r3, [pc, #36]	; (8004058 <HAL_RCC_ClockConfig+0x1d0>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4618      	mov	r0, r3
 8004038:	f7fc ffd8 	bl	8000fec <HAL_InitTick>

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	40022000 	.word	0x40022000
 800404c:	40021000 	.word	0x40021000
 8004050:	08007784 	.word	0x08007784
 8004054:	2000001c 	.word	0x2000001c
 8004058:	20000020 	.word	0x20000020

0800405c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800405c:	b490      	push	{r4, r7}
 800405e:	b08a      	sub	sp, #40	; 0x28
 8004060:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004062:	4b2a      	ldr	r3, [pc, #168]	; (800410c <HAL_RCC_GetSysClockFreq+0xb0>)
 8004064:	1d3c      	adds	r4, r7, #4
 8004066:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800406c:	f240 2301 	movw	r3, #513	; 0x201
 8004070:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	2300      	movs	r3, #0
 8004078:	61bb      	str	r3, [r7, #24]
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004086:	4b22      	ldr	r3, [pc, #136]	; (8004110 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b04      	cmp	r3, #4
 8004094:	d002      	beq.n	800409c <HAL_RCC_GetSysClockFreq+0x40>
 8004096:	2b08      	cmp	r3, #8
 8004098:	d003      	beq.n	80040a2 <HAL_RCC_GetSysClockFreq+0x46>
 800409a:	e02d      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800409c:	4b1d      	ldr	r3, [pc, #116]	; (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 800409e:	623b      	str	r3, [r7, #32]
      break;
 80040a0:	e02d      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	0c9b      	lsrs	r3, r3, #18
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040ae:	4413      	add	r3, r2
 80040b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80040b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040c0:	4b13      	ldr	r3, [pc, #76]	; (8004110 <HAL_RCC_GetSysClockFreq+0xb4>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c5b      	lsrs	r3, r3, #17
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80040ce:	4413      	add	r3, r2
 80040d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80040d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4a0e      	ldr	r2, [pc, #56]	; (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040da:	fb02 f203 	mul.w	r2, r2, r3
 80040de:	69bb      	ldr	r3, [r7, #24]
 80040e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
 80040e6:	e004      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	4a0b      	ldr	r2, [pc, #44]	; (8004118 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	623b      	str	r3, [r7, #32]
      break;
 80040f6:	e002      	b.n	80040fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fa:	623b      	str	r3, [r7, #32]
      break;
 80040fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3728      	adds	r7, #40	; 0x28
 8004104:	46bd      	mov	sp, r7
 8004106:	bc90      	pop	{r4, r7}
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	08004b60 	.word	0x08004b60
 8004110:	40021000 	.word	0x40021000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	003d0900 	.word	0x003d0900

0800411c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800411c:	b480      	push	{r7}
 800411e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <HAL_RCC_GetHCLKFreq+0x10>)
 8004122:	681b      	ldr	r3, [r3, #0]
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	bc80      	pop	{r7}
 800412a:	4770      	bx	lr
 800412c:	2000001c 	.word	0x2000001c

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004134:	f7ff fff2 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004138:	4602      	mov	r2, r0
 800413a:	4b05      	ldr	r3, [pc, #20]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x20>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	f003 0307 	and.w	r3, r3, #7
 8004144:	4903      	ldr	r1, [pc, #12]	; (8004154 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004146:	5ccb      	ldrb	r3, [r1, r3]
 8004148:	fa22 f303 	lsr.w	r3, r2, r3
}
 800414c:	4618      	mov	r0, r3
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	08007794 	.word	0x08007794

08004158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800415c:	f7ff ffde 	bl	800411c <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b05      	ldr	r3, [pc, #20]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	0adb      	lsrs	r3, r3, #11
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4903      	ldr	r1, [pc, #12]	; (800417c <HAL_RCC_GetPCLK2Freq+0x24>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08007794 	.word	0x08007794

08004180 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <RCC_Delay+0x34>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <RCC_Delay+0x38>)
 800418e:	fba2 2303 	umull	r2, r3, r2, r3
 8004192:	0a5b      	lsrs	r3, r3, #9
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800419c:	bf00      	nop
  }
  while (Delay --);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	60fa      	str	r2, [r7, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1f9      	bne.n	800419c <RCC_Delay+0x1c>
}
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bc80      	pop	{r7}
 80041b2:	4770      	bx	lr
 80041b4:	2000001c 	.word	0x2000001c
 80041b8:	10624dd3 	.word	0x10624dd3

080041bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e076      	b.n	80042bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041de:	d009      	beq.n	80041f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
 80041e6:	e005      	b.n	80041f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc fdc6 	bl	8000da0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800422a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004278:	ea42 0103 	orr.w	r1, r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004280:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	430a      	orrs	r2, r1
 800428a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	0c1a      	lsrs	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f002 0204 	and.w	r2, r2, #4
 800429a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3708      	adds	r7, #8
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e03f      	b.n	8004356 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d106      	bne.n	80042f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f7fc fda4 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004306:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 fb49 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691a      	ldr	r2, [r3, #16]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800431c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800432c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68da      	ldr	r2, [r3, #12]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800433c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	; 0x28
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004380:	2300      	movs	r3, #0
 8004382:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	f003 0320 	and.w	r3, r3, #32
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_UART_IRQHandler+0x52>
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	f003 0320 	and.w	r3, r3, #32
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 fa4f 	bl	800484e <UART_Receive_IT>
      return;
 80043b0:	e17b      	b.n	80046aa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80b1 	beq.w	800451c <HAL_UART_IRQHandler+0x1bc>
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d105      	bne.n	80043d0 <HAL_UART_IRQHandler+0x70>
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 80a6 	beq.w	800451c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <HAL_UART_IRQHandler+0x90>
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e8:	f043 0201 	orr.w	r2, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <HAL_UART_IRQHandler+0xb0>
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	f043 0202 	orr.w	r2, r3, #2
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	f003 0302 	and.w	r3, r3, #2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00a      	beq.n	8004430 <HAL_UART_IRQHandler+0xd0>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	f043 0204 	orr.w	r2, r3, #4
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00f      	beq.n	800445a <HAL_UART_IRQHandler+0xfa>
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f003 0320 	and.w	r3, r3, #32
 8004440:	2b00      	cmp	r3, #0
 8004442:	d104      	bne.n	800444e <HAL_UART_IRQHandler+0xee>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004452:	f043 0208 	orr.w	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 811e 	beq.w	80046a0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d007      	beq.n	800447e <HAL_UART_IRQHandler+0x11e>
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f003 0320 	and.w	r3, r3, #32
 8004474:	2b00      	cmp	r3, #0
 8004476:	d002      	beq.n	800447e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f000 f9e8 	bl	800484e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf14      	ite	ne
 800448c:	2301      	movne	r3, #1
 800448e:	2300      	moveq	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d102      	bne.n	80044a6 <HAL_UART_IRQHandler+0x146>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d031      	beq.n	800450a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f000 f92a 	bl	8004700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d023      	beq.n	8004502 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d013      	beq.n	80044fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4a76      	ldr	r2, [pc, #472]	; (80046b0 <HAL_UART_IRQHandler+0x350>)
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fc ff06 	bl	80012f0 <HAL_DMA_Abort_IT>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d016      	beq.n	8004518 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f8:	e00e      	b.n	8004518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f8ec 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	e00a      	b.n	8004518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f8e8 	bl	80046d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004508:	e006      	b.n	8004518 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f8e4 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004516:	e0c3      	b.n	80046a0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004518:	bf00      	nop
    return;
 800451a:	e0c1      	b.n	80046a0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004520:	2b01      	cmp	r3, #1
 8004522:	f040 80a1 	bne.w	8004668 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	f003 0310 	and.w	r3, r3, #16
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 809b 	beq.w	8004668 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 8095 	beq.w	8004668 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800453e:	2300      	movs	r3, #0
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60fb      	str	r3, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d04e      	beq.n	8004600 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800456c:	8a3b      	ldrh	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 8098 	beq.w	80046a4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004578:	8a3a      	ldrh	r2, [r7, #16]
 800457a:	429a      	cmp	r2, r3
 800457c:	f080 8092 	bcs.w	80046a4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8a3a      	ldrh	r2, [r7, #16]
 8004584:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	2b20      	cmp	r3, #32
 800458e:	d02b      	beq.n	80045e8 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68da      	ldr	r2, [r3, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800459e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695a      	ldr	r2, [r3, #20]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0201 	bic.w	r2, r2, #1
 80045ae:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045be:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68da      	ldr	r2, [r3, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0210 	bic.w	r2, r2, #16
 80045dc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fc fe49 	bl	800127a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f876 	bl	80046ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045fe:	e051      	b.n	80046a4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004608:	b29b      	uxth	r3, r3
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d047      	beq.n	80046a8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004618:	8a7b      	ldrh	r3, [r7, #18]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d044      	beq.n	80046a8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68da      	ldr	r2, [r3, #12]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800462c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695a      	ldr	r2, [r3, #20]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f022 0201 	bic.w	r2, r2, #1
 800463c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f022 0210 	bic.w	r2, r2, #16
 800465a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465c:	8a7b      	ldrh	r3, [r7, #18]
 800465e:	4619      	mov	r1, r3
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 f842 	bl	80046ea <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004666:	e01f      	b.n	80046a8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_UART_IRQHandler+0x324>
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 f87f 	bl	8004780 <UART_Transmit_IT>
    return;
 8004682:	e012      	b.n	80046aa <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00d      	beq.n	80046aa <HAL_UART_IRQHandler+0x34a>
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f8c0 	bl	800481e <UART_EndTransmit_IT>
    return;
 800469e:	e004      	b.n	80046aa <HAL_UART_IRQHandler+0x34a>
    return;
 80046a0:	bf00      	nop
 80046a2:	e002      	b.n	80046aa <HAL_UART_IRQHandler+0x34a>
      return;
 80046a4:	bf00      	nop
 80046a6:	e000      	b.n	80046aa <HAL_UART_IRQHandler+0x34a>
      return;
 80046a8:	bf00      	nop
  }
}
 80046aa:	3728      	adds	r7, #40	; 0x28
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	08004759 	.word	0x08004759

080046b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bc80      	pop	{r7}
 80046c4:	4770      	bx	lr

080046c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80046c6:	b480      	push	{r7}
 80046c8:	b083      	sub	sp, #12
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80046ce:	bf00      	nop
 80046d0:	370c      	adds	r7, #12
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr

080046d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bc80      	pop	{r7}
 80046e8:	4770      	bx	lr

080046ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]
 80046f2:	460b      	mov	r3, r1
 80046f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f6:	bf00      	nop
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bc80      	pop	{r7}
 80046fe:	4770      	bx	lr

08004700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68da      	ldr	r2, [r3, #12]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004716:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695a      	ldr	r2, [r3, #20]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b01      	cmp	r3, #1
 800472e:	d107      	bne.n	8004740 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0210 	bic.w	r2, r2, #16
 800473e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	bc80      	pop	{r7}
 8004756:	4770      	bx	lr

08004758 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f7ff ffb0 	bl	80046d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800478e:	b2db      	uxtb	r3, r3
 8004790:	2b21      	cmp	r3, #33	; 0x21
 8004792:	d13e      	bne.n	8004812 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	689b      	ldr	r3, [r3, #8]
 8004798:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800479c:	d114      	bne.n	80047c8 <UART_Transmit_IT+0x48>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d110      	bne.n	80047c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6a1b      	ldr	r3, [r3, #32]
 80047aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	1c9a      	adds	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	621a      	str	r2, [r3, #32]
 80047c6:	e008      	b.n	80047da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a1b      	ldr	r3, [r3, #32]
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	6211      	str	r1, [r2, #32]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	4619      	mov	r1, r3
 80047e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10f      	bne.n	800480e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800480c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800480e:	2300      	movs	r3, #0
 8004810:	e000      	b.n	8004814 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004812:	2302      	movs	r3, #2
  }
}
 8004814:	4618      	mov	r0, r3
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004834:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2220      	movs	r2, #32
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff38 	bl	80046b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3708      	adds	r7, #8
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b086      	sub	sp, #24
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b22      	cmp	r3, #34	; 0x22
 8004860:	f040 8099 	bne.w	8004996 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800486c:	d117      	bne.n	800489e <UART_Receive_IT+0x50>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d113      	bne.n	800489e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b29b      	uxth	r3, r3
 8004888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488c:	b29a      	uxth	r2, r3
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
 800489c:	e026      	b.n	80048ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b0:	d007      	beq.n	80048c2 <UART_Receive_IT+0x74>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <UART_Receive_IT+0x82>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	701a      	strb	r2, [r3, #0]
 80048ce:	e008      	b.n	80048e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	1c5a      	adds	r2, r3, #1
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	4619      	mov	r1, r3
 80048fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d148      	bne.n	8004992 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f022 0220 	bic.w	r2, r2, #32
 800490e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800491e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f022 0201 	bic.w	r2, r2, #1
 800492e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2220      	movs	r2, #32
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493c:	2b01      	cmp	r3, #1
 800493e:	d123      	bne.n	8004988 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f022 0210 	bic.w	r2, r2, #16
 8004954:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d10a      	bne.n	800497a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004964:	2300      	movs	r3, #0
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	60fb      	str	r3, [r7, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff feb2 	bl	80046ea <HAL_UARTEx_RxEventCallback>
 8004986:	e002      	b.n	800498e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7ff fe9c 	bl	80046c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	e002      	b.n	8004998 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004992:	2300      	movs	r3, #0
 8004994:	e000      	b.n	8004998 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004996:	2302      	movs	r3, #2
  }
}
 8004998:	4618      	mov	r0, r3
 800499a:	3718      	adds	r7, #24
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049da:	f023 030c 	bic.w	r3, r3, #12
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <UART_SetConfig+0x114>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7ff fba6 	bl	8004158 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	e002      	b.n	8004a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7ff fb8e 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8004a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009a      	lsls	r2, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	0119      	lsls	r1, r3, #4
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009a      	lsls	r2, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2064      	movs	r0, #100	; 0x64
 8004a56:	fb00 f303 	mul.w	r3, r0, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	3332      	adds	r3, #50	; 0x32
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a6c:	4419      	add	r1, r3
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a86:	fba3 0302 	umull	r0, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2064      	movs	r0, #100	; 0x64
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	3332      	adds	r3, #50	; 0x32
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40013800 	.word	0x40013800
 8004ab8:	51eb851f 	.word	0x51eb851f

08004abc <__libc_init_array>:
 8004abc:	b570      	push	{r4, r5, r6, lr}
 8004abe:	2600      	movs	r6, #0
 8004ac0:	4d0c      	ldr	r5, [pc, #48]	; (8004af4 <__libc_init_array+0x38>)
 8004ac2:	4c0d      	ldr	r4, [pc, #52]	; (8004af8 <__libc_init_array+0x3c>)
 8004ac4:	1b64      	subs	r4, r4, r5
 8004ac6:	10a4      	asrs	r4, r4, #2
 8004ac8:	42a6      	cmp	r6, r4
 8004aca:	d109      	bne.n	8004ae0 <__libc_init_array+0x24>
 8004acc:	f000 f822 	bl	8004b14 <_init>
 8004ad0:	2600      	movs	r6, #0
 8004ad2:	4d0a      	ldr	r5, [pc, #40]	; (8004afc <__libc_init_array+0x40>)
 8004ad4:	4c0a      	ldr	r4, [pc, #40]	; (8004b00 <__libc_init_array+0x44>)
 8004ad6:	1b64      	subs	r4, r4, r5
 8004ad8:	10a4      	asrs	r4, r4, #2
 8004ada:	42a6      	cmp	r6, r4
 8004adc:	d105      	bne.n	8004aea <__libc_init_array+0x2e>
 8004ade:	bd70      	pop	{r4, r5, r6, pc}
 8004ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ae4:	4798      	blx	r3
 8004ae6:	3601      	adds	r6, #1
 8004ae8:	e7ee      	b.n	8004ac8 <__libc_init_array+0xc>
 8004aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aee:	4798      	blx	r3
 8004af0:	3601      	adds	r6, #1
 8004af2:	e7f2      	b.n	8004ada <__libc_init_array+0x1e>
 8004af4:	0800779c 	.word	0x0800779c
 8004af8:	0800779c 	.word	0x0800779c
 8004afc:	0800779c 	.word	0x0800779c
 8004b00:	080077a0 	.word	0x080077a0

08004b04 <memset>:
 8004b04:	4603      	mov	r3, r0
 8004b06:	4402      	add	r2, r0
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d100      	bne.n	8004b0e <memset+0xa>
 8004b0c:	4770      	bx	lr
 8004b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b12:	e7f9      	b.n	8004b08 <memset+0x4>

08004b14 <_init>:
 8004b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b16:	bf00      	nop
 8004b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b1a:	bc08      	pop	{r3}
 8004b1c:	469e      	mov	lr, r3
 8004b1e:	4770      	bx	lr

08004b20 <_fini>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr
